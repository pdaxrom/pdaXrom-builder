diff -Nur linux-orig/drivers/net/wireless/airport.c linux/drivers/net/wireless/airport.c
--- linux-orig/drivers/net/wireless/airport.c	2004-02-16 09:32:01.000000000 +0300
+++ linux/drivers/net/wireless/airport.c	2003-05-12 10:22:27.000000000 +0400
@@ -1,4 +1,4 @@
-/* airport.c 0.09b
+/* airport.c 0.13e
  *
  * A driver for "Hermes" chipset based Apple Airport wireless
  * card.
@@ -25,12 +25,10 @@
 #include <asm/uaccess.h>
 #include <asm/io.h>
 #include <asm/system.h>
-#include <linux/proc_fs.h>
 #include <linux/netdevice.h>
 #include <linux/if_arp.h>
 #include <linux/etherdevice.h>
 #include <linux/wireless.h>
-#include <linux/list.h>
 #include <linux/adb.h>
 #include <linux/pmu.h>
 
@@ -39,22 +37,15 @@
 #include <asm/pmac_feature.h>
 #include <asm/irq.h>
 
-#include "hermes.h"
 #include "orinoco.h"
 
-static char version[] __initdata = "airport.c 0.09b (Benjamin Herrenschmidt <benh@kernel.crashing.org>)";
-MODULE_AUTHOR("Benjamin Herrenschmidt <benh@kernel.crashing.org>");
-MODULE_DESCRIPTION("Driver for the Apple Airport wireless card.");
-MODULE_LICENSE("Dual MPL/GPL");
-EXPORT_NO_SYMBOLS;
+#define AIRPORT_IO_LEN	(0x1000)	/* one page */
 
 struct airport {
-	struct device_node* node;
+	struct device_node *node;
+	void *vaddr;
 	int irq_requested;
 	int ndev_registered;
-	int open;
-	/* Common structure (fully included), see orinoco.h */
-	struct orinoco_private priv;
 };
 
 #ifdef CONFIG_PMAC_PBOOK
@@ -68,160 +59,165 @@
  * Function prototypes
  */
 
-static struct orinoco_private* airport_attach(struct device_node *of_node);
-static void airport_detach(struct orinoco_private* priv);
-static int airport_open(struct net_device *dev);
-static int airport_stop(struct net_device *dev);
-
-/*
-   A linked list of "instances" of the dummy device.  Each actual
-   PCMCIA card corresponds to one device instance, and is described
-   by one dev_link_t structure (defined in ds.h).
-
-   You may not want to use a linked list for this -- for example, the
-   memory card driver uses an array of dev_link_t pointers, where minor
-   device numbers are used to derive the corresponding array index.
-*/
-
-static struct orinoco_private *airport_dev;
-
-static int
-airport_open(struct net_device *dev)
-{
-	struct orinoco_private *priv = dev->priv;
-	struct airport* card = (struct airport *)priv->card;
-	int rc;
-
-	netif_device_attach(dev);
+static struct net_device *airport_attach(struct device_node *of_node);
+static void airport_detach(struct net_device *dev);
 
-	rc = orinoco_reset(priv);
-	if (rc)
-		airport_stop(dev);
-	else {
-		card->open = 1;
-		netif_start_queue(dev);
-	}
-
-	return rc;
-}
-
-static int
-airport_stop(struct net_device *dev)
-{
-	struct orinoco_private *priv = dev->priv;
-	struct airport* card = (struct airport *)priv->card;
-
-	TRACE_ENTER(priv->ndev.name);
-
-	netif_stop_queue(dev);
-	orinoco_shutdown(priv);
-	card->open = 0;
-
-	TRACE_EXIT(priv->ndev.name);
-
-	return 0;
-}
+static struct net_device *airport_dev;
 
 #ifdef CONFIG_PMAC_PBOOK
 static int
 airport_sleep_notify(struct pmu_sleep_notifier *self, int when)
 {
-	struct orinoco_private *priv = airport_dev;
-	struct hermes *hw = &priv->hw;
-	struct net_device *dev = &priv->ndev;
-	struct airport* card = (struct airport *)priv->card;
-	int rc;
+	struct net_device *dev = airport_dev;
+	struct orinoco_private *priv = dev->priv;
+	struct airport *card = priv->card;
+	unsigned long flags;
+	int err;
 	
 	if (! airport_dev)
 		return PBOOK_SLEEP_OK;
 
 	switch (when) {
-	case PBOOK_SLEEP_REQUEST:
-		break;
-	case PBOOK_SLEEP_REJECT:
-		break;
 	case PBOOK_SLEEP_NOW:
-		printk(KERN_INFO "%s: Airport entering sleep mode\n", dev->name);
-		if (card->open) {
-			netif_stop_queue(dev);
-			orinoco_shutdown(priv);
-			netif_device_detach(dev);
+		printk(KERN_DEBUG "%s: Airport entering sleep mode\n", dev->name);
+
+		err = orinoco_lock(priv, &flags);
+		if (err) {
+			printk(KERN_ERR "%s: hw_unavailable on PBOOK_SLEEP_NOW\n",
+			       dev->name);
+			break;
 		}
+
+		err = __orinoco_down(dev);
+		if (err)
+			printk(KERN_WARNING "%s: PBOOK_SLEEP_NOW: Error %d downing interface\n",
+			       dev->name, err);
+
+		netif_device_detach(dev);
+
+		priv->hw_unavailable++;
+
+		orinoco_unlock(priv, &flags);
+
 		disable_irq(dev->irq);
 		pmac_call_feature(PMAC_FTR_AIRPORT_ENABLE, card->node, 0, 0);
 		break;
+
 	case PBOOK_WAKE:
-		printk(KERN_INFO "%s: Airport waking up\n", dev->name);
+		printk(KERN_DEBUG "%s: Airport waking up\n", dev->name);
 		pmac_call_feature(PMAC_FTR_AIRPORT_ENABLE, card->node, 0, 1);
 		mdelay(200);
-		hermes_reset(hw);
-		rc = orinoco_reset(priv);
-		if (rc)
-			printk(KERN_ERR "airport: Error %d re-initing card !\n", rc);
-		else if (card->open)
-			netif_device_attach(dev);
+
 		enable_irq(dev->irq);
+
+		err = orinoco_reinit_firmware(dev);
+		if (err) {
+			printk(KERN_ERR "%s: Error %d re-initializing firmware on PBOOK_WAKE\n",
+			       dev->name, err);
+			break;
+		}
+
+		spin_lock_irqsave(&priv->lock, flags);
+
+		netif_device_attach(dev);
+
+		priv->hw_unavailable--;
+
+		if (priv->open && (! priv->hw_unavailable)) {
+			err = __orinoco_up(dev);
+			if (err)
+				printk(KERN_ERR "%s: Error %d restarting card on PBOOK_WAKE\n",
+				       dev->name, err);
+		}
+
+
+		spin_unlock_irqrestore(&priv->lock, flags);
+
 		break;
 	}
 	return PBOOK_SLEEP_OK;
 }
 #endif /* CONFIG_PMAC_PBOOK */
 
-static struct orinoco_private*
-airport_attach(struct device_node* of_node)
+static int airport_hard_reset(struct orinoco_private *priv)
+{
+	/* It would be nice to power cycle the Airport for a real hard
+	 * reset, but for some reason although it appears to
+	 * re-initialize properly, it falls in a screaming heap
+	 * shortly afterwards. */
+#if 0
+	struct net_device *dev = priv->ndev;
+	struct airport *card = priv->card;
+
+	/* Vitally important.  If we don't do this it seems we get an
+	 * interrupt somewhere during the power cycle, since
+	 * hw_unavailable is already set it doesn't get ACKed, we get
+	 * into an interrupt loop and the the PMU decides to turn us
+	 * off. */
+	disable_irq(dev->irq);
+
+	pmac_call_feature(PMAC_FTR_AIRPORT_ENABLE, card->node, 0, 0);
+	current->state = TASK_UNINTERRUPTIBLE;
+	schedule_timeout(HZ);
+	pmac_call_feature(PMAC_FTR_AIRPORT_ENABLE, card->node, 0, 1);
+	current->state = TASK_UNINTERRUPTIBLE;
+	schedule_timeout(HZ);
+
+	enable_irq(dev->irq);
+	schedule_timeout(HZ);
+#endif
+
+	return 0;
+}
+
+static struct net_device *
+airport_attach(struct device_node *of_node)
 {
 	struct orinoco_private *priv;
-	struct net_device *ndev;
-	struct airport* card;
+	struct net_device *dev;
+	struct airport *card;
+	unsigned long phys_addr;
 	hermes_t *hw;
 
-	TRACE_ENTER("orinoco");
-
 	if (of_node->n_addrs < 1 || of_node->n_intrs < 1) {
 		printk(KERN_ERR "airport: wrong interrupt/addresses in OF tree\n");
 		return NULL;
 	}
 
 	/* Allocate space for private device-specific data */
-	card = kmalloc(sizeof(*card), GFP_KERNEL);
-	if (!card) {
+	dev = alloc_orinocodev(sizeof(*card), airport_hard_reset);
+	if (! dev) {
 		printk(KERN_ERR "airport: can't allocate device datas\n");
 		return NULL;
 	}
-	memset(card, 0, sizeof(*card));
+	priv = dev->priv;
+	card = priv->card;
 
-	priv = &(card->priv);
-	priv->card = card;
-	ndev = &priv->ndev;
 	hw = &priv->hw;
 	card->node = of_node;
 
-	if (!request_OF_resource(of_node, 0, " (airport)")) {
+	if (! request_OF_resource(of_node, 0, " (airport)")) {
 		printk(KERN_ERR "airport: can't request IO resource !\n");
-		kfree(card);
+		kfree(dev);
 		return NULL;
 	}
-	
-	/* Setup the common part */
-	if (orinoco_setup(priv) < 0) {
-		release_OF_resource(of_node, 0);
-		kfree(card);
-		return NULL;
-	}
-
 
-	ndev->name[0] = '\0';	/* register_netdev will give us an ethX name */
-	SET_MODULE_OWNER(ndev);
-
-	/* Overrides */
-	ndev->open = airport_open;
-	ndev->stop = airport_stop;
+	dev->name[0] = '\0';	/* register_netdev will give us an ethX name */
+	SET_MODULE_OWNER(dev);
 
 	/* Setup interrupts & base address */
-	ndev->irq = of_node->intrs[0].line;
-	ndev->base_addr = (unsigned long)ioremap(of_node->addrs[0].address, 0x1000) - _IO_BASE;
+	dev->irq = of_node->intrs[0].line;
+	phys_addr = of_node->addrs[0].address;  /* Physical address */
+	printk(KERN_DEBUG "Airport at physical address %lx\n", phys_addr);
+	dev->base_addr = phys_addr;
+	card->vaddr = ioremap(phys_addr, AIRPORT_IO_LEN);
+	if (! card->vaddr) {
+		printk("airport: ioremap() failed\n");
+		goto failed;
+	}
 
-	hermes_struct_init(hw, ndev->base_addr);
+	hermes_struct_init(hw, (ulong)card->vaddr,
+			HERMES_MEM, HERMES_16BIT_REGSPACING);
 		
 	/* Power up card */
 	pmac_call_feature(PMAC_FTR_AIRPORT_ENABLE, card->node, 0, 1);
@@ -229,34 +225,29 @@
 	schedule_timeout(HZ);
 
 	/* Reset it before we get the interrupt */
-	hermes_reset(hw);
+	hermes_init(hw);
 
-	if (request_irq(ndev->irq, orinoco_interrupt, 0, "Airport", (void *)priv)) {
-		printk(KERN_ERR "airport: Couldn't get IRQ %d\n", ndev->irq);
+	if (request_irq(dev->irq, orinoco_interrupt, 0, "Airport", dev)) {
+		printk(KERN_ERR "airport: Couldn't get IRQ %d\n", dev->irq);
 		goto failed;
 	}
 	card->irq_requested = 1;
-	
+
 	/* Tell the stack we exist */
-	if (register_netdev(ndev) != 0) {
+	if (register_netdev(dev) != 0) {
 		printk(KERN_ERR "airport: register_netdev() failed\n");
 		goto failed;
 	}
-	printk(KERN_DEBUG "airport: card registered for interface %s\n", ndev->name);
+	printk(KERN_DEBUG "airport: card registered for interface %s\n", dev->name);
 	card->ndev_registered = 1;
 
-	/* And give us the proc nodes for debugging */
-	if (orinoco_proc_dev_init(priv) != 0)
-		printk(KERN_ERR "airport: Failed to create /proc node for %s\n",
-		       ndev->name);
-
 #ifdef CONFIG_PMAC_PBOOK
 	pmu_register_sleep_notifier(&airport_sleep_notifier);
 #endif
-	return priv;
+	return dev;
 	
-failed:
-	airport_detach(priv);
+ failed:
+	airport_detach(dev);
 	return NULL;
 }				/* airport_attach */
 
@@ -265,53 +256,54 @@
   ======================================================================*/
 
 static void
-airport_detach(struct orinoco_private *priv)
+airport_detach(struct net_device *dev)
 {
-	struct airport* card = (struct airport *)priv->card;
-
-	/* Unregister proc entry */
-	orinoco_proc_dev_cleanup(priv);
+	struct orinoco_private *priv = dev->priv;
+	struct airport *card = priv->card;
 
 #ifdef CONFIG_PMAC_PBOOK
 	pmu_unregister_sleep_notifier(&airport_sleep_notifier);
 #endif
 	if (card->ndev_registered)
-		unregister_netdev(&priv->ndev);
+		unregister_netdev(dev);
 	card->ndev_registered = 0;
-	
+
 	if (card->irq_requested)
-		free_irq(priv->ndev.irq, priv);
+		free_irq(dev->irq, dev);
 	card->irq_requested = 0;
 
-	if (priv->ndev.base_addr)
-		iounmap((void *)(priv->ndev.base_addr + (unsigned long)_IO_BASE));
-	priv->ndev.base_addr = 0;
+	if (card->vaddr)
+		iounmap(card->vaddr);
+	card->vaddr = 0;
+
+	dev->base_addr = 0;
 
 	release_OF_resource(card->node, 0);
-	
+
 	pmac_call_feature(PMAC_FTR_AIRPORT_ENABLE, card->node, 0, 0);
 	current->state = TASK_UNINTERRUPTIBLE;
 	schedule_timeout(HZ);
-	
-	kfree(card);
+
+	kfree(dev);
 }				/* airport_detach */
 
+static char version[] __initdata = "airport.c 0.13e (Benjamin Herrenschmidt <benh@kernel.crashing.org>)";
+MODULE_AUTHOR("Benjamin Herrenschmidt <benh@kernel.crashing.org>");
+MODULE_DESCRIPTION("Driver for the Apple Airport wireless card.");
+MODULE_LICENSE("Dual MPL/GPL");
+
 static int __init
 init_airport(void)
 {
-	struct device_node* airport_node;
+	struct device_node *airport_node;
 
 	printk(KERN_DEBUG "%s\n", version);
 
-	MOD_INC_USE_COUNT;
-
 	/* Lookup card in device tree */
 	airport_node = find_devices("radio");
 	if (airport_node && !strcmp(airport_node->parent->name, "mac-io"))
 		airport_dev = airport_attach(airport_node);
 
-	MOD_DEC_USE_COUNT;
-
 	return airport_dev ? 0 : -ENODEV;
 }
 
diff -Nur linux-orig/drivers/net/wireless/Config.in linux/drivers/net/wireless/Config.in
--- linux-orig/drivers/net/wireless/Config.in	2004-02-16 09:32:01.000000000 +0300
+++ linux/drivers/net/wireless/Config.in	2004-02-05 11:45:33.000000000 +0300
@@ -7,6 +7,7 @@
 fi
 
 tristate '  Hermes chipset 802.11b support (Orinoco/Prism2/Symbol)' CONFIG_HERMES
+tristate '  Host AP support for Prism2/2.5/3 IEEE 802.11b' CONFIG_HOSTAP
 
 if [ "$CONFIG_ALL_PPC" = "y" ]; then
    dep_tristate '    Apple Airport support (built-in)' CONFIG_APPLE_AIRPORT $CONFIG_HERMES
@@ -21,6 +22,7 @@
    comment 'Wireless Pcmcia cards support' 
 
    dep_tristate '  Hermes PCMCIA card support' CONFIG_PCMCIA_HERMES $CONFIG_HERMES
+   dep_tristate '  Host AP driver for Prism2/2.5/3 PC Cards' CONFIG_HOSTAP_CS $CONFIG_HOSTAP $CONFIG_PCMCIA
    tristate '  Cisco/Aironet 34X/35X/4500/4800 PCMCIA cards' CONFIG_AIRO_CS
 fi
 
diff -Nur linux-orig/drivers/net/wireless/hermes.c linux/drivers/net/wireless/hermes.c
--- linux-orig/drivers/net/wireless/hermes.c	2004-02-16 09:32:01.000000000 +0300
+++ linux/drivers/net/wireless/hermes.c	2004-02-16 09:30:01.000000000 +0300
@@ -45,7 +45,6 @@
 #include <linux/threads.h>
 #include <linux/smp.h>
 #include <asm/io.h>
-#include <linux/ptrace.h>
 #include <linux/delay.h>
 #include <linux/init.h>
 #include <linux/kernel.h>
@@ -53,7 +52,6 @@
 
 #include "hermes.h"
 
-static char version[] __initdata = "hermes.c: 7 Jun 2002 David Gibson <hermes@gibson.dropbear.id.au>";
 MODULE_DESCRIPTION("Low-level driver helper for Lucent Hermes chipset and Prism II HFA384x wireless MAC controller");
 MODULE_AUTHOR("David Gibson <hermes@gibson.dropbear.id.au>");
 #ifdef MODULE_LICENSE
@@ -70,12 +68,14 @@
  * Debugging helpers
  */
 
+#define IO_TYPE(hw)	((hw)->io_space ? "IO " : "MEM ")
+#define DMSG(stuff...) do {printk(KERN_DEBUG "hermes @ %s0x%x: " , IO_TYPE(hw), hw->iobase); \
+			printk(stuff);} while (0)
+
 #undef HERMES_DEBUG
 #ifdef HERMES_DEBUG
-
 #include <stdarg.h>
-#define DMSG(stuff...) do {printk(KERN_DEBUG "hermes @ 0x%x: " , hw->iobase); \
-			printk(stuff);} while (0)
+
 #define DEBUG(lvl, stuff...) if ( (lvl) <= HERMES_DEBUG) DMSG(stuff)
 
 #else /* ! HERMES_DEBUG */
@@ -84,7 +84,6 @@
 
 #endif /* ! HERMES_DEBUG */
 
-#define IO_TYPE(hw)	((hw)->io_space ? "IO " : "MEM ")
 
 /*
  * Internal functions
@@ -184,6 +183,10 @@
 	if (err)
 		return err;
 
+	for (k = 0; k < HERMES_NUMPORTS_MAX; k++) {
+		hw->port_enabled[k] = 0;
+	}
+
 	reg = hermes_read_regn(hw, EVSTAT);
 	k = CMD_INIT_TIMEOUT;
 	while ( (! (reg & HERMES_EV_CMD)) && k) {
@@ -226,7 +229,8 @@
  * Returns: < 0 on internal error, 0 on success, > 0 on error returned by the firmware
  *
  * Callable from any context, but locking is your problem. */
-int hermes_docmd_wait(hermes_t *hw, u16 cmd, u16 parm0, hermes_response_t *resp)
+int hermes_docmd_wait(hermes_t *hw, u16 cmd, u16 parm0,
+		      hermes_response_t *resp)
 {
 	int err;
 	int k;
@@ -298,9 +302,6 @@
 
 	err = hermes_docmd_wait(hw, HERMES_CMD_ALLOC, size, NULL);
 	if (err) {
-		printk(KERN_WARNING "hermes @ %s0x%lx: "
-		       "Frame allocation command failed (0x%X).\n",
-		       IO_TYPE(hw), hw->iobase, err);
 		return err;
 	}
 
@@ -405,7 +406,7 @@
  *
  * Returns: < 0 on internal failure (errno), 0 on success, > 0 on error from firmware
  */
-int hermes_bap_pread(hermes_t *hw, int bap, void *buf, int len,
+int hermes_bap_pread(hermes_t *hw, int bap, void *buf, unsigned len,
 		     u16 id, u16 offset)
 {
 	int dreg = bap ? HERMES_DATA1 : HERMES_DATA0;
@@ -431,7 +432,7 @@
  *
  * Returns: < 0 on internal failure (errno), 0 on success, > 0 on error from firmware
  */
-int hermes_bap_pwrite(hermes_t *hw, int bap, const void *buf, int len,
+int hermes_bap_pwrite(hermes_t *hw, int bap, const void *buf, unsigned len,
 		      u16 id, u16 offset)
 {
 	int dreg = bap ? HERMES_DATA1 : HERMES_DATA0;
@@ -459,25 +460,30 @@
  * practice.
  *
  * Callable from user or bh context.  */
-int hermes_read_ltv(hermes_t *hw, int bap, u16 rid, int bufsize,
+int hermes_read_ltv(hermes_t *hw, int bap, u16 rid, unsigned bufsize,
 		    u16 *length, void *buf)
 {
 	int err = 0;
 	int dreg = bap ? HERMES_DATA1 : HERMES_DATA0;
 	u16 rlength, rtype;
+	unsigned nwords;
 
 	if ( (bufsize < 0) || (bufsize % 2) )
 		return -EINVAL;
 
 	err = hermes_docmd_wait(hw, HERMES_CMD_ACCESS, rid, NULL);
 	if (err)
-		goto out;
+		return err;
 
 	err = hermes_bap_seek(hw, bap, rid, 0);
 	if (err)
-		goto out;
+		return err;
 
 	rlength = hermes_read_reg(hw, dreg);
+
+	if (! rlength)
+		return -ENOENT;
+
 	rtype = hermes_read_reg(hw, dreg);
 
 	if (length)
@@ -493,13 +499,11 @@
 		       "(rid=0x%04x, len=0x%04x)\n",
 		       IO_TYPE(hw), hw->iobase,
 		       HERMES_RECLEN_TO_BYTES(rlength), bufsize, rid, rlength);
-	
-	/* FIXME: we should read the min of the requested length and
-           the actual record length */
-	hermes_read_words(hw, dreg, buf, bufsize / 2);
 
- out:
-	return err;
+	nwords = min((unsigned)rlength - 1, bufsize / 2);
+	hermes_read_words(hw, dreg, buf, nwords);
+
+	return 0;
 }
 
 int hermes_write_ltv(hermes_t *hw, int bap, u16 rid, 
@@ -507,11 +511,14 @@
 {
 	int dreg = bap ? HERMES_DATA1 : HERMES_DATA0;
 	int err = 0;
-	int count;
-	
+	unsigned count;
+
+	if (length == 0)
+		return -EINVAL;
+
 	err = hermes_bap_seek(hw, bap, rid, 0);
 	if (err)
-		goto out;
+		return err;
 
 	hermes_write_reg(hw, dreg, length);
 	hermes_write_reg(hw, dreg, rid);
@@ -523,7 +530,6 @@
 	err = hermes_docmd_wait(hw, HERMES_CMD_ACCESS | HERMES_CMD_WRITE, 
 				rid, NULL);
 
- out:
 	return err;
 }
 
@@ -539,9 +545,12 @@
 
 static int __init init_hermes(void)
 {
-	printk(KERN_DEBUG "%s\n", version);
-
 	return 0;
 }
 
+static void __exit exit_hermes(void)
+{
+}
+
 module_init(init_hermes);
+module_exit(exit_hermes);
diff -Nur linux-orig/drivers/net/wireless/hermes.h linux/drivers/net/wireless/hermes.h
--- linux-orig/drivers/net/wireless/hermes.h	2004-02-16 09:32:01.000000000 +0300
+++ linux/drivers/net/wireless/hermes.h	2004-02-16 09:30:01.000000000 +0300
@@ -33,6 +33,10 @@
 #include <linux/if_ether.h>
 #include <asm/byteorder.h>
 
+#define		HFA384x_PORTTYPE_IBSS			((uint16_t)3)
+#define		HFA384x_WEPFLAGS_DISABLE_TXCRYPT	(0x10)
+#define		HFA384x_WEPFLAGS_DISABLE_RXCRYPT	(0x80)
+
 /*
  * Limits and constants
  */
@@ -148,6 +152,14 @@
 #define		HERMES_MONITOR_ENABLE		(0x000b)
 #define		HERMES_MONITOR_DISABLE		(0x000f)
 
+/*--------------------------------------------------------------------
+Communication Frames: Field Masks for Receive Frames
+--------------------------------------------------------------------*/
+/*-- Offsets --------*/
+#define		HERMES_RX_DATA_LEN_OFF		(44)
+#define		HERMES_RX_80211HDR_OFF		(14)
+#define		HERMES_RX_DATA_OFF			(60)
+
 /*
  * Frame structures and constants
  */
@@ -171,6 +183,7 @@
 #define	HERMES_RXSTAT_BADCRC		(0x0001)
 #define	HERMES_RXSTAT_UNDECRYPTABLE	(0x0002)
 #define	HERMES_RXSTAT_MACPORT		(0x0700)
+#define HERMES_RXSTAT_GET_MACPORT(s)	(((s) & HERMES_RXSTAT_MACPORT) >> 8)
 #define HERMES_RXSTAT_PCF		(0x1000)	/* Frame was received in CF period */
 #define	HERMES_RXSTAT_MSGTYPE		(0xE000)
 #define	HERMES_RXSTAT_1042		(0x2000)	/* RFC-1042 frame */
@@ -250,6 +263,17 @@
 	u16 scanreason;             /* ??? */
 	struct hermes_scan_apinfo aps[35];        /* Scan result */
 } __attribute__ ((packed));
+#define HERMES_LINKSTATUS_NOT_CONNECTED   (0x0000)  
+#define HERMES_LINKSTATUS_CONNECTED       (0x0001)
+#define HERMES_LINKSTATUS_DISCONNECTED    (0x0002)
+#define HERMES_LINKSTATUS_AP_CHANGE       (0x0003)
+#define HERMES_LINKSTATUS_AP_OUT_OF_RANGE (0x0004)
+#define HERMES_LINKSTATUS_AP_IN_RANGE     (0x0005)
+#define HERMES_LINKSTATUS_ASSOC_FAILED    (0x0006)
+  
+struct hermes_linkstatus {
+	u16 linkstatus;         /* Link status */
+} __attribute__ ((packed));
 
 // #define HERMES_DEBUG_BUFFER 1
 #define HERMES_DEBUG_BUFSIZE 4096
@@ -266,7 +290,7 @@
 
 /* Basic control structure */
 typedef struct hermes {
-	ulong iobase;
+	unsigned long iobase;
 	int io_space; /* 1 if we IO-mapped IO, 0 for memory-mapped IO? */
 #define HERMES_IO	1
 #define HERMES_MEM	0
@@ -275,6 +299,7 @@
 #define HERMES_32BIT_REGSPACING	1
 
 	u16 inten; /* Which interrupts should be enabled? */
+ 	u8 port_enabled[HERMES_NUMPORTS_MAX];
 
 #ifdef HERMES_DEBUG_BUFFER
 	struct hermes_debug_entry dbuf[HERMES_DEBUG_BUFSIZE];
@@ -304,11 +329,11 @@
 int hermes_docmd_wait(hermes_t *hw, u16 cmd, u16 parm0, hermes_response_t *resp);
 int hermes_allocate(hermes_t *hw, u16 size, u16 *fid);
 
-int hermes_bap_pread(hermes_t *hw, int bap, void *buf, int len,
+int hermes_bap_pread(hermes_t *hw, int bap, void *buf, unsigned len,
 		       u16 id, u16 offset);
-int hermes_bap_pwrite(hermes_t *hw, int bap, const void *buf, int len,
+int hermes_bap_pwrite(hermes_t *hw, int bap, const void *buf, unsigned len,
 			u16 id, u16 offset);
-int hermes_read_ltv(hermes_t *hw, int bap, u16 rid, int buflen,
+int hermes_read_ltv(hermes_t *hw, int bap, u16 rid, unsigned buflen,
 		    u16 *length, void *buf);
 int hermes_write_ltv(hermes_t *hw, int bap, u16 rid,
 		      u16 length, const void *value);
@@ -320,12 +345,6 @@
 	return hermes_read_regn(hw, SWSUPPORT0) == HERMES_MAGIC;
 }
 
-static inline void hermes_enable_interrupt(hermes_t *hw, u16 events)
-{
-	hw->inten |= events;
-	hermes_write_regn(hw, INTEN, hw->inten);
-}
-
 static inline void hermes_set_irqmask(hermes_t *hw, u16 events)
 {
 	hw->inten = events;
@@ -334,12 +353,14 @@
 
 static inline int hermes_enable_port(hermes_t *hw, int port)
 {
+	hw->port_enabled[port] = 1;
 	return hermes_docmd_wait(hw, HERMES_CMD_ENABLE | (port << 8),
 				 0, NULL);
 }
 
 static inline int hermes_disable_port(hermes_t *hw, int port)
 {
+	hw->port_enabled[port] = 0;
 	return hermes_docmd_wait(hw, HERMES_CMD_DISABLE | (port << 8), 
 				 0, NULL);
 }
@@ -351,46 +372,65 @@
 	return hermes_docmd_wait(hw, HERMES_CMD_INQUIRE, rid, NULL);
 }
 
-#define HERMES_BYTES_TO_RECLEN(n) ( ((n) % 2) ? (((n)+1)/2)+1 : ((n)/2)+1 )
+#define HERMES_BYTES_TO_RECLEN(n) ( (((n)+1)/2) + 1 )
 #define HERMES_RECLEN_TO_BYTES(n) ( ((n)-1) * 2 )
 
 /* Note that for the next two, the count is in 16-bit words, not bytes */
-static inline void hermes_read_words(struct hermes *hw, int off, void *buf, int count)
+static inline void hermes_read_words(struct hermes *hw, int off, void *buf, unsigned count)
 {
 	off = off << hw->reg_spacing;;
 
 	if (hw->io_space) {
 		insw(hw->iobase + off, buf, count);
 	} else {
-		int i;
+		unsigned i;
 		u16 *p;
 
-		/* This need to *not* byteswap (like insw()) but
-		 * readw() does byteswap hence the conversion */
+		/* This needs to *not* byteswap (like insw()) but
+		 * readw() does byteswap hence the conversion.  I hope
+		 * gcc is smart enough to fold away the two swaps on
+		 * big-endian platforms. */
 		for (i = 0, p = buf; i < count; i++) {
 			*p++ = cpu_to_le16(readw(hw->iobase + off));
 		}
 	}
 }
 
-static inline void hermes_write_words(struct hermes *hw, int off, const void *buf, int count)
+static inline void hermes_write_words(struct hermes *hw, int off, const void *buf, unsigned count)
 {
 	off = off << hw->reg_spacing;;
 
 	if (hw->io_space) {
 		outsw(hw->iobase + off, buf, count);
 	} else {
-		int i;
+		unsigned i;
 		const u16 *p;
 
-		/* This need to *not* byteswap (like outsw()) but
-		 * writew() does byteswap hence the conversion */
+		/* This needs to *not* byteswap (like outsw()) but
+		 * writew() does byteswap hence the conversion.  I
+		 * hope gcc is smart enough to fold away the two swaps
+		 * on big-endian platforms. */
 		for (i = 0, p = buf; i < count; i++) {
 			writew(le16_to_cpu(*p++), hw->iobase + off);
 		}
 	}
 }
 
+static inline void hermes_clear_words(struct hermes *hw, int off, unsigned count)
+{
+	unsigned i;
+
+	off = off << hw->reg_spacing;;
+
+	if (hw->io_space) {
+		for (i = 0; i < count; i++)
+			outw(0, hw->iobase + off);
+	} else {
+		for (i = 0; i < count; i++)
+			writew(0, hw->iobase + off);
+	}
+}
+
 #define HERMES_READ_RECORD(hw, bap, rid, buf) \
 	(hermes_read_ltv((hw),(bap),(rid), sizeof(*buf), NULL, (buf)))
 #define HERMES_WRITE_RECORD(hw, bap, rid, buf) \
diff -Nur linux-orig/drivers/net/wireless/hostap_80211.h linux/drivers/net/wireless/hostap_80211.h
--- linux-orig/drivers/net/wireless/hostap_80211.h	1970-01-01 03:00:00.000000000 +0300
+++ linux/drivers/net/wireless/hostap_80211.h	2003-05-22 08:38:22.000000000 +0400
@@ -0,0 +1,44 @@
+#ifndef HOSTAP_80211_H
+#define HOSTAP_80211_H
+
+struct hostap_ieee80211_hdr {
+	u16 frame_control;
+	u16 duration_id;
+	u8 addr1[6];
+	u8 addr2[6];
+	u8 addr3[6];
+	u16 seq_ctrl;
+	u8 addr4[6];
+} __attribute__ ((packed));
+
+#define IEEE80211_MGMT_HDR_LEN 24
+#define IEEE80211_DATA_HDR3_LEN 24
+#define IEEE80211_DATA_HDR4_LEN 30
+
+
+struct hostap_80211_rx_status {
+	u32 mac_time;
+	u8 signal;
+	u8 noise;
+	u16 rate; /* in 100 kbps */
+};
+
+
+void hostap_80211_rx(struct net_device *dev, struct sk_buff *skb,
+		     struct hostap_80211_rx_status *rx_stats);
+
+
+/* prism2_rx_80211 'type' argument */
+enum {
+	PRISM2_RX_MONITOR, PRISM2_RX_MGMT, PRISM2_RX_NON_ASSOC,
+	PRISM2_RX_NULLFUNC_ACK
+};
+
+int prism2_rx_80211(struct net_device *dev, struct sk_buff *skb,
+		    struct hostap_80211_rx_status *rx_stats, int type);
+void hostap_80211_rx(struct net_device *dev, struct sk_buff *skb,
+		     struct hostap_80211_rx_status *rx_stats);
+void hostap_dump_rx_80211(const char *name, struct sk_buff *skb,
+			  struct hostap_80211_rx_status *rx_stats);
+
+#endif /* HOSTAP_80211_H */
diff -Nur linux-orig/drivers/net/wireless/hostap_80211_rx.c linux/drivers/net/wireless/hostap_80211_rx.c
--- linux-orig/drivers/net/wireless/hostap_80211_rx.c	1970-01-01 03:00:00.000000000 +0300
+++ linux/drivers/net/wireless/hostap_80211_rx.c	2003-11-02 22:42:57.000000000 +0300
@@ -0,0 +1,860 @@
+#include <linux/etherdevice.h>
+
+#include "hostap_80211.h"
+#include "hostap.h"
+
+void hostap_dump_rx_80211(const char *name, struct sk_buff *skb,
+			  struct hostap_80211_rx_status *rx_stats)
+{
+	struct hostap_ieee80211_hdr *hdr;
+	u16 fc;
+
+	hdr = (struct hostap_ieee80211_hdr *) skb->data;
+
+	printk(KERN_DEBUG "%s: RX signal=%d noise=%d rate=%d len=%d "
+	       "jiffies=%ld\n",
+	       name, rx_stats->signal, rx_stats->noise, rx_stats->rate,
+	       skb->len, jiffies);
+
+	if (skb->len < 2)
+		return;
+
+	fc = le16_to_cpu(hdr->frame_control);
+	printk(KERN_DEBUG "   FC=0x%04x (type=%d:%d)%s%s",
+	       fc, WLAN_FC_GET_TYPE(fc), WLAN_FC_GET_STYPE(fc),
+	       fc & WLAN_FC_TODS ? " [ToDS]" : "",
+	       fc & WLAN_FC_FROMDS ? " [FromDS]" : "");
+
+	if (skb->len < IEEE80211_DATA_HDR3_LEN) {
+		printk("\n");
+		return;
+	}
+
+	printk(" dur=0x%04x seq=0x%04x\n", le16_to_cpu(hdr->duration_id),
+	       le16_to_cpu(hdr->seq_ctrl));
+
+	printk(KERN_DEBUG "   A1=" MACSTR " A2=" MACSTR " A3=" MACSTR,
+	       MAC2STR(hdr->addr1), MAC2STR(hdr->addr2), MAC2STR(hdr->addr3));
+	if (skb->len >= 30)
+		printk(" A4=" MACSTR, MAC2STR(hdr->addr4));
+	printk("\n");
+}
+
+
+/* Send RX frame to netif with 802.11 (and possible prism) header.
+ * Called from hardware or software IRQ context. */
+int prism2_rx_80211(struct net_device *dev, struct sk_buff *skb,
+		    struct hostap_80211_rx_status *rx_stats, int type)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int hdrlen, phdrlen, head_need, tail_need;
+	u16 fc;
+	int prism_header, ret;
+	struct hostap_ieee80211_hdr *hdr;
+
+	dev->last_rx = jiffies;
+
+	if (dev->type == ARPHRD_IEEE80211_PRISM) {
+		if (local->monitor_type == PRISM2_MONITOR_PRISM) {
+			prism_header = 1;
+			phdrlen = sizeof(struct linux_wlan_ng_prism_hdr);
+		} else { /* local->monitor_type == PRISM2_MONITOR_CAPHDR */
+			prism_header = 2;
+			phdrlen = sizeof(struct linux_wlan_ng_cap_hdr);
+		}
+	} else {
+		prism_header = 0;
+		phdrlen = 0;
+	}
+
+	hdr = (struct hostap_ieee80211_hdr *) skb->data;
+	fc = le16_to_cpu(hdr->frame_control);
+
+	if (type == PRISM2_RX_MGMT && (fc & WLAN_FC_PVER)) {
+		printk(KERN_DEBUG "%s: dropped management frame with header "
+		       "version %d\n", dev->name, fc & WLAN_FC_PVER);
+		dev_kfree_skb_any(skb);
+		return 0;
+	}
+
+	hdrlen = hostap_80211_get_hdrlen(fc);
+
+	/* check if there is enough room for extra data; if not, expand skb
+	 * buffer to be large enough for the changes */
+	head_need = phdrlen;
+	tail_need = 0;
+#ifdef PRISM2_ADD_BOGUS_CRC
+	tail_need += 4;
+#endif /* PRISM2_ADD_BOGUS_CRC */
+
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,4,0))
+	if (head_need > skb_headroom(skb) || tail_need > skb_tailroom(skb)) {
+		struct sk_buff *nskb;
+
+		nskb = dev_alloc_skb(skb->len + head_need + tail_need);
+		if (nskb == NULL) {
+			dev_kfree_skb_any(skb);
+			return 0;
+		}
+
+		skb_reserve(nskb, head_need);
+		memcpy(skb_put(nskb, skb->len), skb->data, skb->len);
+		dev_kfree_skb_any(skb);
+		skb = nskb;
+	}
+#else /* Linux 2.4.0 or newer */
+	head_need -= skb_headroom(skb);
+	tail_need -= skb_tailroom(skb);
+
+	if (head_need > 0 || tail_need > 0) {
+		if (pskb_expand_head(skb, head_need > 0 ? head_need : 0,
+				     tail_need > 0 ? tail_need : 0,
+				     GFP_ATOMIC)) {
+			printk(KERN_DEBUG "%s: prism2_rx_80211 failed to "
+			       "reallocate skb buffer\n", dev->name);
+			dev_kfree_skb_any(skb);
+			return 0;
+		}
+	}
+#endif
+
+	/* We now have an skb with enough head and tail room, so just insert
+	 * the extra data */
+
+#ifdef PRISM2_ADD_BOGUS_CRC
+	memset(skb_put(skb, 4), 0xff, 4); /* Prism2 strips CRC */
+#endif /* PRISM2_ADD_BOGUS_CRC */
+
+	if (prism_header == 1) {
+		struct linux_wlan_ng_prism_hdr *hdr;
+		hdr = (struct linux_wlan_ng_prism_hdr *)
+			skb_push(skb, phdrlen);
+		memset(hdr, 0, phdrlen);
+		hdr->msgcode = LWNG_CAP_DID_BASE;
+		hdr->msglen = sizeof(*hdr);
+		memcpy(hdr->devname, dev->name, sizeof(hdr->devname));
+#define LWNG_SETVAL(f,i,s,l,d) \
+hdr->f.did = LWNG_CAP_DID_BASE | (i << 12); \
+hdr->f.status = s; hdr->f.len = l; hdr->f.data = d
+		LWNG_SETVAL(hosttime, 1, 0, 4, jiffies);
+		LWNG_SETVAL(mactime, 2, 0, 0, rx_stats->mac_time);
+		LWNG_SETVAL(channel, 3, 1 /* no value */, 4, 0);
+		LWNG_SETVAL(rssi, 4, 1 /* no value */, 4, 0);
+		LWNG_SETVAL(sq, 5, 1 /* no value */, 4, 0);
+		LWNG_SETVAL(signal, 6, 0, 4, rx_stats->signal);
+		LWNG_SETVAL(noise, 7, 0, 4, rx_stats->noise);
+		LWNG_SETVAL(rate, 8, 0, 4, rx_stats->rate / 5);
+		LWNG_SETVAL(istx, 9, 0, 4, 0);
+		LWNG_SETVAL(frmlen, 10, 0, 4, skb->len - phdrlen);
+#undef LWNG_SETVAL
+	} else if (prism_header == 2) {
+		struct linux_wlan_ng_cap_hdr *hdr;
+		hdr = (struct linux_wlan_ng_cap_hdr *)
+			skb_push(skb, phdrlen);
+		memset(hdr, 0, phdrlen);
+		hdr->version    = htonl(LWNG_CAPHDR_VERSION);
+		hdr->length     = htonl(phdrlen);
+		hdr->mactime    = __cpu_to_be64(rx_stats->mac_time);
+		hdr->hosttime   = __cpu_to_be64(jiffies);
+		hdr->phytype    = htonl(4); /* dss_dot11_b */
+		hdr->channel    = htonl(local->channel);
+		hdr->datarate   = htonl(rx_stats->rate);
+		hdr->antenna    = htonl(0); /* unknown */
+		hdr->priority   = htonl(0); /* unknown */
+		hdr->ssi_type   = htonl(3); /* raw */
+		hdr->ssi_signal = htonl(rx_stats->signal);
+		hdr->ssi_noise  = htonl(rx_stats->noise);
+		hdr->preamble   = htonl(0); /* unknown */
+		hdr->encoding   = htonl(1); /* cck */
+	}
+
+	ret = skb->len - phdrlen;
+	skb->dev = dev;
+	skb->mac.raw = skb->data;
+	skb_pull(skb, hdrlen);
+	if (prism_header)
+		skb_pull(skb, phdrlen);
+	skb->pkt_type = PACKET_OTHERHOST;
+	skb->protocol = __constant_htons(ETH_P_802_2);
+	memset(skb->cb, 0, sizeof(skb->cb));
+	netif_rx(skb);
+
+	return ret;
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+static void monitor_rx(struct net_device *dev, struct sk_buff *skb,
+		       struct hostap_80211_rx_status *rx_stats)
+{
+	struct net_device_stats *stats;
+	int len;
+
+	len = prism2_rx_80211(dev, skb, rx_stats, PRISM2_RX_MONITOR);
+	stats = hostap_get_stats(dev);
+	stats->rx_packets++;
+	stats->rx_bytes += len;
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+static struct prism2_frag_entry *
+prism2_frag_cache_find(local_info_t *local, unsigned int seq,
+		       unsigned int frag, u8 *src, u8 *dst)
+{
+	struct prism2_frag_entry *entry;
+	int i;
+
+	for (i = 0; i < PRISM2_FRAG_CACHE_LEN; i++) {
+		entry = &local->frag_cache[i];
+		if (entry->skb != NULL &&
+		    time_after(jiffies, entry->first_frag_time + 2 * HZ)) {
+			printk(KERN_DEBUG "%s: expiring fragment cache entry "
+			       "seq=%u last_frag=%u\n",
+			       local->dev->name, entry->seq, entry->last_frag);
+			dev_kfree_skb(entry->skb);
+			entry->skb = NULL;
+		}
+
+		if (entry->skb != NULL && entry->seq == seq &&
+		    (entry->last_frag + 1 == frag || frag == -1) &&
+		    memcmp(entry->src_addr, src, ETH_ALEN) == 0 &&
+		    memcmp(entry->dst_addr, dst, ETH_ALEN) == 0)
+			return entry;
+	}
+
+	return NULL;
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+static struct sk_buff *
+prism2_frag_cache_get(local_info_t *local, struct hostap_ieee80211_hdr *hdr)
+{
+	struct sk_buff *skb = NULL;
+	u16 sc;
+	unsigned int frag, seq;
+	struct prism2_frag_entry *entry;
+
+	sc = le16_to_cpu(hdr->seq_ctrl);
+	frag = WLAN_GET_SEQ_FRAG(sc);
+	seq = WLAN_GET_SEQ_SEQ(sc);
+
+	if (frag == 0) {
+		/* Reserve enough space to fit maximum frame length */
+		skb = dev_alloc_skb(local->dev->mtu +
+				    sizeof(struct hostap_ieee80211_hdr) +
+				    8 /* LLC */ +
+				    2 /* alignment */ +
+				    8 /* WEP */ + ETH_ALEN /* WDS */);
+		if (skb == NULL)
+			return NULL;
+
+		entry = &local->frag_cache[local->frag_next_idx];
+		local->frag_next_idx++;
+		if (local->frag_next_idx >= PRISM2_FRAG_CACHE_LEN)
+			local->frag_next_idx = 0;
+
+		if (entry->skb != NULL)
+			dev_kfree_skb(entry->skb);
+
+		entry->first_frag_time = jiffies;
+		entry->seq = seq;
+		entry->last_frag = frag;
+		entry->skb = skb;
+		memcpy(entry->src_addr, hdr->addr2, ETH_ALEN);
+		memcpy(entry->dst_addr, hdr->addr1, ETH_ALEN);
+	} else {
+		/* received a fragment of a frame for which the head fragment
+		 * should have already been received */
+		entry = prism2_frag_cache_find(local, seq, frag, hdr->addr2,
+					       hdr->addr1);
+		if (entry != NULL) {
+			entry->last_frag = frag;
+			skb = entry->skb;
+		}
+	}
+
+	return skb;
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+static int prism2_frag_cache_invalidate(local_info_t *local,
+					struct hostap_ieee80211_hdr *hdr)
+{
+	u16 sc;
+	unsigned int seq;
+	struct prism2_frag_entry *entry;
+
+	sc = le16_to_cpu(hdr->seq_ctrl);
+	seq = WLAN_GET_SEQ_SEQ(sc);
+
+	entry = prism2_frag_cache_find(local, seq, -1, hdr->addr2, hdr->addr1);
+
+	if (entry == NULL) {
+		printk(KERN_DEBUG "%s: could not invalidate fragment cache "
+		       "entry (seq=%u)\n",
+		       local->dev->name, seq);
+		return -1;
+	}
+
+	entry->skb = NULL;
+	return 0;
+}
+
+
+static inline int
+hostap_rx_frame_mgmt(local_info_t *local, struct sk_buff *skb,
+		     struct hostap_80211_rx_status *rx_stats, u16 type,
+		     u16 stype)
+{
+	if (local->iw_mode == IW_MODE_MASTER) {
+		hostap_update_sta_ps(local, (struct hostap_ieee80211_hdr *)
+				     skb->data);
+	}
+
+	if (local->hostapd && type == WLAN_FC_TYPE_MGMT) {
+		if (stype == WLAN_FC_STYPE_BEACON &&
+		    local->iw_mode == IW_MODE_MASTER) {
+			struct sk_buff *skb2;
+			/* Process beacon frames also in kernel driver to
+			 * update STA(AP) table statistics */
+			skb2 = skb_clone(skb, GFP_ATOMIC);
+			if (skb2)
+				hostap_rx(skb2->dev, skb2, rx_stats);
+		}
+
+		/* send management frames to the user space daemon for
+		 * processing */
+		local->apdevstats.rx_packets++;
+		local->apdevstats.rx_bytes += skb->len;
+		prism2_rx_80211(local->apdev, skb, rx_stats, PRISM2_RX_MGMT);
+		return 0;
+	}
+
+	if (local->iw_mode == IW_MODE_MASTER) {
+		if (type != WLAN_FC_TYPE_MGMT && type != WLAN_FC_TYPE_CTRL) {
+			printk(KERN_DEBUG "%s: unknown management frame "
+			       "(type=0x%02x, stype=0x%02x) dropped\n",
+			       skb->dev->name, type, stype);
+			return -1;
+		}
+
+		hostap_rx(skb->dev, skb, rx_stats);
+		return 0;
+	} else {
+		printk(KERN_DEBUG "%s: hostap_rx_frame_mgmt: management frame "
+		       "received in non-Host AP mode\n", skb->dev->name);
+		return -1;
+	}
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+static inline struct net_device *prism2_rx_get_wds(local_info_t *local,
+						   u8 *addr)
+{
+	struct hostap_interface *iface = NULL;
+	struct list_head *ptr;
+
+	read_lock_bh(&local->iface_lock);
+	list_for_each(ptr, &local->hostap_interfaces) {
+		iface = list_entry(ptr, struct hostap_interface, list);
+		if (iface->type == HOSTAP_INTERFACE_WDS &&
+		    memcmp(iface->u.wds.remote_addr, addr, ETH_ALEN) == 0)
+			break;
+		iface = NULL;
+	}
+	read_unlock_bh(&local->iface_lock);
+
+	return iface ? iface->dev : NULL;
+}
+
+
+static inline int
+hostap_rx_frame_wds(local_info_t *local, struct hostap_ieee80211_hdr *hdr,
+		    u16 fc, struct net_device **wds)
+{
+	/* FIX: is this really supposed to accept WDS frames only in Master
+	 * mode? What about Repeater or Managed with WDS frames? */
+	if ((fc & (WLAN_FC_TODS | WLAN_FC_FROMDS)) !=
+	    (WLAN_FC_TODS | WLAN_FC_FROMDS) &&
+	    (local->iw_mode != IW_MODE_MASTER || !(fc & WLAN_FC_TODS)))
+		return 0; /* not a WDS frame */
+
+	/* Possible WDS frame: either IEEE 802.11 compliant (if FromDS)
+	 * or own non-standard frame with 4th address after payload */
+	if (memcmp(hdr->addr1, local->dev->dev_addr, ETH_ALEN) != 0 &&
+	    (hdr->addr1[0] != 0xff || hdr->addr1[1] != 0xff ||
+	     hdr->addr1[2] != 0xff || hdr->addr1[3] != 0xff ||
+	     hdr->addr1[4] != 0xff || hdr->addr1[5] != 0xff)) {
+		/* RA (or BSSID) is not ours - drop */
+		PDEBUG(DEBUG_EXTRA, "%s: received WDS frame with "
+		       "not own or broadcast %s=" MACSTR "\n",
+		       local->dev->name, fc & WLAN_FC_FROMDS ? "RA" : "BSSID",
+		       MAC2STR(hdr->addr1));
+		return -1;
+	}
+
+	/* check if the frame came from a registered WDS connection */
+	*wds = prism2_rx_get_wds(local, hdr->addr2);
+	if (*wds == NULL && fc & WLAN_FC_FROMDS &&
+	    (local->iw_mode != IW_MODE_INFRA ||
+	     !(local->wds_type & HOSTAP_WDS_AP_CLIENT) ||
+	     memcmp(hdr->addr2, local->bssid, ETH_ALEN) != 0)) {
+		/* require that WDS link has been registered with TA or the
+		 * frame is from current AP when using 'AP client mode' */
+		PDEBUG(DEBUG_EXTRA, "%s: received WDS[4 addr] frame "
+		       "from unknown TA=" MACSTR "\n",
+		       local->dev->name, MAC2STR(hdr->addr2));
+		if (local->ap && local->ap->autom_ap_wds)
+			hostap_wds_link_oper(local, hdr->addr2, WDS_ADD);
+		return -1;
+	}
+
+	if (*wds && !(fc & WLAN_FC_FROMDS) && local->ap &&
+	    hostap_is_sta_assoc(local->ap, hdr->addr2)) {
+		/* STA is actually associated with us even though it has a
+		 * registered WDS link. Assume it is in 'AP client' mode.
+		 * Since this is a 3-addr frame, assume it is not (bogus) WDS
+		 * frame and process it like any normal ToDS frame from
+		 * associated STA. */
+		*wds = NULL;
+	}
+
+	return 0;
+}
+
+
+static int hostap_is_eapol_frame(local_info_t *local,
+				 struct hostap_ieee80211_hdr *hdr, u8 *buf,
+				 int len)
+{
+	struct net_device *dev = local->dev;
+	u16 fc, ethertype;
+
+	fc = le16_to_cpu(hdr->frame_control);
+
+	/* check that the frame is unicast frame to us */
+	if ((fc & (WLAN_FC_TODS | WLAN_FC_FROMDS)) == WLAN_FC_TODS &&
+	    memcmp(hdr->addr1, dev->dev_addr, ETH_ALEN) == 0 &&
+	    memcmp(hdr->addr3, dev->dev_addr, ETH_ALEN) == 0) {
+		/* ToDS frame with own addr BSSID and DA */
+	} else if ((fc & (WLAN_FC_TODS | WLAN_FC_FROMDS)) == WLAN_FC_FROMDS &&
+		   memcmp(hdr->addr1, dev->dev_addr, ETH_ALEN) == 0) {
+		/* FromDS frame with own addr as DA */
+	} else
+		return 0;
+
+	if (len < 8)
+		return 0;
+
+	/* check for port access entity Ethernet type */
+	ethertype = (buf[6] << 8) | buf[7];
+	if (ethertype == ETH_P_PAE)
+		return 1;
+
+	return 0;
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+static inline int
+hostap_rx_frame_decrypt(local_info_t *local, int iswep, struct sk_buff *skb)
+{
+	struct hostap_ieee80211_hdr *hdr;
+	struct prism2_crypt_data *crypt;
+	void *sta = NULL;
+	int ret = 0, olen, len, hdrlen;
+	char *payload;
+
+	hdr = (struct hostap_ieee80211_hdr *) skb->data;
+	hdrlen = hostap_80211_get_hdrlen(le16_to_cpu(hdr->frame_control));
+
+	len = skb->len - hdrlen;
+	payload = ((char *) (hdr)) + hdrlen;
+	crypt = local->crypt;
+	sta = NULL;
+
+	/* Use station specific key to override default keys if the receiver
+	 * address is a unicast address ("individual RA"). If bcrx_sta_key
+	 * parameter is set, station specific key is used even with
+	 * broad/multicast targets (this is against IEEE 802.11, but makes it
+	 * easier to use different keys with stations that do not support WEP
+	 * key mapping). */
+	if (!(hdr->addr1[0] & 0x01) || local->bcrx_sta_key)
+		(void) hostap_handle_sta_crypto(local, hdr, &crypt, &sta);
+
+	/* allow NULL decrypt to indicate an station specific override for
+	 * default encryption */
+	if (crypt && (crypt->ops == NULL || crypt->ops->decrypt == NULL))
+		crypt = NULL;
+
+	if (!crypt && iswep) {
+		printk(KERN_DEBUG "%s: WEP decryption failed (not set) (SA="
+		       MACSTR ")\n", local->dev->name, MAC2STR(hdr->addr2));
+		local->comm_tallies.rx_discards_wep_undecryptable++;
+		ret = -1;
+		goto done;
+	}
+
+	if (!crypt)
+		goto done;
+
+	if (!iswep && !local->open_wep) {
+		if (local->ieee_802_1x &&
+		    hostap_is_eapol_frame(local, hdr, payload, len)) {
+			/* pass unencrypted EAPOL frames even if encryption is
+			 * configured */
+			printk(KERN_DEBUG "%s: RX: IEEE 802.1X - passing "
+			       "unencrypted EAPOL frame\n", local->dev->name);
+			goto done;
+		}
+		printk(KERN_DEBUG "%s: encryption configured, but RX frame "
+		       "not encrypted (SA=" MACSTR ")\n",
+		       local->dev->name, MAC2STR(hdr->addr2));
+		ret = -1;
+		goto done;
+	}
+
+	/* decrypt WEP part of the frame: IV (4 bytes), encrypted
+	 * payload (including SNAP header), ICV (4 bytes) */
+	atomic_inc(&crypt->refcnt);
+	olen = crypt->ops->decrypt(payload, len, crypt->priv);
+	atomic_dec(&crypt->refcnt);
+	if (olen < 0) {
+		printk(KERN_DEBUG "%s: WEP decryption failed (SA=" MACSTR
+		       ")\n", local->dev->name, MAC2STR(hdr->addr2));
+		local->comm_tallies.rx_discards_wep_undecryptable++;
+		ret = -1;
+		goto done;
+	}
+
+	skb_trim(skb, skb->len - (len - olen));
+
+ done:
+	if (sta)
+		hostap_handle_sta_release(sta);
+
+	return ret;
+}
+
+
+/* All received frames are sent to this function. @skb contains the frame in
+ * IEEE 802.11 format, i.e., in the format it was sent over air.
+ * This function is called only as a tasklet (software IRQ). */
+void hostap_80211_rx(struct net_device *dev, struct sk_buff *skb,
+		     struct hostap_80211_rx_status *rx_stats)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	struct hostap_ieee80211_hdr *hdr;
+	size_t hdrlen;
+	u16 fc, type, stype, sc;
+	struct net_device *wds = NULL;
+	struct net_device_stats *stats;
+	unsigned int frag;
+	u8 *payload;
+	struct sk_buff *skb2 = NULL;
+	u16 ethertype;
+	int frame_authorized = 0;
+	int from_assoc_ap = 0;
+	u8 dst[ETH_ALEN];
+	u8 src[ETH_ALEN];
+
+	hdr = (struct hostap_ieee80211_hdr *) skb->data;
+	stats = hostap_get_stats(dev);
+
+	if (skb->len < 10)
+		goto rx_dropped;
+
+	fc = le16_to_cpu(hdr->frame_control);
+	type = WLAN_FC_GET_TYPE(fc);
+	stype = WLAN_FC_GET_STYPE(fc);
+	sc = le16_to_cpu(hdr->seq_ctrl);
+	frag = WLAN_GET_SEQ_FRAG(sc);
+	hdrlen = hostap_80211_get_hdrlen(fc);
+
+#if WIRELESS_EXT > 15
+	/* Put this code here so that we avoid duplicating it in all
+	 * Rx paths. - Jean II */
+#ifdef IW_WIRELESS_SPY		/* defined in iw_handler.h */
+	/* If spy monitoring on */
+	if (iface->spy_data.spy_number > 0) {
+		struct iw_quality wstats;
+		wstats.level = rx_stats->signal;
+		wstats.noise = rx_stats->noise;
+		wstats.updated = 6;	/* No qual value */
+		/* Update spy records */
+		wireless_spy_update(dev, hdr->addr2, &wstats);
+	}
+#endif /* IW_WIRELESS_SPY */
+#endif /* WIRELESS_EXT > 15 */
+
+	if (local->iw_mode == IW_MODE_MONITOR) {
+		monitor_rx(dev, skb, rx_stats);
+		return;
+	}
+
+	if (type != WLAN_FC_TYPE_DATA) {
+		if (type == WLAN_FC_TYPE_MGMT && stype == WLAN_FC_STYPE_AUTH &&
+		    fc & WLAN_FC_ISWEP && local->host_decrypt &&
+		    hostap_rx_frame_decrypt(local, fc & WLAN_FC_ISWEP, skb)) {
+			printk(KERN_DEBUG "%s: failed to decrypt mgmt::auth "
+			       "from " MACSTR "\n", dev->name,
+			       MAC2STR(hdr->addr2));
+			/* TODO: could inform hostapd about this so that it
+			 * could send auth failure report */
+			goto rx_dropped;
+		}
+
+		if (hostap_rx_frame_mgmt(local, skb, rx_stats, type, stype))
+			goto rx_dropped;
+		else
+			goto rx_exit;
+	}
+
+	/* Data frame - extract src/dst addresses */
+	if (skb->len < IEEE80211_DATA_HDR3_LEN)
+		goto rx_dropped;
+
+	switch (fc & (WLAN_FC_FROMDS | WLAN_FC_TODS)) {
+	case WLAN_FC_FROMDS:
+		memcpy(dst, hdr->addr1, ETH_ALEN);
+		memcpy(src, hdr->addr3, ETH_ALEN);
+		break;
+	case WLAN_FC_TODS:
+		memcpy(dst, hdr->addr3, ETH_ALEN);
+		memcpy(src, hdr->addr2, ETH_ALEN);
+		break;
+	case WLAN_FC_FROMDS | WLAN_FC_TODS:
+		if (skb->len < IEEE80211_DATA_HDR4_LEN)
+			goto rx_dropped;
+		memcpy(dst, hdr->addr3, ETH_ALEN);
+		memcpy(src, hdr->addr4, ETH_ALEN);
+		break;
+	case 0:
+		memcpy(dst, hdr->addr1, ETH_ALEN);
+		memcpy(src, hdr->addr2, ETH_ALEN);
+		break;
+	}
+
+	if (hostap_rx_frame_wds(local, hdr, fc, &wds))
+		goto rx_dropped;
+	if (wds) {
+		skb->dev = dev = wds;
+		stats = hostap_get_stats(dev);
+	}
+
+	if (local->iw_mode == IW_MODE_MASTER && !wds &&
+	    (fc & (WLAN_FC_TODS | WLAN_FC_FROMDS)) == WLAN_FC_FROMDS &&
+	    local->stadev &&
+	    memcmp(hdr->addr2, local->assoc_ap_addr, ETH_ALEN) == 0) {
+		/* Frame from BSSID of the AP for which we are a client */
+		skb->dev = dev = local->stadev;
+		stats = hostap_get_stats(dev);
+		from_assoc_ap = 1;
+	}
+
+	dev->last_rx = jiffies;
+
+	if (local->iw_mode == IW_MODE_MASTER && !from_assoc_ap) {
+		switch (hostap_handle_sta_rx(local, dev, skb, rx_stats,
+					     wds != NULL)) {
+		case AP_RX_CONTINUE_NOT_AUTHORIZED:
+			frame_authorized = 0;
+			break;
+		case AP_RX_CONTINUE:
+			frame_authorized = 1;
+			break;
+		case AP_RX_DROP:
+			goto rx_dropped;
+		case AP_RX_EXIT:
+			goto rx_exit;
+		}
+	} else if (local->iw_mode == IW_MODE_REPEAT ||
+		   local->wds_type & HOSTAP_WDS_AP_CLIENT)
+		hostap_update_rx_stats(local->ap, hdr, rx_stats);
+
+	/* Nullfunc frames may have PS-bit set, so they must be passed to
+	 * hostap_handle_sta_rx() before being dropped here. */
+	if (stype != WLAN_FC_STYPE_DATA &&
+	    stype != WLAN_FC_STYPE_DATA_CFACK &&
+	    stype != WLAN_FC_STYPE_DATA_CFPOLL &&
+	    stype != WLAN_FC_STYPE_DATA_CFACKPOLL) {
+		if (stype != WLAN_FC_STYPE_NULLFUNC)
+			printk(KERN_DEBUG "%s: RX: dropped data frame "
+			       "with no data (type=0x%02x, subtype=0x%02x)\n",
+			       dev->name, type, stype);
+		goto rx_dropped;
+	}
+
+	/* skb: hdr + (possibly fragmented, possibly encrypted) payload */
+
+	if (local->host_decrypt &&
+	    hostap_rx_frame_decrypt(local, fc & WLAN_FC_ISWEP, skb))
+		goto rx_dropped;
+
+	/* skb: hdr + (possibly fragmented) plaintext payload */
+
+	if (local->host_decrypt && (fc & WLAN_FC_ISWEP) &&
+	    (frag != 0 || (fc & WLAN_FC_MOREFRAG))) {
+		int flen;
+		struct sk_buff *frag_skb =
+			prism2_frag_cache_get(local, hdr);
+		if (!frag_skb) {
+			printk(KERN_DEBUG "%s: Rx cannot get skb from "
+			       "fragment cache (morefrag=%d seq=%u frag=%u)\n",
+			       dev->name, (fc & WLAN_FC_MOREFRAG) != 0,
+			       WLAN_GET_SEQ_SEQ(sc), frag);
+			goto rx_dropped;
+		}
+
+		flen = skb->len;
+		if (frag != 0)
+			flen -= hdrlen;
+
+		if (frag_skb->tail + flen > frag_skb->end) {
+			printk(KERN_WARNING "%s: host decrypted and "
+			       "reassembled frame did not fit skb\n",
+			       dev->name);
+			prism2_frag_cache_invalidate(local, hdr);
+			goto rx_dropped;
+		}
+
+		if (frag == 0) {
+			/* copy first fragment (including full headers) into
+			 * beginning of the fragment cache skb */
+			memcpy(skb_put(frag_skb, flen), skb->data, flen);
+		} else {
+			/* append frame payload to the end of the fragment
+			 * cache skb */
+			memcpy(skb_put(frag_skb, flen), skb->data + hdrlen,
+			       flen);
+		}
+		dev_kfree_skb(skb);
+		skb = NULL;
+
+		if (fc & WLAN_FC_MOREFRAG) {
+			/* more fragments expected - leave the skb in fragment
+			 * cache for now; it will be delivered to upper layers
+			 * after all fragments have been received */
+			goto rx_exit;
+		}
+
+		/* this was the last fragment and the frame will be
+		 * delivered, so remove skb from fragment cache */
+		skb = frag_skb;
+		hdr = (struct hostap_ieee80211_hdr *) skb->data;
+		prism2_frag_cache_invalidate(local, hdr);
+	}
+
+	/* skb: hdr + (possible reassembled) full plaintext payload */
+
+	payload = skb->data + hdrlen;
+	ethertype = (payload[6] << 8) | payload[7];
+
+	/* If IEEE 802.1X is used, check whether the port is authorized to send
+	 * the received frame. */
+	if (local->ieee_802_1x && local->iw_mode == IW_MODE_MASTER) {
+		if (ethertype == ETH_P_PAE) {
+			printk(KERN_DEBUG "%s: RX: IEEE 802.1X frame\n",
+			       dev->name);
+			if (local->hostapd && local->apdev) {
+				/* Send IEEE 802.1X frames to the user
+				 * space daemon for processing */
+				prism2_rx_80211(local->apdev, skb, rx_stats,
+						PRISM2_RX_MGMT);
+				local->apdevstats.rx_packets++;
+				local->apdevstats.rx_bytes += skb->len;
+				goto rx_exit;
+			}
+		} else if (!frame_authorized) {
+			printk(KERN_DEBUG "%s: dropped frame from "
+			       "unauthorized port (IEEE 802.1X): "
+			       "ethertype=0x%04x\n",
+			       dev->name, ethertype);
+			goto rx_dropped;
+		}
+	}
+
+	/* convert hdr + possible LLC headers into Ethernet header */
+	if (skb->len - hdrlen >= 8 &&
+	    ((memcmp(payload, rfc1042_header, 6) == 0 &&
+	      ethertype != ETH_P_AARP && ethertype != ETH_P_IPX) ||
+	     memcmp(payload, bridge_tunnel_header, 6) == 0)) {
+		/* remove RFC1042 or Bridge-Tunnel encapsulation and
+		 * replace EtherType */
+		skb_pull(skb, hdrlen + 6);
+		memcpy(skb_push(skb, ETH_ALEN), src, ETH_ALEN);
+		memcpy(skb_push(skb, ETH_ALEN), dst, ETH_ALEN);
+	} else {
+		u16 len;
+		/* Leave Ethernet header part of hdr and full payload */
+		skb_pull(skb, hdrlen);
+		len = htons(skb->len);
+		memcpy(skb_push(skb, 2), &len, 2);
+		memcpy(skb_push(skb, ETH_ALEN), src, ETH_ALEN);
+		memcpy(skb_push(skb, ETH_ALEN), dst, ETH_ALEN);
+	}
+
+	if (wds && ((fc & (WLAN_FC_TODS | WLAN_FC_FROMDS)) == WLAN_FC_TODS) &&
+	    skb->len >= ETH_HLEN + ETH_ALEN) {
+		/* Non-standard frame: get addr4 from its bogus location after
+		 * the payload */
+		memcpy(skb->data + ETH_ALEN,
+		       skb->data + skb->len - ETH_ALEN, ETH_ALEN);
+		skb_trim(skb, skb->len - ETH_ALEN);
+	}
+
+	stats->rx_packets++;
+	stats->rx_bytes += skb->len;
+
+	if (local->iw_mode == IW_MODE_MASTER && !wds &&
+	    local->ap->bridge_packets) {
+		if (dst[0] & 0x01) {
+			/* copy multicast frame both to the higher layers and
+			 * to the wireless media */
+			local->ap->bridged_multicast++;
+			skb2 = skb_clone(skb, GFP_ATOMIC);
+			if (skb2 == NULL)
+				printk(KERN_DEBUG "%s: skb_clone failed for "
+				       "multicast frame\n", dev->name);
+		} else if (hostap_is_sta_assoc(local->ap, dst)) {
+			/* send frame directly to the associated STA using
+			 * wireless media and not passing to higher layers */
+			local->ap->bridged_unicast++;
+			skb2 = skb;
+			skb = NULL;
+		}
+	}
+
+	if (skb2 != NULL) {
+		/* send to wireless media */
+		skb2->protocol = __constant_htons(ETH_P_802_3);
+		skb2->mac.raw = skb2->nh.raw = skb2->data;
+		/* skb2->nh.raw = skb2->data + ETH_HLEN; */
+		dev_queue_xmit(skb2);
+	}
+
+	if (skb) {
+		skb->protocol = eth_type_trans(skb, dev);
+		memset(skb->cb, 0, sizeof(skb->cb));
+		skb->dev = dev;
+		netif_rx(skb);
+	}
+
+ rx_exit:
+	return;
+
+ rx_dropped:
+	dev_kfree_skb(skb);
+
+	stats->rx_dropped++;
+	goto rx_exit;
+}
+
+
+EXPORT_SYMBOL(hostap_80211_rx);
diff -Nur linux-orig/drivers/net/wireless/hostap_ap.c linux/drivers/net/wireless/hostap_ap.c
--- linux-orig/drivers/net/wireless/hostap_ap.c	1970-01-01 03:00:00.000000000 +0300
+++ linux/drivers/net/wireless/hostap_ap.c	2003-11-03 06:38:22.000000000 +0300
@@ -0,0 +1,3338 @@
+/*
+ * Intersil Prism2 driver with Host AP (software access point) support
+ * Copyright (c) 2001-2002, SSH Communications Security Corp and Jouni Malinen
+ * <jkmaline@cc.hut.fi>
+ * Copyright (c) 2002-2003, Jouni Malinen <jkmaline@cc.hut.fi>
+ *
+ * This file is to be included into hostap.c when S/W AP functionality is
+ * compiled.
+ *
+ * AP:  FIX:
+ * - if unicast Class 2 (assoc,reassoc,disassoc) frame received from
+ *   unauthenticated STA, send deauth. frame (8802.11: 5.5)
+ * - if unicast Class 3 (data with to/from DS,deauth,pspoll) frame received
+ *   from authenticated, but unassoc STA, send disassoc frame (8802.11: 5.5)
+ * - if unicast Class 3 received from unauthenticated STA, send deauth. frame
+ *   (8802.11: 5.5)
+ */
+
+static int other_ap_policy[MAX_PARM_DEVICES] = { AP_OTHER_AP_SKIP_ALL,
+						 DEF_INTS };
+MODULE_PARM(other_ap_policy, PARM_MIN_MAX "i");
+MODULE_PARM_DESC(other_ap_policy, "Other AP beacon monitoring policy (0-3)");
+
+static int ap_max_inactivity[MAX_PARM_DEVICES] = { AP_MAX_INACTIVITY_SEC,
+						   DEF_INTS };
+MODULE_PARM(ap_max_inactivity, PARM_MIN_MAX "i");
+MODULE_PARM_DESC(ap_max_inactivity, "AP timeout (in seconds) for station "
+		 "inactivity");
+
+static int ap_bridge_packets[MAX_PARM_DEVICES] = { 1, DEF_INTS };
+MODULE_PARM(ap_bridge_packets, PARM_MIN_MAX "i");
+MODULE_PARM_DESC(ap_bridge_packets, "Bridge packets directly between "
+		 "stations");
+
+static int autom_ap_wds[MAX_PARM_DEVICES] = { 0, DEF_INTS };
+MODULE_PARM(autom_ap_wds, PARM_MIN_MAX "i");
+MODULE_PARM_DESC(autom_ap_wds, "Add WDS connections to other APs "
+		 "automatically");
+
+
+static struct sta_info* ap_get_sta(struct ap_data *ap, u8 *sta);
+static void hostap_event_expired_sta(struct net_device *dev,
+				     struct sta_info *sta);
+static void handle_add_proc_queue(void *data);
+
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+static void handle_wds_oper_queue(void *data);
+static void prism2_send_mgmt(struct net_device *dev,
+			     int type, int subtype, char *body,
+			     int body_len, int txevent, u8 *addr,
+			     u16 tx_cb_idx);
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+
+
+#ifndef PRISM2_NO_PROCFS_DEBUG
+static int ap_debug_proc_read(char *page, char **start, off_t off,
+			      int count, int *eof, void *data)
+{
+	char *p = page;
+	struct ap_data *ap = (struct ap_data *) data;
+
+	if (off != 0) {
+		*eof = 1;
+		return 0;
+	}
+
+	p += sprintf(p, "BridgedUnicastFrames=%u\n", ap->bridged_unicast);
+	p += sprintf(p, "BridgedMulticastFrames=%u\n", ap->bridged_multicast);
+	p += sprintf(p, "max_inactivity=%u\n", ap->max_inactivity / HZ);
+	p += sprintf(p, "bridge_packets=%u\n", ap->bridge_packets);
+	p += sprintf(p, "nullfunc_ack=%u\n", ap->nullfunc_ack);
+	p += sprintf(p, "autom_ap_wds=%u\n", ap->autom_ap_wds);
+	p += sprintf(p, "auth_algs=%u\n", ap->local->auth_algs);
+
+	return (p - page);
+}
+#endif /* PRISM2_NO_PROCFS_DEBUG */
+
+
+static void ap_sta_hash_add(struct ap_data *ap, struct sta_info *sta)
+{
+	sta->hnext = ap->sta_hash[STA_HASH(sta->addr)];
+	ap->sta_hash[STA_HASH(sta->addr)] = sta;
+}
+
+static void ap_sta_hash_del(struct ap_data *ap, struct sta_info *sta)
+{
+	struct sta_info *s;
+
+	s = ap->sta_hash[STA_HASH(sta->addr)];
+	if (s == NULL) return;
+	if (memcmp(s->addr, sta->addr, ETH_ALEN) == 0) {
+		ap->sta_hash[STA_HASH(sta->addr)] = s->hnext;
+		return;
+	}
+
+	while (s->hnext != NULL && memcmp(s->hnext->addr, sta->addr, ETH_ALEN)
+	       != 0)
+		s = s->hnext;
+	if (s->hnext != NULL)
+		s->hnext = s->hnext->hnext;
+	else
+		printk("AP: could not remove STA " MACSTR " from hash table\n",
+		       MAC2STR(sta->addr));
+}
+
+static void ap_free_sta(struct ap_data *ap, struct sta_info *sta)
+{
+	struct sk_buff *skb;
+
+	if (sta->ap && sta->local)
+		hostap_event_expired_sta(sta->local->dev, sta);
+
+	if (ap->proc != NULL) {
+		char name[20];
+		sprintf(name, MACSTR, MAC2STR(sta->addr));
+		remove_proc_entry(name, ap->proc);
+	}
+
+	if (sta->crypt) {
+		sta->crypt->ops->deinit(sta->crypt->priv);
+		kfree(sta->crypt);
+		sta->crypt = NULL;
+	}
+
+	while ((skb = skb_dequeue(&sta->tx_buf)) != NULL)
+		dev_kfree_skb(skb);
+
+	ap->num_sta--;
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+	if (sta->aid > 0)
+		ap->sta_aid[sta->aid - 1] = NULL;
+
+	if (!sta->ap && sta->u.sta.challenge)
+		kfree(sta->u.sta.challenge);
+	del_timer(&sta->timer);
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+
+	kfree(sta);
+}
+
+
+struct set_tim_data {
+	struct list_head list;
+	int aid;
+	int set;
+};
+
+static void hostap_set_tim(local_info_t *local, int aid, int set)
+{
+	struct list_head *ptr;
+	struct set_tim_data *new_entry;
+
+	new_entry = (struct set_tim_data *)
+		kmalloc(sizeof(*new_entry), GFP_ATOMIC);
+	if (new_entry == NULL) {
+		printk(KERN_DEBUG "%s: hostap_set_tim: kmalloc failed\n",
+		       local->dev->name);
+		return;
+	}
+	memset(new_entry, 0, sizeof(*new_entry));
+	new_entry->aid = aid;
+	new_entry->set = set;
+
+	spin_lock_bh(&local->ap->set_tim_lock);
+	for (ptr = local->ap->set_tim_list.next;
+	     ptr != &local->ap->set_tim_list;
+	     ptr = ptr->next) {
+		struct set_tim_data *entry = (struct set_tim_data *) ptr;
+		if (entry->aid == aid) {
+			PDEBUG(DEBUG_PS2, "%s: hostap_set_tim: aid=%d "
+			       "set=%d ==> %d\n",
+			       local->dev->name, aid, entry->set, set);
+			entry->set = set;
+			kfree(new_entry);
+			new_entry = NULL;
+			break;
+		}
+	}
+	if (new_entry)
+		list_add_tail(&new_entry->list, &local->ap->set_tim_list);
+	spin_unlock_bh(&local->ap->set_tim_lock);
+
+	PRISM2_SCHEDULE_TASK(&local->ap->set_tim_queue);
+}
+
+
+static void handle_set_tim_queue(void *data)
+{
+	local_info_t *local = (local_info_t *) data;
+	struct set_tim_data *entry;
+	u16 val;
+
+	for (;;) {
+		entry = NULL;
+		spin_lock_bh(&local->ap->set_tim_lock);
+		if (!list_empty(&local->ap->set_tim_list)) {
+			entry = list_entry(local->ap->set_tim_list.next,
+					   struct set_tim_data, list);
+			list_del(&entry->list);
+		}
+		spin_unlock_bh(&local->ap->set_tim_lock);
+		if (!entry)
+			break;
+
+		PDEBUG(DEBUG_PS2, "%s: hostap_set_tim_queue: aid=%d set=%d\n",
+		       local->dev->name, entry->aid, entry->set);
+
+		val = entry->aid;
+		if (entry->set)
+			val |= 0x8000;
+		if (hostap_set_word(local->dev, HFA384X_RID_CNFTIMCTRL, val)) {
+			printk(KERN_DEBUG "%s: set_tim failed (aid=%d "
+			       "set=%d)\n",
+			       local->dev->name, entry->aid, entry->set);
+		}
+
+		kfree(entry);
+	}
+
+#ifndef NEW_MODULE_CODE
+	MOD_DEC_USE_COUNT;
+#endif
+}
+
+
+static void hostap_event_new_sta(struct net_device *dev, struct sta_info *sta)
+{
+#if WIRELESS_EXT >= 15
+	union iwreq_data wrqu;
+	memset(&wrqu, 0, sizeof(wrqu));
+	memcpy(wrqu.addr.sa_data, sta->addr, ETH_ALEN);
+	wrqu.addr.sa_family = ARPHRD_ETHER;
+	wireless_send_event(dev, IWEVREGISTERED, &wrqu, NULL);
+#endif /* WIRELESS_EXT >= 15 */
+}
+
+
+static void hostap_event_expired_sta(struct net_device *dev,
+				     struct sta_info *sta)
+{
+#if WIRELESS_EXT >= 15
+	union iwreq_data wrqu;
+	memset(&wrqu, 0, sizeof(wrqu));
+	memcpy(wrqu.addr.sa_data, sta->addr, ETH_ALEN);
+	wrqu.addr.sa_family = ARPHRD_ETHER;
+	wireless_send_event(dev, IWEVEXPIRED, &wrqu, NULL);
+#endif /* WIRELESS_EXT >= 15 */
+}
+
+
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+
+static void ap_handle_timer(unsigned long data)
+{
+	struct sta_info *sta = (struct sta_info *) data;
+	local_info_t *local;
+	struct ap_data *ap;
+	unsigned long next_time = 0;
+	int was_assoc;
+
+	if (sta == NULL || sta->local == NULL || sta->local->ap == NULL) {
+		PDEBUG(DEBUG_AP, "ap_handle_timer() called with NULL data\n");
+		return;
+	}
+
+	local = sta->local;
+	ap = local->ap;
+	was_assoc = sta->flags & WLAN_STA_ASSOC;
+
+	if (atomic_read(&sta->users) != 0)
+		next_time = jiffies + HZ;
+	else if ((sta->flags & WLAN_STA_PERM) && !(sta->flags & WLAN_STA_AUTH))
+		next_time = jiffies + ap->max_inactivity;
+
+	if (time_before(jiffies, sta->last_rx + ap->max_inactivity)) {
+		/* station activity detected; reset timeout state */
+		sta->timeout_next = STA_NULLFUNC;
+		next_time = sta->last_rx + ap->max_inactivity;
+	} else if (sta->timeout_next == STA_DISASSOC &&
+		   !(sta->flags & WLAN_STA_PENDING_POLL)) {
+		/* STA ACKed data nullfunc frame poll */
+		sta->timeout_next = STA_NULLFUNC;
+		next_time = jiffies + ap->max_inactivity;
+	}
+
+	if (next_time) {
+		sta->timer.expires = next_time;
+		add_timer(&sta->timer);
+		return;
+	}
+
+	if (sta->ap)
+		sta->timeout_next = STA_DEAUTH;
+
+	if (sta->timeout_next == STA_DEAUTH && !(sta->flags & WLAN_STA_PERM)) {
+		spin_lock(&ap->sta_table_lock);
+		ap_sta_hash_del(ap, sta);
+		list_del(&sta->list);
+		spin_unlock(&ap->sta_table_lock);
+		sta->flags &= ~(WLAN_STA_AUTH | WLAN_STA_ASSOC);
+	} else if (sta->timeout_next == STA_DISASSOC)
+		sta->flags &= ~WLAN_STA_ASSOC;
+
+	if (was_assoc && !(sta->flags & WLAN_STA_ASSOC) && !sta->ap)
+		hostap_event_expired_sta(local->dev, sta);
+
+	if (sta->timeout_next == STA_DEAUTH && sta->aid > 0 &&
+	    !skb_queue_empty(&sta->tx_buf)) {
+		hostap_set_tim(local, sta->aid, 0);
+		sta->flags &= ~WLAN_STA_TIM;
+	}
+
+	if (sta->ap) {
+		if (ap->autom_ap_wds) {
+			PDEBUG(DEBUG_AP, "%s: removing automatic WDS "
+			       "connection to AP " MACSTR "\n",
+			       local->dev->name, MAC2STR(sta->addr));
+			hostap_wds_link_oper(local, sta->addr, WDS_DEL);
+		}
+	} else if (sta->timeout_next == STA_NULLFUNC) {
+		/* send data frame to poll STA and check whether this frame
+		 * is ACKed */
+		/* FIX: WLAN_FC_STYPE_NULLFUNC would be more appropriate, but
+		 * it is apparently not retried so TX Exc events are not
+		 * received for it */
+		sta->flags |= WLAN_STA_PENDING_POLL;
+		prism2_send_mgmt(local->dev, WLAN_FC_TYPE_DATA,
+				 WLAN_FC_STYPE_DATA, NULL, 0, 1,
+				 sta->addr, ap->tx_callback_poll);
+	} else {
+		int deauth = sta->timeout_next == STA_DEAUTH;
+		u16 resp;
+		PDEBUG(DEBUG_AP, "%s: sending %s info to STA " MACSTR
+		       "(last=%lu, jiffies=%lu)\n",
+		       local->dev->name,
+		       deauth ? "deauthentication" : "disassociation",
+		       MAC2STR(sta->addr), sta->last_rx, jiffies);
+
+		resp = cpu_to_le16(deauth ? WLAN_REASON_PREV_AUTH_NOT_VALID :
+				   WLAN_REASON_DISASSOC_DUE_TO_INACTIVITY);
+		prism2_send_mgmt(local->dev, WLAN_FC_TYPE_MGMT,
+				 (deauth ? WLAN_FC_STYPE_DEAUTH :
+				  WLAN_FC_STYPE_DISASSOC),
+				 (char *) &resp, 2, 1, sta->addr, 0);
+	}
+
+	if (sta->timeout_next == STA_DEAUTH) {
+		if (sta->flags & WLAN_STA_PERM) {
+			PDEBUG(DEBUG_AP, "%s: STA " MACSTR " would have been "
+			       "removed, but it has 'perm' flag\n",
+			       local->dev->name, MAC2STR(sta->addr));
+		} else
+			ap_free_sta(ap, sta);
+		return;
+	}
+
+	if (sta->timeout_next == STA_NULLFUNC) {
+		sta->timeout_next = STA_DISASSOC;
+		sta->timer.expires = jiffies + AP_DISASSOC_DELAY;
+	} else {
+		sta->timeout_next = STA_DEAUTH;
+		sta->timer.expires = jiffies + AP_DEAUTH_DELAY;
+	}
+
+	add_timer(&sta->timer);
+}
+
+
+void hostap_deauth_all_stas(struct net_device *dev, struct ap_data *ap,
+			    int resend)
+{
+	u8 addr[ETH_ALEN];
+	u16 resp;
+	int i;
+
+	PDEBUG(DEBUG_AP, "%s: Deauthenticate all stations\n", dev->name);
+	memset(addr, 0xff, ETH_ALEN);
+
+	resp = __constant_cpu_to_le16(WLAN_REASON_PREV_AUTH_NOT_VALID);
+
+	/* deauth message sent; try to resend it few times; the message is
+	 * broadcast, so it may be delayed until next DTIM; there is not much
+	 * else we can do at this point since the driver is going to be shut
+	 * down */
+	for (i = 0; i < 5; i++) {
+		prism2_send_mgmt(dev, WLAN_FC_TYPE_MGMT, WLAN_FC_STYPE_DEAUTH,
+				 (char *) &resp, 2, 1, addr, 0);
+
+		if (!resend || ap->num_sta <= 0)
+			return;
+
+		mdelay(50);
+	}
+}
+
+
+static int ap_control_proc_read(char *page, char **start, off_t off,
+				int count, int *eof, void *data)
+{
+	char *p = page;
+	struct ap_data *ap = (struct ap_data *) data;
+	char *policy_txt;
+	struct list_head *ptr;
+	struct mac_entry *entry;
+
+	if (off != 0) {
+		*eof = 1;
+		return 0;
+	}
+
+	switch (ap->mac_restrictions.policy) {
+	case MAC_POLICY_OPEN:
+		policy_txt = "open";
+		break;
+	case MAC_POLICY_ALLOW:
+		policy_txt = "allow";
+		break;
+	case MAC_POLICY_DENY:
+		policy_txt = "deny";
+		break;
+	default:
+		policy_txt = "unknown";
+		break;
+	};
+	p += sprintf(p, "MAC policy: %s\n", policy_txt);
+	p += sprintf(p, "MAC entries: %u\n", ap->mac_restrictions.entries);
+	p += sprintf(p, "MAC list:\n");
+	spin_lock_bh(&ap->mac_restrictions.lock);
+	for (ptr = ap->mac_restrictions.mac_list.next;
+	     ptr != &ap->mac_restrictions.mac_list; ptr = ptr->next) {
+		if (p - page > PAGE_SIZE - 80) {
+			p += sprintf(p, "All entries did not fit one page.\n");
+			break;
+		}
+
+		entry = list_entry(ptr, struct mac_entry, list);
+		p += sprintf(p, MACSTR "\n", MAC2STR(entry->addr));
+	}
+	spin_unlock_bh(&ap->mac_restrictions.lock);
+
+	return (p - page);
+}
+
+
+static int ap_control_add_mac(struct mac_restrictions *mac_restrictions,
+			      u8 *mac)
+{
+	struct mac_entry *entry;
+
+	entry = kmalloc(sizeof(struct mac_entry), GFP_KERNEL);
+	if (entry == NULL)
+		return -1;
+
+	memcpy(entry->addr, mac, ETH_ALEN);
+
+	spin_lock_bh(&mac_restrictions->lock);
+	list_add_tail(&entry->list, &mac_restrictions->mac_list);
+	mac_restrictions->entries++;
+	spin_unlock_bh(&mac_restrictions->lock);
+
+	return 0;
+}
+
+
+static int ap_control_del_mac(struct mac_restrictions *mac_restrictions,
+			      u8 *mac)
+{
+	struct list_head *ptr;
+	struct mac_entry *entry;
+
+	spin_lock_bh(&mac_restrictions->lock);
+	for (ptr = mac_restrictions->mac_list.next;
+	     ptr != &mac_restrictions->mac_list; ptr = ptr->next) {
+		entry = list_entry(ptr, struct mac_entry, list);
+
+		if (memcmp(entry->addr, mac, ETH_ALEN) == 0) {
+			list_del(ptr);
+			kfree(entry);
+			mac_restrictions->entries--;
+			spin_unlock_bh(&mac_restrictions->lock);
+			return 0;
+		}
+	}
+	spin_unlock_bh(&mac_restrictions->lock);
+	return -1;
+}
+
+
+static int ap_control_mac_deny(struct mac_restrictions *mac_restrictions,
+			       u8 *mac)
+{
+	struct list_head *ptr;
+	struct mac_entry *entry;
+	int found = 0;
+
+	if (mac_restrictions->policy == MAC_POLICY_OPEN)
+		return 0;
+
+	spin_lock_bh(&mac_restrictions->lock);
+	for (ptr = mac_restrictions->mac_list.next;
+	     ptr != &mac_restrictions->mac_list; ptr = ptr->next) {
+		entry = list_entry(ptr, struct mac_entry, list);
+
+		if (memcmp(entry->addr, mac, ETH_ALEN) == 0) {
+			found = 1;
+			break;
+		}
+	}
+	spin_unlock_bh(&mac_restrictions->lock);
+
+	if (mac_restrictions->policy == MAC_POLICY_ALLOW)
+		return !found;
+	else
+		return found;
+}
+
+
+static void ap_control_flush_macs(struct mac_restrictions *mac_restrictions)
+{
+	struct list_head *ptr, *n;
+	struct mac_entry *entry;
+
+	if (mac_restrictions->entries == 0)
+		return;
+
+	spin_lock_bh(&mac_restrictions->lock);
+	for (ptr = mac_restrictions->mac_list.next, n = ptr->next;
+	     ptr != &mac_restrictions->mac_list;
+	     ptr = n, n = ptr->next) {
+		entry = list_entry(ptr, struct mac_entry, list);
+		list_del(ptr);
+		kfree(entry);
+	}
+	mac_restrictions->entries = 0;
+	spin_unlock_bh(&mac_restrictions->lock);
+}
+
+
+static int ap_control_kick_mac(struct ap_data *ap, struct net_device *dev,
+			       u8 *mac)
+{
+	struct sta_info *sta;
+	u16 resp;
+
+	spin_lock_bh(&ap->sta_table_lock);
+	sta = ap_get_sta(ap, mac);
+	if (sta) {
+		ap_sta_hash_del(ap, sta);
+		list_del(&sta->list);
+	}
+	spin_unlock_bh(&ap->sta_table_lock);
+
+	if (!sta)
+		return -EINVAL;
+
+	resp = cpu_to_le16(WLAN_REASON_PREV_AUTH_NOT_VALID);
+	prism2_send_mgmt(dev, WLAN_FC_TYPE_MGMT, WLAN_FC_STYPE_DEAUTH,
+			 (char *) &resp, 2, 1, sta->addr, 0);
+
+	if ((sta->flags & WLAN_STA_ASSOC) && !sta->ap)
+		hostap_event_expired_sta(dev, sta);
+
+	ap_free_sta(ap, sta);
+
+	return 0;
+}
+
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+
+
+static void ap_control_kickall(struct ap_data *ap)
+{
+	struct list_head *ptr, *n;
+	struct sta_info *sta;
+  
+	spin_lock_bh(&ap->sta_table_lock);
+	for (ptr = ap->sta_list.next, n = ptr->next; ptr != &ap->sta_list;
+	     ptr = n, n = ptr->next) {
+		sta = list_entry(ptr, struct sta_info, list);
+		ap_sta_hash_del(ap, sta);
+		list_del(&sta->list);
+		if ((sta->flags & WLAN_STA_ASSOC) && !sta->ap && sta->local)
+			hostap_event_expired_sta(sta->local->dev, sta);
+		ap_free_sta(ap, sta);
+	}
+	spin_unlock_bh(&ap->sta_table_lock);
+}
+
+
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+
+#define PROC_LIMIT (PAGE_SIZE - 80)
+
+static int prism2_ap_proc_read(char *page, char **start, off_t off,
+			       int count, int *eof, void *data)
+{
+	char *p = page;
+	struct ap_data *ap = (struct ap_data *) data;
+	struct list_head *ptr;
+	int i;
+
+	if (off > PROC_LIMIT) {
+		*eof = 1;
+		return 0;
+	}
+
+	p += sprintf(p, "# BSSID CHAN SIGNAL NOISE RATE SSID FLAGS\n");
+	spin_lock_bh(&ap->sta_table_lock);
+	for (ptr = ap->sta_list.next; ptr != &ap->sta_list; ptr = ptr->next) {
+		struct sta_info *sta = (struct sta_info *) ptr;
+
+		if (!sta->ap)
+			continue;
+
+		p += sprintf(p, MACSTR " %d %d %d %d '", MAC2STR(sta->addr),
+			     sta->u.ap.channel, sta->last_rx_signal,
+			     sta->last_rx_silence, sta->last_rx_rate);
+		for (i = 0; i < sta->u.ap.ssid_len; i++)
+			p += sprintf(p, ((sta->u.ap.ssid[i] >= 32 &&
+					  sta->u.ap.ssid[i] < 127) ?
+					 "%c" : "<%02x>"),
+				     sta->u.ap.ssid[i]);
+		p += sprintf(p, "'");
+		if (sta->capability & WLAN_CAPABILITY_ESS)
+			p += sprintf(p, " [ESS]");
+		if (sta->capability & WLAN_CAPABILITY_IBSS)
+			p += sprintf(p, " [IBSS]");
+		if (sta->capability & WLAN_CAPABILITY_PRIVACY)
+			p += sprintf(p, " [WEP]");
+		p += sprintf(p, "\n");
+
+		if ((p - page) > PROC_LIMIT) {
+			printk(KERN_DEBUG "hostap: ap proc did not fit\n");
+			break;
+		}
+	}
+	spin_unlock_bh(&ap->sta_table_lock);
+
+	if ((p - page) <= off) {
+		*eof = 1;
+		return 0;
+	}
+
+	*start = page + off;
+
+	return (p - page - off);
+}
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+
+
+void hostap_check_sta_fw_version(struct ap_data *ap, int sta_fw_ver)
+{
+	if (!ap)
+		return;
+
+	if (sta_fw_ver == PRISM2_FW_VER(0,8,0)) {
+		PDEBUG(DEBUG_AP, "Using data::nullfunc ACK workaround - "
+		       "firmware upgrade recommended\n");
+		ap->nullfunc_ack = 1;
+	} else
+		ap->nullfunc_ack = 0;
+
+	if (sta_fw_ver == PRISM2_FW_VER(1,4,2)) {
+		printk(KERN_WARNING "%s: Warning: secondary station firmware "
+		       "version 1.4.2 does not seem to work in Host AP mode\n",
+		       ap->local->dev->name);
+	}
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+static void hostap_ap_tx_cb(struct sk_buff *skb, int ok, void *data)
+{
+	struct ap_data *ap = data;
+	u16 fc;
+	struct hostap_ieee80211_hdr *hdr;
+
+	if (!ap->local->hostapd || !ap->local->apdev) {
+		dev_kfree_skb(skb);
+		return;
+	}
+
+	hdr = (struct hostap_ieee80211_hdr *) skb->data;
+	fc = le16_to_cpu(hdr->frame_control);
+
+	/* Pass the TX callback frame to the hostapd; use 802.11 header version
+	 * 1 to indicate failure (no ACK) and 2 success (frame ACKed) */
+
+	fc &= ~WLAN_FC_PVER;
+	fc |= ok ? BIT(1) : BIT(0);
+	hdr->frame_control = cpu_to_le16(fc);
+
+	skb->dev = ap->local->apdev;
+	skb_pull(skb, hostap_80211_get_hdrlen(fc));
+	skb->pkt_type = PACKET_OTHERHOST;
+	skb->protocol = __constant_htons(ETH_P_802_2);
+	memset(skb->cb, 0, sizeof(skb->cb));
+	netif_rx(skb);
+}
+
+
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+/* Called only as a tasklet (software IRQ) */
+static void hostap_ap_tx_cb_auth(struct sk_buff *skb, int ok, void *data)
+{
+	struct ap_data *ap = data;
+	struct net_device *dev = ap->local->dev;
+	struct hostap_ieee80211_hdr *hdr;
+	u16 fc, *pos, auth_alg, auth_transaction, status;
+	struct sta_info *sta = NULL;
+	char *txt = NULL;
+
+	if (ap->local->hostapd) {
+		dev_kfree_skb(skb);
+		return;
+	}
+
+	hdr = (struct hostap_ieee80211_hdr *) skb->data;
+	fc = le16_to_cpu(hdr->frame_control);
+	if (WLAN_FC_GET_TYPE(fc) != WLAN_FC_TYPE_MGMT ||
+	    WLAN_FC_GET_STYPE(fc) != WLAN_FC_STYPE_AUTH ||
+	    skb->len < IEEE80211_MGMT_HDR_LEN + 6) {
+		printk(KERN_DEBUG "%s: hostap_ap_tx_cb_auth received invalid "
+		       "frame\n", dev->name);
+		dev_kfree_skb(skb);
+		return;
+	}
+
+	if (!ok) {
+		txt = "frame was not ACKed";
+		goto done;
+	}
+
+	spin_lock(&ap->sta_table_lock);
+	sta = ap_get_sta(ap, hdr->addr1);
+	if (sta)
+		atomic_inc(&sta->users);
+	spin_unlock(&ap->sta_table_lock);
+
+	if (!sta) {
+		txt = "STA not found";
+		goto done;
+	}
+
+	pos = (u16 *) (skb->data + IEEE80211_MGMT_HDR_LEN);
+	auth_alg = le16_to_cpu(*pos++);
+	auth_transaction = le16_to_cpu(*pos++);
+	status = le16_to_cpu(*pos++);
+	if (status == WLAN_STATUS_SUCCESS &&
+	    ((auth_alg == WLAN_AUTH_OPEN && auth_transaction == 2) ||
+	     (auth_alg == WLAN_AUTH_SHARED_KEY && auth_transaction == 4))) {
+		txt = "STA authenticated";
+		sta->flags |= WLAN_STA_AUTH;
+		sta->last_auth = jiffies;
+	} else if (status != WLAN_STATUS_SUCCESS)
+		txt = "authentication failed";
+
+ done:
+	if (sta)
+		atomic_dec(&sta->users);
+	if (txt) {
+		PDEBUG(DEBUG_AP, "%s: " MACSTR " auth_cb - %s\n",
+		       dev->name, MAC2STR(hdr->addr1), txt);
+	}
+	dev_kfree_skb(skb);
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+static void hostap_ap_tx_cb_assoc(struct sk_buff *skb, int ok, void *data)
+{
+	struct ap_data *ap = data;
+	struct net_device *dev = ap->local->dev;
+	struct hostap_ieee80211_hdr *hdr;
+	u16 fc, *pos, status;
+	struct sta_info *sta = NULL;
+	char *txt = NULL;
+
+	if (ap->local->hostapd) {
+		dev_kfree_skb(skb);
+		return;
+	}
+
+	hdr = (struct hostap_ieee80211_hdr *) skb->data;
+	fc = le16_to_cpu(hdr->frame_control);
+	if (WLAN_FC_GET_TYPE(fc) != WLAN_FC_TYPE_MGMT ||
+	    (WLAN_FC_GET_STYPE(fc) != WLAN_FC_STYPE_ASSOC_RESP &&
+	     WLAN_FC_GET_STYPE(fc) != WLAN_FC_STYPE_REASSOC_RESP) ||
+	    skb->len < IEEE80211_MGMT_HDR_LEN + 4) {
+		printk(KERN_DEBUG "%s: hostap_ap_tx_cb_assoc received invalid "
+		       "frame\n", dev->name);
+		dev_kfree_skb(skb);
+		return;
+	}
+
+	if (!ok) {
+		txt = "frame was not ACKed";
+		goto done;
+	}
+
+	spin_lock(&ap->sta_table_lock);
+	sta = ap_get_sta(ap, hdr->addr1);
+	if (sta)
+		atomic_inc(&sta->users);
+	spin_unlock(&ap->sta_table_lock);
+
+	if (!sta) {
+		txt = "STA not found";
+		goto done;
+	}
+
+	pos = (u16 *) (skb->data + IEEE80211_MGMT_HDR_LEN);
+	pos++;
+	status = le16_to_cpu(*pos++);
+	if (status == WLAN_STATUS_SUCCESS) {
+		if (!(sta->flags & WLAN_STA_ASSOC))
+			hostap_event_new_sta(dev, sta);
+		txt = "STA associated";
+		sta->flags |= WLAN_STA_ASSOC;
+		sta->last_assoc = jiffies;
+	} else
+		txt = "association failed";
+
+ done:
+	if (sta)
+		atomic_dec(&sta->users);
+	if (txt) {
+		PDEBUG(DEBUG_AP, "%s: " MACSTR " assoc_cb - %s\n",
+		       dev->name, MAC2STR(hdr->addr1), txt);
+	}
+	dev_kfree_skb(skb);
+}
+
+/* Called only as a tasklet (software IRQ); TX callback for poll frames used
+ * in verifying whether the STA is still present. */
+static void hostap_ap_tx_cb_poll(struct sk_buff *skb, int ok, void *data)
+{
+	struct ap_data *ap = data;
+	struct net_device *dev = ap->local->dev;
+	struct hostap_ieee80211_hdr *hdr;
+	struct sta_info *sta;
+
+	if (skb->len < 24)
+		goto fail;
+	hdr = (struct hostap_ieee80211_hdr *) skb->data;
+	if (ok) {
+		spin_lock(&ap->sta_table_lock);
+		sta = ap_get_sta(ap, hdr->addr1);
+		if (sta)
+			sta->flags &= ~WLAN_STA_PENDING_POLL;
+		spin_unlock(&ap->sta_table_lock);
+	} else {
+		PDEBUG(DEBUG_AP, "%s: STA " MACSTR " did not ACK activity "
+		       "poll frame\n", dev->name, MAC2STR(hdr->addr1));
+	}
+
+ fail:
+	dev_kfree_skb(skb);
+}
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+
+
+void hostap_init_data(local_info_t *local)
+{
+	struct ap_data *ap = local->ap;
+
+	if (ap == NULL) {
+		printk(KERN_WARNING "hostap_init_data: ap == NULL\n");
+		return;
+	}
+	memset(ap, 0, sizeof(struct ap_data));
+	ap->local = local;
+
+	ap->ap_policy = GET_INT_PARM(other_ap_policy, local->card_idx);
+	ap->proc = local->proc;
+	ap->bridge_packets = GET_INT_PARM(ap_bridge_packets, local->card_idx);
+	ap->max_inactivity =
+		GET_INT_PARM(ap_max_inactivity, local->card_idx) * HZ;
+	ap->autom_ap_wds = GET_INT_PARM(autom_ap_wds, local->card_idx);
+
+	spin_lock_init(&ap->sta_table_lock);
+	INIT_LIST_HEAD(&ap->sta_list);
+
+#ifndef PRISM2_NO_PROCFS_DEBUG
+	if (ap->proc != NULL) {
+		create_proc_read_entry("ap_debug", 0, ap->proc,
+				       ap_debug_proc_read, ap);
+	}
+#endif /* PRISM2_NO_PROCFS_DEBUG */
+
+	/* Initialize task queue structure for AP management */
+	INIT_WORK(&local->ap->set_tim_queue, handle_set_tim_queue, local);
+	INIT_LIST_HEAD(&ap->set_tim_list);
+	spin_lock_init(&ap->set_tim_lock);
+
+	INIT_WORK(&local->ap->add_sta_proc_queue, handle_add_proc_queue, ap);
+
+	ap->tx_callback_idx =
+		hostap_tx_callback_register(local, hostap_ap_tx_cb, ap);
+	if (ap->tx_callback_idx == 0)
+		printk(KERN_WARNING "%s: failed to register TX callback for "
+		       "AP\n", local->dev->name);
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+	INIT_WORK(&local->ap->wds_oper_queue, handle_wds_oper_queue, local);
+
+	ap->tx_callback_auth =
+		hostap_tx_callback_register(local, hostap_ap_tx_cb_auth, ap);
+	ap->tx_callback_assoc =
+		hostap_tx_callback_register(local, hostap_ap_tx_cb_assoc, ap);
+	ap->tx_callback_poll =
+		hostap_tx_callback_register(local, hostap_ap_tx_cb_poll, ap);
+	if (ap->tx_callback_auth == 0 || ap->tx_callback_assoc == 0 ||
+		ap->tx_callback_poll == 0)
+		printk(KERN_WARNING "%s: failed to register TX callback for "
+		       "AP\n", local->dev->name);
+
+	spin_lock_init(&ap->mac_restrictions.lock);
+	INIT_LIST_HEAD(&ap->mac_restrictions.mac_list);
+	if (ap->proc != NULL) {
+		create_proc_read_entry("ap_control", 0, ap->proc,
+				       ap_control_proc_read, ap);
+	}
+
+	create_proc_read_entry("ap", 0, ap->proc,
+			       prism2_ap_proc_read, ap);
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+
+	ap->initialized = 1;
+}
+
+void hostap_free_data(struct ap_data *ap)
+{
+	struct list_head *ptr, *n;
+
+	if (ap == NULL || !ap->initialized) {
+		printk(KERN_DEBUG "hostap_free_data: ap has not yet been "
+		       "initialized - skip resource freeing\n");
+		return;
+	}
+
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+	if (ap->crypt)
+		ap->crypt->deinit(ap->crypt_priv);
+	ap->crypt = ap->crypt_priv = NULL;
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+
+	ptr = ap->sta_list.next;
+	while (ptr != NULL && ptr != &ap->sta_list) {
+		struct sta_info *sta = (struct sta_info *) ptr;
+		ptr = ptr->next;
+		ap_sta_hash_del(ap, sta);
+		list_del(&sta->list);
+		if ((sta->flags & WLAN_STA_ASSOC) && !sta->ap && sta->local)
+			hostap_event_expired_sta(sta->local->dev, sta);
+		ap_free_sta(ap, sta);
+	}
+
+	for (ptr = ap->set_tim_list.next, n = ptr->next;
+	     ptr != &ap->set_tim_list; ptr = n, n = ptr->next) {
+		struct set_tim_data *entry;
+		entry = list_entry(ptr, struct set_tim_data, list);
+		list_del(&entry->list);
+		kfree(entry);
+	}
+
+#ifndef PRISM2_NO_PROCFS_DEBUG
+	if (ap->proc != NULL) {
+		remove_proc_entry("ap_debug", ap->proc);
+	}
+#endif /* PRISM2_NO_PROCFS_DEBUG */
+
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+	if (ap->proc != NULL) {
+	  remove_proc_entry("ap", ap->proc);
+		remove_proc_entry("ap_control", ap->proc);
+	}
+	ap_control_flush_macs(&ap->mac_restrictions);
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+
+	ap->initialized = 0;
+}
+
+
+/* caller should have mutex for AP STA list handling */
+static struct sta_info* ap_get_sta(struct ap_data *ap, u8 *sta)
+{
+	struct sta_info *s;
+
+	s = ap->sta_hash[STA_HASH(sta)];
+	while (s != NULL && memcmp(s->addr, sta, ETH_ALEN) != 0)
+		s = s->hnext;
+	return s;
+}
+
+
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+
+/* Called from timer handler and from scheduled AP queue handlers */
+static void prism2_send_mgmt(struct net_device *dev,
+			     int type, int subtype, char *body,
+			     int body_len, int txevent, u8 *addr,
+			     u16 tx_cb_idx)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	struct hfa384x_tx_frame *txdesc;
+	u16 fc, tx_control;
+	struct sk_buff *skb;
+
+	if (!(dev->flags & IFF_UP)) {
+		PDEBUG(DEBUG_AP, "%s: prism2_send_mgmt - device is not UP - "
+		       "cannot send frame\n", dev->name);
+		return;
+	}
+
+	skb = dev_alloc_skb(sizeof(*txdesc) + body_len);
+	if (skb == NULL) {
+		PDEBUG(DEBUG_AP, "%s: prism2_send_mgmt failed to allocate "
+		       "skb\n", dev->name);
+		return;
+	}
+
+	txdesc = (struct hfa384x_tx_frame *) skb_put(skb, sizeof(*txdesc));
+	if (body)
+		memcpy(skb_put(skb, body_len), body, body_len);
+
+	memset(txdesc, 0, sizeof(*txdesc));
+	/* FIX: set tx_rate if f/w does not know how to do it */
+	tx_control = txevent ? local->tx_control : HFA384X_TX_CTRL_802_11;
+	if (tx_cb_idx)
+		tx_control |= HFA384X_TX_CTRL_TX_OK;
+	txdesc->sw_support = cpu_to_le16(tx_cb_idx);
+	txdesc->tx_control = cpu_to_le16(tx_control);
+	txdesc->data_len = cpu_to_le16(body_len);
+
+	fc = (type << 2) | (subtype << 4);
+
+	memcpy(txdesc->addr1, addr, ETH_ALEN); /* DA / RA */
+	if (type == WLAN_FC_TYPE_DATA) {
+		fc |= WLAN_FC_FROMDS;
+		memcpy(txdesc->addr2, dev->dev_addr, ETH_ALEN); /* BSSID */
+		memcpy(txdesc->addr3, dev->dev_addr, ETH_ALEN); /* SA */
+	} else if (type == WLAN_FC_TYPE_CTRL) {
+		/* control:ACK does not have addr2 or addr3 */
+		memset(txdesc->addr2, 0, ETH_ALEN);
+		memset(txdesc->addr3, 0, ETH_ALEN);
+	} else {
+		memcpy(txdesc->addr2, dev->dev_addr, ETH_ALEN); /* SA */
+		memcpy(txdesc->addr3, dev->dev_addr, ETH_ALEN); /* BSSID */
+	}
+
+	txdesc->frame_control = cpu_to_le16(fc);
+
+	/* FIX: is it OK to call dev_queue_xmit() here? This can be called in
+	 * interrupt context, but not in hard interrupt (like prism2_rx() that
+	 * required bridge_list. If needed, bridge_list could be used also here
+	 * when prism2_send_mgmt is called in interrupt context. */
+
+	skb->protocol = __constant_htons(ETH_P_HOSTAP);
+	skb->dev = dev;
+	skb->mac.raw = skb->nh.raw = skb->data;
+	dev_queue_xmit(skb);
+}
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+
+
+static int prism2_sta_proc_read(char *page, char **start, off_t off,
+				int count, int *eof, void *data)
+{
+	char *p = page;
+	struct sta_info *sta = (struct sta_info *) data;
+	int i;
+
+	/* FIX: possible race condition.. the STA data could have just expired,
+	 * but proc entry was still here so that the read could have started;
+	 * some locking should be done here.. */
+
+	if (off != 0) {
+		*eof = 1;
+		return 0;
+	}
+
+	p += sprintf(p, "%s=" MACSTR "\nusers=%d\naid=%d\n"
+		     "flags=0x%04x%s%s%s%s%s%s%s\n"
+		     "capability=0x%02x\nlisten_interval=%d\nsupported_rates=",
+		     sta->ap ? "AP" : "STA",
+		     MAC2STR(sta->addr), atomic_read(&sta->users), sta->aid,
+		     sta->flags,
+		     sta->flags & WLAN_STA_AUTH ? " AUTH" : "",
+		     sta->flags & WLAN_STA_ASSOC ? " ASSOC" : "",
+		     sta->flags & WLAN_STA_PS ? " PS" : "",
+		     sta->flags & WLAN_STA_TIM ? " TIM" : "",
+		     sta->flags & WLAN_STA_PERM ? " PERM" : "",
+		     sta->flags & WLAN_STA_AUTHORIZED ? " AUTHORIZED" : "",
+		     sta->flags & WLAN_STA_PENDING_POLL ? " POLL" : "",
+		     sta->capability, sta->listen_interval);
+	/* supported_rates: 500 kbit/s units with msb ignored */
+	for (i = 0; i < sizeof(sta->supported_rates); i++)
+		if (sta->supported_rates[i] != 0)
+			p += sprintf(p, "%d%sMbps ",
+				     (sta->supported_rates[i] & 0x7f) / 2,
+				     sta->supported_rates[i] & 1 ? ".5" : "");
+	p += sprintf(p, "\njiffies=%lu\nlast_auth=%lu\nlast_assoc=%lu\n"
+		     "last_rx=%lu\nlast_tx=%lu\nrx_packets=%lu\n"
+		     "tx_packets=%lu\n"
+		     "rx_bytes=%lu\ntx_bytes=%lu\nbuffer_count=%d\n"
+		     "last_rx: silence=%d signal=%d rate=%d\n"
+		     "tx_rate=%d\ntx[1M]=%d\ntx[2M]=%d\ntx[5.5M]=%d\n"
+		     "tx[11M]=%d\n"
+		     "rx[1M]=%d\nrx[2M]=%d\nrx[5.5M]=%d\nrx[11M]=%d\n",
+		     jiffies, sta->last_auth, sta->last_assoc, sta->last_rx,
+		     sta->last_tx,
+		     sta->rx_packets, sta->tx_packets, sta->rx_bytes,
+		     sta->tx_bytes, skb_queue_len(&sta->tx_buf),
+		     sta->last_rx_silence,
+		     sta->last_rx_signal, sta->last_rx_rate,
+		     sta->tx_rate, sta->tx_count[0], sta->tx_count[1],
+		     sta->tx_count[2], sta->tx_count[3],  sta->rx_count[0],
+		     sta->rx_count[1], sta->rx_count[2], sta->rx_count[3]);
+	if (sta->crypt && sta->crypt->ops)
+		p += sprintf(p, "crypt=%s\n", sta->crypt->ops->name);
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+	if (sta->ap) {
+		if (sta->u.ap.channel >= 0)
+			p += sprintf(p, "channel=%d\n", sta->u.ap.channel);
+		p += sprintf(p, "ssid=");
+		for (i = 0; i < sta->u.ap.ssid_len; i++)
+			p += sprintf(p, ((sta->u.ap.ssid[i] >= 32 &&
+					  sta->u.ap.ssid[i] < 127) ?
+					 "%c" : "<%02x>"),
+				     sta->u.ap.ssid[i]);
+		p += sprintf(p, "\n");
+	}
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+
+	return (p - page);
+}
+
+
+static void handle_add_proc_queue(void *data)
+{
+	struct ap_data *ap = (struct ap_data *) data;
+	struct sta_info *sta;
+	char name[20];
+	struct add_sta_proc_data *entry, *prev;
+
+	entry = ap->add_sta_proc_entries;
+	ap->add_sta_proc_entries = NULL;
+
+	while (entry) {
+		spin_lock_bh(&ap->sta_table_lock);
+		sta = ap_get_sta(ap, entry->addr);
+		if (sta)
+			atomic_inc(&sta->users);
+		spin_unlock_bh(&ap->sta_table_lock);
+
+		if (sta) {
+			sprintf(name, MACSTR, MAC2STR(sta->addr));
+			sta->proc = create_proc_read_entry(
+				name, 0, ap->proc,
+				prism2_sta_proc_read, sta);
+
+			atomic_dec(&sta->users);
+		}
+
+		prev = entry;
+		entry = entry->next;
+		kfree(prev);
+	}
+
+#ifndef NEW_MODULE_CODE
+	MOD_DEC_USE_COUNT;
+#endif
+}
+
+
+static struct sta_info * ap_add_sta(struct ap_data *ap, u8 *addr)
+{
+	struct sta_info *sta;
+
+	sta = (struct sta_info *)
+		kmalloc(sizeof(struct sta_info), GFP_ATOMIC);
+	if (sta == NULL) {
+		PDEBUG(DEBUG_AP, "AP: kmalloc failed\n");
+		return NULL;
+	}
+
+	/* initialize STA info data */
+	memset(sta, 0, sizeof(struct sta_info));
+	sta->local = ap->local;
+	skb_queue_head_init(&sta->tx_buf);
+	memcpy(sta->addr, addr, ETH_ALEN);
+
+	atomic_inc(&sta->users);
+	spin_lock_bh(&ap->sta_table_lock);
+	list_add(&sta->list, &ap->sta_list);
+	ap->num_sta++;
+	ap_sta_hash_add(ap, sta);
+	spin_unlock_bh(&ap->sta_table_lock);
+
+	if (ap->proc) {
+		struct add_sta_proc_data *entry;
+		/* schedule a non-interrupt context process to add a procfs
+		 * entry for the STA since procfs code use GFP_KERNEL */
+		entry = kmalloc(sizeof(*entry), GFP_ATOMIC);
+		if (entry) {
+			memcpy(entry->addr, sta->addr, ETH_ALEN);
+			entry->next = ap->add_sta_proc_entries;
+			ap->add_sta_proc_entries = entry;
+			PRISM2_SCHEDULE_TASK(&ap->add_sta_proc_queue);
+		} else
+			printk(KERN_DEBUG "Failed to add STA proc data\n");
+	}
+
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+	init_timer(&sta->timer);
+	sta->timer.expires = jiffies + ap->max_inactivity;
+	sta->timer.data = (unsigned long) sta;
+	sta->timer.function = ap_handle_timer;
+	if (!ap->local->hostapd)
+		add_timer(&sta->timer);
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+
+	return sta;
+}
+
+
+static int ap_tx_rate_ok(int rateidx, struct sta_info *sta,
+			 local_info_t *local)
+{
+	if (rateidx > sta->tx_max_rate ||
+	    !(sta->tx_supp_rates & (1 << rateidx)))
+		return 0;
+
+	if (local->tx_rate_control != 0 &&
+	    !(local->tx_rate_control & (1 << rateidx)))
+		return 0;
+
+	return 1;
+}
+
+
+static void prism2_check_tx_rates(struct sta_info *sta)
+{
+	int i;
+
+	sta->tx_supp_rates = 0;
+	for (i = 0; i < sizeof(sta->supported_rates); i++) {
+		if ((sta->supported_rates[i] & 0x7f) == 2)
+			sta->tx_supp_rates |= WLAN_RATE_1M;
+		if ((sta->supported_rates[i] & 0x7f) == 4)
+			sta->tx_supp_rates |= WLAN_RATE_2M;
+		if ((sta->supported_rates[i] & 0x7f) == 11)
+			sta->tx_supp_rates |= WLAN_RATE_5M5;
+		if ((sta->supported_rates[i] & 0x7f) == 22)
+			sta->tx_supp_rates |= WLAN_RATE_11M;
+	}
+	sta->tx_max_rate = sta->tx_rate = sta->tx_rate_idx = 0;
+	if (sta->tx_supp_rates & WLAN_RATE_1M) {
+		sta->tx_max_rate = 0;
+		if (ap_tx_rate_ok(0, sta, sta->local)) {
+			sta->tx_rate = 10;
+			sta->tx_rate_idx = 0;
+		}
+	}
+	if (sta->tx_supp_rates & WLAN_RATE_2M) {
+		sta->tx_max_rate = 1;
+		if (ap_tx_rate_ok(1, sta, sta->local)) {
+			sta->tx_rate = 20;
+			sta->tx_rate_idx = 1;
+		}
+	}
+	if (sta->tx_supp_rates & WLAN_RATE_5M5) {
+		sta->tx_max_rate = 2;
+		if (ap_tx_rate_ok(2, sta, sta->local)) {
+			sta->tx_rate = 55;
+			sta->tx_rate_idx = 2;
+		}
+	}
+	if (sta->tx_supp_rates & WLAN_RATE_11M) {
+		sta->tx_max_rate = 3;
+		if (ap_tx_rate_ok(3, sta, sta->local)) {
+			sta->tx_rate = 110;
+			sta->tx_rate_idx = 3;
+		}
+	}
+}
+
+
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+
+static void ap_crypt_init(struct ap_data *ap)
+{
+	ap->crypt = hostap_get_crypto_ops("WEP");
+
+	if (ap->crypt) {
+		if (ap->crypt->init) {
+			ap->crypt_priv = ap->crypt->init();
+			if (ap->crypt_priv == NULL)
+				ap->crypt = NULL;
+			else {
+				u8 key[WEP_KEY_LEN];
+				get_random_bytes(key, WEP_KEY_LEN);
+				ap->crypt->set_key(0, key, WEP_KEY_LEN,
+						   ap->crypt_priv);
+			}
+		}
+	}
+
+	if (ap->crypt == NULL) {
+		printk(KERN_WARNING "AP could not initialize WEP: load module "
+		       "hostap_crypt_wep.o\n");
+	}
+}
+
+
+/* Generate challenge data for shared key authentication. IEEE 802.11 specifies
+ * that WEP algorithm is used for generating challange. This should be unique,
+ * but otherwise there is not really need for randomness etc. Initialize WEP
+ * with pseudo random key and then use increasing IV to get unique challenge
+ * streams.
+ *
+ * Called only as a scheduled task for pending AP frames.
+ */
+static char * ap_auth_make_challenge(struct ap_data *ap)
+{
+	char *tmpbuf;
+	int olen;
+
+	if (ap->crypt == NULL) {
+		ap_crypt_init(ap);
+		if (ap->crypt == NULL)
+			return NULL;
+	}
+
+	tmpbuf = (char *) kmalloc(WLAN_AUTH_CHALLENGE_LEN +
+				  ap->crypt->extra_prefix_len +
+				  ap->crypt->extra_postfix_len,
+				  GFP_ATOMIC);
+	if (tmpbuf == NULL) {
+		PDEBUG(DEBUG_AP, "AP: kmalloc failed for challenge\n");
+		return NULL;
+	}
+	memset(tmpbuf, 0, WLAN_AUTH_CHALLENGE_LEN +
+	       ap->crypt->extra_prefix_len + ap->crypt->extra_postfix_len);
+	olen = ap->crypt->encrypt(tmpbuf, WLAN_AUTH_CHALLENGE_LEN,
+				  ap->crypt_priv);
+	if (olen < 0) {
+		kfree(tmpbuf);
+		return NULL;
+	}
+	memmove(tmpbuf, tmpbuf + 4, WLAN_AUTH_CHALLENGE_LEN);
+	return tmpbuf;
+}
+
+
+/* Called only as a scheduled task for pending AP frames. */
+static void handle_authen(local_info_t *local, struct sk_buff *skb,
+			  struct hostap_80211_rx_status *rx_stats)
+{
+	struct net_device *dev = local->dev;
+	struct hostap_ieee80211_hdr *hdr =
+		(struct hostap_ieee80211_hdr *) skb->data;
+	struct ap_data *ap = local->ap;
+	char body[8 + WLAN_AUTH_CHALLENGE_LEN], *challenge = NULL;
+	int len, olen;
+	u16 auth_alg, auth_transaction, status_code, *pos;
+	u16 resp = WLAN_STATUS_SUCCESS, fc;
+	struct sta_info *sta = NULL;
+	struct prism2_crypt_data *crypt;
+	char *txt = "";
+
+	len = skb->len - IEEE80211_MGMT_HDR_LEN;
+
+	fc = le16_to_cpu(hdr->frame_control);
+
+	if (len < 6) {
+		PDEBUG(DEBUG_AP, "%s: handle_authen - too short payload "
+		       "(len=%d) from " MACSTR "\n", dev->name, len,
+		       MAC2STR(hdr->addr2));
+		return;
+	}
+
+	spin_lock_bh(&local->ap->sta_table_lock);
+	sta = ap_get_sta(local->ap, hdr->addr2);
+	if (sta)
+		atomic_inc(&sta->users);
+	spin_unlock_bh(&local->ap->sta_table_lock);
+
+	if (sta && sta->crypt)
+		crypt = sta->crypt;
+	else
+		crypt = local->crypt;
+
+	if (crypt && local->host_decrypt && (fc & WLAN_FC_ISWEP)) {
+		atomic_inc(&crypt->refcnt);
+		olen = crypt->ops->decrypt(
+			(u8 *) (skb->data + IEEE80211_MGMT_HDR_LEN), len,
+			crypt->priv);
+		atomic_dec(&crypt->refcnt);
+		if (olen < 0) {
+			if (sta)
+				atomic_dec(&sta->users);
+			PDEBUG(DEBUG_AP, "%s: handle_authen: auth frame from "
+			       "STA " MACSTR " could not be decrypted\n",
+			       dev->name, MAC2STR(hdr->addr2));
+			return;
+		}
+		if (olen < 6) {
+			PDEBUG(DEBUG_AP, "%s: handle_authen - too short "
+			       "payload (len=%d, decrypted len=%d) from "
+			       MACSTR "\n",
+			       dev->name, len, olen, MAC2STR(hdr->addr2));
+			return;
+		}
+		len = olen;
+	}
+
+	pos = (u16 *) (skb->data + IEEE80211_MGMT_HDR_LEN);
+	auth_alg = __le16_to_cpu(*pos);
+	pos++;
+	auth_transaction = __le16_to_cpu(*pos);
+	pos++;
+	status_code = __le16_to_cpu(*pos);
+	pos++;
+
+	if (ap_control_mac_deny(&ap->mac_restrictions, hdr->addr2)) {
+		txt = "authentication denied";
+		resp = WLAN_STATUS_UNSPECIFIED_FAILURE;
+		goto fail;
+	}
+
+	if (((local->auth_algs & PRISM2_AUTH_OPEN) &&
+	     auth_alg == WLAN_AUTH_OPEN) ||
+	    ((local->auth_algs & PRISM2_AUTH_SHARED_KEY) &&
+	     crypt && auth_alg == WLAN_AUTH_SHARED_KEY)) {
+	} else {
+		txt = "unsupported algorithm";
+		resp = WLAN_STATUS_NOT_SUPPORTED_AUTH_ALG;
+		goto fail;
+	}
+
+	if (len >= 8) {
+		u8 *u = (u8 *) pos;
+		if (*u == WLAN_EID_CHALLENGE) {
+			if (*(u + 1) != WLAN_AUTH_CHALLENGE_LEN) {
+				txt = "invalid challenge len";
+				resp = WLAN_STATUS_CHALLENGE_FAIL;
+				goto fail;
+			}
+			if (len - 8 < WLAN_AUTH_CHALLENGE_LEN) {
+				txt = "challenge underflow";
+				resp = WLAN_STATUS_CHALLENGE_FAIL;
+				goto fail;
+			}
+			challenge = (char *) (u + 2);
+		}
+	}
+
+	if (sta && sta->ap) {
+		if (time_after(jiffies, sta->u.ap.last_beacon +
+			       (10 * sta->listen_interval * HZ) / 1024)) {
+			PDEBUG(DEBUG_AP, "%s: no beacons received for a while,"
+			       " assuming AP " MACSTR " is now STA\n",
+			       dev->name, MAC2STR(sta->addr));
+			sta->ap = 0;
+			sta->flags = 0;
+			sta->u.sta.challenge = NULL;
+		} else {
+			txt = "AP trying to authenticate?";
+			resp = WLAN_STATUS_UNSPECIFIED_FAILURE;
+			goto fail;
+		}
+	}
+
+	if ((auth_alg == WLAN_AUTH_OPEN && auth_transaction == 1) ||
+	    (auth_alg == WLAN_AUTH_SHARED_KEY &&
+	     (auth_transaction == 1 ||
+	      (auth_transaction == 3 && sta != NULL &&
+	       sta->u.sta.challenge != NULL)))) {
+	} else {
+		txt = "unknown authentication transaction number";
+		resp = WLAN_STATUS_UNKNOWN_AUTH_TRANSACTION;
+		goto fail;
+	}
+
+	if (sta == NULL) {
+		txt = "new STA";
+
+		if (local->ap->num_sta >= MAX_STA_COUNT) {
+			/* FIX: might try to remove some old STAs first? */
+			txt = "no more room for new STAs";
+			resp = WLAN_STATUS_UNSPECIFIED_FAILURE;
+			goto fail;
+		}
+
+		sta = ap_add_sta(local->ap, hdr->addr2);
+		if (sta == NULL) {
+			txt = "ap_add_sta failed";
+			resp = WLAN_STATUS_UNSPECIFIED_FAILURE;
+			goto fail;
+		}
+	}
+
+	hostap_ap_update_sq(sta, rx_stats);
+
+	switch (auth_alg) {
+	case WLAN_AUTH_OPEN:
+		txt = "authOK";
+		/* IEEE 802.11 standard is not completely clear about
+		 * whether STA is considered authenticated after
+		 * authentication OK frame has been send or after it
+		 * has been ACKed. In order to reduce interoperability
+		 * issues, mark the STA authenticated before ACK. */
+		sta->flags |= WLAN_STA_AUTH;
+		break;
+
+	case WLAN_AUTH_SHARED_KEY:
+		if (auth_transaction == 1) {
+			if (sta->u.sta.challenge == NULL) {
+				sta->u.sta.challenge =
+					ap_auth_make_challenge(local->ap);
+				if (sta->u.sta.challenge == NULL) {
+					resp = WLAN_STATUS_UNSPECIFIED_FAILURE;
+					goto fail;
+				}
+			}
+		} else {
+			if (sta->u.sta.challenge == NULL ||
+			    challenge == NULL ||
+			    memcmp(sta->u.sta.challenge, challenge,
+				   WLAN_AUTH_CHALLENGE_LEN) != 0 ||
+			    !(fc & WLAN_FC_ISWEP)) {
+				txt = "challenge response incorrect";
+				resp = WLAN_STATUS_CHALLENGE_FAIL;
+				goto fail;
+			}
+
+			txt = "challenge OK - authOK";
+			/* IEEE 802.11 standard is not completely clear about
+			 * whether STA is considered authenticated after
+			 * authentication OK frame has been send or after it
+			 * has been ACKed. In order to reduce interoperability
+			 * issues, mark the STA authenticated before ACK. */
+			sta->flags |= WLAN_STA_AUTH;
+			kfree(sta->u.sta.challenge);
+			sta->u.sta.challenge = NULL;
+		}
+		break;
+	}
+
+ fail:
+	pos = (u16 *) body;
+	*pos = cpu_to_le16(auth_alg);
+	pos++;
+	*pos = cpu_to_le16(auth_transaction + 1);
+	pos++;
+	*pos = cpu_to_le16(resp); /* status_code */
+	pos++;
+	olen = 6;
+
+	if (resp == WLAN_STATUS_SUCCESS && sta != NULL &&
+	    sta->u.sta.challenge != NULL &&
+	    auth_alg == WLAN_AUTH_SHARED_KEY && auth_transaction == 1) {
+		u8 *tmp = (u8 *) pos;
+		*tmp++ = WLAN_EID_CHALLENGE;
+		*tmp++ = WLAN_AUTH_CHALLENGE_LEN;
+		pos++;
+		memcpy(pos, sta->u.sta.challenge, WLAN_AUTH_CHALLENGE_LEN);
+		olen += 2 + WLAN_AUTH_CHALLENGE_LEN;
+	}
+
+	prism2_send_mgmt(dev, WLAN_FC_TYPE_MGMT, WLAN_FC_STYPE_AUTH,
+			 body, olen, 1, hdr->addr2, ap->tx_callback_auth);
+
+	if (sta) {
+		sta->last_rx = jiffies;
+		atomic_dec(&sta->users);
+	}
+
+#if 0
+	PDEBUG(DEBUG_AP, "%s: " MACSTR " auth (alg=%d trans#=%d stat=%d len=%d"
+	       " fc=%04x) ==> %d (%s)\n", dev->name, MAC2STR(hdr->addr2),
+	       auth_alg, auth_transaction, status_code, len, fc, resp, txt);
+#endif
+}
+
+
+/* Called only as a scheduled task for pending AP frames. */
+static void handle_assoc(local_info_t *local, struct sk_buff *skb,
+			 struct hostap_80211_rx_status *rx_stats, int reassoc)
+{
+	struct net_device *dev = local->dev;
+	struct hostap_ieee80211_hdr *hdr =
+		(struct hostap_ieee80211_hdr *) skb->data;
+	char body[12], *p, *lpos;
+	int len, left;
+	u16 *pos;
+	u16 resp = WLAN_STATUS_SUCCESS;
+	struct sta_info *sta = NULL;
+	int send_deauth = 0;
+	char *txt = "";
+	u8 prev_ap[ETH_ALEN];
+
+	left = len = skb->len - IEEE80211_MGMT_HDR_LEN;
+
+	if (len < (reassoc ? 10 : 4)) {
+		PDEBUG(DEBUG_AP, "%s: handle_assoc - too short payload "
+		       "(len=%d, reassoc=%d) from " MACSTR "\n",
+		       dev->name, len, reassoc, MAC2STR(hdr->addr2));
+		return;
+	}
+
+	spin_lock_bh(&local->ap->sta_table_lock);
+	sta = ap_get_sta(local->ap, hdr->addr2);
+	if (sta == NULL || (sta->flags & WLAN_STA_AUTH) == 0) {
+		spin_unlock_bh(&local->ap->sta_table_lock);
+		txt = "trying to associate before authentication";
+		send_deauth = 1;
+		resp = WLAN_STATUS_UNSPECIFIED_FAILURE;
+		sta = NULL; /* do not decrement sta->users */
+		goto fail;
+	}
+	atomic_inc(&sta->users);
+	spin_unlock_bh(&local->ap->sta_table_lock);
+
+	hostap_ap_update_sq(sta, rx_stats);
+
+	pos = (u16 *) (skb->data + IEEE80211_MGMT_HDR_LEN);
+	sta->capability = __le16_to_cpu(*pos);
+	pos++; left -= 2;
+	sta->listen_interval = __le16_to_cpu(*pos);
+	pos++; left -= 2;
+
+	if (reassoc) {
+		memcpy(prev_ap, pos, ETH_ALEN);
+		pos++; pos++; pos++; left -= 6;
+	} else
+		memset(prev_ap, 0, ETH_ALEN);
+
+	if (left >= 2) {
+		unsigned int ileft;
+		unsigned char *u = (unsigned char *) pos;
+
+		if (*u == WLAN_EID_SSID) {
+			u++; left--;
+			ileft = *u;
+			u++; left--;
+
+			if (ileft > left || ileft > MAX_SSID_LEN) {
+				txt = "SSID overflow";
+				resp = WLAN_STATUS_UNSPECIFIED_FAILURE;
+				goto fail;
+			}
+
+			if (ileft != strlen(local->essid) ||
+			    memcmp(local->essid, u, ileft) != 0) {
+				txt = "not our SSID";
+				resp = WLAN_STATUS_ASSOC_DENIED_UNSPEC;
+				goto fail;
+			}
+
+			u += ileft;
+			left -= ileft;
+		}
+
+		if (left >= 2 && *u == WLAN_EID_SUPP_RATES) {
+			u++; left--;
+			ileft = *u;
+			u++; left--;
+			
+			if (ileft > left || ileft == 0 ||
+			    ileft > WLAN_SUPP_RATES_MAX) {
+				txt = "SUPP_RATES len error";
+				resp = WLAN_STATUS_UNSPECIFIED_FAILURE;
+				goto fail;
+			}
+
+			memset(sta->supported_rates, 0,
+			       sizeof(sta->supported_rates));
+			memcpy(sta->supported_rates, u, ileft);
+			prism2_check_tx_rates(sta);
+
+			u += ileft;
+			left -= ileft;
+		}
+
+		if (left > 0) {
+			PDEBUG(DEBUG_AP, "%s: assoc from " MACSTR " with extra"
+			       " data (%d bytes) [",
+			       dev->name, MAC2STR(hdr->addr2), left);
+			while (left > 0) {
+				PDEBUG2(DEBUG_AP, "<%02x>", *u);
+				u++; left--;
+			}
+			PDEBUG2(DEBUG_AP, "]\n");
+		}
+	} else {
+		txt = "frame underflow";
+		resp = WLAN_STATUS_UNSPECIFIED_FAILURE;
+		goto fail;
+	}
+
+	/* get a unique AID */
+	if (sta->aid > 0)
+		txt = "OK, old AID";
+	else {
+		spin_lock_bh(&local->ap->sta_table_lock);
+		for (sta->aid = 1; sta->aid <= MAX_AID_TABLE_SIZE; sta->aid++)
+			if (local->ap->sta_aid[sta->aid - 1] == NULL)
+				break;
+		if (sta->aid > MAX_AID_TABLE_SIZE) {
+			sta->aid = 0;
+			spin_unlock_bh(&local->ap->sta_table_lock);
+			resp = WLAN_STATUS_AP_UNABLE_TO_HANDLE_NEW_STA;
+			txt = "no room for more AIDs";
+		} else {
+			local->ap->sta_aid[sta->aid - 1] = sta;
+			spin_unlock_bh(&local->ap->sta_table_lock);
+			txt = "OK, new AID";
+		}
+	}
+
+ fail:
+	pos = (u16 *) body;
+
+	if (send_deauth) {
+		*pos = __constant_cpu_to_le16(
+			WLAN_REASON_STA_REQ_ASSOC_WITHOUT_AUTH);
+		pos++;
+	} else {
+		/* FIX: CF-Pollable and CF-PollReq should be set to match the
+		 * values in beacons/probe responses */
+		/* FIX: how about privacy and WEP? */
+		/* capability */
+		*pos = __constant_cpu_to_le16(WLAN_CAPABILITY_ESS);
+		pos++;
+
+		/* status_code */
+		*pos = __cpu_to_le16(resp);
+		pos++;
+
+		*pos = __cpu_to_le16((sta && sta->aid > 0 ? sta->aid : 0) |
+				     BIT(14) | BIT(15)); /* AID */
+		pos++;
+
+		/* Supported rates (Information element) */
+		p = (char *) pos;
+		*p++ = WLAN_EID_SUPP_RATES;
+		lpos = p;
+		*p++ = 0; /* len */
+		if (local->tx_rate_control & WLAN_RATE_1M) {
+			*p++ = local->basic_rates & WLAN_RATE_1M ? 0x82 : 0x02;
+			(*lpos)++;
+		}
+		if (local->tx_rate_control & WLAN_RATE_2M) {
+			*p++ = local->basic_rates & WLAN_RATE_2M ? 0x84 : 0x04;
+			(*lpos)++;
+		}
+		if (local->tx_rate_control & WLAN_RATE_5M5) {
+			*p++ = local->basic_rates & WLAN_RATE_5M5 ?
+				0x8b : 0x0b;
+			(*lpos)++;
+		}
+		if (local->tx_rate_control & WLAN_RATE_11M) {
+			*p++ = local->basic_rates & WLAN_RATE_11M ?
+				0x96 : 0x16;
+			(*lpos)++;
+		}
+		pos = (u16 *) p;
+	}
+
+	prism2_send_mgmt(dev, WLAN_FC_TYPE_MGMT,
+			 (send_deauth ? WLAN_FC_STYPE_DEAUTH :
+			  (reassoc ? WLAN_FC_STYPE_REASSOC_RESP :
+			   WLAN_FC_STYPE_ASSOC_RESP)),
+			 body, (u8 *) pos - (u8 *) body, 1,
+			 hdr->addr2,
+			 send_deauth ? 0 : local->ap->tx_callback_assoc);
+
+	if (sta) {
+		if (resp == WLAN_STATUS_SUCCESS) {
+			sta->last_rx = jiffies;
+			/* STA will be marked associated from TX callback, if
+			 * AssocResp is ACKed */
+		}
+		atomic_dec(&sta->users);
+	}
+
+#if 0
+	PDEBUG(DEBUG_AP, "%s: " MACSTR " %sassoc (len=%d prev_ap=" MACSTR
+	       ") => %d(%d) (%s)\n",
+	       dev->name, MAC2STR(hdr->addr2), reassoc ? "re" : "", len,
+	       MAC2STR(prev_ap), resp, send_deauth, txt);
+#endif
+}
+
+
+/* Called only as a scheduled task for pending AP frames. */
+static void handle_deauth(local_info_t *local, struct sk_buff *skb,
+			  struct hostap_80211_rx_status *rx_stats)
+{
+	struct net_device *dev = local->dev;
+	struct hostap_ieee80211_hdr *hdr =
+		(struct hostap_ieee80211_hdr *) skb->data;
+	char *body = (char *) (skb->data + IEEE80211_MGMT_HDR_LEN);
+	int len;
+	u16 reason_code, *pos;
+	struct sta_info *sta = NULL;
+
+	len = skb->len - IEEE80211_MGMT_HDR_LEN;
+
+	if (len < 2) {
+		printk("handle_deauth - too short payload (len=%d)\n", len);
+		return;
+	}
+
+	pos = (u16 *) body;
+	reason_code = __le16_to_cpu(*pos);
+
+	PDEBUG(DEBUG_AP, "%s: deauthentication: " MACSTR " len=%d, "
+	       "reason_code=%d\n", dev->name, MAC2STR(hdr->addr2), len,
+	       reason_code);
+
+	spin_lock_bh(&local->ap->sta_table_lock);
+	sta = ap_get_sta(local->ap, hdr->addr2);
+	if (sta != NULL) {
+		if ((sta->flags & WLAN_STA_ASSOC) && !sta->ap)
+			hostap_event_expired_sta(local->dev, sta);
+		sta->flags &= ~(WLAN_STA_AUTH | WLAN_STA_ASSOC);
+		hostap_ap_update_sq(sta, rx_stats);
+	}
+	spin_unlock_bh(&local->ap->sta_table_lock);
+	if (sta == NULL) {
+		printk("%s: deauthentication from " MACSTR ", "
+	       "reason_code=%d, but STA not authenticated\n", dev->name,
+		       MAC2STR(hdr->addr2), reason_code);
+	}
+}
+
+
+/* Called only as a scheduled task for pending AP frames. */
+static void handle_disassoc(local_info_t *local, struct sk_buff *skb,
+			    struct hostap_80211_rx_status *rx_stats)
+{
+	struct net_device *dev = local->dev;
+	struct hostap_ieee80211_hdr *hdr =
+		(struct hostap_ieee80211_hdr *) skb->data;
+	char *body = skb->data + IEEE80211_MGMT_HDR_LEN;
+	int len;
+	u16 reason_code, *pos;
+	struct sta_info *sta = NULL;
+
+	len = skb->len - IEEE80211_MGMT_HDR_LEN;
+
+	if (len < 2) {
+		printk("handle_disassoc - too short payload (len=%d)\n", len);
+		return;
+	}
+
+	pos = (u16 *) body;
+	reason_code = __le16_to_cpu(*pos);
+
+	PDEBUG(DEBUG_AP, "%s: disassociation: " MACSTR " len=%d, "
+	       "reason_code=%d\n", dev->name, MAC2STR(hdr->addr2), len,
+	       reason_code);
+
+	spin_lock_bh(&local->ap->sta_table_lock);
+	sta = ap_get_sta(local->ap, hdr->addr2);
+	if (sta != NULL) {
+		if ((sta->flags & WLAN_STA_ASSOC) && !sta->ap)
+			hostap_event_expired_sta(local->dev, sta);
+		sta->flags &= ~WLAN_STA_ASSOC;
+		hostap_ap_update_sq(sta, rx_stats);
+	}
+	spin_unlock_bh(&local->ap->sta_table_lock);
+	if (sta == NULL) {
+		printk("%s: disassociation from " MACSTR ", "
+		       "reason_code=%d, but STA not authenticated\n",
+		       dev->name, MAC2STR(hdr->addr2), reason_code);
+	}
+}
+
+
+/* Called only as a scheduled task for pending AP frames. */
+static void ap_handle_data_nullfunc(local_info_t *local,
+				    struct hostap_ieee80211_hdr *hdr)
+{
+	struct net_device *dev = local->dev;
+
+	/* some STA f/w's seem to require control::ACK frame for
+	 * data::nullfunc, but at least Prism2 station f/w version 0.8.0 does
+	 * not send this..
+	 * send control::ACK for the data::nullfunc */
+
+	printk(KERN_DEBUG "Sending control::ACK for data::nullfunc\n");
+	prism2_send_mgmt(dev, WLAN_FC_TYPE_CTRL, WLAN_FC_STYPE_ACK,
+			 NULL, 0, 0, hdr->addr2, 0);
+}
+
+
+/* Called only as a scheduled task for pending AP frames. */
+static void ap_handle_dropped_data(local_info_t *local,
+				   struct hostap_ieee80211_hdr *hdr)
+{
+	struct net_device *dev = local->dev;
+	struct sta_info *sta;
+	u16 reason;
+
+	spin_lock_bh(&local->ap->sta_table_lock);
+	sta = ap_get_sta(local->ap, hdr->addr2);
+	if (sta)
+		atomic_inc(&sta->users);
+	spin_unlock_bh(&local->ap->sta_table_lock);
+
+	if (sta != NULL && (sta->flags & WLAN_STA_ASSOC)) {
+		PDEBUG(DEBUG_AP, "ap_handle_dropped_data: STA is now okay?\n");
+		atomic_dec(&sta->users);
+		return;
+	}
+
+	reason = __constant_cpu_to_le16(
+		WLAN_REASON_CLASS3_FRAME_FROM_NONASSOC_STA);
+	prism2_send_mgmt(dev, WLAN_FC_TYPE_MGMT,
+			 ((sta == NULL || !(sta->flags & WLAN_STA_ASSOC)) ?
+			  WLAN_FC_STYPE_DEAUTH : WLAN_FC_STYPE_DISASSOC),
+			 (char *) &reason, sizeof(reason), 1,
+			 hdr->addr2, 0);
+
+	if (sta)
+		atomic_dec(&sta->users);
+}
+
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+
+
+/* Called only as a scheduled task for pending AP frames. */
+static void pspoll_send_buffered(local_info_t *local, struct sta_info *sta,
+				 struct sk_buff *skb)
+{
+	if (!(sta->flags & WLAN_STA_PS)) {
+		/* Station has moved to non-PS mode, so send all buffered
+		 * frames using normal device queue. */
+		dev_queue_xmit(skb);
+		return;
+	}
+
+	/* add a flag for hostap_handle_sta_tx() to know that this skb should
+	 * be passed through even though STA is using PS */
+	memcpy(skb->cb, AP_SKB_CB_MAGIC, AP_SKB_CB_MAGIC_LEN);
+	skb->cb[AP_SKB_CB_MAGIC_LEN] = AP_SKB_CB_BUFFERED_FRAME;
+	if (!skb_queue_empty(&sta->tx_buf)) {
+		/* indicate to STA that more frames follow */
+		skb->cb[AP_SKB_CB_MAGIC_LEN] |= AP_SKB_CB_ADD_MOREDATA;
+	}
+	if (skb->dev->hard_start_xmit(skb, skb->dev)) {
+		PDEBUG(DEBUG_AP, "%s: TX failed for buffered frame (PS Poll)"
+		       "\n", skb->dev->name);
+		dev_kfree_skb(skb);
+	}
+}
+
+
+/* Called only as a scheduled task for pending AP frames. */
+static void handle_pspoll(local_info_t *local,
+			  struct hostap_ieee80211_hdr *hdr,
+			  struct hostap_80211_rx_status *rx_stats)
+{
+	struct net_device *dev = local->dev;
+	struct sta_info *sta;
+	u16 aid;
+	struct sk_buff *skb;
+
+	PDEBUG(DEBUG_PS2, "handle_pspoll: BSSID=" MACSTR ", TA=" MACSTR
+	       " PWRMGT=%d\n",
+	       MAC2STR(hdr->addr1), MAC2STR(hdr->addr2),
+	       !!(le16_to_cpu(hdr->frame_control) & WLAN_FC_PWRMGT));
+
+	if (memcmp(hdr->addr1, dev->dev_addr, ETH_ALEN)) {
+		PDEBUG(DEBUG_AP, "handle_pspoll - addr1(BSSID)=" MACSTR
+		       " not own MAC\n", MAC2STR(hdr->addr1));
+		return;
+	}
+
+	aid = __le16_to_cpu(hdr->duration_id);
+	if ((aid & (BIT(15) | BIT(14))) != (BIT(15) | BIT(14))) {
+		PDEBUG(DEBUG_PS, "   PSPOLL and AID[15:14] not set\n");
+		return;
+	}
+	aid &= ~BIT(15) & ~BIT(14);
+	if (aid == 0 || aid > MAX_AID_TABLE_SIZE) {
+		PDEBUG(DEBUG_PS, "   invalid aid=%d\n", aid);
+		return;
+	}
+	PDEBUG(DEBUG_PS2, "   aid=%d\n", aid);
+
+	spin_lock_bh(&local->ap->sta_table_lock);
+	sta = ap_get_sta(local->ap, hdr->addr2);
+	if (sta)
+		atomic_inc(&sta->users);
+	spin_unlock_bh(&local->ap->sta_table_lock);
+
+	if (sta == NULL) {
+		PDEBUG(DEBUG_PS, "   STA not found\n");
+		return;
+	}
+	hostap_ap_update_sq(sta, rx_stats);
+	if (sta->aid != aid) {
+		PDEBUG(DEBUG_PS, "   received aid=%i does not match with "
+		       "assoc.aid=%d\n", aid, sta->aid);
+		return;
+	}
+
+	/* FIX: todo:
+	 * - add timeout for buffering (clear aid in TIM vector if buffer timed
+	 *   out (expiry time must be longer than ListenInterval for
+	 *   the corresponding STA; "8802-11: 11.2.1.9 AP aging function"
+	 * - what to do, if buffered, pspolled, and sent frame is not ACKed by
+	 *   sta; store buffer for later use and leave TIM aid bit set? use
+	 *   TX event to check whether frame was ACKed?
+	 */
+
+	while ((skb = skb_dequeue(&sta->tx_buf)) != NULL) {
+		/* send buffered frame .. */
+		PDEBUG(DEBUG_PS2, "Sending buffered frame to STA after PS POLL"
+		       " (buffer_count=%d)\n", skb_queue_len(&sta->tx_buf));
+
+		pspoll_send_buffered(local, sta, skb);
+
+		if (sta->flags & WLAN_STA_PS) {
+			/* send only one buffered packet per PS Poll */
+			/* FIX: should ignore further PS Polls until the
+			 * buffered packet that was just sent is acknowledged
+			 * (Tx or TxExc event) */
+			break;
+		}
+	}
+
+	if (skb_queue_empty(&sta->tx_buf)) {
+		/* try to clear aid from TIM */
+		if (!(sta->flags & WLAN_STA_TIM))
+			PDEBUG(DEBUG_PS2,  "Re-unsetting TIM for aid %d\n",
+			       aid);
+		hostap_set_tim(local, aid, 0);
+		sta->flags &= ~WLAN_STA_TIM;
+	}
+
+	atomic_dec(&sta->users);
+}
+
+
+void hostap_ap_update_sq(struct sta_info *sta,
+			 struct hostap_80211_rx_status *rx_stats)
+{
+	sta->last_rx_silence = rx_stats->noise;
+	sta->last_rx_signal = rx_stats->signal;
+	sta->last_rx_rate = rx_stats->rate;
+	sta->last_rx_updated = 7;
+	if (rx_stats->rate == 10)
+		sta->rx_count[0]++;
+	else if (rx_stats->rate == 20)
+		sta->rx_count[1]++;
+	else if (rx_stats->rate == 55)
+		sta->rx_count[2]++;
+	else if (rx_stats->rate == 110)
+		sta->rx_count[3]++;
+}
+
+
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+
+static void handle_wds_oper_queue(void *data)
+{
+	local_info_t *local = data;
+	struct wds_oper_data *entry, *prev;
+
+	spin_lock_bh(&local->lock);
+	entry = local->ap->wds_oper_entries;
+	local->ap->wds_oper_entries = NULL;
+	spin_unlock_bh(&local->lock);
+
+	while (entry) {
+		PDEBUG(DEBUG_AP, "%s: %s automatic WDS connection "
+		       "to AP " MACSTR "\n",
+		       local->dev->name,
+		       entry->type == WDS_ADD ? "adding" : "removing",
+		       MAC2STR(entry->addr));
+		if (entry->type == WDS_ADD)
+			prism2_wds_add(local, entry->addr, 0);
+		else if (entry->type == WDS_DEL)
+			prism2_wds_del(local, entry->addr, 0, 1);
+
+		prev = entry;
+		entry = entry->next;
+		kfree(prev);
+	}
+
+#ifndef NEW_MODULE_CODE
+	MOD_DEC_USE_COUNT;
+#endif
+}
+
+
+/* Called only as a scheduled task for pending AP frames. */
+static void handle_beacon(local_info_t *local, struct sk_buff *skb,
+			  struct hostap_80211_rx_status *rx_stats)
+{
+	struct hostap_ieee80211_hdr *hdr =
+		(struct hostap_ieee80211_hdr *) skb->data;
+	char *body = skb->data + IEEE80211_MGMT_HDR_LEN;
+	int len, left;
+	u16 *pos, beacon_int, capability;
+	char *ssid = NULL;
+	unsigned char *supp_rates = NULL;
+	int ssid_len = 0, supp_rates_len = 0;
+	struct sta_info *sta = NULL;
+	int new_sta = 0, channel = -1;
+
+	len = skb->len - IEEE80211_MGMT_HDR_LEN;
+
+	if (len < 8 + 2 + 2) {
+		printk(KERN_DEBUG "handle_beacon - too short payload "
+		       "(len=%d)\n", len);
+		return;
+	}
+
+	pos = (u16 *) body;
+	left = len;
+
+	/* Timestamp (8 octets) */
+	pos += 4; left -= 8;
+	/* Beacon interval (2 octets) */
+	beacon_int = __le16_to_cpu(*pos);
+	pos++; left -= 2;
+	/* Capability information (2 octets) */
+	capability = __le16_to_cpu(*pos);
+	pos++; left -= 2;
+
+	if (local->ap->ap_policy != AP_OTHER_AP_EVEN_IBSS &&
+	    capability & WLAN_CAPABILITY_IBSS)
+		return;
+
+	if (left >= 2) {
+		unsigned int ileft;
+		unsigned char *u = (unsigned char *) pos;
+
+		if (*u == WLAN_EID_SSID) {
+			u++; left--;
+			ileft = *u;
+			u++; left--;
+
+			if (ileft > left || ileft > MAX_SSID_LEN) {
+				PDEBUG(DEBUG_AP, "SSID: overflow\n");
+				return;
+			}
+
+			if (local->ap->ap_policy == AP_OTHER_AP_SAME_SSID &&
+			    (ileft != strlen(local->essid) ||
+			     memcmp(local->essid, u, ileft) != 0)) {
+				/* not our SSID */
+				return;
+			}
+
+			ssid = u;
+			ssid_len = ileft;
+
+			u += ileft;
+			left -= ileft;
+		}
+
+		if (*u == WLAN_EID_SUPP_RATES) {
+			u++; left--;
+			ileft = *u;
+			u++; left--;
+			
+			if (ileft > left || ileft == 0 || ileft > 8) {
+				PDEBUG(DEBUG_AP, " - SUPP_RATES len error\n");
+				return;
+			}
+
+			supp_rates = u;
+			supp_rates_len = ileft;
+
+			u += ileft;
+			left -= ileft;
+		}
+
+		if (*u == WLAN_EID_DS_PARAMS) {
+			u++; left--;
+			ileft = *u;
+			u++; left--;
+			
+			if (ileft > left || ileft != 1) {
+				PDEBUG(DEBUG_AP, " - DS_PARAMS len error\n");
+				return;
+			}
+
+			channel = *u;
+
+			u += ileft;
+			left -= ileft;
+		}
+	}
+
+	spin_lock_bh(&local->ap->sta_table_lock);
+	sta = ap_get_sta(local->ap, hdr->addr2);
+	if (sta != NULL)
+		atomic_inc(&sta->users);
+	spin_unlock_bh(&local->ap->sta_table_lock);
+
+	if (sta == NULL) {
+		/* add new AP */
+		new_sta = 1;
+		sta = ap_add_sta(local->ap, hdr->addr2);
+		if (sta == NULL) {
+			printk(KERN_INFO "prism2: kmalloc failed for AP "
+			       "data structure\n");
+			return;
+		}
+		hostap_event_new_sta(local->dev, sta);
+
+		/* mark APs authentication and associated for pseudo ad-hoc
+		 * style communication */
+		sta->flags = WLAN_STA_AUTH | WLAN_STA_ASSOC;
+
+		if (local->ap->autom_ap_wds) {
+			hostap_wds_link_oper(local, sta->addr, WDS_ADD);
+		}
+	}
+
+	sta->ap = 1;
+	if (ssid) {
+		sta->u.ap.ssid_len = ssid_len;
+		memcpy(sta->u.ap.ssid, ssid, ssid_len);
+		sta->u.ap.ssid[ssid_len] = '\0';
+	} else {
+		sta->u.ap.ssid_len = 0;
+		sta->u.ap.ssid[0] = '\0';
+	}
+	sta->u.ap.channel = channel;
+	sta->rx_packets++;
+	sta->rx_bytes += len;
+	sta->u.ap.last_beacon = sta->last_rx = jiffies;
+	sta->capability = capability;
+	sta->listen_interval = beacon_int;
+	hostap_ap_update_sq(sta, rx_stats);
+
+	atomic_dec(&sta->users);
+
+	if (new_sta) {
+		memset(sta->supported_rates, 0, sizeof(sta->supported_rates));
+		memcpy(sta->supported_rates, supp_rates, supp_rates_len);
+		prism2_check_tx_rates(sta);
+	}
+}
+
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+
+
+/* Called only as a tasklet. */
+static void handle_ap_item(local_info_t *local, struct sk_buff *skb,
+			   struct hostap_80211_rx_status *rx_stats)
+{
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+	struct net_device *dev = local->dev;
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+	u16 fc, type, stype;
+	struct hostap_ieee80211_hdr *hdr;
+
+	/* FIX: should give skb->len to handler functions and check that the
+	 * buffer is long enough */
+	hdr = (struct hostap_ieee80211_hdr *) skb->data;
+	fc = le16_to_cpu(hdr->frame_control);
+	type = WLAN_FC_GET_TYPE(fc);
+	stype = WLAN_FC_GET_STYPE(fc);
+
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+	if (!local->hostapd && type == WLAN_FC_TYPE_DATA) {
+		PDEBUG(DEBUG_AP, "handle_ap_item - data frame\n");
+
+		if (!(fc & WLAN_FC_TODS) || (fc & WLAN_FC_FROMDS)) {
+			if (stype == WLAN_FC_STYPE_NULLFUNC) {
+				/* no ToDS nullfunc seems to be used to check
+				 * AP association; so send reject message to
+				 * speed up re-association */
+				ap_handle_dropped_data(local, hdr);
+				goto done;
+			}
+			PDEBUG(DEBUG_AP, "   not ToDS frame (fc=0x%04x)\n",
+			       fc);
+			goto done;
+		}
+
+		if (memcmp(hdr->addr1, dev->dev_addr, ETH_ALEN)) {
+			PDEBUG(DEBUG_AP, "handle_ap_item - addr1(BSSID)="
+			       MACSTR " not own MAC\n",
+			       MAC2STR(hdr->addr1));
+			goto done;
+		}
+
+		if (local->ap->nullfunc_ack && stype == WLAN_FC_STYPE_NULLFUNC)
+			ap_handle_data_nullfunc(local, hdr);
+		else
+			ap_handle_dropped_data(local, hdr);
+		goto done;
+	}
+
+	if (type == WLAN_FC_TYPE_MGMT && stype == WLAN_FC_STYPE_BEACON) {
+		handle_beacon(local, skb, rx_stats);
+		goto done;
+	}
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+
+	if (type == WLAN_FC_TYPE_CTRL && stype == WLAN_FC_STYPE_PSPOLL) {
+		handle_pspoll(local, hdr, rx_stats);
+		goto done;
+	}
+
+	if (local->hostapd) {
+		PDEBUG(DEBUG_AP, "Unknown frame in AP queue: type=0x%02x "
+		       "subtype=0x%02x\n", type, stype);
+		goto done;
+	}
+
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+	if (type != WLAN_FC_TYPE_MGMT) {
+		PDEBUG(DEBUG_AP, "handle_ap_item - not a management frame?\n");
+		goto done;
+	}
+
+	if (memcmp(hdr->addr1, dev->dev_addr, ETH_ALEN)) {
+		PDEBUG(DEBUG_AP, "handle_ap_item - addr1(DA)=" MACSTR
+		       " not own MAC\n", MAC2STR(hdr->addr1));
+		goto done;
+	}
+
+	if (memcmp(hdr->addr3, dev->dev_addr, ETH_ALEN)) {
+		PDEBUG(DEBUG_AP, "handle_ap_item - addr3(BSSID)=" MACSTR
+		       " not own MAC\n", MAC2STR(hdr->addr3));
+		goto done;
+	}
+
+	switch (stype) {
+	case WLAN_FC_STYPE_ASSOC_REQ:
+		handle_assoc(local, skb, rx_stats, 0);
+		break;
+	case WLAN_FC_STYPE_ASSOC_RESP:
+		PDEBUG(DEBUG_AP, "==> ASSOC RESP (ignored)\n");
+		break;
+	case WLAN_FC_STYPE_REASSOC_REQ:
+		handle_assoc(local, skb, rx_stats, 1);
+		break;
+	case WLAN_FC_STYPE_REASSOC_RESP:
+		PDEBUG(DEBUG_AP, "==> REASSOC RESP (ignored)\n");
+		break;
+	case WLAN_FC_STYPE_ATIM:
+		PDEBUG(DEBUG_AP, "==> ATIM (ignored)\n");
+		break;
+	case WLAN_FC_STYPE_DISASSOC:
+		handle_disassoc(local, skb, rx_stats);
+		break;
+	case WLAN_FC_STYPE_AUTH:
+		handle_authen(local, skb, rx_stats);
+		break;
+	case WLAN_FC_STYPE_DEAUTH:
+		handle_deauth(local, skb, rx_stats);
+		break;
+	default:
+		PDEBUG(DEBUG_AP, "Unknown mgmt frame subtype 0x%02x\n", stype);
+		break;
+	}
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+
+ done:
+	dev_kfree_skb(skb);
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+void hostap_rx(struct net_device *dev, struct sk_buff *skb,
+	       struct hostap_80211_rx_status *rx_stats)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	u16 fc;
+	struct hostap_ieee80211_hdr *hdr;
+
+	if (skb->len < 16)
+		goto drop;
+
+	local->stats.rx_packets++;
+
+	hdr = (struct hostap_ieee80211_hdr *) skb->data;
+	fc = le16_to_cpu(hdr->frame_control);
+
+	if (local->ap->ap_policy == AP_OTHER_AP_SKIP_ALL &&
+	    WLAN_FC_GET_TYPE(fc) == WLAN_FC_TYPE_MGMT &&
+	    WLAN_FC_GET_STYPE(fc) == WLAN_FC_STYPE_BEACON)
+		goto drop;
+
+	skb->protocol = __constant_htons(ETH_P_HOSTAP);
+	handle_ap_item(local, skb, rx_stats);
+	return;
+
+ drop:
+	dev_kfree_skb(skb);
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+static void schedule_packet_send(local_info_t *local, struct sta_info *sta)
+{
+	struct sk_buff *skb;
+	struct hostap_ieee80211_hdr *hdr;
+	struct hostap_80211_rx_status rx_stats;
+
+	if (skb_queue_empty(&sta->tx_buf))
+		return;
+
+	skb = dev_alloc_skb(16);
+	if (skb == NULL) {
+		printk(KERN_DEBUG "%s: schedule_packet_send: skb alloc "
+		       "failed\n", local->dev->name);
+		return;
+	}
+
+	hdr = (struct hostap_ieee80211_hdr *) skb_put(skb, 16);
+
+	/* Generate a fake pspoll frame to start packet delivery */
+	hdr->frame_control = __constant_cpu_to_le16(
+		(WLAN_FC_TYPE_CTRL << 2) | (WLAN_FC_STYPE_PSPOLL << 4));
+	memcpy(hdr->addr1, local->dev->dev_addr, ETH_ALEN);
+	memcpy(hdr->addr2, sta->addr, ETH_ALEN);
+	hdr->duration_id = cpu_to_le16(sta->aid | BIT(15) | BIT(14));
+
+	PDEBUG(DEBUG_PS2, "%s: Scheduling buffered packet delivery for "
+	       "STA " MACSTR "\n", local->dev->name, MAC2STR(sta->addr));
+
+	skb->dev = local->dev;
+
+	memset(&rx_stats, 0, sizeof(rx_stats));
+	hostap_rx(local->dev, skb, &rx_stats);
+}
+
+
+#ifdef WIRELESS_EXT
+static int prism2_ap_get_sta_qual(local_info_t *local, struct sockaddr addr[],
+				  struct iw_quality qual[], int buf_size,
+				  int aplist)
+{
+	struct ap_data *ap = local->ap;
+	struct list_head *ptr;
+	int count = 0;
+
+	spin_lock_bh(&ap->sta_table_lock);
+
+	for (ptr = ap->sta_list.next; ptr != NULL && ptr != &ap->sta_list;
+	     ptr = ptr->next) {
+		struct sta_info *sta = (struct sta_info *) ptr;
+
+		if (aplist && !sta->ap)
+			continue;
+		addr[count].sa_family = ARPHRD_ETHER;
+		memcpy(addr[count].sa_data, sta->addr, ETH_ALEN);
+		if (sta->last_rx_silence == 0)
+			qual[count].qual = sta->last_rx_signal < 27 ?
+				0 : (sta->last_rx_signal - 27) * 92 / 127;
+		else
+			qual[count].qual = sta->last_rx_signal -
+				sta->last_rx_silence - 35;
+		qual[count].level = HFA384X_LEVEL_TO_dBm(sta->last_rx_signal);
+		qual[count].noise = HFA384X_LEVEL_TO_dBm(sta->last_rx_silence);
+		qual[count].updated = sta->last_rx_updated;
+
+		sta->last_rx_updated = 0;
+
+		count++;
+		if (count >= buf_size)
+			break;
+	}
+	spin_unlock_bh(&ap->sta_table_lock);
+
+	return count;
+}
+
+
+#if WIRELESS_EXT > 13
+/* Translate our list of Access Points & Stations to a card independant
+ * format that the Wireless Tools will understand - Jean II */
+static int prism2_ap_translate_scan(struct net_device *dev, char *buffer)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	struct ap_data *ap = local->ap;
+	struct list_head *ptr;
+	struct iw_event iwe;
+	char *current_ev = buffer;
+	char *end_buf = buffer + IW_SCAN_MAX_DATA;
+#if !defined(PRISM2_NO_KERNEL_IEEE80211_MGMT) && (WIRELESS_EXT > 14)
+	char buf[64];
+#endif
+
+	spin_lock_bh(&ap->sta_table_lock);
+
+	for (ptr = ap->sta_list.next; ptr != NULL && ptr != &ap->sta_list;
+	     ptr = ptr->next) {
+		struct sta_info *sta = (struct sta_info *) ptr;
+
+		/* First entry *MUST* be the AP MAC address */
+		memset(&iwe, 0, sizeof(iwe));
+		iwe.cmd = SIOCGIWAP;
+		iwe.u.ap_addr.sa_family = ARPHRD_ETHER;
+		memcpy(iwe.u.ap_addr.sa_data, sta->addr, ETH_ALEN);
+		iwe.len = IW_EV_ADDR_LEN;
+		current_ev = iwe_stream_add_event(current_ev, end_buf, &iwe,
+						  IW_EV_ADDR_LEN);
+
+		/* Use the mode to indicate if it's a station or
+		 * an Access Point */
+		memset(&iwe, 0, sizeof(iwe));
+		iwe.cmd = SIOCGIWMODE;
+		if (sta->ap)
+			iwe.u.mode = IW_MODE_MASTER;
+		else
+			iwe.u.mode = IW_MODE_INFRA;
+		iwe.len = IW_EV_UINT_LEN;
+		current_ev = iwe_stream_add_event(current_ev, end_buf, &iwe,
+						  IW_EV_UINT_LEN);
+
+		/* Some quality */
+		memset(&iwe, 0, sizeof(iwe));
+		iwe.cmd = IWEVQUAL;
+		if (sta->last_rx_silence == 0)
+			iwe.u.qual.qual = sta->last_rx_signal < 27 ?
+				0 : (sta->last_rx_signal - 27) * 92 / 127;
+		else
+			iwe.u.qual.qual = sta->last_rx_signal -
+				sta->last_rx_silence - 35;
+		iwe.u.qual.level = HFA384X_LEVEL_TO_dBm(sta->last_rx_signal);
+		iwe.u.qual.noise = HFA384X_LEVEL_TO_dBm(sta->last_rx_silence);
+		iwe.u.qual.updated = sta->last_rx_updated;
+		iwe.len = IW_EV_QUAL_LEN;
+		current_ev = iwe_stream_add_event(current_ev, end_buf, &iwe,
+						  IW_EV_QUAL_LEN);
+
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+		if (sta->ap) {
+			memset(&iwe, 0, sizeof(iwe));
+			iwe.cmd = SIOCGIWESSID;
+			iwe.u.data.length = sta->u.ap.ssid_len;
+			iwe.u.data.flags = 1;
+			current_ev = iwe_stream_add_point(current_ev, end_buf,
+							  &iwe,
+							  sta->u.ap.ssid);
+
+			memset(&iwe, 0, sizeof(iwe));
+			iwe.cmd = SIOCGIWENCODE;
+			if (sta->capability & WLAN_CAPABILITY_PRIVACY)
+				iwe.u.data.flags =
+					IW_ENCODE_ENABLED | IW_ENCODE_NOKEY;
+			else
+				iwe.u.data.flags = IW_ENCODE_DISABLED;
+			current_ev = iwe_stream_add_point(current_ev, end_buf,
+							  &iwe,
+							  sta->u.ap.ssid
+							  /* 0 byte memcpy */);
+
+			if (sta->u.ap.channel > 0 &&
+			    sta->u.ap.channel <= FREQ_COUNT) {
+				memset(&iwe, 0, sizeof(iwe));
+				iwe.cmd = SIOCGIWFREQ;
+				iwe.u.freq.m = freq_list[sta->u.ap.channel - 1]
+					* 100000;
+				iwe.u.freq.e = 1;
+				current_ev = iwe_stream_add_event(
+					current_ev, end_buf, &iwe,
+					IW_EV_FREQ_LEN);
+			}
+
+#if WIRELESS_EXT > 14
+			memset(&iwe, 0, sizeof(iwe));
+			iwe.cmd = IWEVCUSTOM;
+			sprintf(buf, "beacon_interval=%d",
+				sta->listen_interval);
+			iwe.u.data.length = strlen(buf);
+			current_ev = iwe_stream_add_point(current_ev, end_buf,
+							  &iwe, buf);
+#endif /* WIRELESS_EXT > 14 */
+		}
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+
+		sta->last_rx_updated = 0;
+
+		/* To be continued, we should make good use of IWEVCUSTOM */
+	}
+
+	spin_unlock_bh(&ap->sta_table_lock);
+
+	return current_ev - buffer;
+}
+#endif /* WIRELESS_EXT > 13 */
+#endif /* WIRELESS_EXT */
+
+
+static int prism2_hostapd_add_sta(struct ap_data *ap,
+				  struct prism2_hostapd_param *param)
+{
+	struct sta_info *sta;
+
+	spin_lock_bh(&ap->sta_table_lock);
+	sta = ap_get_sta(ap, param->sta_addr);
+	if (sta)
+		atomic_inc(&sta->users);
+	spin_unlock_bh(&ap->sta_table_lock);
+
+	if (sta == NULL) {
+		sta = ap_add_sta(ap, param->sta_addr);
+		if (sta == NULL)
+			return -1;
+	}
+
+	if (!(sta->flags & WLAN_STA_ASSOC) && !sta->ap && sta->local)
+		hostap_event_new_sta(sta->local->dev, sta);
+
+	sta->flags |= WLAN_STA_AUTH | WLAN_STA_ASSOC;
+	sta->last_rx = jiffies;
+	sta->aid = param->u.add_sta.aid;
+	sta->capability = param->u.add_sta.capability;
+	sta->tx_supp_rates = param->u.add_sta.tx_supp_rates;
+	if (sta->tx_supp_rates & WLAN_RATE_1M)
+		sta->supported_rates[0] = 2;
+	if (sta->tx_supp_rates & WLAN_RATE_2M)
+		sta->supported_rates[1] = 4;
+ 	if (sta->tx_supp_rates & WLAN_RATE_5M5)
+		sta->supported_rates[2] = 11;
+	if (sta->tx_supp_rates & WLAN_RATE_11M)
+		sta->supported_rates[3] = 22;
+	prism2_check_tx_rates(sta);
+	atomic_dec(&sta->users);
+	return 0;
+}
+
+
+static int prism2_hostapd_remove_sta(struct ap_data *ap,
+				     struct prism2_hostapd_param *param)
+{
+	struct sta_info *sta;
+
+	spin_lock_bh(&ap->sta_table_lock);
+	sta = ap_get_sta(ap, param->sta_addr);
+	if (sta) {
+		ap_sta_hash_del(ap, sta);
+		list_del(&sta->list);
+	}
+	spin_unlock_bh(&ap->sta_table_lock);
+
+	if (!sta)
+		return -ENOENT;
+
+	if ((sta->flags & WLAN_STA_ASSOC) && !sta->ap && sta->local)
+		hostap_event_expired_sta(sta->local->dev, sta);
+	ap_free_sta(ap, sta);
+
+	return 0;
+}
+
+
+static int prism2_hostapd_get_info_sta(struct ap_data *ap,
+				       struct prism2_hostapd_param *param)
+{
+	struct sta_info *sta;
+
+	spin_lock_bh(&ap->sta_table_lock);
+	sta = ap_get_sta(ap, param->sta_addr);
+	if (sta)
+		atomic_inc(&sta->users);
+	spin_unlock_bh(&ap->sta_table_lock);
+
+	if (!sta)
+		return -ENOENT;
+
+	param->u.get_info_sta.inactive_sec = (jiffies - sta->last_rx) / HZ;
+
+	atomic_dec(&sta->users);
+
+	return 1;
+}
+
+
+static int prism2_hostapd_set_flags_sta(struct ap_data *ap,
+					struct prism2_hostapd_param *param)
+{
+	struct sta_info *sta;
+
+	spin_lock_bh(&ap->sta_table_lock);
+	sta = ap_get_sta(ap, param->sta_addr);
+	if (sta) {
+		sta->flags |= param->u.set_flags_sta.flags_or;
+		sta->flags &= param->u.set_flags_sta.flags_and;
+	}
+	spin_unlock_bh(&ap->sta_table_lock);
+
+	if (!sta)
+		return -ENOENT;
+
+	return 0;
+}
+
+
+static int prism2_hostapd(struct ap_data *ap,
+			  struct prism2_hostapd_param *param)
+{
+	switch (param->cmd) {
+	case PRISM2_HOSTAPD_FLUSH:
+		ap_control_kickall(ap);
+		return 0;
+	case PRISM2_HOSTAPD_ADD_STA:
+		return prism2_hostapd_add_sta(ap, param);
+	case PRISM2_HOSTAPD_REMOVE_STA:
+		return prism2_hostapd_remove_sta(ap, param);
+	case PRISM2_HOSTAPD_GET_INFO_STA:
+		return prism2_hostapd_get_info_sta(ap, param);
+	case PRISM2_HOSTAPD_SET_FLAGS_STA:
+		return prism2_hostapd_set_flags_sta(ap, param);
+	default:
+		printk(KERN_WARNING "prism2_hostapd: unknown cmd=%d\n",
+		       param->cmd);
+		return -EOPNOTSUPP;
+	}
+}
+
+
+/* Update station info for host-based TX rate control and return current
+ * TX rate */
+static int ap_update_sta_tx_rate(struct sta_info *sta, struct net_device *dev)
+{
+	int ret = sta->tx_rate;
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+
+	sta->tx_count[sta->tx_rate_idx]++;
+	sta->tx_since_last_failure++;
+	sta->tx_consecutive_exc = 0;
+	if (sta->tx_since_last_failure >= WLAN_RATE_UPDATE_COUNT &&
+	    sta->tx_rate_idx < sta->tx_max_rate) {
+		/* use next higher rate */
+		int old_rate, new_rate;
+		old_rate = new_rate = sta->tx_rate_idx;
+		while (new_rate < sta->tx_max_rate) {
+			new_rate++;
+			if (ap_tx_rate_ok(new_rate, sta, local)) {
+				sta->tx_rate_idx = new_rate;
+				break;
+			}
+		}
+		if (old_rate != sta->tx_rate_idx) {
+			switch (sta->tx_rate_idx) {
+			case 0: sta->tx_rate = 10; break;
+			case 1: sta->tx_rate = 20; break;
+			case 2: sta->tx_rate = 55; break;
+			case 3: sta->tx_rate = 110; break;
+			default: sta->tx_rate = 0; break;
+			}
+			PDEBUG(DEBUG_AP, "%s: STA " MACSTR " TX rate raised to"
+			       " %d\n", dev->name, MAC2STR(sta->addr),
+			       sta->tx_rate);
+		}
+		sta->tx_since_last_failure = 0;
+	}
+
+	return ret;
+}
+
+
+/* Called only from software IRQ. Called for each TX frame prior possible
+ * encryption and transmit. */
+ap_tx_ret hostap_handle_sta_tx(local_info_t *local, struct sk_buff *skb,
+			       struct hfa384x_tx_frame *txdesc, int wds,
+			       int host_encrypt,
+			       struct prism2_crypt_data **crypt,
+			       void **sta_ptr)
+{
+	struct sta_info *sta = NULL;
+	int set_tim, ret;
+
+	ret = AP_TX_CONTINUE;
+	if (local->ap == NULL)
+		goto out;
+
+	if (txdesc->addr1[0] & 0x01) {
+		/* broadcast/multicast frame - no AP related processing */
+		goto out;
+	}
+
+	/* unicast packet - check whether destination STA is associated */
+	spin_lock(&local->ap->sta_table_lock);
+	sta = ap_get_sta(local->ap, txdesc->addr1);
+	if (sta)
+		atomic_inc(&sta->users);
+	spin_unlock(&local->ap->sta_table_lock);
+
+	if (local->iw_mode == IW_MODE_MASTER && sta == NULL && !wds) {
+		printk(KERN_DEBUG "AP: drop packet to non-associated STA "
+		       MACSTR "\n", MAC2STR(txdesc->addr1));
+		ret = AP_TX_DROP;
+		goto out;
+	}
+
+	if (sta == NULL)
+		goto out;
+
+	if (!(sta->flags & WLAN_STA_AUTHORIZED))
+		ret = AP_TX_CONTINUE_NOT_AUTHORIZED;
+
+	/* Set tx_rate if using host-based TX rate control */
+	if (!local->fw_tx_rate_control)
+		local->ap->last_tx_rate = txdesc->tx_rate =
+			ap_update_sta_tx_rate(sta, local->dev);
+
+	if (local->iw_mode != IW_MODE_MASTER)
+		goto out;
+
+	if (!(sta->flags & WLAN_STA_PS))
+		goto out;
+
+	if (memcmp(skb->cb, AP_SKB_CB_MAGIC, AP_SKB_CB_MAGIC_LEN) == 0) {
+		if (skb->cb[AP_SKB_CB_MAGIC_LEN] & AP_SKB_CB_ADD_MOREDATA) {
+			/* indicate to STA that more frames follow */
+			txdesc->frame_control |=
+				__constant_cpu_to_le16(WLAN_FC_MOREDATA);
+		}
+
+		if (skb->cb[AP_SKB_CB_MAGIC_LEN] & AP_SKB_CB_BUFFERED_FRAME) {
+			/* packet was already buffered and now send due to
+			 * PS poll, so do not rebuffer it */
+			goto out;
+		}
+	}
+
+	if (skb->len == 0 && skb->protocol == __constant_htons(ETH_P_HOSTAP) &&
+	    skb_headroom(skb) >= sizeof(*txdesc)) {
+		/* Copy original TX desc back to the skb so that prism2_tx()
+		 * is able to send it when STA wakes up. */
+		memcpy(skb_push(skb, sizeof(*txdesc)),
+		       txdesc, sizeof(*txdesc));
+	}
+	if (skb_queue_len(&sta->tx_buf) >= STA_MAX_TX_BUFFER) {
+		PDEBUG(DEBUG_PS, "%s: No more space in STA (" MACSTR ")'s PS "
+		       "mode buffer\n", local->dev->name, MAC2STR(sta->addr));
+		/* Make sure that TIM is set for the station (it might not be
+		 * after AP wlan hw reset). */
+		hostap_set_tim(local, sta->aid, 1);
+		sta->flags |= WLAN_STA_TIM;
+		ret = AP_TX_DROP;
+		goto out;
+	}
+
+	/* STA in PS mode, buffer frame for later delivery */
+	set_tim = skb_queue_empty(&sta->tx_buf);
+	skb_queue_tail(&sta->tx_buf, skb);
+	/* FIX: could save RX time to skb and expire buffered frames after
+	 * some time if STA does not poll for them */
+
+	if (set_tim) {
+		if (sta->flags & WLAN_STA_TIM)
+			PDEBUG(DEBUG_PS2, "Re-setting TIM for aid %d\n",
+			       sta->aid);
+		hostap_set_tim(local, sta->aid, 1);
+		sta->flags |= WLAN_STA_TIM;
+	}
+
+	ret = AP_TX_BUFFERED;
+
+ out:
+	if (sta != NULL) {
+		if (ret == AP_TX_CONTINUE ||
+		    ret == AP_TX_CONTINUE_NOT_AUTHORIZED) {
+			sta->tx_packets++;
+			sta->tx_bytes += le16_to_cpu(txdesc->data_len) + 36;
+			sta->last_tx = jiffies;
+		}
+
+		if ((ret == AP_TX_CONTINUE ||
+		     ret == AP_TX_CONTINUE_NOT_AUTHORIZED) &&
+		    sta->crypt && host_encrypt) {
+			*crypt = sta->crypt;
+			*sta_ptr = sta; /* hostap_handle_sta_release() will be
+					 * called to release sta info later */
+		} else
+			atomic_dec(&sta->users);
+	}
+
+	return ret;
+}
+
+
+void hostap_handle_sta_release(void *ptr)
+{
+	struct sta_info *sta = ptr;
+	atomic_dec(&sta->users);
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+void hostap_handle_sta_tx_exc(local_info_t *local,
+			      struct hfa384x_tx_frame *txdesc)
+{
+	struct sta_info *sta;
+
+	spin_lock(&local->ap->sta_table_lock);
+	/* FIX: is addr1 correct for all frame types? */
+	sta = ap_get_sta(local->ap, txdesc->addr1);
+	if (!sta) {
+		spin_unlock(&local->ap->sta_table_lock);
+		PDEBUG(DEBUG_AP, "%s: Could not find STA " MACSTR " for this "
+		       "TX error (@%lu)\n",
+		       local->dev->name, MAC2STR(txdesc->addr1), jiffies);
+		return;
+	}
+
+	sta->tx_since_last_failure = 0;
+	sta->tx_consecutive_exc++;
+        
+	if (sta->tx_consecutive_exc >= WLAN_RATE_DECREASE_THRESHOLD &&
+	    sta->tx_rate_idx > 0 && txdesc->tx_rate <= sta->tx_rate) {
+		/* use next lower rate */
+		int old, rate;
+		old = rate = sta->tx_rate_idx;
+		while (rate > 0) {
+			rate--;
+			if (ap_tx_rate_ok(rate, sta, local)) {
+				sta->tx_rate_idx = rate;
+				break;
+			}
+		}
+		if (old != sta->tx_rate_idx) {
+			switch (sta->tx_rate_idx) {
+			case 0: sta->tx_rate = 10; break;
+			case 1: sta->tx_rate = 20; break;
+			case 2: sta->tx_rate = 55; break;
+			case 3: sta->tx_rate = 110; break;
+			default: sta->tx_rate = 0; break;
+			}
+			PDEBUG(DEBUG_AP, "%s: STA " MACSTR " TX rate lowered "
+			       "to %d\n", local->dev->name, MAC2STR(sta->addr),
+			       sta->tx_rate);
+		}
+		sta->tx_consecutive_exc = 0;
+	}
+	spin_unlock(&local->ap->sta_table_lock);
+}
+
+
+static void hostap_update_sta_ps2(local_info_t *local, struct sta_info *sta,
+				  int pwrmgt, int type, int stype)
+{
+	if (pwrmgt && !(sta->flags & WLAN_STA_PS)) {
+		sta->flags |= WLAN_STA_PS;
+		PDEBUG(DEBUG_PS2, "STA " MACSTR " changed to use PS "
+		       "mode (type=0x%02X, stype=0x%02X)\n",
+		       MAC2STR(sta->addr), type, stype);
+	} else if (!pwrmgt && (sta->flags & WLAN_STA_PS)) {
+		sta->flags &= ~WLAN_STA_PS;
+		PDEBUG(DEBUG_PS2, "STA " MACSTR " changed to not use "
+		       "PS mode (type=0x%02X, stype=0x%02X)\n",
+		       MAC2STR(sta->addr), type, stype);
+		if (type != WLAN_FC_TYPE_CTRL || stype != WLAN_FC_STYPE_PSPOLL)
+			schedule_packet_send(local, sta);
+	}
+}
+
+
+/* Called only as a tasklet (software IRQ). Called for each RX frame to update
+ * STA power saving state. pwrmgt is a flag from 802.11 frame_control field. */
+int hostap_update_sta_ps(local_info_t *local, struct hostap_ieee80211_hdr *hdr)
+{
+	struct sta_info *sta;
+	u16 fc;
+
+	spin_lock(&local->ap->sta_table_lock);
+	sta = ap_get_sta(local->ap, hdr->addr2);
+	if (sta)
+		atomic_inc(&sta->users);
+	spin_unlock(&local->ap->sta_table_lock);
+
+	if (!sta)
+		return -1;
+
+	fc = le16_to_cpu(hdr->frame_control);
+	hostap_update_sta_ps2(local, sta, fc & WLAN_FC_PWRMGT,
+			      WLAN_FC_GET_TYPE(fc), WLAN_FC_GET_STYPE(fc));
+
+	atomic_dec(&sta->users);
+	return 0;
+}
+
+
+/* Called only as a tasklet (software IRQ). Called for each RX frame after
+ * getting RX header and payload from hardware. */
+ap_rx_ret hostap_handle_sta_rx(local_info_t *local, struct net_device *dev,
+			       struct sk_buff *skb,
+			       struct hostap_80211_rx_status *rx_stats,
+			       int wds)
+{
+	int ret;
+	struct sta_info *sta;
+	u16 fc, type, stype;
+	struct hostap_ieee80211_hdr *hdr;
+
+	if (local->ap == NULL)
+		return AP_RX_CONTINUE;
+
+	hdr = (struct hostap_ieee80211_hdr *) skb->data;
+
+	fc = le16_to_cpu(hdr->frame_control);
+	type = WLAN_FC_GET_TYPE(fc);
+	stype = WLAN_FC_GET_STYPE(fc);
+
+	spin_lock(&local->ap->sta_table_lock);
+	sta = ap_get_sta(local->ap, hdr->addr2);
+	if (sta)
+		atomic_inc(&sta->users);
+	spin_unlock(&local->ap->sta_table_lock);
+
+	if (sta && !(sta->flags & WLAN_STA_AUTHORIZED))
+		ret = AP_RX_CONTINUE_NOT_AUTHORIZED;
+	else
+		ret = AP_RX_CONTINUE;
+
+
+	if (fc & WLAN_FC_TODS) {
+		if (!wds && (sta == NULL || !(sta->flags & WLAN_STA_ASSOC))) {
+			if (local->hostapd) {
+				prism2_rx_80211(local->apdev, skb, rx_stats,
+						PRISM2_RX_NON_ASSOC);
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+			} else {
+				printk(KERN_DEBUG "%s: dropped received packet"
+				       " from non-associated STA " MACSTR
+				       " (type=0x%02x, subtype=0x%02x)\n",
+				       dev->name, MAC2STR(hdr->addr2), type,
+				       stype);
+				hostap_rx(dev, skb, rx_stats);
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+			}
+			ret = AP_RX_EXIT;
+			goto out;
+		}
+	} else if (fc & WLAN_FC_FROMDS) {
+		if (!wds) {
+			/* FromDS frame - not for us; probably
+			 * broadcast/multicast in another BSS - drop */
+			if (memcmp(hdr->addr1, dev->dev_addr, ETH_ALEN) == 0) {
+				printk(KERN_DEBUG "Odd.. FromDS packet "
+				       "received with own BSSID\n");
+				hostap_dump_rx_80211(dev->name, skb, rx_stats);
+			}
+			ret = AP_RX_DROP;
+			goto out;
+		}
+	} else if (stype == WLAN_FC_STYPE_NULLFUNC && sta == NULL &&
+		   memcmp(hdr->addr1, dev->dev_addr, ETH_ALEN) == 0) {
+
+		if (local->hostapd) {
+			prism2_rx_80211(local->apdev, skb, rx_stats,
+					PRISM2_RX_NON_ASSOC);
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+		} else {
+			/* At least Lucent f/w seems to send data::nullfunc
+			 * frames with no ToDS flag when the current AP returns
+			 * after being unavailable for some time. Speed up
+			 * re-association by informing the station about it not
+			 * being associated. */
+			printk(KERN_DEBUG "%s: rejected received nullfunc "
+			       "frame without ToDS from not associated STA "
+			       MACSTR "\n",
+			       dev->name, MAC2STR(hdr->addr2));
+			hostap_rx(dev, skb, rx_stats);
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+		}
+		ret = AP_RX_EXIT;
+		goto out;
+	} else if (stype == WLAN_FC_STYPE_NULLFUNC) {
+		/* At least Lucent cards seem to send periodic nullfunc
+		 * frames with ToDS. Let these through to update SQ
+		 * stats and PS state. Nullfunc frames do not contain
+		 * any data and they will be dropped below. */
+	} else {
+		/* If BSSID (Addr3) is foreign, this frame is a normal
+		 * broadcast frame from an IBSS network. Drop it silently.
+		 * If BSSID is own, report the dropping of this frame. */
+		if (memcmp(hdr->addr3, dev->dev_addr, ETH_ALEN) == 0) {
+			printk(KERN_DEBUG "%s: dropped received packet from "
+			       MACSTR " with no ToDS flag (type=0x%02x, "
+			       "subtype=0x%02x)\n", dev->name,
+			       MAC2STR(hdr->addr2), type, stype);
+			hostap_dump_rx_80211(dev->name, skb, rx_stats);
+		}
+		ret = AP_RX_DROP;
+		goto out;
+	}
+
+	if (sta) {
+		hostap_ap_update_sq(sta, rx_stats);
+
+		hostap_update_sta_ps2(local, sta, fc & WLAN_FC_PWRMGT,
+				      type, stype);
+
+		sta->rx_packets++;
+		sta->rx_bytes += skb->len;
+		sta->last_rx = jiffies;
+	}
+
+	if (local->ap->nullfunc_ack && stype == WLAN_FC_STYPE_NULLFUNC &&
+	    fc & WLAN_FC_TODS) {
+		if (local->hostapd) {
+			prism2_rx_80211(local->apdev, skb, rx_stats,
+					PRISM2_RX_NULLFUNC_ACK);
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+		} else {
+			/* some STA f/w's seem to require control::ACK frame
+			 * for data::nullfunc, but Prism2 f/w 0.8.0 (at least
+			 * from Compaq) does not send this.. Try to generate
+			 * ACK for these frames from the host driver to make
+			 * power saving work with, e.g., Lucent WaveLAN f/w */
+			hostap_rx(dev, skb, rx_stats);
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+		}
+		ret = AP_RX_EXIT;
+		goto out;
+	}
+
+ out:
+	if (sta)
+		atomic_dec(&sta->users);
+
+	return ret;
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+int hostap_handle_sta_crypto(local_info_t *local,
+			     struct hostap_ieee80211_hdr *hdr,
+			     struct prism2_crypt_data **crypt, void **sta_ptr)
+{
+	struct sta_info *sta;
+
+	spin_lock(&local->ap->sta_table_lock);
+	sta = ap_get_sta(local->ap, hdr->addr2);
+	if (sta)
+		atomic_inc(&sta->users);
+	spin_unlock(&local->ap->sta_table_lock);
+
+	if (!sta)
+		return -1;
+
+	if (sta->crypt) {
+		*crypt = sta->crypt;
+		*sta_ptr = sta;
+		/* hostap_handle_sta_release() will be called to release STA
+		 * info */
+	} else
+		atomic_dec(&sta->users);
+
+	return 0;
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+int hostap_is_sta_assoc(struct ap_data *ap, u8 *sta_addr)
+{
+	struct sta_info *sta;
+	int ret = 0;
+
+	spin_lock(&ap->sta_table_lock);
+	sta = ap_get_sta(ap, sta_addr);
+	if (sta != NULL && (sta->flags & WLAN_STA_ASSOC) && !sta->ap)
+		ret = 1;
+	spin_unlock(&ap->sta_table_lock);
+
+	return ret;
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+int hostap_add_sta(struct ap_data *ap, u8 *sta_addr)
+{
+	struct sta_info *sta;
+	int ret = 1;
+
+	if (!ap)
+		return -1;
+
+	spin_lock(&ap->sta_table_lock);
+	sta = ap_get_sta(ap, sta_addr);
+	if (sta)
+		ret = 0;
+	spin_unlock(&ap->sta_table_lock);
+
+	if (ret == 1) {
+		sta = ap_add_sta(ap, sta_addr);
+		if (!sta)
+			ret = -1;
+		sta->flags = WLAN_STA_AUTH | WLAN_STA_ASSOC;
+		sta->ap = 1;
+		memset(sta->supported_rates, 0, sizeof(sta->supported_rates));
+		/* No way of knowing which rates are supported since we did not
+		 * get supported rates element from beacon/assoc req. Assume
+		 * that remote end supports all 802.11b rates. */
+		sta->supported_rates[0] = 0x82;
+		sta->supported_rates[1] = 0x84;
+		sta->supported_rates[2] = 0x0b;
+		sta->supported_rates[3] = 0x16;
+		sta->tx_supp_rates = WLAN_RATE_1M | WLAN_RATE_2M |
+			WLAN_RATE_5M5 | WLAN_RATE_11M;
+		sta->tx_rate = 110;
+		sta->tx_max_rate = sta->tx_rate_idx = 3;
+	}
+
+	return ret;
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+int hostap_update_rx_stats(struct ap_data *ap,
+			   struct hostap_ieee80211_hdr *hdr,
+			   struct hostap_80211_rx_status *rx_stats)
+{
+	struct sta_info *sta;
+
+	if (!ap)
+		return -1;
+
+	spin_lock(&ap->sta_table_lock);
+	sta = ap_get_sta(ap, hdr->addr2);
+	if (sta)
+		hostap_ap_update_sq(sta, rx_stats);
+	spin_unlock(&ap->sta_table_lock);
+
+	return sta ? 0 : -1;
+}
+
+
+void hostap_update_rates(local_info_t *local)
+{
+	struct list_head *ptr;
+	struct ap_data *ap = local->ap;
+
+	if (!ap)
+		return;
+
+	spin_lock_bh(&ap->sta_table_lock);
+	for (ptr = ap->sta_list.next; ptr != &ap->sta_list; ptr = ptr->next) {
+		struct sta_info *sta = (struct sta_info *) ptr;
+		prism2_check_tx_rates(sta);
+	}
+	spin_unlock_bh(&ap->sta_table_lock);
+}
+
+
+static void * ap_crypt_get_ptrs(struct ap_data *ap, u8 *addr, int permanent,
+				struct prism2_crypt_data ***crypt)
+{
+	struct sta_info *sta;
+
+	spin_lock_bh(&ap->sta_table_lock);
+	sta = ap_get_sta(ap, addr);
+	if (sta)
+		atomic_inc(&sta->users);
+	spin_unlock_bh(&ap->sta_table_lock);
+
+	if (!sta && permanent)
+		sta = ap_add_sta(ap, addr);
+
+	if (!sta)
+		return NULL;
+
+	if (permanent)
+		sta->flags |= WLAN_STA_PERM;
+
+	*crypt = &sta->crypt;
+
+	return sta;
+}
+
+
+void hostap_add_wds_links(local_info_t *local)
+{
+	struct ap_data *ap = local->ap;
+	struct list_head *ptr;
+
+	spin_lock_bh(&ap->sta_table_lock);
+	list_for_each(ptr, &ap->sta_list) {
+		struct sta_info *sta = list_entry(ptr, struct sta_info, list);
+		if (sta->ap)
+			hostap_wds_link_oper(local, sta->addr, WDS_ADD);
+	}
+	spin_unlock_bh(&ap->sta_table_lock);
+
+	PRISM2_SCHEDULE_TASK(&local->ap->wds_oper_queue);
+}
+
+
+void hostap_wds_link_oper(local_info_t *local, u8 *addr, wds_oper_type type)
+{
+	struct wds_oper_data *entry;
+
+	entry = kmalloc(sizeof(*entry), GFP_ATOMIC);
+	if (!entry)
+		return;
+	memcpy(entry->addr, addr, ETH_ALEN);
+	entry->type = type;
+	spin_lock_bh(&local->lock);
+	entry->next = local->ap->wds_oper_entries;
+	local->ap->wds_oper_entries = entry;
+	spin_unlock_bh(&local->lock);
+
+	PRISM2_SCHEDULE_TASK(&local->ap->wds_oper_queue);
+}
+
+
+EXPORT_SYMBOL(hostap_init_data);
+EXPORT_SYMBOL(hostap_free_data);
+EXPORT_SYMBOL(hostap_check_sta_fw_version);
+EXPORT_SYMBOL(hostap_handle_sta_tx);
+EXPORT_SYMBOL(hostap_handle_sta_release);
+EXPORT_SYMBOL(hostap_handle_sta_tx_exc);
+EXPORT_SYMBOL(hostap_update_sta_ps);
+EXPORT_SYMBOL(hostap_handle_sta_rx);
+EXPORT_SYMBOL(hostap_is_sta_assoc);
+EXPORT_SYMBOL(hostap_add_sta);
+EXPORT_SYMBOL(hostap_update_rates);
+EXPORT_SYMBOL(hostap_add_wds_links);
+EXPORT_SYMBOL(hostap_wds_link_oper);
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+EXPORT_SYMBOL(hostap_deauth_all_stas);
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
diff -Nur linux-orig/drivers/net/wireless/hostap_ap.h linux/drivers/net/wireless/hostap_ap.h
--- linux-orig/drivers/net/wireless/hostap_ap.h	1970-01-01 03:00:00.000000000 +0300
+++ linux/drivers/net/wireless/hostap_ap.h	2003-11-03 06:38:22.000000000 +0300
@@ -0,0 +1,272 @@
+#ifndef HOSTAP_AP_H
+#define HOSTAP_AP_H
+
+/* AP data structures for STAs */
+
+/* maximum number of frames to buffer per STA */
+#define STA_MAX_TX_BUFFER 32
+
+/* Flags used in skb->cb[6] to control how the packet is handled in TX path.
+ * skb->cb[0..5] must contain magic value 'hostap' to indicate that cb[6] is
+ * used. */
+#define AP_SKB_CB_MAGIC "hostap"
+#define AP_SKB_CB_MAGIC_LEN 6
+#define AP_SKB_CB_BUFFERED_FRAME BIT(0)
+#define AP_SKB_CB_ADD_MOREDATA BIT(1)
+
+
+/* STA flags */
+#define WLAN_STA_AUTH BIT(0)
+#define WLAN_STA_ASSOC BIT(1)
+#define WLAN_STA_PS BIT(2)
+#define WLAN_STA_TIM BIT(3) /* TIM bit is on for PS stations */
+#define WLAN_STA_PERM BIT(4) /* permanent; do not remove entry on expiration */
+#define WLAN_STA_AUTHORIZED BIT(5) /* If 802.1X is used, this flag is
+				    * controlling whether STA is authorized to
+				    * send and receive non-IEEE 802.1X frames
+				    */
+#define WLAN_STA_PENDING_POLL BIT(6) /* pending activity poll not ACKed */
+
+#define WLAN_RATE_1M BIT(0)
+#define WLAN_RATE_2M BIT(1)
+#define WLAN_RATE_5M5 BIT(2)
+#define WLAN_RATE_11M BIT(3)
+#define WLAN_RATE_COUNT 4
+
+/* Maximum size of Supported Rates info element. IEEE 802.11 has a limit of 8,
+ * but some pre-standard IEEE 802.11g products use longer elements. */
+#define WLAN_SUPP_RATES_MAX 32
+
+/* Try to increase TX rate after # successfully sent consecutive packets */
+#define WLAN_RATE_UPDATE_COUNT 50
+
+/* Decrease TX rate after # consecutive dropped packets */
+#define WLAN_RATE_DECREASE_THRESHOLD 2
+
+struct sta_info {
+	struct list_head list;
+	struct sta_info *hnext; /* next entry in hash table list */
+	atomic_t users; /* number of users (do not remove if > 0) */
+	struct proc_dir_entry *proc;
+
+	u8 addr[6];
+	u16 aid; /* STA's unique AID (1 .. 2007) or 0 if not yet assigned */
+	u32 flags;
+	u16 capability;
+	u16 listen_interval; /* or beacon_int for APs */
+	u8 supported_rates[WLAN_SUPP_RATES_MAX];
+
+	unsigned long last_auth;
+	unsigned long last_assoc;
+	unsigned long last_rx;
+	unsigned long last_tx;
+	unsigned long rx_packets, tx_packets;
+	unsigned long rx_bytes, tx_bytes;
+	struct sk_buff_head tx_buf;
+	/* FIX: timeout buffers with an expiry time somehow derived from
+	 * listen_interval */
+
+	u8 last_rx_silence;
+	u8 last_rx_signal;
+	u8 last_rx_rate;
+	u8 last_rx_updated; /* IWSPY's struct iw_quality::updated */
+
+	u8 tx_supp_rates; /* bit field of supported TX rates */
+	u8 tx_rate; /* current TX rate (in 0.1 Mbps) */
+	u8 tx_rate_idx; /* current TX rate (WLAN_RATE_*) */
+	u8 tx_max_rate; /* max TX rate (WLAN_RATE_*) */
+	u32 tx_count[WLAN_RATE_COUNT]; /* number of frames sent (per rate) */
+	u32 rx_count[WLAN_RATE_COUNT]; /* number of frames received (per rate)
+					*/
+	u32 tx_since_last_failure;
+	u32 tx_consecutive_exc;
+
+	struct prism2_crypt_data *crypt;
+
+	int ap; /* whether this station is an AP */
+
+	local_info_t *local;
+
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+	union {
+		struct {
+			char *challenge; /* shared key authentication
+					  * challenge */
+		} sta;
+		struct {
+			int ssid_len;
+			unsigned char ssid[MAX_SSID_LEN + 1]; /* AP's ssid */
+			int channel;
+			unsigned long last_beacon; /* last RX beacon time */
+		} ap;
+	} u;
+
+	struct timer_list timer;
+	enum { STA_NULLFUNC = 0, STA_DISASSOC, STA_DEAUTH } timeout_next;
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+};
+
+
+#define MAX_STA_COUNT 1024
+
+/* Maximum number of AIDs to use for STAs; must be 2007 or lower
+ * (8802.11 limitation) */
+#define MAX_AID_TABLE_SIZE 128
+
+#define STA_HASH_SIZE 256
+#define STA_HASH(sta) (sta[5])
+
+
+/* Default value for maximum station inactivity. After AP_MAX_INACTIVITY_SEC
+ * has passed since last received frame from the station, a nullfunc data
+ * frame is sent to the station. If this frame is not acknowledged and no other
+ * frames have been received, the station will be disassociated after
+ * AP_DISASSOC_DELAY. Similarily, a the station will be deauthenticated after
+ * AP_DEAUTH_DELAY. AP_TIMEOUT_RESOLUTION is the resolution that is used with
+ * max inactivity timer. */
+#define AP_MAX_INACTIVITY_SEC (5 * 60)
+#define AP_DISASSOC_DELAY (HZ)
+#define AP_DEAUTH_DELAY (HZ)
+
+/* ap_policy: whether to accept frames to/from other APs/IBSS */
+typedef enum {
+	AP_OTHER_AP_SKIP_ALL = 0,
+	AP_OTHER_AP_SAME_SSID = 1,
+	AP_OTHER_AP_ALL = 2,
+	AP_OTHER_AP_EVEN_IBSS = 3
+} ap_policy_enum;
+
+#define PRISM2_AUTH_OPEN BIT(0)
+#define PRISM2_AUTH_SHARED_KEY BIT(1)
+
+
+/* MAC address-based restrictions */
+struct mac_entry {
+	struct list_head list;
+	u8 addr[6];
+};
+
+struct mac_restrictions {
+	enum { MAC_POLICY_OPEN = 0, MAC_POLICY_ALLOW, MAC_POLICY_DENY } policy;
+	unsigned int entries;
+	struct list_head mac_list;
+	spinlock_t lock;
+};
+
+
+struct add_sta_proc_data {
+	u8 addr[ETH_ALEN];
+	struct add_sta_proc_data *next;
+};
+
+
+typedef enum { WDS_ADD, WDS_DEL } wds_oper_type;
+struct wds_oper_data {
+	wds_oper_type type;
+	u8 addr[ETH_ALEN];
+	struct wds_oper_data *next;
+};
+
+
+struct ap_data {
+	int initialized; /* whether ap_data has been initialized */
+	local_info_t *local;
+	int bridge_packets; /* send packet to associated STAs directly to the
+			     * wireless media instead of higher layers in the
+			     * kernel */
+	unsigned int bridged_unicast; /* number of unicast frames bridged on
+				       * wireless media */
+	unsigned int bridged_multicast; /* number of non-unicast frames
+					 * bridged on wireless media */
+	int nullfunc_ack; /* use workaround for nullfunc frame ACKs */
+
+	spinlock_t sta_table_lock;
+	int num_sta; /* number of entries in sta_list */
+	struct list_head sta_list; /* STA info list head */
+	struct sta_info *sta_hash[STA_HASH_SIZE];
+
+	struct proc_dir_entry *proc;
+
+	ap_policy_enum ap_policy;
+	unsigned int max_inactivity;
+	int autom_ap_wds;
+
+	struct mac_restrictions mac_restrictions; /* MAC-based auth */
+	int last_tx_rate;
+
+	HOSTAP_QUEUE set_tim_queue;
+	struct list_head set_tim_list;
+	spinlock_t set_tim_lock;
+
+	HOSTAP_QUEUE add_sta_proc_queue;
+	struct add_sta_proc_data *add_sta_proc_entries;
+
+	HOSTAP_QUEUE wds_oper_queue;
+	struct wds_oper_data *wds_oper_entries;
+
+	u16 tx_callback_idx;
+
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+	/* pointers to STA info; based on allocated AID or NULL if AID free
+	 * AID is in the range 1-2007, so sta_aid[0] corresponders to AID 1
+	 * and so on
+	 */
+	struct sta_info *sta_aid[MAX_AID_TABLE_SIZE];
+
+	u16 tx_callback_auth, tx_callback_assoc, tx_callback_poll;
+
+	/* WEP operations for generating challenges to be used with shared key
+	 * authentication */
+	struct hostap_crypto_ops *crypt;
+	void *crypt_priv;
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+};
+
+
+void hostap_rx(struct net_device *dev, struct sk_buff *skb,
+	       struct hostap_80211_rx_status *rx_stats);
+void hostap_init_data(local_info_t *local);
+void hostap_free_data(struct ap_data *ap);
+void hostap_check_sta_fw_version(struct ap_data *ap, int sta_fw_ver);
+
+typedef enum {
+	AP_TX_CONTINUE, AP_TX_DROP, AP_TX_RETRY, AP_TX_BUFFERED,
+	AP_TX_CONTINUE_NOT_AUTHORIZED
+} ap_tx_ret;
+ap_tx_ret hostap_handle_sta_tx(local_info_t *local, struct sk_buff *skb,
+			       struct hfa384x_tx_frame *txdesc, int wds,
+			       int host_encrypt,
+			       struct prism2_crypt_data **crypt,
+			       void **sta_ptr);
+void hostap_handle_sta_release(void *ptr);
+void hostap_handle_sta_tx_exc(local_info_t *local,
+			      struct hfa384x_tx_frame *txdesc);
+int hostap_update_sta_ps(local_info_t *local,
+			 struct hostap_ieee80211_hdr *hdr);
+typedef enum {
+	AP_RX_CONTINUE, AP_RX_DROP, AP_RX_EXIT, AP_RX_CONTINUE_NOT_AUTHORIZED
+} ap_rx_ret;
+ap_rx_ret hostap_handle_sta_rx(local_info_t *local, struct net_device *dev,
+			       struct sk_buff *skb,
+			       struct hostap_80211_rx_status *rx_stats,
+			       int wds);
+int hostap_handle_sta_crypto(local_info_t *local,
+			     struct hostap_ieee80211_hdr *hdr,
+			     struct prism2_crypt_data **crypt, void **sta_ptr);
+int hostap_is_sta_assoc(struct ap_data *ap, u8 *sta_addr);
+int hostap_add_sta(struct ap_data *ap, u8 *sta_addr);
+int hostap_update_rx_stats(struct ap_data *ap,
+			   struct hostap_ieee80211_hdr *hdr,
+			   struct hostap_80211_rx_status *rx_stats);
+void hostap_update_rates(local_info_t *local);
+void hostap_add_wds_links(local_info_t *local);
+void hostap_wds_link_oper(local_info_t *local, u8 *addr, wds_oper_type type);
+void hostap_ap_update_sq(struct sta_info *sta,
+			 struct hostap_80211_rx_status *rx_stats);
+
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+void hostap_deauth_all_stas(struct net_device *dev, struct ap_data *ap,
+			    int resend);
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+
+#endif /* HOSTAP_AP_H */
diff -Nur linux-orig/drivers/net/wireless/hostap.c linux/drivers/net/wireless/hostap.c
--- linux-orig/drivers/net/wireless/hostap.c	1970-01-01 03:00:00.000000000 +0300
+++ linux/drivers/net/wireless/hostap.c	2003-11-02 22:36:04.000000000 +0300
@@ -0,0 +1,1073 @@
+/*
+ * Host AP (software wireless LAN access point) driver for
+ * Intersil Prism2/2.5/3 - hostap.o module, common routines
+ *
+ * Copyright (c) 2001-2002, SSH Communications Security Corp and Jouni Malinen
+ * <jkmaline@cc.hut.fi>
+ * Copyright (c) 2002-2003, Jouni Malinen <jkmaline@cc.hut.fi>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation. See README and COPYING for
+ * more details.
+ */
+
+#ifndef EXPORT_SYMTAB
+#define EXPORT_SYMTAB
+#endif
+
+#include <linux/config.h>
+#include <linux/version.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/slab.h>
+#include <linux/proc_fs.h>
+#include <linux/if_arp.h>
+#include <linux/delay.h>
+#include <linux/random.h>
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,5,44))
+#include <linux/tqueue.h>
+#else
+#include <linux/workqueue.h>
+#endif
+#include <linux/kmod.h>
+#include <linux/rtnetlink.h>
+#include "hostap_wext.h"
+#include <asm/uaccess.h>
+
+#include "hostap_wlan.h"
+#include "hostap_80211.h"
+#include "hostap_ap.h"
+#include "hostap.h"
+#include "hostap_crypt.h"
+
+MODULE_AUTHOR("Jouni Malinen");
+MODULE_DESCRIPTION("Host AP common routines");
+MODULE_LICENSE("GPL");
+
+#ifndef HOSTAP_CRYPT_MODULE
+/* Old hostap_crypt module is now part of hostap module. */
+#include "hostap_crypt.c"
+#else /* HOSTAP_CRYPT_MODULE */
+#define hostap_crypto_init()
+#define hostap_crypto_deinit()
+#endif /* HOSTAP_CRYPT_MODULE */
+
+#define TX_TIMEOUT (2 * HZ)
+
+#define PRISM2_MAX_FRAME_SIZE 2304
+#define PRISM2_MIN_MTU 256
+/* FIX: */
+#define PRISM2_MAX_MTU (PRISM2_MAX_FRAME_SIZE - (6 /* LLC */ + 8 /* WEP */))
+
+
+/* hostap.c */
+static int prism2_wds_add(local_info_t *local, u8 *remote_addr,
+			  int rtnl_locked);
+static int prism2_wds_del(local_info_t *local, u8 *remote_addr,
+			  int rtnl_locked, int do_not_remove);
+
+/* hostap_ap.c */
+#ifdef WIRELESS_EXT
+static int prism2_ap_get_sta_qual(local_info_t *local, struct sockaddr addr[],
+				  struct iw_quality qual[], int buf_size,
+				  int aplist);
+#if WIRELESS_EXT > 13
+static int prism2_ap_translate_scan(struct net_device *dev, char *buffer);
+#endif /* WIRELESS_EXT > 13 */
+#endif /* WIRELESS_EXT */
+static int prism2_hostapd(struct ap_data *ap,
+			  struct prism2_hostapd_param *param);
+static void * ap_crypt_get_ptrs(struct ap_data *ap, u8 *addr, int permanent,
+				struct prism2_crypt_data ***crypt);
+static void ap_control_kickall(struct ap_data *ap);
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+static int ap_control_add_mac(struct mac_restrictions *mac_restrictions,
+			      u8 *mac);
+static int ap_control_del_mac(struct mac_restrictions *mac_restrictions,
+			      u8 *mac);
+static void ap_control_flush_macs(struct mac_restrictions *mac_restrictions);
+static int ap_control_kick_mac(struct ap_data *ap, struct net_device *dev,
+			       u8 *mac);
+#endif /* !PRISM2_NO_KERNEL_IEEE80211_MGMT */
+
+
+#ifdef WIRELESS_EXT
+static const long freq_list[] = { 2412, 2417, 2422, 2427, 2432, 2437, 2442,
+				  2447, 2452, 2457, 2462, 2467, 2472, 2484 };
+#define FREQ_COUNT (sizeof(freq_list) / sizeof(freq_list[0]))
+#endif /* WIRELESS_EXT */
+
+
+/* See IEEE 802.1H for LLC/SNAP encapsulation/decapsulation */
+/* Ethernet-II snap header (RFC1042 for most EtherTypes) */
+static unsigned char rfc1042_header[] =
+{ 0xaa, 0xaa, 0x03, 0x00, 0x00, 0x00 };
+/* Bridge-Tunnel header (for EtherTypes ETH_P_AARP and ETH_P_IPX) */
+static unsigned char bridge_tunnel_header[] =
+{ 0xaa, 0xaa, 0x03, 0x00, 0x00, 0xf8 };
+/* No encapsulation header if EtherType < 0x600 (=length) */
+
+
+/* FIX: these could be compiled separately and linked together to hostap.o */
+#include "hostap_ap.c"
+#include "hostap_info.c"
+#include "hostap_ioctl.c"
+#include "hostap_proc.c"
+#include "hostap_80211_rx.c"
+
+
+struct net_device * hostap_add_interface(struct local_info *local,
+					 int type, int rtnl_locked,
+					 const char *name)
+{
+	struct net_device *dev, *mdev;
+	struct hostap_interface *iface;
+	int ret;
+
+	dev = alloc_etherdev(sizeof(struct hostap_interface));
+	if (dev == NULL)
+		return NULL;
+
+	iface = dev->priv;
+	iface->dev = dev;
+	iface->local = local;
+	iface->type = type;
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,4,0))
+	dev->name = iface->name;
+#endif
+	list_add(&iface->list, &local->hostap_interfaces);
+
+	mdev = local->dev;
+	memcpy(dev->dev_addr, mdev->dev_addr, ETH_ALEN);
+	dev->base_addr = mdev->base_addr;
+	dev->irq = mdev->irq;
+	dev->mem_start = mdev->mem_start;
+	dev->mem_end = mdev->mem_end;
+
+	hostap_setup_dev(dev, local, 0);
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0))
+	dev->destructor = free_netdev;
+#elif (LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,0))
+	/* Linux 2.4.x uses dev entry (reads dev->features) after
+	 * dev->destructor has returned, so must not free struct net_device
+	 * here. Set NETIF_F_DYNALLOC flag so that netdev_finish_unregister()
+	 * frees the entry. */
+	dev->features |= NETIF_F_DYNALLOC;
+#endif
+
+	sprintf(dev->name, "%s%s", mdev->name, name);
+	if (!rtnl_locked)
+		rtnl_lock();
+
+	ret = 0;
+	if (strchr(dev->name, '%'))
+		ret = dev_alloc_name(dev, dev->name);
+
+	if (ret >= 0)
+		ret = register_netdevice(dev);
+
+	if (!rtnl_locked)
+		rtnl_unlock();
+
+	if (ret < 0) {
+		printk(KERN_WARNING "%s: failed to add new netdevice!\n",
+		       dev->name);
+		free_netdev(dev);
+		return NULL;
+	}
+
+	printk(KERN_DEBUG "%s: registered netdevice %s\n",
+	       mdev->name, dev->name);
+
+	return dev;
+}
+
+
+void hostap_remove_interface(struct net_device *dev, int rtnl_locked,
+			     int remove_from_list)
+{
+	if (!dev)
+		return;
+
+	if (remove_from_list) {
+		struct hostap_interface *iface;
+		iface = dev->priv;
+		list_del(&iface->list);
+	}
+	if (rtnl_locked)
+		unregister_netdevice(dev);
+	else
+		unregister_netdev(dev);
+
+	/* dev->destructor = free_netdev() will free the device data, including
+	 * private data, when removing the device */
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,4,0))
+	/* Except for the compatibility case, which did not use
+	 * dev->destructor.. */
+	free_netdev(dev);
+#endif
+}
+
+
+static inline int prism2_wds_special_addr(u8 *addr)
+{
+	if (addr[0] || addr[1] || addr[2] || addr[3] || addr[4] || addr[5])
+		return 0;
+
+	return 1;
+}
+
+
+static int prism2_wds_add(local_info_t *local, u8 *remote_addr,
+			  int rtnl_locked)
+{
+	struct net_device *dev;
+	struct list_head *ptr;
+	struct hostap_interface *iface, *empty, *match;
+
+	empty = match = NULL;
+	read_lock_bh(&local->iface_lock);
+	list_for_each(ptr, &local->hostap_interfaces) {
+		iface = list_entry(ptr, struct hostap_interface, list);
+		if (iface->type != HOSTAP_INTERFACE_WDS)
+			continue;
+
+		if (prism2_wds_special_addr(iface->u.wds.remote_addr))
+			empty = iface;
+		else if (memcmp(iface->u.wds.remote_addr, remote_addr,
+				ETH_ALEN) == 0) {
+			match = iface;
+			break;
+		}
+	}
+	if (!match && empty) {
+		/* take pre-allocated entry into use */
+		memcpy(empty->u.wds.remote_addr, remote_addr, ETH_ALEN);
+	}
+
+	if (!match && empty) {
+		read_unlock_bh(&local->iface_lock);
+		printk(KERN_DEBUG "%s: using pre-allocated WDS netdevice %s\n",
+		       local->dev->name, empty->dev->name);
+		return 0;
+	}
+	read_unlock_bh(&local->iface_lock);
+
+	if (!prism2_wds_special_addr(remote_addr)) {
+		if (match)
+			return -EEXIST;
+		hostap_add_sta(local->ap, remote_addr);
+	}
+
+	if (local->wds_connections >= local->wds_max_connections)
+		return -ENOBUFS;
+
+	/* verify that there is room for wds# postfix in the interface name */
+	if (strlen(local->dev->name) > IFNAMSIZ - 5) {
+		printk(KERN_DEBUG "'%s' too long base device name\n",
+		       local->dev->name);
+		return -EINVAL;
+	}
+
+	dev = hostap_add_interface(local, HOSTAP_INTERFACE_WDS, rtnl_locked,
+				   "wds%d");
+	if (dev == NULL)
+		return -ENOMEM;
+
+	iface = dev->priv;
+	memcpy(iface->u.wds.remote_addr, remote_addr, ETH_ALEN);
+
+	local->wds_connections++;
+
+	return 0;
+}
+
+
+static int prism2_wds_del(local_info_t *local, u8 *remote_addr,
+			  int rtnl_locked, int do_not_remove)
+{
+	unsigned long flags;
+	struct list_head *ptr;
+	struct hostap_interface *iface, *selected = NULL;
+
+	write_lock_irqsave(&local->iface_lock, flags);
+	list_for_each(ptr, &local->hostap_interfaces) {
+		iface = list_entry(ptr, struct hostap_interface, list);
+		if (iface->type != HOSTAP_INTERFACE_WDS)
+			continue;
+
+		if (memcmp(iface->u.wds.remote_addr, remote_addr,
+			   ETH_ALEN) == 0) {
+			selected = iface;
+			break;
+		}
+	}
+	if (selected && !do_not_remove)
+		list_del(&selected->list);
+	write_unlock_irqrestore(&local->iface_lock, flags);
+
+	if (selected) {
+		if (do_not_remove)
+			memset(selected->u.wds.remote_addr, 0, ETH_ALEN);
+		else {
+			hostap_remove_interface(selected->dev, rtnl_locked, 0);
+			local->wds_connections--;
+		}
+	}
+
+	return selected ? 0 : -ENODEV;
+}
+
+
+u16 hostap_tx_callback_register(local_info_t *local,
+				void (*func)(struct sk_buff *, int ok, void *),
+				void *data)
+{
+	unsigned long flags;
+	struct hostap_tx_callback_info *entry;
+
+	entry = (struct hostap_tx_callback_info *) kmalloc(sizeof(*entry),
+							   GFP_ATOMIC);
+	if (entry == NULL)
+		return 0;
+
+	entry->func = func;
+	entry->data = data;
+
+	spin_lock_irqsave(&local->lock, flags);
+	entry->idx = local->tx_callback ? local->tx_callback->idx + 1 : 1;
+	entry->next = local->tx_callback;
+	local->tx_callback = entry;
+	spin_unlock_irqrestore(&local->lock, flags);
+
+	return entry->idx;
+}
+
+
+int hostap_tx_callback_unregister(local_info_t *local, u16 idx)
+{
+	unsigned long flags;
+	struct hostap_tx_callback_info *cb, *prev = NULL;
+
+	spin_lock_irqsave(&local->lock, flags);
+	cb = local->tx_callback;
+	while (cb != NULL && cb->idx != idx) {
+		prev = cb;
+		cb = cb->next;
+	}
+	if (cb) {
+		if (prev == NULL)
+			local->tx_callback = cb->next;
+		else
+			prev->next = cb->next;
+		kfree(cb);
+	}
+	spin_unlock_irqrestore(&local->lock, flags);
+
+	return cb ? 0 : -1;
+}
+
+
+/* val is in host byte order */
+int hostap_set_word(struct net_device *dev, int rid, u16 val)
+{
+	struct hostap_interface *iface = dev->priv;
+	u16 tmp = cpu_to_le16(val);
+	return iface->local->func->set_rid(dev, rid, &tmp, 2);
+}
+
+
+int hostap_set_string(struct net_device *dev, int rid, const char *val)
+{
+	struct hostap_interface *iface = dev->priv;
+	char buf[MAX_SSID_LEN + 2];
+	int len;
+
+	len = strlen(val);
+	if (len > MAX_SSID_LEN)
+		return -1;
+	memset(buf, 0, sizeof(buf));
+	buf[0] = len; /* little endian 16 bit word */
+	memcpy(buf + 2, val, len);
+
+	return iface->local->func->set_rid(dev, rid, &buf, MAX_SSID_LEN + 2);
+}
+
+
+u16 hostap_get_porttype(local_info_t *local)
+{
+	if (local->iw_mode == IW_MODE_ADHOC && local->pseudo_adhoc)
+		return HFA384X_PORTTYPE_PSEUDO_IBSS;
+	if (local->iw_mode == IW_MODE_ADHOC)
+		return HFA384X_PORTTYPE_IBSS;
+	if (local->iw_mode == IW_MODE_INFRA)
+		return HFA384X_PORTTYPE_BSS;
+	if (local->iw_mode == IW_MODE_REPEAT)
+		return HFA384X_PORTTYPE_WDS;
+	if (local->iw_mode == IW_MODE_MONITOR)
+		return HFA384X_PORTTYPE_PSEUDO_IBSS;
+	return HFA384X_PORTTYPE_HOSTAP;
+}
+
+
+int hostap_set_encryption(local_info_t *local)
+{
+	u16 val;
+	int i, keylen, len, idx;
+	char keybuf[WEP_KEY_LEN + 1];
+	enum { NONE, WEP, OTHER } encrypt_type;
+
+	if (local->crypt == NULL || local->crypt->ops == NULL)
+		encrypt_type = NONE;
+	else if (strcmp(local->crypt->ops->name, "WEP") == 0)
+		encrypt_type = WEP;
+	else
+		encrypt_type = OTHER;
+
+	if (local->func->get_rid(local->dev, HFA384X_RID_CNFWEPFLAGS, &val, 2,
+				 1) < 0) {
+		printk(KERN_DEBUG "Could not read current WEP flags.\n");
+		goto fail;
+	}
+	le16_to_cpus(&val);
+
+	if (encrypt_type != NONE)
+		val |= HFA384X_WEPFLAGS_PRIVACYINVOKED;
+	else
+		val &= ~HFA384X_WEPFLAGS_PRIVACYINVOKED;
+
+	if (local->open_wep || encrypt_type == NONE ||
+	    (local->ieee_802_1x && local->host_decrypt))
+		val &= ~HFA384X_WEPFLAGS_EXCLUDEUNENCRYPTED;
+	else
+		val |= HFA384X_WEPFLAGS_EXCLUDEUNENCRYPTED;
+
+	if (encrypt_type != NONE &&
+	    (encrypt_type == OTHER || local->host_encrypt))
+		val |= HFA384X_WEPFLAGS_HOSTENCRYPT;
+	else
+		val &= ~HFA384X_WEPFLAGS_HOSTENCRYPT;
+	if (encrypt_type != NONE &&
+	    (encrypt_type == OTHER || local->host_decrypt))
+		val |= HFA384X_WEPFLAGS_HOSTDECRYPT;
+	else
+		val &= ~HFA384X_WEPFLAGS_HOSTDECRYPT;
+
+	if (hostap_set_word(local->dev, HFA384X_RID_CNFWEPFLAGS, val)) {
+		printk(KERN_DEBUG "Could not write new WEP flags (0x%x)\n",
+		       val);
+		goto fail;
+	}
+
+	if (encrypt_type != WEP)
+		return 0;
+
+	/* 104-bit support seems to require that all the keys are set to the
+	 * same keylen */
+	keylen = 6; /* first 5 octets */
+	idx = local->crypt->ops->get_key_idx(local->crypt->priv);
+	len = local->crypt->ops->get_key(idx, keybuf, sizeof(keybuf),
+					 local->crypt->priv);
+	if (idx >= 0 && idx < WEP_KEYS && len > 5)
+		keylen = WEP_KEY_LEN + 1; /* first 13 octets */
+
+	for (i = 0; i < WEP_KEYS; i++) {
+		memset(keybuf, 0, sizeof(keybuf));
+		(void) local->crypt->ops->get_key(i, keybuf, sizeof(keybuf),
+						  local->crypt->priv);
+		if (local->func->set_rid(local->dev,
+					 HFA384X_RID_CNFDEFAULTKEY0 + i,
+					 keybuf, keylen)) {
+			printk(KERN_DEBUG "Could not set key %d (len=%d)\n",
+			       i, keylen);
+			goto fail;
+		}
+	}
+	if (hostap_set_word(local->dev, HFA384X_RID_CNFWEPDEFAULTKEYID, idx)) {
+		printk(KERN_DEBUG "Could not set default keyid %d\n", idx);
+		goto fail;
+	}
+
+	return 0;
+
+ fail:
+	printk(KERN_DEBUG "%s: encryption setup failed\n", local->dev->name);
+	return -1;
+}
+
+
+int hostap_set_antsel(local_info_t *local)
+{
+	u16 val;
+	int ret = 0;
+
+	if (local->antsel_tx != HOSTAP_ANTSEL_DO_NOT_TOUCH &&
+	    local->func->cmd(local->dev, HFA384X_CMDCODE_READMIF,
+			     HFA386X_CR_TX_CONFIGURE,
+			     NULL, &val) == 0) {
+		val &= ~(BIT(2) | BIT(1));
+		switch (local->antsel_tx) {
+		case HOSTAP_ANTSEL_DIVERSITY:
+			val |= BIT(1);
+			break;
+		case HOSTAP_ANTSEL_LOW:
+			break;
+		case HOSTAP_ANTSEL_HIGH:
+			val |= BIT(2);
+			break;
+		}
+
+		if (local->func->cmd(local->dev, HFA384X_CMDCODE_WRITEMIF,
+				     HFA386X_CR_TX_CONFIGURE, &val, NULL)) {
+			printk(KERN_INFO "%s: setting TX AntSel failed\n",
+			       local->dev->name);
+			ret = -1;
+		}
+	}
+
+	if (local->antsel_rx != HOSTAP_ANTSEL_DO_NOT_TOUCH &&
+	    local->func->cmd(local->dev, HFA384X_CMDCODE_READMIF,
+			     HFA386X_CR_RX_CONFIGURE,
+			     NULL, &val) == 0) {
+		val &= ~(BIT(1) | BIT(0));
+		switch (local->antsel_rx) {
+		case HOSTAP_ANTSEL_DIVERSITY:
+			break;
+		case HOSTAP_ANTSEL_LOW:
+			val |= BIT(0);
+			break;
+		case HOSTAP_ANTSEL_HIGH:
+			val |= BIT(0) | BIT(1);
+			break;
+		}
+
+		if (local->func->cmd(local->dev, HFA384X_CMDCODE_WRITEMIF,
+				     HFA386X_CR_RX_CONFIGURE, &val, NULL)) {
+			printk(KERN_INFO "%s: setting RX AntSel failed\n",
+			       local->dev->name);
+			ret = -1;
+		}
+	}
+
+	return ret;
+}
+
+
+int hostap_set_roaming(local_info_t *local)
+{
+	u16 val;
+
+	switch (local->host_roaming) {
+	case 1:
+		val = HFA384X_ROAMING_HOST;
+		break;
+	case 2:
+		val = HFA384X_ROAMING_DISABLED;
+		break;
+	case 0:
+	default:
+		val = HFA384X_ROAMING_FIRMWARE;
+		break;
+	}
+
+	return hostap_set_word(local->dev, HFA384X_RID_CNFROAMINGMODE, val);
+}
+
+
+int hostap_set_auth_algs(local_info_t *local)
+{
+	int val = local->auth_algs;
+	/* At least STA f/w v0.6.2 seems to have issues with cnfAuthentication
+	 * set to include both Open and Shared Key flags. It tries to use
+	 * Shared Key authentication in that case even if WEP keys are not
+	 * configured.. STA f/w v0.7.6 is able to handle such configuration,
+	 * but it is unknown when this was fixed between 0.6.2 .. 0.7.6. */
+	if (local->sta_fw_ver < PRISM2_FW_VER(0,7,0) &&
+	    val != PRISM2_AUTH_OPEN && val != PRISM2_AUTH_SHARED_KEY)
+		val = PRISM2_AUTH_OPEN;
+
+	if (hostap_set_word(local->dev, HFA384X_RID_CNFAUTHENTICATION, val)) {
+		printk(KERN_INFO "%s: cnfAuthentication setting to 0x%x "
+		       "failed\n", local->dev->name, local->auth_algs);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+
+void hostap_dump_rx_header(const char *name, const struct hfa384x_rx_frame *rx)
+{
+	u16 status, fc;
+
+	status = __le16_to_cpu(rx->status);
+
+	printk(KERN_DEBUG "%s: RX status=0x%04x (port=%d, type=%d, "
+	       "fcserr=%d) silence=%d signal=%d rate=%d rxflow=%d; "
+	       "jiffies=%ld\n",
+	       name, status, (status >> 8) & 0x07, status >> 13, status & 1,
+	       rx->silence, rx->signal, rx->rate, rx->rxflow, jiffies);
+
+	fc = __le16_to_cpu(rx->frame_control);
+	printk(KERN_DEBUG "   FC=0x%04x (type=%d:%d) dur=0x%04x seq=0x%04x "
+	       "data_len=%d%s%s\n",
+	       fc, WLAN_FC_GET_TYPE(fc), WLAN_FC_GET_STYPE(fc),
+	       __le16_to_cpu(rx->duration_id), __le16_to_cpu(rx->seq_ctrl),
+	       __le16_to_cpu(rx->data_len),
+	       fc & WLAN_FC_TODS ? " [ToDS]" : "",
+	       fc & WLAN_FC_FROMDS ? " [FromDS]" : "");
+
+	printk(KERN_DEBUG "   A1=" MACSTR " A2=" MACSTR " A3=" MACSTR " A4="
+	       MACSTR "\n",
+	       MAC2STR(rx->addr1), MAC2STR(rx->addr2), MAC2STR(rx->addr3),
+	       MAC2STR(rx->addr4));
+
+	printk(KERN_DEBUG "   dst=" MACSTR " src=" MACSTR " len=%d\n",
+	       MAC2STR(rx->dst_addr), MAC2STR(rx->src_addr),
+	       __be16_to_cpu(rx->len));
+}
+
+
+void hostap_dump_tx_header(const char *name, const struct hfa384x_tx_frame *tx)
+{
+	u16 fc;
+
+	printk(KERN_DEBUG "%s: TX status=0x%04x retry_count=%d tx_rate=%d "
+	       "tx_control=0x%04x; jiffies=%ld\n",
+	       name, __le16_to_cpu(tx->status), tx->retry_count, tx->tx_rate,
+	       __le16_to_cpu(tx->tx_control), jiffies);
+
+	fc = __le16_to_cpu(tx->frame_control);
+	printk(KERN_DEBUG "   FC=0x%04x (type=%d:%d) dur=0x%04x seq=0x%04x "
+	       "data_len=%d%s%s\n",
+	       fc, WLAN_FC_GET_TYPE(fc), WLAN_FC_GET_STYPE(fc),
+	       __le16_to_cpu(tx->duration_id), __le16_to_cpu(tx->seq_ctrl),
+	       __le16_to_cpu(tx->data_len),
+	       fc & WLAN_FC_TODS ? " [ToDS]" : "",
+	       fc & WLAN_FC_FROMDS ? " [FromDS]" : "");
+
+	printk(KERN_DEBUG "   A1=" MACSTR " A2=" MACSTR " A3=" MACSTR " A4="
+	       MACSTR "\n",
+	       MAC2STR(tx->addr1), MAC2STR(tx->addr2), MAC2STR(tx->addr3),
+	       MAC2STR(tx->addr4));
+
+	printk(KERN_DEBUG "   dst=" MACSTR " src=" MACSTR " len=%d\n",
+	       MAC2STR(tx->dst_addr), MAC2STR(tx->src_addr),
+	       __be16_to_cpu(tx->len));
+}
+
+
+/* TODO: share one netif queue for all interfaces and get rid of these
+ * functions.. */
+/* wake all netif queues in use */
+void hostap_netif_wake_queues(struct net_device *dev)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	struct list_head *ptr;
+
+	read_lock_bh(&local->iface_lock);
+	list_for_each(ptr, &local->hostap_interfaces) {
+		iface = list_entry(ptr, struct hostap_interface, list);
+		netif_wake_queue(iface->dev);
+	}
+	read_unlock_bh(&local->iface_lock);
+}
+
+
+/* stop all netif queues in use */
+void hostap_netif_stop_queues(struct net_device *dev)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	struct list_head *ptr;
+
+	read_lock_bh(&local->iface_lock);
+	list_for_each(ptr, &local->hostap_interfaces) {
+		iface = list_entry(ptr, struct hostap_interface, list);
+		netif_stop_queue(iface->dev);
+	}
+	read_unlock_bh(&local->iface_lock);
+}
+
+
+int hostap_80211_header_parse(struct sk_buff *skb, unsigned char *haddr)
+{
+	memcpy(haddr, skb->mac.raw + 10, ETH_ALEN); /* addr2 */
+	return ETH_ALEN;
+}
+
+
+int hostap_80211_prism_header_parse(struct sk_buff *skb, unsigned char *haddr)
+{
+	if (*(u32 *)skb->mac.raw == LWNG_CAP_DID_BASE) {
+		memcpy(haddr, skb->mac.raw +
+		       sizeof(struct linux_wlan_ng_prism_hdr) + 10,
+		       ETH_ALEN); /* addr2 */
+	} else { /* (*(u32 *)skb->mac.raw == htonl(LWNG_CAPHDR_VERSION)) */
+		memcpy(haddr, skb->mac.raw +
+		       sizeof(struct linux_wlan_ng_cap_hdr) + 10,
+		       ETH_ALEN); /* addr2 */
+	}
+	return ETH_ALEN;
+}
+
+
+int hostap_80211_get_hdrlen(u16 fc)
+{
+	int hdrlen = 24;
+
+	switch (WLAN_FC_GET_TYPE(fc)) {
+	case WLAN_FC_TYPE_DATA:
+		if ((fc & WLAN_FC_FROMDS) && (fc & WLAN_FC_TODS))
+			hdrlen = 30; /* Addr4 */
+		break;
+	case WLAN_FC_TYPE_CTRL:
+		switch (WLAN_FC_GET_STYPE(fc)) {
+		case WLAN_FC_STYPE_CTS:
+		case WLAN_FC_STYPE_ACK:
+			hdrlen = 10;
+			break;
+		default:
+			hdrlen = 16;
+			break;
+		}
+		break;
+	}
+
+	return hdrlen;
+}
+
+
+struct net_device_stats *hostap_get_stats(struct net_device *dev)
+{
+	struct hostap_interface *iface = dev->priv;
+	return &iface->stats;
+}
+
+
+static int prism2_close(struct net_device *dev)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+
+	PDEBUG(DEBUG_FLOW, "%s: prism2_close\n", dev->name);
+
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+	if (!local->hostapd && dev == local->dev &&
+	    (!local->func->card_present || local->func->card_present(local)) &&
+	    local->hw_ready && local->ap && local->iw_mode == IW_MODE_MASTER)
+		hostap_deauth_all_stas(dev, local->ap, 1);
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+
+	if (local->func->dev_close && local->func->dev_close(local))
+		return 0;
+
+	if (local->disable_on_close) {
+		local->func->hw_shutdown(dev, HOSTAP_HW_ENABLE_CMDCOMPL);
+	}
+
+	if (netif_running(dev)) {
+		netif_stop_queue(dev);
+		netif_device_detach(dev);
+	}
+
+	flush_scheduled_work();
+
+#ifdef NEW_MODULE_CODE
+	module_put(local->hw_module);
+#elif MODULE
+	__MOD_DEC_USE_COUNT(local->hw_module);
+#endif
+
+	return 0;
+}
+
+
+static int prism2_open(struct net_device *dev)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+
+	PDEBUG(DEBUG_FLOW, "%s: prism2_open\n", dev->name);
+
+	if (local->func->dev_open && local->func->dev_open(local))
+		return 1;
+
+#ifdef NEW_MODULE_CODE
+	if (!try_module_get(local->hw_module))
+		return -ENODEV;
+#elif MODULE
+	__MOD_INC_USE_COUNT(local->hw_module);
+#endif
+
+	if (!local->dev_enabled && local->func->hw_enable(dev, 1)) {
+		printk(KERN_WARNING "%s: could not enable MAC port\n",
+		       dev->name);
+		prism2_close(dev);
+		return 1;
+	}
+	if (!local->dev_enabled)
+		prism2_callback(local, PRISM2_CALLBACK_ENABLE);
+	local->dev_enabled = 1;
+
+	netif_device_attach(dev);
+	netif_start_queue(dev);
+
+	return 0;
+}
+
+
+#ifdef HAVE_SET_MAC_ADDR
+static int prism2_set_mac_address(struct net_device *dev, void *p)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	struct list_head *ptr;
+	struct sockaddr *addr = p;
+
+	if (local->func->set_rid(dev, HFA384X_RID_CNFOWNMACADDR, addr->sa_data,
+				 ETH_ALEN) < 0 || local->func->reset_port(dev))
+		return -EINVAL;
+
+	read_lock_bh(&local->iface_lock);
+	list_for_each(ptr, &local->hostap_interfaces) {
+		iface = list_entry(ptr, struct hostap_interface, list);
+		memcpy(iface->dev->dev_addr, addr->sa_data, ETH_ALEN);
+	}
+	read_unlock_bh(&local->iface_lock);
+
+	return 0;
+}
+#endif /* HAVE_SET_MAC_ADDR */
+
+
+/* TODO: to be further implemented as soon as Prism2 fully supports
+ *       GroupAddresses and correct documentation is available */
+void hostap_set_multicast_list_queue(void *data)
+{
+	struct net_device *dev = (struct net_device *) data;
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+
+	if (hostap_set_word(dev, HFA384X_RID_PROMISCUOUSMODE,
+			    local->is_promisc)) {
+		printk(KERN_INFO "%s: %sabling promiscuous mode failed\n",
+		       dev->name, local->is_promisc ? "en" : "dis");
+	}
+
+#ifndef NEW_MODULE_CODE
+	MOD_DEC_USE_COUNT;
+#endif
+}
+
+
+static void hostap_set_multicast_list(struct net_device *dev)
+{
+#if 0
+	/* FIX: promiscuous mode seems to be causing a lot of problems with
+	 * some station firmware versions (FCSErr frames, invalid MACPort, etc.
+	 * corrupted incoming frames). This code is now commented out while the
+	 * problems are investigated. */
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+
+	if ((dev->flags & IFF_ALLMULTI) || (dev->flags & IFF_PROMISC)) {
+		local->is_promisc = 1;
+	} else {
+		local->is_promisc = 0;
+	}
+
+	PRISM2_SCHEDULE_TASK(&local->set_multicast_list_queue);
+#endif
+}
+
+
+static int prism2_change_mtu(struct net_device *dev, int new_mtu)
+{
+	if (new_mtu < PRISM2_MIN_MTU || new_mtu > PRISM2_MAX_MTU)
+		return -EINVAL;
+
+	dev->mtu = new_mtu;
+	return 0;
+}
+
+
+#ifdef HAVE_TX_TIMEOUT
+static void prism2_tx_timeout(struct net_device *dev)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	struct hfa384x_regs regs;
+
+	printk(KERN_WARNING "%s Tx timed out! Resetting card\n", dev->name);
+	hostap_netif_stop_queues(dev);
+
+	local->func->read_regs(dev, &regs);
+	printk(KERN_DEBUG "%s: CMD=%04x EVSTAT=%04x "
+	       "OFFSET0=%04x OFFSET1=%04x SWSUPPORT0=%04x\n",
+	       dev->name, regs.cmd, regs.evstat, regs.offset0, regs.offset1,
+	       regs.swsupport0);
+
+	local->func->schedule_reset(local);
+}
+#endif /* HAVE_TX_TIMEOUT */
+
+
+void hostap_setup_dev(struct net_device *dev, local_info_t *local,
+		      int main_dev)
+{
+	ether_setup(dev);
+
+	/* kernel callbacks */
+	dev->get_stats = hostap_get_stats;
+#ifdef WIRELESS_EXT
+	dev->get_wireless_stats = main_dev ? hostap_get_wireless_stats : NULL;
+#if WIRELESS_EXT > 12
+	dev->wireless_handlers =
+		(struct iw_handler_def *) &hostap_iw_handler_def;
+#endif /* WIRELESS_EXT > 12 */
+#ifdef HAVE_PRIVATE_IOCTL
+	dev->do_ioctl = main_dev ? hostap_ioctl : NULL;
+#endif
+#endif /* WIRELESS_EXT */
+	dev->open = prism2_open;
+	dev->stop = prism2_close;
+	if (local->func)
+		dev->hard_start_xmit = local->func->tx;
+	else
+		printk(KERN_WARNING "hostap_setup_dev: local->func == NULL\n");
+#ifdef HAVE_SET_MAC_ADDR
+	dev->set_mac_address = prism2_set_mac_address;
+#endif /* HAVE_SET_MAC_ADDR */
+#ifdef HAVE_MULTICAST
+	dev->set_multicast_list = hostap_set_multicast_list;
+#endif
+#ifdef HAVE_CHANGE_MTU
+	dev->change_mtu = prism2_change_mtu;
+#endif
+#ifdef HAVE_TX_TIMEOUT
+	dev->tx_timeout = prism2_tx_timeout;
+	dev->watchdog_timeo = TX_TIMEOUT;
+#endif
+
+	dev->mtu = local->mtu;
+
+	netif_stop_queue(dev);
+}
+
+
+static int hostap_enable_hostapd(local_info_t *local, int rtnl_locked)
+{
+	struct net_device *dev = local->dev;
+
+	if (local->apdev)
+		return -EEXIST;
+
+	printk(KERN_DEBUG "%s: enabling hostapd mode\n", dev->name);
+
+	local->apdev = hostap_add_interface(local, HOSTAP_INTERFACE_AP,
+					    rtnl_locked, "ap");
+	if (local->apdev == NULL)
+		return -ENOMEM;
+
+	local->apdev->hard_start_xmit = local->func->tx_80211;
+	local->apdev->type = ARPHRD_IEEE80211;
+	local->apdev->hard_header_parse = hostap_80211_header_parse;
+
+	local->stadev = hostap_add_interface(local, HOSTAP_INTERFACE_STA,
+					     rtnl_locked, "sta");
+	if (local->stadev == NULL)
+		return -ENOMEM;
+
+	return 0;
+}
+
+
+static int hostap_disable_hostapd(local_info_t *local, int rtnl_locked)
+{
+	struct net_device *dev = local->dev;
+
+	printk(KERN_DEBUG "%s: disabling hostapd mode\n", dev->name);
+
+	hostap_remove_interface(local->apdev, rtnl_locked, 1);
+	local->apdev = NULL;
+
+	hostap_remove_interface(local->stadev, rtnl_locked, 1);
+	local->stadev = NULL;
+
+	return 0;
+}
+
+
+int hostap_set_hostapd(local_info_t *local, int val, int rtnl_locked)
+{
+	if (val < 0 || val > 1)
+		return -EINVAL;
+
+	if (local->hostapd == val)
+		return 0;
+
+	local->hostapd = val;
+
+	if (val)
+		return hostap_enable_hostapd(local, rtnl_locked);
+	else
+		return hostap_disable_hostapd(local, rtnl_locked);
+}
+
+
+struct proc_dir_entry *hostap_proc;
+
+static int __init hostap_init(void)
+{
+	hostap_crypto_init();
+
+	if (proc_net != NULL) {
+		hostap_proc = proc_mkdir("hostap", proc_net);
+		if (!hostap_proc)
+			printk(KERN_WARNING "Failed to mkdir "
+			       "/proc/net/hostap\n");
+	} else
+		hostap_proc = NULL;
+
+	return 0;
+}
+
+
+static void __exit hostap_exit(void)
+{
+	if (hostap_proc != NULL) {
+		hostap_proc = NULL;
+		remove_proc_entry("hostap", proc_net);
+	}
+
+	hostap_crypto_deinit();
+}
+
+
+EXPORT_SYMBOL(hostap_set_word);
+EXPORT_SYMBOL(hostap_set_string);
+EXPORT_SYMBOL(hostap_get_porttype);
+EXPORT_SYMBOL(hostap_set_encryption);
+EXPORT_SYMBOL(hostap_set_antsel);
+EXPORT_SYMBOL(hostap_set_roaming);
+EXPORT_SYMBOL(hostap_set_auth_algs);
+EXPORT_SYMBOL(hostap_dump_rx_header);
+EXPORT_SYMBOL(hostap_dump_tx_header);
+EXPORT_SYMBOL(hostap_netif_wake_queues);
+EXPORT_SYMBOL(hostap_netif_stop_queues);
+EXPORT_SYMBOL(hostap_80211_header_parse);
+EXPORT_SYMBOL(hostap_80211_prism_header_parse);
+EXPORT_SYMBOL(hostap_80211_get_hdrlen);
+EXPORT_SYMBOL(hostap_get_stats);
+EXPORT_SYMBOL(hostap_setup_dev);
+EXPORT_SYMBOL(hostap_proc);
+EXPORT_SYMBOL(hostap_set_multicast_list_queue);
+EXPORT_SYMBOL(hostap_set_hostapd);
+EXPORT_SYMBOL(hostap_add_interface);
+EXPORT_SYMBOL(hostap_remove_interface);
+
+module_init(hostap_init);
+module_exit(hostap_exit);
diff -Nur linux-orig/drivers/net/wireless/hostap_common.h linux/drivers/net/wireless/hostap_common.h
--- linux-orig/drivers/net/wireless/hostap_common.h	1970-01-01 03:00:00.000000000 +0300
+++ linux/drivers/net/wireless/hostap_common.h	2003-08-12 06:58:43.000000000 +0400
@@ -0,0 +1,524 @@
+#ifndef HOSTAP_COMMON_H
+#define HOSTAP_COMMON_H
+
+#define BIT(x) (1 << (x))
+
+#define MAC2STR(a) (a)[0], (a)[1], (a)[2], (a)[3], (a)[4], (a)[5]
+#define MACSTR "%02x:%02x:%02x:%02x:%02x:%02x"
+
+
+#ifndef ETH_P_PAE
+#define ETH_P_PAE 0x888E /* Port Access Entity (IEEE 802.1X) */
+#endif /* ETH_P_PAE */
+
+
+
+/* IEEE 802.11 defines */
+
+#define WLAN_FC_PVER (BIT(1) | BIT(0))
+#define WLAN_FC_TODS BIT(8)
+#define WLAN_FC_FROMDS BIT(9)
+#define WLAN_FC_MOREFRAG BIT(10)
+#define WLAN_FC_RETRY BIT(11)
+#define WLAN_FC_PWRMGT BIT(12)
+#define WLAN_FC_MOREDATA BIT(13)
+#define WLAN_FC_ISWEP BIT(14)
+#define WLAN_FC_ORDER BIT(15)
+
+#define WLAN_FC_GET_TYPE(fc) (((fc) & (BIT(3) | BIT(2))) >> 2)
+#define WLAN_FC_GET_STYPE(fc) \
+	(((fc) & (BIT(7) | BIT(6) | BIT(5) | BIT(4))) >> 4)
+
+#define WLAN_GET_SEQ_FRAG(seq) ((seq) & (BIT(3) | BIT(2) | BIT(1) | BIT(0)))
+#define WLAN_GET_SEQ_SEQ(seq) \
+	(((seq) & (~(BIT(3) | BIT(2) | BIT(1) | BIT(0)))) >> 4)
+
+#define WLAN_FC_TYPE_MGMT 0
+#define WLAN_FC_TYPE_CTRL 1
+#define WLAN_FC_TYPE_DATA 2
+
+/* management */
+#define WLAN_FC_STYPE_ASSOC_REQ 0
+#define WLAN_FC_STYPE_ASSOC_RESP 1
+#define WLAN_FC_STYPE_REASSOC_REQ 2
+#define WLAN_FC_STYPE_REASSOC_RESP 3
+#define WLAN_FC_STYPE_PROBE_REQ 4
+#define WLAN_FC_STYPE_PROBE_RESP 5
+#define WLAN_FC_STYPE_BEACON 8
+#define WLAN_FC_STYPE_ATIM 9
+#define WLAN_FC_STYPE_DISASSOC 10
+#define WLAN_FC_STYPE_AUTH 11
+#define WLAN_FC_STYPE_DEAUTH 12
+
+/* control */
+#define WLAN_FC_STYPE_PSPOLL 10
+#define WLAN_FC_STYPE_RTS 11
+#define WLAN_FC_STYPE_CTS 12
+#define WLAN_FC_STYPE_ACK 13
+#define WLAN_FC_STYPE_CFEND 14
+#define WLAN_FC_STYPE_CFENDACK 15
+
+/* data */
+#define WLAN_FC_STYPE_DATA 0
+#define WLAN_FC_STYPE_DATA_CFACK 1
+#define WLAN_FC_STYPE_DATA_CFPOLL 2
+#define WLAN_FC_STYPE_DATA_CFACKPOLL 3
+#define WLAN_FC_STYPE_NULLFUNC 4
+#define WLAN_FC_STYPE_CFACK 5
+#define WLAN_FC_STYPE_CFPOLL 6
+#define WLAN_FC_STYPE_CFACKPOLL 7
+
+/* Authentication algorithms */
+#define WLAN_AUTH_OPEN 0
+#define WLAN_AUTH_SHARED_KEY 1
+
+#define WLAN_AUTH_CHALLENGE_LEN 128
+
+#define WLAN_CAPABILITY_ESS BIT(0)
+#define WLAN_CAPABILITY_IBSS BIT(1)
+#define WLAN_CAPABILITY_CF_POLLABLE BIT(2)
+#define WLAN_CAPABILITY_CF_POLL_REQUEST BIT(3)
+#define WLAN_CAPABILITY_PRIVACY BIT(4)
+
+/* Status codes */
+#define WLAN_STATUS_SUCCESS 0
+#define WLAN_STATUS_UNSPECIFIED_FAILURE 1
+#define WLAN_STATUS_CAPS_UNSUPPORTED 10
+#define WLAN_STATUS_REASSOC_NO_ASSOC 11
+#define WLAN_STATUS_ASSOC_DENIED_UNSPEC 12
+#define WLAN_STATUS_NOT_SUPPORTED_AUTH_ALG 13
+#define WLAN_STATUS_UNKNOWN_AUTH_TRANSACTION 14
+#define WLAN_STATUS_CHALLENGE_FAIL 15
+#define WLAN_STATUS_AUTH_TIMEOUT 16
+#define WLAN_STATUS_AP_UNABLE_TO_HANDLE_NEW_STA 17
+#define WLAN_STATUS_ASSOC_DENIED_RATES 18
+/* 802.11b */
+#define WLAN_STATUS_ASSOC_DENIED_NOSHORT 19
+#define WLAN_STATUS_ASSOC_DENIED_NOPBCC 20
+#define WLAN_STATUS_ASSOC_DENIED_NOAGILITY 21
+
+/* Reason codes */
+#define WLAN_REASON_UNSPECIFIED 1
+#define WLAN_REASON_PREV_AUTH_NOT_VALID 2
+#define WLAN_REASON_DEAUTH_LEAVING 3
+#define WLAN_REASON_DISASSOC_DUE_TO_INACTIVITY 4
+#define WLAN_REASON_DISASSOC_AP_BUSY 5
+#define WLAN_REASON_CLASS2_FRAME_FROM_NONAUTH_STA 6
+#define WLAN_REASON_CLASS3_FRAME_FROM_NONASSOC_STA 7
+#define WLAN_REASON_DISASSOC_STA_HAS_LEFT 8
+#define WLAN_REASON_STA_REQ_ASSOC_WITHOUT_AUTH 9
+
+
+/* Information Element IDs */
+#define WLAN_EID_SSID 0
+#define WLAN_EID_SUPP_RATES 1
+#define WLAN_EID_FH_PARAMS 2
+#define WLAN_EID_DS_PARAMS 3
+#define WLAN_EID_CF_PARAMS 4
+#define WLAN_EID_TIM 5
+#define WLAN_EID_IBSS_PARAMS 6
+#define WLAN_EID_CHALLENGE 16
+
+
+/* HFA384X Configuration RIDs */
+#define HFA384X_RID_CNFPORTTYPE 0xFC00
+#define HFA384X_RID_CNFOWNMACADDR 0xFC01
+#define HFA384X_RID_CNFDESIREDSSID 0xFC02
+#define HFA384X_RID_CNFOWNCHANNEL 0xFC03
+#define HFA384X_RID_CNFOWNSSID 0xFC04
+#define HFA384X_RID_CNFOWNATIMWINDOW 0xFC05
+#define HFA384X_RID_CNFSYSTEMSCALE 0xFC06
+#define HFA384X_RID_CNFMAXDATALEN 0xFC07
+#define HFA384X_RID_CNFWDSADDRESS 0xFC08
+#define HFA384X_RID_CNFPMENABLED 0xFC09
+#define HFA384X_RID_CNFPMEPS 0xFC0A
+#define HFA384X_RID_CNFMULTICASTRECEIVE 0xFC0B
+#define HFA384X_RID_CNFMAXSLEEPDURATION 0xFC0C
+#define HFA384X_RID_CNFPMHOLDOVERDURATION 0xFC0D
+#define HFA384X_RID_CNFOWNNAME 0xFC0E
+#define HFA384X_RID_CNFOWNDTIMPERIOD 0xFC10
+#define HFA384X_RID_CNFWDSADDRESS1 0xFC11 /* AP f/w only */
+#define HFA384X_RID_CNFWDSADDRESS2 0xFC12 /* AP f/w only */
+#define HFA384X_RID_CNFWDSADDRESS3 0xFC13 /* AP f/w only */
+#define HFA384X_RID_CNFWDSADDRESS4 0xFC14 /* AP f/w only */
+#define HFA384X_RID_CNFWDSADDRESS5 0xFC15 /* AP f/w only */
+#define HFA384X_RID_CNFWDSADDRESS6 0xFC16 /* AP f/w only */
+#define HFA384X_RID_CNFMULTICASTPMBUFFERING 0xFC17 /* AP f/w only */
+#define HFA384X_RID_UNKNOWN1 0xFC20
+#define HFA384X_RID_UNKNOWN2 0xFC21
+#define HFA384X_RID_CNFWEPDEFAULTKEYID 0xFC23
+#define HFA384X_RID_CNFDEFAULTKEY0 0xFC24
+#define HFA384X_RID_CNFDEFAULTKEY1 0xFC25
+#define HFA384X_RID_CNFDEFAULTKEY2 0xFC26
+#define HFA384X_RID_CNFDEFAULTKEY3 0xFC27
+#define HFA384X_RID_CNFWEPFLAGS 0xFC28
+#define HFA384X_RID_CNFWEPKEYMAPPINGTABLE 0xFC29
+#define HFA384X_RID_CNFAUTHENTICATION 0xFC2A
+#define HFA384X_RID_CNFMAXASSOCSTA 0xFC2B /* AP f/w only */
+#define HFA384X_RID_CNFTXCONTROL 0xFC2C
+#define HFA384X_RID_CNFROAMINGMODE 0xFC2D
+#define HFA384X_RID_CNFHOSTAUTHENTICATION 0xFC2E /* AP f/w only */
+#define HFA384X_RID_CNFRCVCRCERROR 0xFC30
+#define HFA384X_RID_CNFMMLIFE 0xFC31
+#define HFA384X_RID_CNFALTRETRYCOUNT 0xFC32
+#define HFA384X_RID_CNFBEACONINT 0xFC33
+#define HFA384X_RID_CNFAPPCFINFO 0xFC34 /* AP f/w only */
+#define HFA384X_RID_CNFSTAPCFINFO 0xFC35
+#define HFA384X_RID_CNFPRIORITYQUSAGE 0xFC37
+#define HFA384X_RID_CNFTIMCTRL 0xFC40
+#define HFA384X_RID_UNKNOWN3 0xFC41 /* added in STA f/w 0.7.x */
+#define HFA384X_RID_CNFTHIRTY2TALLY 0xFC42 /* added in STA f/w 0.8.0 */
+#define HFA384X_RID_CNFENHSECURITY 0xFC43 /* AP f/w or STA f/w >= 1.6.3 */
+#define HFA384X_RID_CNFDBMADJUST 0xFC46 /* added in STA f/w 1.3.1 */
+#define HFA384X_RID_GENERICELEMENT 0xFC48 /* added in STA f/w 1.7.0;
+					   * write only */
+#define HFA384X_RID_GROUPADDRESSES 0xFC80
+#define HFA384X_RID_CREATEIBSS 0xFC81
+#define HFA384X_RID_FRAGMENTATIONTHRESHOLD 0xFC82
+#define HFA384X_RID_RTSTHRESHOLD 0xFC83
+#define HFA384X_RID_TXRATECONTROL 0xFC84
+#define HFA384X_RID_PROMISCUOUSMODE 0xFC85
+#define HFA384X_RID_FRAGMENTATIONTHRESHOLD0 0xFC90 /* AP f/w only */
+#define HFA384X_RID_FRAGMENTATIONTHRESHOLD1 0xFC91 /* AP f/w only */
+#define HFA384X_RID_FRAGMENTATIONTHRESHOLD2 0xFC92 /* AP f/w only */
+#define HFA384X_RID_FRAGMENTATIONTHRESHOLD3 0xFC93 /* AP f/w only */
+#define HFA384X_RID_FRAGMENTATIONTHRESHOLD4 0xFC94 /* AP f/w only */
+#define HFA384X_RID_FRAGMENTATIONTHRESHOLD5 0xFC95 /* AP f/w only */
+#define HFA384X_RID_FRAGMENTATIONTHRESHOLD6 0xFC96 /* AP f/w only */
+#define HFA384X_RID_RTSTHRESHOLD0 0xFC97 /* AP f/w only */
+#define HFA384X_RID_RTSTHRESHOLD1 0xFC98 /* AP f/w only */
+#define HFA384X_RID_RTSTHRESHOLD2 0xFC99 /* AP f/w only */
+#define HFA384X_RID_RTSTHRESHOLD3 0xFC9A /* AP f/w only */
+#define HFA384X_RID_RTSTHRESHOLD4 0xFC9B /* AP f/w only */
+#define HFA384X_RID_RTSTHRESHOLD5 0xFC9C /* AP f/w only */
+#define HFA384X_RID_RTSTHRESHOLD6 0xFC9D /* AP f/w only */
+#define HFA384X_RID_TXRATECONTROL0 0xFC9E /* AP f/w only */
+#define HFA384X_RID_TXRATECONTROL1 0xFC9F /* AP f/w only */
+#define HFA384X_RID_TXRATECONTROL2 0xFCA0 /* AP f/w only */
+#define HFA384X_RID_TXRATECONTROL3 0xFCA1 /* AP f/w only */
+#define HFA384X_RID_TXRATECONTROL4 0xFCA2 /* AP f/w only */
+#define HFA384X_RID_TXRATECONTROL5 0xFCA3 /* AP f/w only */
+#define HFA384X_RID_TXRATECONTROL6 0xFCA4 /* AP f/w only */
+#define HFA384X_RID_CNFSHORTPREAMBLE 0xFCB0
+#define HFA384X_RID_CNFEXCLUDELONGPREAMBLE 0xFCB1
+#define HFA384X_RID_CNFAUTHENTICATIONRSPTO 0xFCB2
+#define HFA384X_RID_CNFBASICRATES 0xFCB3
+#define HFA384X_RID_CNFSUPPORTEDRATES 0xFCB4
+#define HFA384X_RID_CNFFALLBACKCTRL 0xFCB5 /* added in STA f/w 1.3.1 */
+#define HFA384X_RID_WEPKEYDISABLE 0xFCB6 /* added in STA f/w 1.3.1 */
+#define HFA384X_RID_WEPKEYMAPINDEX 0xFCB7 /* ? */
+#define HFA384X_RID_BROADCASTKEYID 0xFCB8 /* ? */
+#define HFA384X_RID_ENTSECFLAGEYID 0xFCB9 /* ? */
+#define HFA384X_RID_CNFPASSIVESCANCTRL 0xFCBA /* added in STA f/w 1.5.0 */
+#define HFA384X_RID_SSNHANDLINGMODE 0xFCBB /* added in STA f/w 1.7.0 */
+#define HFA384X_RID_MDCCONTROL 0xFCBC /* added in STA f/w 1.7.0 */
+#define HFA384X_RID_MDCCOUNTRY 0xFCBD /* added in STA f/w 1.7.0 */
+#define HFA384X_RID_TXPOWERMAX 0xFCBE /* added in STA f/w 1.7.0 */
+#define HFA384X_RID_CNFLFOENABLED 0xFCBF /* added in STA f/w 1.6.3 */
+#define HFA384X_RID_CAPINFO 0xFCC0 /* added in STA f/w 1.7.0 */
+#define HFA384X_RID_LISTENINTERVAL 0xFCC1 /* added in STA f/w 1.7.0 */
+#define HFA384X_RID_SW_ANT_DIV 0xFCC2 /* added in STA f/w 1.7.0; Prism3 */
+#define HFA384X_RID_TICKTIME 0xFCE0
+#define HFA384X_RID_SCANREQUEST 0xFCE1
+#define HFA384X_RID_JOINREQUEST 0xFCE2
+#define HFA384X_RID_AUTHENTICATESTATION 0xFCE3 /* AP f/w only */
+#define HFA384X_RID_CHANNELINFOREQUEST 0xFCE4 /* AP f/w only */
+#define HFA384X_RID_HOSTSCAN 0xFCE5 /* added in STA f/w 1.3.1 */
+
+/* HFA384X Information RIDs */
+#define HFA384X_RID_MAXLOADTIME 0xFD00
+#define HFA384X_RID_DOWNLOADBUFFER 0xFD01
+#define HFA384X_RID_PRIID 0xFD02
+#define HFA384X_RID_PRISUPRANGE 0xFD03
+#define HFA384X_RID_CFIACTRANGES 0xFD04
+#define HFA384X_RID_NICSERNUM 0xFD0A
+#define HFA384X_RID_NICID 0xFD0B
+#define HFA384X_RID_MFISUPRANGE 0xFD0C
+#define HFA384X_RID_CFISUPRANGE 0xFD0D
+#define HFA384X_RID_CHANNELLIST 0xFD10
+#define HFA384X_RID_REGULATORYDOMAINS 0xFD11
+#define HFA384X_RID_TEMPTYPE 0xFD12
+#define HFA384X_RID_CIS 0xFD13
+#define HFA384X_RID_STAID 0xFD20
+#define HFA384X_RID_STASUPRANGE 0xFD21
+#define HFA384X_RID_MFIACTRANGES 0xFD22
+#define HFA384X_RID_CFIACTRANGES2 0xFD23
+#define HFA384X_RID_PRODUCTNAME 0xFD24 /* added in STA f/w 1.3.1;
+					* only Prism2.5(?) */
+#define HFA384X_RID_PORTSTATUS 0xFD40
+#define HFA384X_RID_CURRENTSSID 0xFD41
+#define HFA384X_RID_CURRENTBSSID 0xFD42
+#define HFA384X_RID_COMMSQUALITY 0xFD43
+#define HFA384X_RID_CURRENTTXRATE 0xFD44
+#define HFA384X_RID_CURRENTBEACONINTERVAL 0xFD45
+#define HFA384X_RID_CURRENTSCALETHRESHOLDS 0xFD46
+#define HFA384X_RID_PROTOCOLRSPTIME 0xFD47
+#define HFA384X_RID_SHORTRETRYLIMIT 0xFD48
+#define HFA384X_RID_LONGRETRYLIMIT 0xFD49
+#define HFA384X_RID_MAXTRANSMITLIFETIME 0xFD4A
+#define HFA384X_RID_MAXRECEIVELIFETIME 0xFD4B
+#define HFA384X_RID_CFPOLLABLE 0xFD4C
+#define HFA384X_RID_AUTHENTICATIONALGORITHMS 0xFD4D
+#define HFA384X_RID_PRIVACYOPTIONIMPLEMENTED 0xFD4F
+#define HFA384X_RID_DBMCOMMSQUALITY 0xFD51 /* added in STA f/w 1.3.1 */
+#define HFA384X_RID_CURRENTTXRATE1 0xFD80 /* AP f/w only */
+#define HFA384X_RID_CURRENTTXRATE2 0xFD81 /* AP f/w only */
+#define HFA384X_RID_CURRENTTXRATE3 0xFD82 /* AP f/w only */
+#define HFA384X_RID_CURRENTTXRATE4 0xFD83 /* AP f/w only */
+#define HFA384X_RID_CURRENTTXRATE5 0xFD84 /* AP f/w only */
+#define HFA384X_RID_CURRENTTXRATE6 0xFD85 /* AP f/w only */
+#define HFA384X_RID_OWNMACADDR 0xFD86 /* AP f/w only */
+#define HFA384X_RID_SCANRESULTSTABLE 0xFD88 /* added in STA f/w 0.8.3 */
+#define HFA384X_RID_HOSTSCANRESULTS 0xFD89 /* added in STA f/w 1.3.1 */
+#define HFA384X_RID_AUTHENTICATIONUSED 0xFD8A /* added in STA f/w 1.3.4 */
+#define HFA384X_RID_CNFFAASWITCHCTRL 0xFD8B /* added in STA f/w 1.6.3 */
+#define HFA384X_RID_PHYTYPE 0xFDC0
+#define HFA384X_RID_CURRENTCHANNEL 0xFDC1
+#define HFA384X_RID_CURRENTPOWERSTATE 0xFDC2
+#define HFA384X_RID_CCAMODE 0xFDC3
+#define HFA384X_RID_SUPPORTEDDATARATES 0xFDC6
+#define HFA384X_RID_LFO_VOLT_REG_TEST_RES 0xFDC7 /* added in STA f/w 1.7.1 */
+#define HFA384X_RID_BUILDSEQ 0xFFFE
+#define HFA384X_RID_FWID 0xFFFF
+
+
+struct hfa384x_comp_ident
+{
+	u16 id;
+	u16 variant;
+	u16 major;
+	u16 minor;
+} __attribute__ ((packed));
+
+#define HFA384X_COMP_ID_PRI 0x15
+#define HFA384X_COMP_ID_STA 0x1f
+#define HFA384X_COMP_ID_FW_AP 0x14b
+
+struct hfa384x_sup_range
+{
+	u16 role;
+	u16 id;
+	u16 variant;
+	u16 bottom;
+	u16 top;
+} __attribute__ ((packed));
+
+
+struct hfa384x_build_id
+{
+	u16 pri_seq;
+	u16 sec_seq;
+} __attribute__ ((packed));
+
+/* FD01 - Download Buffer */
+struct hfa384x_rid_download_buffer
+{
+	u16 page;
+	u16 offset;
+	u16 length;
+} __attribute__ ((packed));
+
+/* BSS connection quality (RID FD43 range, RID FD51 dBm-normalized) */
+struct hfa384x_comms_quality {
+	u16 comm_qual; /* 0 .. 92 */
+	u16 signal_level; /* 27 .. 154 */
+	u16 noise_level; /* 27 .. 154 */
+} __attribute__ ((packed));
+
+
+/* netdevice private ioctls (used, e.g., with iwpriv from user space) */
+
+#if WIRELESS_EXT >= 12
+
+/* New wireless extensions API - SET/GET convention (even ioctl numbers are
+ * root only)
+ */
+#define PRISM2_IOCTL_PRISM2_PARAM (SIOCIWFIRSTPRIV + 0)
+#define PRISM2_IOCTL_GET_PRISM2_PARAM (SIOCIWFIRSTPRIV + 1)
+#define PRISM2_IOCTL_WRITEMIF (SIOCIWFIRSTPRIV + 2)
+#define PRISM2_IOCTL_READMIF (SIOCIWFIRSTPRIV + 3)
+#define PRISM2_IOCTL_MONITOR (SIOCIWFIRSTPRIV + 4)
+#define PRISM2_IOCTL_RESET (SIOCIWFIRSTPRIV + 6)
+#define PRISM2_IOCTL_INQUIRE (SIOCIWFIRSTPRIV + 8)
+#define PRISM2_IOCTL_WDS_ADD (SIOCIWFIRSTPRIV + 10)
+#define PRISM2_IOCTL_WDS_DEL (SIOCIWFIRSTPRIV + 12)
+#define PRISM2_IOCTL_SET_RID_WORD (SIOCIWFIRSTPRIV + 14)
+#define PRISM2_IOCTL_MACCMD (SIOCIWFIRSTPRIV + 16)
+#define PRISM2_IOCTL_ADDMAC (SIOCIWFIRSTPRIV + 18)
+#define PRISM2_IOCTL_DELMAC (SIOCIWFIRSTPRIV + 20)
+#define PRISM2_IOCTL_KICKMAC (SIOCIWFIRSTPRIV + 22)
+
+/* following are not in SIOCGIWPRIV list; check permission in the driver code
+ */
+#define PRISM2_IOCTL_DOWNLOAD (SIOCDEVPRIVATE + 13)
+#define PRISM2_IOCTL_HOSTAPD (SIOCDEVPRIVATE + 14)
+
+#else /* WIRELESS_EXT >= 12 */
+
+/* Old wireless extensions API - check permission in the driver code */
+#define PRISM2_IOCTL_MONITOR (SIOCDEVPRIVATE)
+#define PRISM2_IOCTL_PRISM2_PARAM (SIOCDEVPRIVATE + 1)
+#define PRISM2_IOCTL_READMIF (SIOCDEVPRIVATE + 2)
+#define PRISM2_IOCTL_WRITEMIF (SIOCDEVPRIVATE + 3)
+#define PRISM2_IOCTL_RESET (SIOCDEVPRIVATE + 4)
+#define PRISM2_IOCTL_INQUIRE (SIOCDEVPRIVATE + 5)
+#define PRISM2_IOCTL_WDS_ADD (SIOCDEVPRIVATE + 6)
+#define PRISM2_IOCTL_WDS_DEL (SIOCDEVPRIVATE + 7)
+#define PRISM2_IOCTL_SET_RID_WORD (SIOCDEVPRIVATE + 8)
+#define PRISM2_IOCTL_MACCMD (SIOCDEVPRIVATE + 9)
+#define PRISM2_IOCTL_ADDMAC (SIOCDEVPRIVATE + 10)
+#define PRISM2_IOCTL_DELMAC (SIOCDEVPRIVATE + 11)
+#define PRISM2_IOCTL_KICKMAC (SIOCDEVPRIVATE + 12)
+#define PRISM2_IOCTL_DOWNLOAD (SIOCDEVPRIVATE + 13)
+#define PRISM2_IOCTL_HOSTAPD (SIOCDEVPRIVATE + 14)
+
+#endif /* WIRELESS_EXT >= 12 */
+
+
+/* PRISM2_IOCTL_PRISM2_PARAM ioctl() subtypes: */
+enum {
+	PRISM2_PARAM_PTYPE = 1,
+	PRISM2_PARAM_TXRATECTRL = 2,
+	PRISM2_PARAM_BEACON_INT = 3,
+	PRISM2_PARAM_PSEUDO_IBSS = 4,
+	PRISM2_PARAM_ALC = 5,
+	PRISM2_PARAM_TXPOWER = 6,
+	PRISM2_PARAM_DUMP = 7,
+	PRISM2_PARAM_OTHER_AP_POLICY = 8,
+	PRISM2_PARAM_AP_MAX_INACTIVITY = 9,
+	PRISM2_PARAM_AP_BRIDGE_PACKETS = 10,
+	PRISM2_PARAM_DTIM_PERIOD = 11,
+	PRISM2_PARAM_AP_NULLFUNC_ACK = 12,
+	PRISM2_PARAM_MAX_WDS = 13,
+	PRISM2_PARAM_AP_AUTOM_AP_WDS = 14,
+	PRISM2_PARAM_AP_AUTH_ALGS = 15,
+	PRISM2_PARAM_MONITOR_ALLOW_FCSERR = 16,
+	PRISM2_PARAM_HOST_ENCRYPT = 17,
+	PRISM2_PARAM_HOST_DECRYPT = 18,
+	PRISM2_PARAM_BUS_MASTER_THRESHOLD_RX = 19,
+	PRISM2_PARAM_BUS_MASTER_THRESHOLD_TX = 20,
+	PRISM2_PARAM_HOST_ROAMING = 21,
+	PRISM2_PARAM_BCRX_STA_KEY = 22,
+	PRISM2_PARAM_IEEE_802_1X = 23,
+	PRISM2_PARAM_ANTSEL_TX = 24,
+	PRISM2_PARAM_ANTSEL_RX = 25,
+	PRISM2_PARAM_MONITOR_TYPE = 26,
+	PRISM2_PARAM_WDS_TYPE = 27,
+	PRISM2_PARAM_HOSTSCAN = 28,
+	PRISM2_PARAM_AP_SCAN = 29,
+	PRISM2_PARAM_ENH_SEC = 30,
+	PRISM2_PARAM_IO_DEBUG = 31,
+	PRISM2_PARAM_BASIC_RATES = 32,
+	PRISM2_PARAM_OPER_RATES = 33,
+	PRISM2_PARAM_HOSTAPD = 34,
+};
+
+enum { HOSTAP_ANTSEL_DO_NOT_TOUCH = 0, HOSTAP_ANTSEL_DIVERSITY = 1,
+       HOSTAP_ANTSEL_LOW = 2, HOSTAP_ANTSEL_HIGH = 3 };
+
+
+/* PRISM2_IOCTL_MACCMD ioctl() subcommands: */
+enum { AP_MAC_CMD_POLICY_OPEN = 0, AP_MAC_CMD_POLICY_ALLOW = 1,
+       AP_MAC_CMD_POLICY_DENY = 2, AP_MAC_CMD_FLUSH = 3,
+       AP_MAC_CMD_KICKALL = 4 };
+
+
+/* PRISM2_IOCTL_DOWNLOAD ioctl() dl_cmd: */
+enum {
+	PRISM2_DOWNLOAD_VOLATILE = 1 /* RAM */,
+	/* Note! Old versions of prism2_srec have a fatal error in CRC-16
+	 * calculation, which will corrupt all non-volatile downloads.
+	 * PRISM2_DOWNLOAD_NON_VOLATILE used to be 2, but it is now 3 to
+	 * prevent use of old versions of prism2_srec for non-volatile
+	 * download. */
+	PRISM2_DOWNLOAD_NON_VOLATILE = 3 /* FLASH */,
+	PRISM2_DOWNLOAD_VOLATILE_GENESIS = 4 /* RAM in Genesis mode */,
+	/* Persistent versions of volatile download commands (keep firmware
+	 * data in memory and automatically re-download after hw_reset */
+	PRISM2_DOWNLOAD_VOLATILE_PERSISTENT = 5,
+	PRISM2_DOWNLOAD_VOLATILE_GENESIS_PERSISTENT = 6,
+};
+
+struct prism2_download_param {
+	u32 dl_cmd;
+	u32 start_addr;
+	u32 num_areas;
+	struct prism2_download_area {
+		u32 addr; /* wlan card address */
+		u32 len;
+		caddr_t ptr; /* pointer to data in user space */
+	} data[0];
+};
+
+#define PRISM2_MAX_DOWNLOAD_AREA_LEN 131072
+#define PRISM2_MAX_DOWNLOAD_LEN 262144
+
+
+/* PRISM2_IOCTL_HOSTAPD ioctl() cmd: */
+enum {
+	PRISM2_HOSTAPD_FLUSH = 1,
+	PRISM2_HOSTAPD_ADD_STA = 2,
+	PRISM2_HOSTAPD_REMOVE_STA = 3,
+	PRISM2_HOSTAPD_GET_INFO_STA = 4,
+	/* REMOVED: PRISM2_HOSTAPD_RESET_TXEXC_STA = 5, */
+	PRISM2_SET_ENCRYPTION = 6,
+	PRISM2_GET_ENCRYPTION = 7,
+	PRISM2_HOSTAPD_SET_FLAGS_STA = 8,
+	PRISM2_HOSTAPD_GET_RID = 9,
+	PRISM2_HOSTAPD_SET_RID = 10,
+	PRISM2_HOSTAPD_SET_ASSOC_AP_ADDR = 11,
+};
+
+#define PRISM2_HOSTAPD_MAX_BUF_SIZE 1024
+#define PRISM2_HOSTAPD_RID_HDR_LEN \
+((int) (&((struct prism2_hostapd_param *) 0)->u.rid.data))
+
+/* Maximum length for algorithm names (-1 for nul termination) used in ioctl()
+ */
+#define HOSTAP_CRYPT_ALG_NAME_LEN 16
+
+
+struct prism2_hostapd_param {
+	u32 cmd;
+	u8 sta_addr[ETH_ALEN];
+	union {
+		struct {
+			u16 aid;
+			u16 capability;
+			u8 tx_supp_rates;
+		} add_sta;
+		struct {
+			u32 inactive_sec;
+		} get_info_sta;
+		struct {
+			u8 alg[HOSTAP_CRYPT_ALG_NAME_LEN];
+			u32 flags;
+			u32 err;
+			u8 idx;
+			u16 key_len;
+			u8 key[0];
+		} crypt;
+		struct {
+			u32 flags_and;
+			u32 flags_or;
+		} set_flags_sta;
+		struct {
+			u16 rid;
+			u16 len;
+			u8 data[0];
+		} rid;
+	} u;
+};
+
+#define HOSTAP_CRYPT_FLAG_SET_TX_KEY BIT(0)
+#define HOSTAP_CRYPT_FLAG_PERMANENT BIT(1)
+
+#define HOSTAP_CRYPT_ERR_UNKNOWN_ALG 2
+#define HOSTAP_CRYPT_ERR_UNKNOWN_ADDR 3
+#define HOSTAP_CRYPT_ERR_CRYPT_INIT_FAILED 4
+#define HOSTAP_CRYPT_ERR_KEY_SET_FAILED 5
+#define HOSTAP_CRYPT_ERR_TX_KEY_SET_FAILED 6
+#define HOSTAP_CRYPT_ERR_CARD_CONF_FAILED 7
+
+
+#endif /* HOSTAP_COMMON_H */
diff -Nur linux-orig/drivers/net/wireless/hostap_compat.h linux/drivers/net/wireless/hostap_compat.h
--- linux-orig/drivers/net/wireless/hostap_compat.h	1970-01-01 03:00:00.000000000 +0300
+++ linux/drivers/net/wireless/hostap_compat.h	2004-02-16 10:36:04.000000000 +0300
@@ -0,0 +1,186 @@
+#ifndef HOSTAP_COMPAT_H
+#define HOSTAP_COMPAT_H
+
+#if (LINUX_VERSION_CODE > KERNEL_VERSION(2,5,47))
+#define NEW_MODULE_CODE
+#endif
+
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,4,0))
+/* 2.2 compatibility */
+
+#include <linux/skbuff.h>
+#include <linux/kcomp.h>
+#include <asm/hardirq.h>
+
+#ifndef spin_lock_bh
+#define spin_lock_bh(lock) spin_lock_irq(lock)
+#define spin_unlock_bh(lock) spin_unlock_irq(lock)
+#endif
+
+#ifndef read_lock_bh
+#define read_lock_bh(lock) read_lock_irq(lock)
+#define read_unlock_bh(lock) read_unlock_irq(lock)
+#define rwlock_init(l)
+#endif
+
+#ifndef __constant_cpu_to_le16
+#define __constant_cpu_to_le16 __cpu_to_le16
+#endif
+
+#ifndef dev_get_by_name
+#define dev_get_by_name(dev) dev_get(dev)
+#endif
+
+#define PRISM2_NETDEV_EXTRA IFNAMSIZ
+#define prism2_set_dev_name(dev, pos) (dev)->name = (char *) (pos)
+
+#define HOSTAP_QUEUE struct tq_struct
+
+/* tq_scheduler was removed in 2.4.0-test12 */
+#define PRISM2_SCHEDULE_TASK(q) \
+MOD_INC_USE_COUNT; \
+queue_task((q), &tq_scheduler);
+
+static inline void flush_scheduled_work(void)
+{
+	schedule();
+	schedule();
+}
+
+static inline void INIT_WORK(struct tq_struct *tq,
+			     void (*routine)(void *), void *data)
+{
+	tq->next = NULL;
+	tq->sync = 0;
+	tq->routine = routine;
+	tq->data = data;
+}
+
+#define HOSTAP_TASKLET struct tq_struct
+
+static inline void tasklet_schedule(struct tq_struct *q)
+{
+	queue_task(q, &tq_immediate);
+	mark_bh(IMMEDIATE_BH);
+}
+
+typedef void (*tasklet_func)(void *);
+
+#define HOSTAP_TASKLET_INIT(q, f, d) \
+do { memset((q), 0, sizeof(*(q))); \
+(q)->routine = (tasklet_func) (f); \
+(q)->data = (void *) (d); } \
+while (0)
+
+
+static inline void dev_kfree_skb_any(struct sk_buff *skb)
+{
+	if (in_interrupt())
+		dev_kfree_skb_irq(skb);
+	else
+		dev_kfree_skb(skb);
+}
+
+static __inline__ void list_del_init(struct list_head *entry)
+{
+	__list_del(entry->prev, entry->next);
+	INIT_LIST_HEAD(entry);
+}
+
+#ifndef list_for_each_safe
+#define list_for_each_safe(pos, n, head) \
+        for (pos = (head)->next, n = pos->next; pos != (head); \
+                pos = n, n = pos->next)
+#endif
+
+/* end 2.2 compatibility */
+
+#else /* kernel < 2.4.0 */
+
+/* no extra space needed for 2.4.x net_device */
+#define PRISM2_NETDEV_EXTRA 0
+#define prism2_set_dev_name(dev, pos) do { } while (0)
+
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,5,44))
+
+#define HOSTAP_QUEUE struct tq_struct
+
+#define PRISM2_SCHEDULE_TASK(q) \
+MOD_INC_USE_COUNT; \
+if (schedule_task((q)) == 0) \
+	MOD_DEC_USE_COUNT;
+
+static inline void flush_scheduled_work(void)
+{
+	flush_scheduled_tasks();
+}
+
+static inline void INIT_WORK(struct tq_struct *tq,
+			     void (*routine)(void *), void *data)
+{
+	INIT_LIST_HEAD(&tq->list);
+	tq->sync = 0;
+	tq->routine = routine;
+	tq->data = data;
+}
+
+#else /* kernel < 2.5.44 */
+
+#define HOSTAP_QUEUE struct work_struct
+
+#ifdef NEW_MODULE_CODE
+#define PRISM2_SCHEDULE_TASK(q) schedule_work(q);
+#else /* NEW_MODULE_CODE */
+#define PRISM2_SCHEDULE_TASK(q) \
+MOD_INC_USE_COUNT; \
+if (schedule_work((q)) == 0) \
+	MOD_DEC_USE_COUNT;
+#endif /* NEW_MODULE_CODE */
+
+#endif /* kernel < 2.5.44 */
+
+#define HOSTAP_TASKLET struct tasklet_struct
+
+#define HOSTAP_TASKLET_INIT(q, f, d) \
+do { memset((q), 0, sizeof(*(q))); (q)->func = (f); (q)->data = (d); } \
+while (0)
+
+#endif /* kernel < 2.4.0 */
+
+
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,4,19))
+#define yield() schedule()
+#endif
+
+
+/* Interrupt handler backwards compatibility for Linux < 2.5.69 */
+#ifndef IRQ_NONE
+#define IRQ_NONE
+#define IRQ_HANDLED
+#define IRQ_RETVAL(x)
+typedef void irqreturn_t;
+#endif
+
+#ifndef MODULE_LICENSE
+#define MODULE_LICENSE(var)
+#endif
+
+#if WIRELESS_EXT > 12
+#if IW_HANDLER_VERSION < 3
+extern void wireless_send_event(struct net_device *dev,
+                                unsigned int cmd,
+                                union iwreq_data *wrqu,
+                                char *extra);
+#endif /* IW_HANDLER_VERSION < 3 */
+#endif /* WIRELESS_EXT > 12 */
+
+
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,4,23))
+struct net_device;
+static inline void free_netdev(struct net_device *dev)
+{
+	kfree(dev);
+}
+#endif
+
+#endif /* HOSTAP_COMPAT_H */
diff -Nur linux-orig/drivers/net/wireless/hostap_config.h linux/drivers/net/wireless/hostap_config.h
--- linux-orig/drivers/net/wireless/hostap_config.h	1970-01-01 03:00:00.000000000 +0300
+++ linux/drivers/net/wireless/hostap_config.h	2003-11-03 06:40:26.000000000 +0300
@@ -0,0 +1,92 @@
+#ifndef HOSTAP_CONFIG_H
+#define HOSTAP_CONFIG_H
+
+#define PRISM2_VERSION "0.1.2 - 2003-11-02"
+
+/* In the previous versions of Host AP driver, support for user space version
+ * of IEEE 802.11 management (hostapd) used to be disabled in the default
+ * configuration. From now on, support for hostapd is always included and it is
+ * possible to disable kernel driver version of IEEE 802.11 management with a
+ * separate define, PRISM2_NO_KERNEL_IEEE80211_MGMT. */
+/* #define PRISM2_NO_KERNEL_IEEE80211_MGMT */
+
+/* Maximum number of events handler per one interrupt */
+#define PRISM2_MAX_INTERRUPT_EVENTS 20
+
+/* Use PCI bus master to copy data to/from BAP (only available for
+ * hostap_pci.o).
+ *
+ * Note! This is extremely experimental. PCI bus master is not supported by
+ * Intersil and it seems to have some problems at least on TX path (see below).
+ * The driver code for implementing bus master support is based on guessing
+ * and experimenting suitable control bits and these might not be correct.
+ * This code is included because using bus master makes a huge difference in
+ * host CPU load (something like 40% host CPU usage to 5-10% when sending or
+ * receiving at maximum throughput).
+ *
+ * Note2! Station firmware version 1.3.5 and primary firmware version 1.0.7
+ * have some fixes for PCI corruption and these (or newer) versions are
+ * recommended especially when using bus mastering. */
+/* #define PRISM2_BUS_MASTER */
+
+#ifdef PRISM2_BUS_MASTER
+
+/* PCI bus master implementation seems to be broken in current
+ * hardware/firmware versions. Enable this to use enable command to fix
+ * something before starting bus master operation on TX path. This will add
+ * some latency and an extra interrupt to each TX packet. */
+#define PRISM2_ENABLE_BEFORE_TX_BUS_MASTER
+
+#endif /* PRISM2_BUS_MASTER */
+
+/* Include code for downloading firmware images. */
+/* #define PRISM2_DOWNLOAD_SUPPORT */
+
+/* Allow kernel configuration to enable download support. */
+#if !defined(PRISM2_DOWNLOAD_SUPPORT) && defined(CONFIG_HOSTAP_FIRMWARE)
+#define PRISM2_DOWNLOAD_SUPPORT
+#endif
+
+#ifdef PRISM2_DOWNLOAD_SUPPORT
+/* Allow writing firmware images into flash, i.e., to non-volatile storage.
+ * Before you enable this option, you should make absolutely sure that you are
+ * using prism2_srec utility that comes with THIS version of the driver!
+ * In addition, please note that it is possible to kill your card with
+ * non-volatile download if you are using incorrect image. This feature has not
+ * been fully tested, so please be careful with it. */
+/* #define PRISM2_NON_VOLATILE_DOWNLOAD */
+#endif /* PRISM2_DOWNLOAD_SUPPORT */
+
+/* Include wireless extensions sub-ioctl support even if wireless extensions
+ * version is less than 15 (actually, only if it is 12 .. 14). If ver >= 15,
+ * these will be included. Please note, that this requires iwpriv version 25
+ * or higher (older versions will segfault due to long ioctl list). */
+/* #define PRISM2_USE_WE_SUB_IOCTLS */
+
+/* Use IW_PRIV_TYPE_ADDR with private WE ioctls taking MAC address argument
+ * (instead of old 18*char). This requires iwpriv ver >= 25. This will be
+ * automatically included for WIRELESS_EXT >= 15. */
+/* #define PRISM2_USE_WE_TYPE_ADDR */
+
+/* Save low-level I/O for debugging. This should not be enabled in normal use.
+ */
+/* #define PRISM2_IO_DEBUG */
+
+/* Following defines can be used to remove unneeded parts of the driver, e.g.,
+ * to limit the size of the kernel module. Definitions can be added here in
+ * hostap_config.h or they can be added to make command with EXTRA_CFLAGS,
+ * e.g.,
+ * 'make pccard EXTRA_CFLAGS="-DPRISM2_NO_DEBUG -DPRISM2_NO_PROCFS_DEBUG"'
+ */
+
+/* Do not include debug messages into the driver */
+/* #define PRISM2_NO_DEBUG */
+
+/* Do not include /proc/net/prism2/wlan#/{registers,debug} */
+/* #define PRISM2_NO_PROCFS_DEBUG */
+
+/* Do not include station functionality (i.e., allow only Master (Host AP) mode
+ */
+/* #define PRISM2_NO_STATION_MODES */
+
+#endif /* HOSTAP_CONFIG_H */
diff -Nur linux-orig/drivers/net/wireless/hostap_crypt.c linux/drivers/net/wireless/hostap_crypt.c
--- linux-orig/drivers/net/wireless/hostap_crypt.c	1970-01-01 03:00:00.000000000 +0300
+++ linux/drivers/net/wireless/hostap_crypt.c	2003-08-03 22:50:12.000000000 +0400
@@ -0,0 +1,194 @@
+/*
+ * Host AP crypto routines
+ *
+ * Copyright (c) 2002-2003, Jouni Malinen <jkmaline@cc.hut.fi>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation. See README and COPYING for
+ * more details.
+ */
+
+#ifdef HOSTAP_CRYPT_MODULE
+#ifndef EXPORT_SYMTAB
+#define EXPORT_SYMTAB
+#endif
+
+#include <linux/config.h>
+#include <linux/version.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/slab.h>
+#include <asm/string.h>
+#include <asm/errno.h>
+
+#include "hostap_crypt.h"
+#include "hostap_compat.h"
+
+MODULE_AUTHOR("Jouni Malinen");
+MODULE_DESCRIPTION("Host AP crypto");
+MODULE_LICENSE("GPL");
+#endif /* HOSTAP_CRYPT_MODULE */
+
+
+struct hostap_crypto_alg {
+	struct list_head list;
+	struct hostap_crypto_ops *ops;
+};
+
+
+struct hostap_crypto {
+	struct list_head algs;
+	spinlock_t lock;
+};
+
+static struct hostap_crypto *hcrypt;
+
+
+int hostap_register_crypto_ops(struct hostap_crypto_ops *ops)
+{
+	unsigned long flags;
+	struct hostap_crypto_alg *alg;
+
+	if (hcrypt == NULL)
+		return -1;
+
+	alg = (struct hostap_crypto_alg *) kmalloc(sizeof(*alg), GFP_KERNEL);
+	if (alg == NULL)
+		return -ENOMEM;
+
+	memset(alg, 0, sizeof(*alg));
+	alg->ops = ops;
+
+	spin_lock_irqsave(&hcrypt->lock, flags);
+	list_add(&alg->list, &hcrypt->algs);
+	spin_unlock_irqrestore(&hcrypt->lock, flags);
+
+	printk(KERN_DEBUG "hostap_crypt: registered algorithm '%s'\n",
+	       ops->name);
+
+	return 0;
+}
+
+
+int hostap_unregister_crypto_ops(struct hostap_crypto_ops *ops)
+{
+	unsigned long flags;
+	struct list_head *ptr;
+	struct hostap_crypto_alg *del_alg = NULL;
+
+	if (hcrypt == NULL)
+		return -1;
+
+	spin_lock_irqsave(&hcrypt->lock, flags);
+	for (ptr = hcrypt->algs.next; ptr != &hcrypt->algs; ptr = ptr->next) {
+		struct hostap_crypto_alg *alg =
+			(struct hostap_crypto_alg *) ptr;
+		if (alg->ops == ops) {
+			list_del(&alg->list);
+			del_alg = alg;
+			break;
+		}
+	}
+	spin_unlock_irqrestore(&hcrypt->lock, flags);
+
+	if (del_alg) {
+		printk(KERN_DEBUG "hostap_crypt: unregistered algorithm "
+		       "'%s'\n", ops->name);
+		kfree(del_alg);
+	}
+
+	return del_alg ? 0 : -1;
+}
+
+
+struct hostap_crypto_ops * hostap_get_crypto_ops(const char *name)
+{
+	unsigned long flags;
+	struct list_head *ptr;
+	struct hostap_crypto_alg *found_alg = NULL;
+
+	if (hcrypt == NULL)
+		return NULL;
+
+	spin_lock_irqsave(&hcrypt->lock, flags);
+	for (ptr = hcrypt->algs.next; ptr != &hcrypt->algs; ptr = ptr->next) {
+		struct hostap_crypto_alg *alg =
+			(struct hostap_crypto_alg *) ptr;
+		if (strcmp(alg->ops->name, name) == 0) {
+			found_alg = alg;
+			break;
+		}
+	}
+	spin_unlock_irqrestore(&hcrypt->lock, flags);
+
+	if (found_alg)
+		return found_alg->ops;
+	else
+		return NULL;
+}
+
+
+static void * hostap_crypt_null_init(void) { return (void *) 1; }
+static void hostap_crypt_null_deinit(void *priv) {}
+
+static struct hostap_crypto_ops hostap_crypt_null = {
+	.name			= "NULL",
+	.init			= hostap_crypt_null_init,
+	.deinit			= hostap_crypt_null_deinit,
+	.encrypt		= NULL,
+	.decrypt		= NULL,
+	.set_key		= NULL,
+	.get_key		= NULL,
+	.set_key_idx		= NULL,
+	.get_key_idx		= NULL,
+	.extra_prefix_len	= 0,
+	.extra_postfix_len	= 0
+};
+
+
+static int __init hostap_crypto_init(void)
+{
+	hcrypt = (struct hostap_crypto *) kmalloc(sizeof(*hcrypt), GFP_KERNEL);
+	if (hcrypt == NULL)
+		return -ENOMEM;
+
+	memset(hcrypt, 0, sizeof(*hcrypt));
+	INIT_LIST_HEAD(&hcrypt->algs);
+	spin_lock_init(&hcrypt->lock);
+
+	(void) hostap_register_crypto_ops(&hostap_crypt_null);
+
+	return 0;
+}
+
+
+static void __exit hostap_crypto_deinit(void)
+{
+	struct list_head *ptr, *n;
+
+	if (hcrypt == NULL)
+		return;
+
+	for (ptr = hcrypt->algs.next, n = ptr->next; ptr != &hcrypt->algs;
+	     ptr = n, n = ptr->next) {
+		struct hostap_crypto_alg *alg =
+			(struct hostap_crypto_alg *) ptr;
+		list_del(ptr);
+		printk(KERN_DEBUG "hostap_crypt: unregistered algorithm "
+		       "'%s' (deinit)\n", alg->ops->name);
+		kfree(alg);
+	}
+
+	kfree(hcrypt);
+}
+
+
+EXPORT_SYMBOL(hostap_register_crypto_ops);
+EXPORT_SYMBOL(hostap_unregister_crypto_ops);
+EXPORT_SYMBOL(hostap_get_crypto_ops);
+
+#ifdef HOSTAP_CRYPT_MODULE
+module_init(hostap_crypto_init);
+module_exit(hostap_crypto_deinit);
+#endif /* HOSTAP_CRYPT_MODULE */
diff -Nur linux-orig/drivers/net/wireless/hostap_crypt.h linux/drivers/net/wireless/hostap_crypt.h
--- linux-orig/drivers/net/wireless/hostap_crypt.h	1970-01-01 03:00:00.000000000 +0300
+++ linux/drivers/net/wireless/hostap_crypt.h	2003-08-03 23:52:08.000000000 +0400
@@ -0,0 +1,39 @@
+#ifndef PRISM2_CRYPT_H
+#define PRISM2_CRYPT_H
+
+struct hostap_crypto_ops {
+	char *name;
+
+	/* init new crypto context (e.g., allocate private data space,
+	 * select IV, etc.); returns NULL on failure or pointer to allocated
+	 * private data on success */
+	void * (*init)(void);
+
+	/* deinitialize crypto context and free allocated private data */
+	void (*deinit)(void *priv);
+
+	/* encrypt/decrypt return < 0 on error or number of bytes written
+	 * to out_buf; len is number of bytes in in_buf */
+	int (*encrypt)(u8 *buf, int len, void *priv);
+	int (*decrypt)(u8 *buf, int len, void *priv);
+
+	int (*set_key)(int idx, void *key, int len, void *priv);
+	int (*get_key)(int idx, void *key, int len, void *priv);
+
+	int (*set_key_idx)(int idx, void *priv);
+	int (*get_key_idx)(void *priv);
+
+	/* maximum number of bytes added by encryption; encrypt buf is
+	 * allocated with extra_prefix_len bytes, copy of in_buf, and
+	 * extra_postfix_len; encrypt need not use all this space, but
+	 * the result must start at the beginning of the buffer and correct
+	 * length must be returned */
+	int extra_prefix_len, extra_postfix_len;
+};
+
+
+int hostap_register_crypto_ops(struct hostap_crypto_ops *ops);
+int hostap_unregister_crypto_ops(struct hostap_crypto_ops *ops);
+struct hostap_crypto_ops * hostap_get_crypto_ops(const char *name);
+
+#endif /* PRISM2_CRYPT_H */
diff -Nur linux-orig/drivers/net/wireless/hostap_crypt_wep.c linux/drivers/net/wireless/hostap_crypt_wep.c
--- linux-orig/drivers/net/wireless/hostap_crypt_wep.c	1970-01-01 03:00:00.000000000 +0300
+++ linux/drivers/net/wireless/hostap_crypt_wep.c	2003-08-03 21:22:01.000000000 +0400
@@ -0,0 +1,364 @@
+/*
+ * Host AP crypt: host-based WEP encryption implementation for Host AP driver
+ *
+ * Copyright (c) 2002, Jouni Malinen <jkmaline@cc.hut.fi>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation. See README and COPYING for
+ * more details.
+ */
+
+#include <linux/config.h>
+#include <linux/version.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/slab.h>
+#include <linux/random.h>
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,5,44))
+#include <linux/tqueue.h>
+#else
+#include <linux/workqueue.h>
+#endif
+#include <asm/string.h>
+
+#include "hostap_crypt.h"
+#include "hostap_compat.h"
+
+MODULE_AUTHOR("Jouni Malinen");
+MODULE_DESCRIPTION("Host AP crypt: WEP");
+MODULE_LICENSE("GPL");
+
+
+struct prism2_wep_data {
+	u32 iv;
+#define WEP_KEYS 4
+#define WEP_KEY_LEN 13
+	u8 keys[WEP_KEYS][WEP_KEY_LEN + 1];
+	u8 key_lens[WEP_KEYS];
+	int tx_key;
+};
+
+static const __u32 crc32_table[256] = {
+	0x00000000L, 0x77073096L, 0xee0e612cL, 0x990951baL, 0x076dc419L,
+	0x706af48fL, 0xe963a535L, 0x9e6495a3L, 0x0edb8832L, 0x79dcb8a4L,
+	0xe0d5e91eL, 0x97d2d988L, 0x09b64c2bL, 0x7eb17cbdL, 0xe7b82d07L,
+	0x90bf1d91L, 0x1db71064L, 0x6ab020f2L, 0xf3b97148L, 0x84be41deL,
+	0x1adad47dL, 0x6ddde4ebL, 0xf4d4b551L, 0x83d385c7L, 0x136c9856L,
+	0x646ba8c0L, 0xfd62f97aL, 0x8a65c9ecL, 0x14015c4fL, 0x63066cd9L,
+	0xfa0f3d63L, 0x8d080df5L, 0x3b6e20c8L, 0x4c69105eL, 0xd56041e4L,
+	0xa2677172L, 0x3c03e4d1L, 0x4b04d447L, 0xd20d85fdL, 0xa50ab56bL,
+	0x35b5a8faL, 0x42b2986cL, 0xdbbbc9d6L, 0xacbcf940L, 0x32d86ce3L,
+	0x45df5c75L, 0xdcd60dcfL, 0xabd13d59L, 0x26d930acL, 0x51de003aL,
+	0xc8d75180L, 0xbfd06116L, 0x21b4f4b5L, 0x56b3c423L, 0xcfba9599L,
+	0xb8bda50fL, 0x2802b89eL, 0x5f058808L, 0xc60cd9b2L, 0xb10be924L,
+	0x2f6f7c87L, 0x58684c11L, 0xc1611dabL, 0xb6662d3dL, 0x76dc4190L,
+	0x01db7106L, 0x98d220bcL, 0xefd5102aL, 0x71b18589L, 0x06b6b51fL,
+	0x9fbfe4a5L, 0xe8b8d433L, 0x7807c9a2L, 0x0f00f934L, 0x9609a88eL,
+	0xe10e9818L, 0x7f6a0dbbL, 0x086d3d2dL, 0x91646c97L, 0xe6635c01L,
+	0x6b6b51f4L, 0x1c6c6162L, 0x856530d8L, 0xf262004eL, 0x6c0695edL,
+	0x1b01a57bL, 0x8208f4c1L, 0xf50fc457L, 0x65b0d9c6L, 0x12b7e950L,
+	0x8bbeb8eaL, 0xfcb9887cL, 0x62dd1ddfL, 0x15da2d49L, 0x8cd37cf3L,
+	0xfbd44c65L, 0x4db26158L, 0x3ab551ceL, 0xa3bc0074L, 0xd4bb30e2L,
+	0x4adfa541L, 0x3dd895d7L, 0xa4d1c46dL, 0xd3d6f4fbL, 0x4369e96aL,
+	0x346ed9fcL, 0xad678846L, 0xda60b8d0L, 0x44042d73L, 0x33031de5L,
+	0xaa0a4c5fL, 0xdd0d7cc9L, 0x5005713cL, 0x270241aaL, 0xbe0b1010L,
+	0xc90c2086L, 0x5768b525L, 0x206f85b3L, 0xb966d409L, 0xce61e49fL,
+	0x5edef90eL, 0x29d9c998L, 0xb0d09822L, 0xc7d7a8b4L, 0x59b33d17L,
+	0x2eb40d81L, 0xb7bd5c3bL, 0xc0ba6cadL, 0xedb88320L, 0x9abfb3b6L,
+	0x03b6e20cL, 0x74b1d29aL, 0xead54739L, 0x9dd277afL, 0x04db2615L,
+	0x73dc1683L, 0xe3630b12L, 0x94643b84L, 0x0d6d6a3eL, 0x7a6a5aa8L,
+	0xe40ecf0bL, 0x9309ff9dL, 0x0a00ae27L, 0x7d079eb1L, 0xf00f9344L,
+	0x8708a3d2L, 0x1e01f268L, 0x6906c2feL, 0xf762575dL, 0x806567cbL,
+	0x196c3671L, 0x6e6b06e7L, 0xfed41b76L, 0x89d32be0L, 0x10da7a5aL,
+	0x67dd4accL, 0xf9b9df6fL, 0x8ebeeff9L, 0x17b7be43L, 0x60b08ed5L,
+	0xd6d6a3e8L, 0xa1d1937eL, 0x38d8c2c4L, 0x4fdff252L, 0xd1bb67f1L,
+	0xa6bc5767L, 0x3fb506ddL, 0x48b2364bL, 0xd80d2bdaL, 0xaf0a1b4cL,
+	0x36034af6L, 0x41047a60L, 0xdf60efc3L, 0xa867df55L, 0x316e8eefL,
+	0x4669be79L, 0xcb61b38cL, 0xbc66831aL, 0x256fd2a0L, 0x5268e236L,
+	0xcc0c7795L, 0xbb0b4703L, 0x220216b9L, 0x5505262fL, 0xc5ba3bbeL,
+	0xb2bd0b28L, 0x2bb45a92L, 0x5cb36a04L, 0xc2d7ffa7L, 0xb5d0cf31L,
+	0x2cd99e8bL, 0x5bdeae1dL, 0x9b64c2b0L, 0xec63f226L, 0x756aa39cL,
+	0x026d930aL, 0x9c0906a9L, 0xeb0e363fL, 0x72076785L, 0x05005713L,
+	0x95bf4a82L, 0xe2b87a14L, 0x7bb12baeL, 0x0cb61b38L, 0x92d28e9bL,
+	0xe5d5be0dL, 0x7cdcefb7L, 0x0bdbdf21L, 0x86d3d2d4L, 0xf1d4e242L,
+	0x68ddb3f8L, 0x1fda836eL, 0x81be16cdL, 0xf6b9265bL, 0x6fb077e1L,
+	0x18b74777L, 0x88085ae6L, 0xff0f6a70L, 0x66063bcaL, 0x11010b5cL,
+	0x8f659effL, 0xf862ae69L, 0x616bffd3L, 0x166ccf45L, 0xa00ae278L,
+	0xd70dd2eeL, 0x4e048354L, 0x3903b3c2L, 0xa7672661L, 0xd06016f7L,
+	0x4969474dL, 0x3e6e77dbL, 0xaed16a4aL, 0xd9d65adcL, 0x40df0b66L,
+	0x37d83bf0L, 0xa9bcae53L, 0xdebb9ec5L, 0x47b2cf7fL, 0x30b5ffe9L,
+	0xbdbdf21cL, 0xcabac28aL, 0x53b39330L, 0x24b4a3a6L, 0xbad03605L,
+	0xcdd70693L, 0x54de5729L, 0x23d967bfL, 0xb3667a2eL, 0xc4614ab8L,
+	0x5d681b02L, 0x2a6f2b94L, 0xb40bbe37L, 0xc30c8ea1L, 0x5a05df1bL,
+	0x2d02ef8dL
+};
+
+
+static void * prism2_wep_init(void)
+{
+	struct prism2_wep_data *priv;
+
+#ifndef NEW_MODULE_CODE
+	MOD_INC_USE_COUNT;
+#endif
+
+	priv = (struct prism2_wep_data *) kmalloc(sizeof(*priv), GFP_ATOMIC);
+	if (priv == NULL) {
+#ifndef NEW_MODULE_CODE
+		MOD_DEC_USE_COUNT;
+#endif
+		return NULL;
+	}
+	memset(priv, 0, sizeof(*priv));
+
+	/* start WEP IV from a random value */
+	get_random_bytes(&priv->iv, 4);
+
+	return priv;
+}
+
+
+static void prism2_wep_deinit(void *priv)
+{
+	kfree(priv);
+#ifndef NEW_MODULE_CODE
+	MOD_DEC_USE_COUNT;
+#endif
+}
+
+
+/* Perform WEP encryption on given buffer. Buffer needs to has 4 bytes of
+ * extra space (IV) in the beginning, then len bytes of data, and finally
+ * 4 bytes of extra space (ICV). Both IV and ICV will be transmitted, so the
+ * payload length increases with 8 bytes.
+ *
+ * WEP frame payload: IV + TX key idx, RC4(data), ICV = RC4(CRC32(data))
+ */
+static int prism2_wep_encrypt(u8 *buf, int len, void *priv)
+{
+	struct prism2_wep_data *wep = priv;
+	u32 i, j, k, crc, klen;
+	u8 S[256], key[WEP_KEY_LEN + 3];
+	u8 kpos, *pos;
+#define S_SWAP(a,b) do { u8 t = S[a]; S[a] = S[b]; S[b] = t; } while(0)
+
+	klen = 3 + wep->key_lens[wep->tx_key];
+
+	wep->iv++;
+
+	/* Fluhrer, Mantin, and Shamir have reported weaknesses in the key
+	 * scheduling algorithm of RC4. At least IVs (KeyByte + 3, 0xff, N)
+	 * can be used to speedup attacks, so avoid using them. */
+	if ((wep->iv & 0xff00) == 0xff00) {
+		u8 B = (wep->iv >> 16) & 0xff;
+		if (B >= 3 && B < klen)
+			wep->iv += 0x0100;
+	}
+
+	/* Prepend 24-bit IV to RC4 key and TX frame */
+	pos = buf;
+	*pos++ = key[0] = (wep->iv >> 16) & 0xff;
+	*pos++ = key[1] = (wep->iv >> 8) & 0xff;
+	*pos++ = key[2] = wep->iv & 0xff;
+	*pos++ = wep->tx_key << 6;
+
+	/* Copy rest of the WEP key (the secret part) */
+	memcpy(key + 3, wep->keys[wep->tx_key],
+	       wep->key_lens[wep->tx_key]);
+
+	/* Setup RC4 state */
+	for (i = 0; i < 256; i++)
+		S[i] = i;
+	j = 0;
+	kpos = 0;
+	for (i = 0; i < 256; i++) {
+		j = (j + S[i] + key[kpos]) & 0xff;
+		kpos++;
+		if (kpos >= klen)
+			kpos = 0;
+		S_SWAP(i, j);
+	}
+
+	/* Compute CRC32 over unencrypted data and apply RC4 to data */
+	crc = ~0;
+	i = j = 0;
+	for (k = 0; k < len; k++) {
+		crc = crc32_table[(crc ^ *pos) & 0xff] ^ (crc >> 8);
+		i = (i + 1) & 0xff;
+		j = (j + S[i]) & 0xff;
+		S_SWAP(i, j);
+		*pos++ ^= S[(S[i] + S[j]) & 0xff];
+	}
+	crc = ~crc;
+
+	/* Append little-endian CRC32 and encrypt it to produce ICV */
+	pos[0] = crc;
+	pos[1] = crc >> 8;
+	pos[2] = crc >> 16;
+	pos[3] = crc >> 24;
+	for (k = 0; k < 4; k++) {
+		i = (i + 1) & 0xff;
+		j = (j + S[i]) & 0xff;
+		S_SWAP(i, j);
+		*pos++ ^= S[(S[i] + S[j]) & 0xff];
+	}
+
+	return len + 8;
+}
+
+
+/* Perform WEP decryption on given buffer. Buffer includes whole WEP part of
+ * the frame: IV (4 bytes), encrypted payload (including SNAP header),
+ * ICV (4 bytes). len includes both IV and ICV.
+ *
+ * Returns 0 if frame was decrypted successfully and ICV was correct and -1 on
+ * failure. If frame is OK, IV and ICV will be removed, i.e., decrypted payload
+ * is moved to beginning of buf and last 8 bytes of buf should be ignored.
+ */
+static int prism2_wep_decrypt(u8 *buf, int len, void *priv)
+{
+	struct prism2_wep_data *wep = priv;
+	u32 i, j, k, crc, klen;
+	u8 S[256], key[WEP_KEY_LEN + 3];
+	u8 keyidx, kpos, *dpos, *cpos;
+
+	if (len < 8)
+		return -1;
+
+	key[0] = buf[0];
+	key[1] = buf[1];
+	key[2] = buf[2];
+	keyidx = buf[3] >> 6;
+
+	klen = 3 + wep->key_lens[keyidx];
+
+	/* Copy rest of the WEP key (the secret part) */
+	memcpy(key + 3, wep->keys[keyidx], wep->key_lens[keyidx]);
+
+	/* Setup RC4 state */
+	for (i = 0; i < 256; i++)
+		S[i] = i;
+	j = 0;
+	kpos = 0;
+	for (i = 0; i < 256; i++) {
+		j = (j + S[i] + key[kpos]) & 0xff;
+		kpos++;
+		if (kpos >= klen)
+			kpos = 0;
+		S_SWAP(i, j);
+	}
+
+	/* Apply RC4 to data and compute CRC32 over decrypted data */
+	dpos = buf;
+	cpos = buf + 4;
+	crc = ~0;
+	i = j = 0;
+	for (k = 0; k < len - 8; k++) {
+		i = (i + 1) & 0xff;
+		j = (j + S[i]) & 0xff;
+		S_SWAP(i, j);
+		*dpos = *cpos++ ^ S[(S[i] + S[j]) & 0xff];
+		crc = crc32_table[(crc ^ *dpos++) & 0xff] ^ (crc >> 8);
+	}
+	crc = ~crc;
+
+	/* Encrypt little-endian CRC32 and verify that it matches with the
+	 * received ICV */
+	dpos[0] = crc;
+	dpos[1] = crc >> 8;
+	dpos[2] = crc >> 16;
+	dpos[3] = crc >> 24;
+	for (k = 0; k < 4; k++) {
+		i = (i + 1) & 0xff;
+		j = (j + S[i]) & 0xff;
+		S_SWAP(i, j);
+		if ((*dpos++ ^ S[(S[i] + S[j]) & 0xff]) != *cpos++) {
+			/* ICV mismatch - drop frame */
+			return -1;
+		}
+	}
+
+	return len - 8;
+}
+
+
+static int prism2_wep_set_key(int idx, void *key, int len, void *priv)
+{
+	struct prism2_wep_data *wep = priv;
+
+	if (idx < 0 || idx >= WEP_KEYS || len < 0 || len > WEP_KEY_LEN)
+		return -1;
+
+	memcpy(wep->keys[idx], key, len);
+	wep->key_lens[idx] = len;
+
+	return 0;
+}
+
+
+static int prism2_wep_get_key(int idx, void *key, int len, void *priv)
+{
+	struct prism2_wep_data *wep = priv;
+
+	if (idx < 0 || idx >= WEP_KEYS || len < wep->key_lens[idx])
+		return -1;
+
+	memcpy(key, wep->keys[idx], wep->key_lens[idx]);
+
+	return wep->key_lens[idx];
+}
+
+
+static int prism2_wep_set_key_idx(int idx, void *priv)
+{
+	struct prism2_wep_data *wep = priv;
+
+	if (idx < 0 || idx >= WEP_KEYS || wep->key_lens[idx] == 0)
+		return -1;
+
+	wep->tx_key = idx;
+
+	return 0;
+}
+
+
+static int prism2_wep_get_key_idx(void *priv)
+{
+	struct prism2_wep_data *wep = priv;
+	return wep->tx_key;
+}
+
+
+static struct hostap_crypto_ops hostap_crypt_wep = {
+	.name			= "WEP",
+	.init			= prism2_wep_init,
+	.deinit			= prism2_wep_deinit,
+	.encrypt		= prism2_wep_encrypt,
+	.decrypt		= prism2_wep_decrypt,
+	.set_key		= prism2_wep_set_key,
+	.get_key		= prism2_wep_get_key,
+	.set_key_idx		= prism2_wep_set_key_idx,
+	.get_key_idx		= prism2_wep_get_key_idx,
+	.extra_prefix_len	= 4 /* IV */,
+	.extra_postfix_len	= 4 /* ICV */
+};
+
+
+static int __init hostap_crypto_wep_init(void)
+{
+	if (hostap_register_crypto_ops(&hostap_crypt_wep) < 0)
+		return -1;
+
+	return 0;
+}
+
+
+static void __exit hostap_crypto_wep_exit(void)
+{
+	hostap_unregister_crypto_ops(&hostap_crypt_wep);
+}
+
+
+module_init(hostap_crypto_wep_init);
+module_exit(hostap_crypto_wep_exit);
diff -Nur linux-orig/drivers/net/wireless/hostap_cs.c linux/drivers/net/wireless/hostap_cs.c
--- linux-orig/drivers/net/wireless/hostap_cs.c	1970-01-01 03:00:00.000000000 +0300
+++ linux/drivers/net/wireless/hostap_cs.c	2003-10-11 21:11:56.000000000 +0400
@@ -0,0 +1,877 @@
+#define PRISM2_PCCARD
+
+#include <linux/config.h>
+#ifdef  __IN_PCMCIA_PACKAGE__
+#include <pcmcia/k_compat.h>
+#endif /* __IN_PCMCIA_PACKAGE__ */
+#include <linux/version.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/if.h>
+#include <linux/wait.h>
+#include <linux/timer.h>
+#include <linux/skbuff.h>
+#include <linux/netdevice.h>
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,5,44))
+#include <linux/tqueue.h>
+#else
+#include <linux/workqueue.h>
+#endif
+#include "hostap_wext.h"
+
+#include <pcmcia/version.h>
+#include <pcmcia/cs_types.h>
+#include <pcmcia/cs.h>
+#include <pcmcia/cistpl.h>
+#include <pcmcia/cisreg.h>
+#include <pcmcia/ds.h>
+
+#include <asm/io.h>
+
+#include "hostap_wlan.h"
+
+
+#ifdef __IN_PCMCIA_PACKAGE__
+#include <pcmcia/config.h>
+#endif /* __IN_PCMCIA_PACKAGE__ */
+
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,5,0))
+/* This behavior changed in some Linux 2.5.x version. I don't remember when and
+ * don't really care if this does not work with some early 2.5.x versions..
+ */
+#define HOSTAP_USE_RELEASE_TIMER
+#endif
+
+
+static char *version = PRISM2_VERSION " (Jouni Malinen <jkmaline@cc.hut.fi>)";
+static dev_info_t dev_info = "hostap_cs";
+static dev_link_t *dev_list = NULL;
+
+MODULE_AUTHOR("SSH Communications Security Corp, Jouni Malinen");
+MODULE_DESCRIPTION("Support for Intersil Prism2-based 802.11 wireless LAN "
+		   "cards (PC Card).");
+MODULE_SUPPORTED_DEVICE("Intersil Prism2-based WLAN cards (PC Card)");
+MODULE_LICENSE("GPL");
+
+
+static unsigned int irq_mask = 0xdeb8;
+MODULE_PARM(irq_mask, "i");
+
+static int irq_list[4] = { -1 };
+MODULE_PARM(irq_list, "1-4i");
+
+static int ignore_cis_vcc = 0;
+MODULE_PARM(ignore_cis_vcc, "i");
+MODULE_PARM_DESC(ignore_cis_vcc, "Ignore broken CIS VCC entry");
+
+
+#ifdef PRISM2_IO_DEBUG
+
+static inline void hfa384x_outb_debug(struct net_device *dev, int a, u8 v)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	unsigned long flags;
+
+	spin_lock_irqsave(&local->lock, flags);
+	prism2_io_debug_add(dev, PRISM2_IO_DEBUG_CMD_OUTB, a, v);
+	outb(v, dev->base_addr + a);
+	spin_unlock_irqrestore(&local->lock, flags);
+}
+
+static inline u8 hfa384x_inb_debug(struct net_device *dev, int a)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	unsigned long flags;
+	u8 v;
+
+	spin_lock_irqsave(&local->lock, flags);
+	v = inb(dev->base_addr + a);
+	prism2_io_debug_add(dev, PRISM2_IO_DEBUG_CMD_INB, a, v);
+	spin_unlock_irqrestore(&local->lock, flags);
+	return v;
+}
+
+static inline void hfa384x_outw_debug(struct net_device *dev, int a, u16 v)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	unsigned long flags;
+
+	spin_lock_irqsave(&local->lock, flags);
+	prism2_io_debug_add(dev, PRISM2_IO_DEBUG_CMD_OUTW, a, v);
+	outw(v, dev->base_addr + a);
+	spin_unlock_irqrestore(&local->lock, flags);
+}
+
+static inline u16 hfa384x_inw_debug(struct net_device *dev, int a)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	unsigned long flags;
+	u16 v;
+
+	spin_lock_irqsave(&local->lock, flags);
+	v = inw(dev->base_addr + a);
+	prism2_io_debug_add(dev, PRISM2_IO_DEBUG_CMD_INW, a, v);
+	spin_unlock_irqrestore(&local->lock, flags);
+	return v;
+}
+
+static inline void hfa384x_outsw_debug(struct net_device *dev, int a,
+				       u8 *buf, int wc)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	unsigned long flags;
+
+	spin_lock_irqsave(&local->lock, flags);
+	prism2_io_debug_add(dev, PRISM2_IO_DEBUG_CMD_OUTSW, a, wc);
+	outsw(dev->base_addr + a, buf, wc);
+	spin_unlock_irqrestore(&local->lock, flags);
+}
+
+static inline void hfa384x_insw_debug(struct net_device *dev, int a,
+				      u8 *buf, int wc)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	unsigned long flags;
+
+	spin_lock_irqsave(&local->lock, flags);
+	prism2_io_debug_add(dev, PRISM2_IO_DEBUG_CMD_INSW, a, wc);
+	insw(dev->base_addr + a, buf, wc);
+	spin_unlock_irqrestore(&local->lock, flags);
+}
+
+#define HFA384X_OUTB(v,a) hfa384x_outb_debug(dev, (a), (v))
+#define HFA384X_INB(a) hfa384x_inb_debug(dev, (a))
+#define HFA384X_OUTW(v,a) hfa384x_outw_debug(dev, (a), (v))
+#define HFA384X_INW(a) hfa384x_inw_debug(dev, (a))
+#define HFA384X_OUTSW(a, buf, wc) hfa384x_outsw_debug(dev, (a), (buf), (wc))
+#define HFA384X_INSW(a, buf, wc) hfa384x_insw_debug(dev, (a), (buf), (wc))
+
+#else /* PRISM2_IO_DEBUG */
+
+#define HFA384X_OUTB(v,a) outb((v), dev->base_addr + (a))
+#define HFA384X_INB(a) inb(dev->base_addr + (a))
+#define HFA384X_OUTW(v,a) outw((v), dev->base_addr + (a))
+#define HFA384X_INW(a) inw(dev->base_addr + (a))
+#define HFA384X_INSW(a, buf, wc) insw(dev->base_addr + (a), buf, wc)
+#define HFA384X_OUTSW(a, buf, wc) outsw(dev->base_addr + (a), buf, wc)
+
+#endif /* PRISM2_IO_DEBUG */
+
+
+static int hfa384x_from_bap(struct net_device *dev, u16 bap, void *buf,
+			    int len)
+{
+	u16 d_off;
+	u16 *pos;
+
+	d_off = (bap == 1) ? HFA384X_DATA1_OFF : HFA384X_DATA0_OFF;
+	pos = (u16 *) buf;
+
+	if (len / 2)
+		HFA384X_INSW(d_off, buf, len / 2);
+	pos += len / 2;
+
+	if (len & 1)
+		*((char *) pos) = HFA384X_INB(d_off);
+
+	return 0;
+}
+
+
+static int hfa384x_to_bap(struct net_device *dev, u16 bap, void *buf, int len)
+{
+	u16 d_off;
+	u16 *pos;
+
+	d_off = (bap == 1) ? HFA384X_DATA1_OFF : HFA384X_DATA0_OFF;
+	pos = (u16 *) buf;
+
+	if (len / 2)
+		HFA384X_OUTSW(d_off, buf, len / 2);
+	pos += len / 2;
+
+	if (len & 1)
+		HFA384X_OUTB(*((char *) pos), d_off);
+
+	return 0;
+}
+
+
+/* FIX: This might change at some point.. */
+#include "hostap_hw.c"
+
+
+
+static void prism2_detach(dev_link_t *link);
+static void prism2_release(u_long arg);
+static int prism2_event(event_t event, int priority,
+			event_callback_args_t *args);
+
+
+static int prism2_pccard_card_present(local_info_t *local)
+{
+	if (local->link != NULL &&
+	    ((local->link->state & (DEV_PRESENT | DEV_CONFIG)) ==
+	     (DEV_PRESENT | DEV_CONFIG)))
+		return 1;
+	return 0;
+}
+
+static void prism2_pccard_cor_sreset(local_info_t *local)
+{
+	int res;
+	conf_reg_t reg;
+
+	if (!prism2_pccard_card_present(local))
+	       return;
+
+	reg.Function = 0;
+	reg.Action = CS_READ;
+	reg.Offset = CISREG_COR;
+	reg.Value = 0;
+	res = CardServices(AccessConfigurationRegister, local->link->handle,
+			   &reg);
+	if (res != CS_SUCCESS) {
+		printk(KERN_DEBUG "prism2_pccard_cor_sreset failed 1 (%d)\n",
+		       res);
+		return;
+	}
+	printk(KERN_DEBUG "prism2_pccard_cor_sreset: original COR %02x\n",
+	       reg.Value);
+
+	reg.Action = CS_WRITE;
+	reg.Value |= COR_SOFT_RESET;
+	res = CardServices(AccessConfigurationRegister, local->link->handle,
+			   &reg);
+	if (res != CS_SUCCESS) {
+		printk(KERN_DEBUG "prism2_pccard_cor_sreset failed 2 (%d)\n",
+		       res);
+		return;
+	}
+
+	mdelay(1);
+
+	reg.Value &= ~COR_SOFT_RESET;
+	res = CardServices(AccessConfigurationRegister, local->link->handle,
+			   &reg);
+	if (res != CS_SUCCESS) {
+		printk(KERN_DEBUG "prism2_pccard_cor_sreset failed 3 (%d)\n",
+		       res);
+		return;
+	}
+
+	mdelay(1);
+}
+
+
+static void prism2_pccard_genesis_reset(local_info_t *local, int hcr)
+{
+	int res;
+	conf_reg_t reg;
+	int old_cor;
+
+	if (!prism2_pccard_card_present(local))
+	       return;
+
+	reg.Function = 0;
+	reg.Action = CS_READ;
+	reg.Offset = CISREG_COR;
+	reg.Value = 0;
+	res = CardServices(AccessConfigurationRegister, local->link->handle,
+			   &reg);
+	if (res != CS_SUCCESS) {
+		printk(KERN_DEBUG "prism2_pccard_genesis_sreset failed 1 "
+		       "(%d)\n", res);
+		return;
+	}
+	printk(KERN_DEBUG "prism2_pccard_genesis_sreset: original COR %02x\n",
+	       reg.Value);
+	old_cor = reg.Value;
+
+	reg.Action = CS_WRITE;
+	reg.Value |= COR_SOFT_RESET;
+	res = CardServices(AccessConfigurationRegister, local->link->handle,
+			   &reg);
+	if (res != CS_SUCCESS) {
+		printk(KERN_DEBUG "prism2_pccard_genesis_sreset failed 2 "
+		       "(%d)\n", res);
+		return;
+	}
+
+	mdelay(10);
+
+	/* Setup Genesis mode */
+	reg.Action = CS_WRITE;
+	reg.Value = hcr;
+	reg.Offset = CISREG_CCSR;
+	res = CardServices(AccessConfigurationRegister, local->link->handle,
+			   &reg);
+	if (res != CS_SUCCESS) {
+		printk(KERN_DEBUG "prism2_pccard_genesis_sreset failed 3 "
+		       "(%d)\n", res);
+		return;
+	}
+	mdelay(10);
+
+	reg.Action = CS_WRITE;
+	reg.Offset = CISREG_COR;
+	reg.Value = old_cor & ~COR_SOFT_RESET;
+	res = CardServices(AccessConfigurationRegister, local->link->handle,
+			   &reg);
+	if (res != CS_SUCCESS) {
+		printk(KERN_DEBUG "prism2_pccard_genesis_sreset failed 4 "
+		       "(%d)\n", res);
+		return;
+	}
+
+	mdelay(10);
+}
+
+
+static int prism2_pccard_dev_open(local_info_t *local)
+{
+	local->link->open++;
+	return 0;
+}
+
+
+static int prism2_pccard_dev_close(local_info_t *local)
+{
+	if (local == NULL || local->link == NULL)
+		return 1;
+
+	if (!local->link->open) {
+		printk(KERN_WARNING "%s: prism2_pccard_dev_close(): "
+		       "link not open?!\n", local->dev->name);
+		return 1;
+	}
+
+	local->link->open--;
+
+	if (local->link->state & DEV_STALE_CONFIG) {
+#ifdef HOSTAP_USE_RELEASE_TIMER
+		mod_timer(&local->link->release, jiffies + HZ / 20);
+#else /* HOSTAP_USE_RELEASE_TIMER */
+		prism2_release((u_long) local->link);
+#endif /* HOSTAP_USE_RELEASE_TIMER */
+	}
+
+	return 0;
+}
+
+
+static struct prism2_helper_functions prism2_pccard_funcs =
+{
+	.card_present	= prism2_pccard_card_present,
+	.cor_sreset	= prism2_pccard_cor_sreset,
+	.dev_open	= prism2_pccard_dev_open,
+	.dev_close	= prism2_pccard_dev_close,
+	.genesis_reset	= prism2_pccard_genesis_reset,
+};
+
+
+#if LINUX_VERSION_CODE <= KERNEL_VERSION(2,5,68)
+static void cs_error(client_handle_t handle, int func, int ret)
+{
+	error_info_t err = { func, ret };
+	CardServices(ReportError, handle, &err);
+}
+#endif
+
+
+/* allocate local data and register with CardServices
+ * initialize dev_link structure, but do not configure the card yet */
+static dev_link_t *prism2_attach(void)
+{
+	dev_link_t *link;
+	local_info_t *local;
+	client_reg_t client_reg;
+	int ret;
+	struct net_device *dev;
+	struct hostap_interface *iface;
+
+	for (link = dev_list; link; link = link->next) {
+		if (link->state & DEV_STALE_LINK) {
+			printk("%s: flushing stale link\n", dev_info);
+			prism2_detach(link);
+		}
+	}
+
+	link = kmalloc(sizeof(dev_link_t), GFP_KERNEL);
+	if (link == NULL)
+		return NULL;
+
+	memset(link, 0, sizeof(dev_link_t));
+
+	dev = prism2_init_local_data(&prism2_pccard_funcs, 0);
+	if (dev == NULL) {
+		kfree(link);
+		return NULL;
+	}
+	iface = dev->priv;
+	local = iface->local;
+
+	link->priv = dev;
+	local->link = link;
+
+#ifdef HOSTAP_USE_RELEASE_TIMER
+	init_timer(&link->release);
+	link->release.function = &prism2_release;
+	link->release.data = (u_long)link;
+#endif /* HOSTAP_USE_RELEASE_TIMER */
+
+	PDEBUG(DEBUG_HW, "%s: setting Vcc=33 (constant)\n", dev_info);
+	link->conf.Vcc = 33;
+	link->conf.IntType = INT_MEMORY_AND_IO;
+
+	/* register with CardServices */
+	link->next = dev_list;
+	dev_list = link;
+	client_reg.dev_info = &dev_info;
+	client_reg.Attributes = INFO_IO_CLIENT;
+	client_reg.EventMask = CS_EVENT_CARD_INSERTION |
+		CS_EVENT_CARD_REMOVAL |
+		CS_EVENT_RESET_PHYSICAL | CS_EVENT_CARD_RESET |
+		CS_EVENT_PM_SUSPEND | CS_EVENT_PM_RESUME;
+	client_reg.event_handler = &prism2_event;
+	client_reg.Version = 0x0210;
+	client_reg.event_callback_args.client_data = link;
+	ret = CardServices(RegisterClient, &link->handle, &client_reg);
+	if (ret != CS_SUCCESS) {
+		cs_error(link->handle, RegisterClient, ret);
+		prism2_detach(link);
+		return NULL;
+	}
+	return link;
+}
+
+
+static void prism2_detach(dev_link_t *link)
+{
+	dev_link_t **linkp;
+
+	PDEBUG(DEBUG_FLOW, "prism2_detach\n");
+
+	for (linkp = &dev_list; *linkp; linkp = &(*linkp)->next)
+		if (*linkp == link)
+			break;
+	if (*linkp == NULL) {
+		printk(KERN_WARNING "%s: Attempt to detach non-existing "
+		       "PCMCIA client\n", dev_info);
+		return;
+	}
+
+#ifdef HOSTAP_USE_RELEASE_TIMER
+	del_timer(&link->release);
+#endif /* HOSTAP_USE_RELEASE_TIMER */
+	if (link->state & DEV_CONFIG) {
+		printk("%s: detach postponed, '%s' still locked\n",
+		       dev_info, link->dev->dev_name);
+		prism2_release((u_long)link);
+		if (link->state & DEV_STALE_CONFIG) {
+			link->state |= DEV_STALE_LINK;
+			return;
+		}
+	}
+
+	if (link->handle) {
+		int res = CardServices(DeregisterClient, link->handle);
+		if (res) {
+			printk("CardService(DeregisterClient) => %d\n", res);
+			cs_error(link->handle, DeregisterClient, res);
+		}
+	}
+
+	*linkp = link->next;
+	/* release net devices */
+	if (link->priv) {
+		prism2_free_local_data((struct net_device *) link->priv);
+
+	}
+	kfree(link);
+}
+
+
+#define CS_CHECK(fn, args...) \
+while ((last_ret = CardServices(last_fn = (fn), args)) != 0) goto cs_failed
+
+#define CFG_CHECK2(fn, args...) \
+do { int ret = CardServices(fn, args); \
+if (ret != 0) { \
+	PDEBUG(DEBUG_EXTRA, "CardServices(" #fn ") returned %d\n", ret); \
+	cs_error(link->handle, fn, ret); \
+	goto next_entry; \
+} \
+} while (0)
+
+
+/* run after a CARD_INSERTATION event is received to configure the PCMCIA
+ * socket and make the device available to the system */
+static int prism2_config(dev_link_t *link)
+{
+	struct net_device *dev = (struct net_device *) link->priv;
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int ret;
+	tuple_t tuple;
+	cisparse_t parse;
+	int last_fn, last_ret;
+	u_char buf[64];
+	config_info_t conf;
+	cistpl_cftable_entry_t dflt = { 0 };
+
+	PDEBUG(DEBUG_FLOW, "prism2_config()\n");
+
+	tuple.DesiredTuple = CISTPL_CONFIG;
+	tuple.Attributes = 0;
+	tuple.TupleData = buf;
+	tuple.TupleDataMax = sizeof(buf);
+	tuple.TupleOffset = 0;
+	CS_CHECK(GetFirstTuple, link->handle, &tuple);
+	CS_CHECK(GetTupleData, link->handle, &tuple);
+	CS_CHECK(ParseTuple, link->handle, &tuple, &parse);
+	link->conf.ConfigBase = parse.config.base;
+	link->conf.Present = parse.config.rmask[0];
+
+	CS_CHECK(GetConfigurationInfo, link->handle, &conf);
+	PDEBUG(DEBUG_HW, "%s: %s Vcc=%d (from config)\n", dev_info,
+	       ignore_cis_vcc ? "ignoring" : "setting", conf.Vcc);
+	link->conf.Vcc = conf.Vcc;
+
+	/* Look for an appropriate configuration table entry in the CIS */
+	tuple.DesiredTuple = CISTPL_CFTABLE_ENTRY;
+	CS_CHECK(GetFirstTuple, link->handle, &tuple);
+	for (;;) {
+		cistpl_cftable_entry_t *cfg = &(parse.cftable_entry);
+		CFG_CHECK2(GetTupleData, link->handle, &tuple);
+		CFG_CHECK2(ParseTuple, link->handle, &tuple, &parse);
+
+		if (cfg->flags & CISTPL_CFTABLE_DEFAULT)
+			dflt = *cfg;
+		if (cfg->index == 0)
+			goto next_entry;
+		link->conf.ConfigIndex = cfg->index;
+		PDEBUG(DEBUG_EXTRA, "Checking CFTABLE_ENTRY 0x%02X "
+		       "(default 0x%02X)\n", cfg->index, dflt.index);
+	
+		/* Does this card need audio output? */
+		if (cfg->flags & CISTPL_CFTABLE_AUDIO) {
+			link->conf.Attributes |= CONF_ENABLE_SPKR;
+			link->conf.Status = CCSR_AUDIO_ENA;
+		}
+	
+		/* Use power settings for Vcc and Vpp if present */
+		/*  Note that the CIS values need to be rescaled */
+		if (cfg->vcc.present & (1 << CISTPL_POWER_VNOM)) {
+			if (conf.Vcc != cfg->vcc.param[CISTPL_POWER_VNOM] /
+			    10000 && !ignore_cis_vcc) {
+				PDEBUG(DEBUG_EXTRA, "  Vcc mismatch - skipping"
+				       " this entry\n");
+				goto next_entry;
+			}
+		} else if (dflt.vcc.present & (1 << CISTPL_POWER_VNOM)) {
+			if (conf.Vcc != dflt.vcc.param[CISTPL_POWER_VNOM] /
+			    10000 && !ignore_cis_vcc) {
+				PDEBUG(DEBUG_EXTRA, "  Vcc (default) mismatch "
+				       "- skipping this entry\n");
+				goto next_entry;
+			}
+		}
+
+		if (cfg->vpp1.present & (1 << CISTPL_POWER_VNOM))
+			link->conf.Vpp1 = link->conf.Vpp2 =
+				cfg->vpp1.param[CISTPL_POWER_VNOM] / 10000;
+		else if (dflt.vpp1.present & (1 << CISTPL_POWER_VNOM))
+			link->conf.Vpp1 = link->conf.Vpp2 =
+				dflt.vpp1.param[CISTPL_POWER_VNOM] / 10000;
+
+		/* Do we need to allocate an interrupt? */
+		if (cfg->irq.IRQInfo1 || dflt.irq.IRQInfo1)
+			link->conf.Attributes |= CONF_ENABLE_IRQ;
+		else if (!(link->conf.Attributes & CONF_ENABLE_IRQ)) {
+			/* At least Compaq WL200 does not have IRQInfo1 set,
+			 * but it does not work without interrupts.. */
+			printk("Config has no IRQ info, but trying to enable "
+			       "IRQ anyway..\n");
+			link->conf.Attributes |= CONF_ENABLE_IRQ;
+		}
+
+		/* IO window settings */
+		PDEBUG(DEBUG_EXTRA, "IO window settings: cfg->io.nwin=%d "
+		       "dflt.io.nwin=%d\n",
+		       cfg->io.nwin, dflt.io.nwin);
+		link->io.NumPorts1 = link->io.NumPorts2 = 0;
+		if ((cfg->io.nwin > 0) || (dflt.io.nwin > 0)) {
+			cistpl_io_t *io = (cfg->io.nwin) ? &cfg->io : &dflt.io;
+			link->io.Attributes1 = IO_DATA_PATH_WIDTH_AUTO;
+			PDEBUG(DEBUG_EXTRA, "io->flags = 0x%04X, "
+			       "io.base=0x%04x, len=%d\n", io->flags,
+			       io->win[0].base, io->win[0].len);
+			if (!(io->flags & CISTPL_IO_8BIT))
+				link->io.Attributes1 = IO_DATA_PATH_WIDTH_16;
+			if (!(io->flags & CISTPL_IO_16BIT))
+				link->io.Attributes1 = IO_DATA_PATH_WIDTH_8;
+			link->io.IOAddrLines = io->flags &
+				CISTPL_IO_LINES_MASK;
+			link->io.BasePort1 = io->win[0].base;
+			link->io.NumPorts1 = io->win[0].len;
+			if (io->nwin > 1) {
+				link->io.Attributes2 = link->io.Attributes1;
+				link->io.BasePort2 = io->win[1].base;
+				link->io.NumPorts2 = io->win[1].len;
+			}
+		}
+
+		/* This reserves IO space but doesn't actually enable it */
+		CFG_CHECK2(RequestIO, link->handle, &link->io);
+
+		/* This configuration table entry is OK */
+		break;
+
+	next_entry:
+		CS_CHECK(GetNextTuple, link->handle, &tuple);
+	}
+
+	/*
+	 * Allocate an interrupt line.  Note that this does not assign a
+	 * handler to the interrupt, unless the 'Handler' member of the
+	 * irq structure is initialized.
+	 */
+	if (link->conf.Attributes & CONF_ENABLE_IRQ) {
+		int i;
+		link->irq.Attributes = IRQ_TYPE_EXCLUSIVE | IRQ_HANDLE_PRESENT;
+		link->irq.IRQInfo1 = IRQ_INFO2_VALID | IRQ_LEVEL_ID;
+		if (irq_list[0] == -1)
+			link->irq.IRQInfo2 = irq_mask;
+		else
+			for (i = 0; i < 4; i++)
+				link->irq.IRQInfo2 |= 1 << irq_list[i];
+		link->irq.Handler = (void *) prism2_interrupt;
+		link->irq.Instance = dev;
+		CS_CHECK(RequestIRQ, link->handle, &link->irq);
+	}
+
+	/*
+	 * This actually configures the PCMCIA socket -- setting up
+	 * the I/O windows and the interrupt mapping, and putting the
+	 * card and host interface into "Memory and IO" mode.
+	 */
+	CS_CHECK(RequestConfiguration, link->handle, &link->conf);
+
+	dev->irq = link->irq.AssignedIRQ;
+	dev->base_addr = link->io.BasePort1;
+
+	/* Finally, report what we've done */
+	printk(KERN_INFO "%s: index 0x%02x: Vcc %d.%d",
+	       dev_info, link->conf.ConfigIndex,
+	       link->conf.Vcc / 10, link->conf.Vcc % 10);
+	if (link->conf.Vpp1)
+		printk(", Vpp %d.%d", link->conf.Vpp1 / 10,
+		       link->conf.Vpp1 % 10);
+	if (link->conf.Attributes & CONF_ENABLE_IRQ)
+		printk(", irq %d", link->irq.AssignedIRQ);
+	if (link->io.NumPorts1)
+		printk(", io 0x%04x-0x%04x", link->io.BasePort1,
+		       link->io.BasePort1+link->io.NumPorts1-1);
+	if (link->io.NumPorts2)
+		printk(" & 0x%04x-0x%04x", link->io.BasePort2,
+		       link->io.BasePort2+link->io.NumPorts2-1);
+	printk("\n");
+
+	link->state |= DEV_CONFIG;
+	link->state &= ~DEV_CONFIG_PENDING;
+
+	if (prism2_init_dev(local)) {
+		prism2_release((u_long) link);
+		return 1;
+	}
+
+	strcpy(local->node.dev_name, dev->name);
+	link->dev = &local->node;
+
+	local->shutdown = 0;
+
+	ret = prism2_hw_config(dev, 1);
+	return ret;
+
+ cs_failed:
+	cs_error(link->handle, last_fn, last_ret);
+	prism2_release((u_long)link);
+	return 1;
+}
+
+
+static void prism2_release(u_long arg)
+{
+	dev_link_t *link = (dev_link_t *)arg;
+	struct net_device *dev = (struct net_device *) link->priv;
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+
+	PDEBUG(DEBUG_FLOW, "prism2_release\n");
+
+	if (link->open) {
+		printk("%s: release postponed, '%s' still open\n",
+		      dev_info, link->dev->dev_name);
+		link->state |= DEV_STALE_CONFIG;
+		return;
+	}
+
+	if (dev != NULL)
+		prism2_hw_shutdown(dev, 0);
+
+	local->shutdown = 1;
+
+	if (link->win)
+		CardServices(ReleaseWindow, link->win);
+	CardServices(ReleaseConfiguration, link->handle);
+	if (link->io.NumPorts1)
+		CardServices(ReleaseIO, link->handle, &link->io);
+	if (link->irq.AssignedIRQ)
+		CardServices(ReleaseIRQ, link->handle, &link->irq);
+
+	link->state &= ~DEV_CONFIG;
+
+	PDEBUG(DEBUG_FLOW, "release - done\n");
+}
+
+
+static int prism2_event(event_t event, int priority,
+			event_callback_args_t *args)
+{
+	dev_link_t *link = args->client_data;
+	struct net_device *dev = (struct net_device *) link->priv;
+
+	switch (event) {
+	case CS_EVENT_CARD_INSERTION:
+		PDEBUG(DEBUG_EXTRA, "%s: CS_EVENT_CARD_INSERTION\n", dev_info);
+		link->state |= DEV_PRESENT | DEV_CONFIG_PENDING;
+		if (prism2_config(link))
+			dev->irq = 0;
+		break;
+
+	case CS_EVENT_CARD_REMOVAL:
+		PDEBUG(DEBUG_EXTRA, "%s: CS_EVENT_CARD_REMOVAL\n", dev_info);
+		link->state &= ~DEV_PRESENT;
+		if (link->state & DEV_CONFIG) {
+			hostap_netif_stop_queues(dev);
+			netif_device_detach(dev);
+#ifdef HOSTAP_USE_RELEASE_TIMER
+			mod_timer(&link->release, jiffies + HZ / 20);
+#else /* HOSTAP_USE_RELEASE_TIMER */
+			prism2_release((u_long) link);
+#endif /* HOSTAP_USE_RELEASE_TIMER */
+		}
+		break;
+
+	case CS_EVENT_PM_SUSPEND:
+		PDEBUG(DEBUG_EXTRA, "%s: CS_EVENT_PM_SUSPEND\n", dev_info);
+		link->state |= DEV_SUSPEND;
+		/* fall through */
+
+	case CS_EVENT_RESET_PHYSICAL:
+		PDEBUG(DEBUG_EXTRA, "%s: CS_EVENT_RESET_PHYSICAL\n", dev_info);
+		if (link->state & DEV_CONFIG) {
+			if (link->open) {
+				hostap_netif_stop_queues(dev);
+				netif_device_detach(dev);
+			}
+			CardServices(ReleaseConfiguration, link->handle);
+		}
+		break;
+
+	case CS_EVENT_PM_RESUME:
+		PDEBUG(DEBUG_EXTRA, "%s: CS_EVENT_PM_RESUME\n", dev_info);
+		link->state &= ~DEV_SUSPEND;
+		/* fall through */
+
+	case CS_EVENT_CARD_RESET:
+		PDEBUG(DEBUG_EXTRA, "%s: CS_EVENT_CARD_RESET\n", dev_info);
+		if (link->state & DEV_CONFIG) {
+			CardServices(RequestConfiguration, link->handle,
+				     &link->conf);
+			if (link->open) {
+				prism2_hw_shutdown(dev, 1);
+				prism2_hw_config(dev, 0);
+				netif_device_attach(dev);
+				netif_start_queue(dev);
+			}
+		}
+		break;
+
+	default:
+		PDEBUG(DEBUG_EXTRA, "%s: prism2_event() - unknown event %d\n",
+		       dev_info, event);
+		break;
+	}
+	return 0;
+}
+
+
+#if LINUX_VERSION_CODE > KERNEL_VERSION(2,5,67)
+static struct pcmcia_driver hostap_driver = {
+	.drv		= {
+		.name	= "hostap_cs",
+	},
+	.attach		= prism2_attach,
+	.detach		= prism2_detach,
+	.owner		= THIS_MODULE,
+};
+
+static int __init init_prism2_pccard(void)
+{
+	printk(KERN_INFO "%s: %s\n", dev_info, version);
+	return pcmcia_register_driver(&hostap_driver);
+}
+
+static void __exit exit_prism2_pccard(void)
+{
+	pcmcia_unregister_driver(&hostap_driver);
+	printk(KERN_INFO "%s: Driver unloaded\n", dev_info);
+}
+
+#else
+
+static int __init init_prism2_pccard(void)
+{
+	servinfo_t serv;
+
+	printk(KERN_INFO "%s: %s\n", dev_info, version);
+	CardServices(GetCardServicesInfo, &serv);
+	if (serv.Revision != CS_RELEASE_CODE) {
+		printk(KERN_NOTICE
+		       "%s: CardServices release does not match!\n", dev_info);
+		return -1;
+	}
+	register_pccard_driver(&dev_info, &prism2_attach, &prism2_detach);
+
+	return 0;
+}
+
+
+static void __exit exit_prism2_pccard(void)
+{
+	unregister_pccard_driver(&dev_info);
+	while (dev_list) {
+		PDEBUG(DEBUG_FLOW, "exit_prism2 - detaching device\n");
+#ifdef HOSTAP_USE_RELEASE_TIMER
+		del_timer(&dev_list->release);
+#endif /* HOSTAP_USE_RELEASE_TIMER */
+		if (dev_list->state & DEV_CONFIG)
+			prism2_release((u_long)dev_list);
+		prism2_detach(dev_list);
+	}
+
+	printk(KERN_INFO "%s: Driver unloaded\n", dev_info);
+}
+#endif /* LINUX_VERSION_CODE > KERNEL_VERSION(2,5,67) */
+
+
+module_init(init_prism2_pccard);
+module_exit(exit_prism2_pccard);
diff -Nur linux-orig/drivers/net/wireless/hostap_download.c linux/drivers/net/wireless/hostap_download.c
--- linux-orig/drivers/net/wireless/hostap_download.c	1970-01-01 03:00:00.000000000 +0300
+++ linux/drivers/net/wireless/hostap_download.c	2003-10-11 21:11:56.000000000 +0400
@@ -0,0 +1,692 @@
+static int prism2_enable_aux_port(struct net_device *dev, int enable)
+{
+	u16 val, reg;
+	int i, tries;
+	unsigned long flags;
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+
+	spin_lock_irqsave(&local->cmdlock, flags);
+
+	/* wait until busy bit is clear */
+	tries = HFA384X_CMD_BUSY_TIMEOUT;
+	while (HFA384X_INW(HFA384X_CMD_OFF) & HFA384X_CMD_BUSY && tries > 0) {
+		tries--;
+		udelay(1);
+	}
+	if (tries == 0) {
+		reg = HFA384X_INW(HFA384X_CMD_OFF);
+		spin_unlock_irqrestore(&local->cmdlock, flags);
+		printk("%s: prism2_enable_aux_port - timeout - reg=0x%04x\n",
+		       dev->name, reg);
+		return -ETIMEDOUT;
+	}
+
+	val = HFA384X_INW(HFA384X_CONTROL_OFF);
+
+	if (enable) {
+		HFA384X_OUTW(HFA384X_AUX_MAGIC0, HFA384X_PARAM0_OFF);
+		HFA384X_OUTW(HFA384X_AUX_MAGIC1, HFA384X_PARAM1_OFF);
+		HFA384X_OUTW(HFA384X_AUX_MAGIC2, HFA384X_PARAM2_OFF);
+
+		if ((val & HFA384X_AUX_PORT_MASK) != HFA384X_AUX_PORT_DISABLED)
+			printk("prism2_enable_aux_port: was not disabled!?\n");
+		val &= ~HFA384X_AUX_PORT_MASK;
+		val |= HFA384X_AUX_PORT_ENABLE;
+	} else {
+		HFA384X_OUTW(0, HFA384X_PARAM0_OFF);
+		HFA384X_OUTW(0, HFA384X_PARAM1_OFF);
+		HFA384X_OUTW(0, HFA384X_PARAM2_OFF);
+
+		if ((val & HFA384X_AUX_PORT_MASK) != HFA384X_AUX_PORT_ENABLED)
+			printk("prism2_enable_aux_port: was not enabled!?\n");
+		val &= ~HFA384X_AUX_PORT_MASK;
+		val |= HFA384X_AUX_PORT_DISABLE;
+	}
+	HFA384X_OUTW(val, HFA384X_CONTROL_OFF);
+
+	udelay(5);
+
+	i = 10000;
+	while (i > 0) {
+		val = HFA384X_INW(HFA384X_CONTROL_OFF);
+		val &= HFA384X_AUX_PORT_MASK;
+
+		if ((enable && val == HFA384X_AUX_PORT_ENABLED) ||
+		    (!enable && val == HFA384X_AUX_PORT_DISABLED))
+			break;
+
+		udelay(10);
+		i--;
+	}
+
+	spin_unlock_irqrestore(&local->cmdlock, flags);
+
+	if (i == 0) {
+		printk("prism2_enable_aux_port(%d) timed out\n",
+		       enable);
+		return -ETIMEDOUT;
+	}
+
+	return 0;
+}
+
+
+static int hfa384x_from_aux(struct net_device *dev, unsigned int addr, int len,
+			    void *buf)
+{
+	u16 page, offset;
+	if (addr & 1 || len & 1)
+		return -1;
+
+	page = addr >> 7;
+	offset = addr & 0x7f;
+
+	HFA384X_OUTW(page, HFA384X_AUXPAGE_OFF);
+	HFA384X_OUTW(offset, HFA384X_AUXOFFSET_OFF);
+
+	udelay(5);
+
+#ifdef PRISM2_PCI
+	{
+		u16 *pos = (u16 *) buf;
+		while (len > 0) {
+			*pos++ = HFA384X_INW_DATA(HFA384X_AUXDATA_OFF);
+			len -= 2;
+		}
+	}
+#else /* PRISM2_PCI */
+	HFA384X_INSW(HFA384X_AUXDATA_OFF, buf, len / 2);
+#endif /* PRISM2_PCI */
+
+	return 0;
+}
+
+
+static int hfa384x_to_aux(struct net_device *dev, unsigned int addr, int len,
+			  void *buf)
+{
+	u16 page, offset;
+	if (addr & 1 || len & 1)
+		return -1;
+
+	page = addr >> 7;
+	offset = addr & 0x7f;
+
+	HFA384X_OUTW(page, HFA384X_AUXPAGE_OFF);
+	HFA384X_OUTW(offset, HFA384X_AUXOFFSET_OFF);
+
+	udelay(5);
+
+#ifdef PRISM2_PCI
+	{
+		u16 *pos = (u16 *) buf;
+		while (len > 0) {
+			HFA384X_OUTW_DATA(*pos++, HFA384X_AUXDATA_OFF);
+			len -= 2;
+		}
+	}
+#else /* PRISM2_PCI */
+	HFA384X_OUTSW(HFA384X_AUXDATA_OFF, buf, len / 2);
+#endif /* PRISM2_PCI */
+
+	return 0;
+}
+
+
+static int prism2_pda_ok(u8 *buf)
+{
+	u16 *pda = (u16 *) buf;
+	int pos;
+	u16 len, pdr;
+
+	if (buf[0] == 0xff && buf[1] == 0x00 && buf[2] == 0xff &&
+	    buf[3] == 0x00)
+		return 0;
+
+	pos = 0;
+	while (pos + 1 < PRISM2_PDA_SIZE / 2) {
+		len = le16_to_cpu(pda[pos]);
+		pdr = le16_to_cpu(pda[pos + 1]);
+		if (len == 0 || pos + len > PRISM2_PDA_SIZE / 2)
+			return 0;
+
+		if (pdr == 0x0000 && len == 2) {
+			/* PDA end found */
+			return 1;
+		}
+
+		pos += len + 1;
+	}
+
+	return 0;
+}
+
+
+static u8 * prism2_read_pda(struct net_device *dev)
+{
+	u8 *buf;
+	int res, i, found = 0;
+#define NUM_PDA_ADDRS 3
+	unsigned int pda_addr[NUM_PDA_ADDRS] = {
+		0x7f0000 /* others than HFA3841 */,
+		0x3f0000 /* HFA3841 */,
+		0x390000 /* apparently used in older cards */
+	};
+
+	buf = (u8 *) kmalloc(PRISM2_PDA_SIZE, GFP_KERNEL);
+	if (buf == NULL)
+		return NULL;
+
+	/* Note: wlan card should be in initial state (just after init cmd)
+	 * and no other operations should be performed concurrently. */
+
+	prism2_enable_aux_port(dev, 1);
+
+	for (i = 0; i < NUM_PDA_ADDRS; i++) {
+		printk(KERN_DEBUG "%s: trying to read PDA from 0x%08x",
+		       dev->name, pda_addr[i]);
+		res = hfa384x_from_aux(dev, pda_addr[i], PRISM2_PDA_SIZE, buf);
+		if (res)
+			continue;
+		if (res == 0 && prism2_pda_ok(buf)) {
+			printk(": OK\n");
+			found = 1;
+			break;
+		} else {
+			printk(": failed\n");
+		}
+	}
+
+	prism2_enable_aux_port(dev, 0);
+
+	if (!found) {
+		kfree(buf);
+		buf = NULL;
+	}
+
+	return buf;
+}
+
+
+static int prism2_download_volatile(local_info_t *local,
+				    struct prism2_download_data *param)
+{
+	struct net_device *dev = local->dev;
+	int ret = 0, i;
+	u16 param0, param1;
+
+	if (local->hw_downloading) {
+		printk(KERN_WARNING "%s: Already downloading - aborting new "
+		       "request\n", dev->name);
+		return -1;
+	}
+
+	local->hw_downloading = 1;
+	if (local->pri_only) {
+		hfa384x_disable_interrupts(dev);
+	} else {
+		prism2_hw_shutdown(dev, 0);
+
+		if (prism2_hw_init(dev, 0)) {
+			printk(KERN_WARNING "%s: Could not initialize card for"
+			       " download\n", dev->name);
+			ret = -1;
+			goto out;
+		}
+	}
+
+	if (prism2_enable_aux_port(dev, 1)) {
+		printk(KERN_WARNING "%s: Could not enable AUX port\n",
+		       dev->name);
+		ret = -1;
+		goto out;
+	}
+
+	param0 = param->start_addr & 0xffff;
+	param1 = param->start_addr >> 16;
+
+	HFA384X_OUTW(0, HFA384X_PARAM2_OFF);
+	HFA384X_OUTW(param1, HFA384X_PARAM1_OFF);
+	if (hfa384x_cmd_wait(dev, HFA384X_CMDCODE_DOWNLOAD |
+			     (HFA384X_PROGMODE_ENABLE_VOLATILE << 8),
+			     param0)) {
+		printk(KERN_WARNING "%s: Download command execution failed\n",
+		       dev->name);
+		ret = -1;
+		goto out;
+	}
+
+	for (i = 0; i < param->num_areas; i++) {
+		printk(KERN_DEBUG "%s: Writing %d bytes at 0x%08x\n",
+		       dev->name, param->data[i].len, param->data[i].addr);
+		if (hfa384x_to_aux(dev, param->data[i].addr,
+				   param->data[i].len, param->data[i].data)) {
+			printk(KERN_WARNING "%s: RAM download at 0x%08x "
+			       "(len=%d) failed\n", dev->name,
+			       param->data[i].addr, param->data[i].len);
+			ret = -1;
+			goto out;
+		}
+	}
+
+	HFA384X_OUTW(param1, HFA384X_PARAM1_OFF);
+	HFA384X_OUTW(0, HFA384X_PARAM2_OFF);
+	if (hfa384x_cmd_no_wait(dev, HFA384X_CMDCODE_DOWNLOAD |
+				(HFA384X_PROGMODE_DISABLE << 8), param0)) {
+		printk(KERN_WARNING "%s: Download command execution failed\n",
+		       dev->name);
+		ret = -1;
+		goto out;
+	}
+	/* ProgMode disable causes the hardware to restart itself from the
+	 * given starting address. Give hw some time and ACK command just in
+	 * case restart did not happen. */
+	mdelay(5);
+	HFA384X_OUTW(HFA384X_EV_CMD, HFA384X_EVACK_OFF);
+
+	if (prism2_enable_aux_port(dev, 0)) {
+		printk(KERN_DEBUG "%s: Disabling AUX port failed\n",
+		       dev->name);
+		/* continue anyway.. restart should have taken care of this */
+	}
+
+	mdelay(5);
+	local->hw_downloading = 0;
+	if (prism2_hw_config(dev, 2)) {
+		printk(KERN_WARNING "%s: Card configuration after RAM "
+		       "download failed\n", dev->name);
+		ret = -1;
+		goto out2;
+	}
+
+	goto out2;
+ out:
+	local->hw_downloading = 0;
+ out2:
+	return ret;
+}
+
+
+static int prism2_enable_genesis(local_info_t *local, int hcr)
+{
+	struct net_device *dev = local->dev;
+	u8 initseq[4] = { 0x00, 0xe1, 0xa1, 0xff };
+	u8 readbuf[4];
+
+	printk(KERN_DEBUG "%s: test Genesis mode with HCR 0x%02x\n",
+	       dev->name, hcr);
+	local->func->cor_sreset(local);
+	hfa384x_to_aux(dev, 0x7e0038, sizeof(initseq), initseq);
+	local->func->genesis_reset(local, hcr);
+
+	/* Readback test */
+	hfa384x_from_aux(dev, 0x7e0038, sizeof(readbuf), readbuf);
+	hfa384x_to_aux(dev, 0x7e0038, sizeof(initseq), initseq);
+	hfa384x_from_aux(dev, 0x7e0038, sizeof(readbuf), readbuf);
+
+	if (memcmp(initseq, readbuf, sizeof(initseq)) == 0) {
+		printk(KERN_DEBUG "Readback test succeeded, HCR 0x%02x\n",
+		       hcr);
+		return 0;
+	} else {
+		printk(KERN_DEBUG "Readback test failed, HCR 0x%02x "
+		       "write %02x %02x %02x %02x read %02x %02x %02x %02x\n",
+		       hcr, initseq[0], initseq[1], initseq[2], initseq[3],
+		       readbuf[0], readbuf[1], readbuf[2], readbuf[3]);
+		return 1;
+	}
+}
+
+
+static int prism2_download_genesis(local_info_t *local,
+				   struct prism2_download_data *param)
+{
+	struct net_device *dev = local->dev;
+	int ram16 = 0, i;
+
+	if (local->hw_downloading) {
+		printk(KERN_WARNING "%s: Already downloading - aborting new "
+		       "request\n", dev->name);
+		return -1;
+	}
+
+	if (!local->func->genesis_reset || !local->func->cor_sreset) {
+		printk(KERN_INFO "%s: Genesis mode downloading not supported "
+		       "with this hwmodel\n", dev->name);
+		return -EOPNOTSUPP;
+	}
+
+	local->hw_downloading = 1;
+
+	if (prism2_enable_aux_port(dev, 1)) {
+		printk(KERN_DEBUG "%s: failed to enable AUX port\n",
+		       dev->name);
+		return 1;
+	}
+
+	/* 0x1F for x8 SRAM or 0x0F for x16 SRAM */
+	if (prism2_enable_genesis(local, 0x1f) == 0) {
+		ram16 = 0;
+		printk(KERN_DEBUG "%s: Genesis mode OK using x8 SRAM\n",
+		       dev->name);
+	} else if (prism2_enable_genesis(local, 0x0f) == 0) {
+		ram16 = 1;
+		printk(KERN_DEBUG "%s: Genesis mode OK using x16 SRAM\n",
+		       dev->name);
+	} else {
+		printk(KERN_DEBUG "%s: Could not initiate genesis mode\n",
+		       dev->name);
+		return 1;
+	}
+
+	for (i = 0; i < param->num_areas; i++) {
+		printk(KERN_DEBUG "%s: Writing %d bytes at 0x%08x\n",
+		       dev->name, param->data[i].len, param->data[i].addr);
+		if (hfa384x_to_aux(dev, param->data[i].addr,
+				   param->data[i].len, param->data[i].data)) {
+			printk(KERN_WARNING "%s: RAM download at 0x%08x "
+			       "(len=%d) failed\n", dev->name,
+			       param->data[i].addr, param->data[i].len);
+			return 1;
+		}
+	}
+
+	printk(KERN_DEBUG "Disable genesis mode\n");
+	local->func->genesis_reset(local, ram16 ? 0x07 : 0x17);
+	if (prism2_enable_aux_port(dev, 0)) {
+		printk(KERN_DEBUG "Failed to disable AUX port\n");
+	}
+
+	mdelay(5);
+	local->hw_downloading = 0;
+
+	printk(KERN_DEBUG "Trying to initialize card\n");
+	if (prism2_hw_init(dev, 1)) {
+		printk(KERN_DEBUG "Initialization failed\n");
+		return 1;
+	}
+
+	printk(KERN_DEBUG "Card initialized - running PRI only\n");
+	if (prism2_hw_init(dev, 1) || prism2_hw_init2(dev, 1)) {
+		printk(KERN_DEBUG "Initialization failed\n");
+		return 1;
+	}
+
+	return 0;
+}
+
+
+#ifdef PRISM2_NON_VOLATILE_DOWNLOAD
+/* Note! Non-volatile downloading functionality has not yet been tested
+ * thoroughly and it may corrupt flash image and effectively kill the card that
+ * is being updated. You have been warned. */
+
+static inline int prism2_download_block(struct net_device *dev,
+					u32 addr, u8 *data,
+					u32 bufaddr, int rest_len)
+{
+	u16 param0, param1;
+	int block_len;
+
+	block_len = rest_len < 4096 ? rest_len : 4096;
+
+	param0 = addr & 0xffff;
+	param1 = addr >> 16;
+
+	HFA384X_OUTW(block_len, HFA384X_PARAM2_OFF);
+	HFA384X_OUTW(param1, HFA384X_PARAM1_OFF);
+
+	if (hfa384x_cmd_wait(dev, HFA384X_CMDCODE_DOWNLOAD |
+			     (HFA384X_PROGMODE_ENABLE_NON_VOLATILE << 8),
+			     param0)) {
+		printk(KERN_WARNING "%s: Flash download command execution "
+		       "failed\n", dev->name);
+		return -1;
+	}
+
+	if (hfa384x_to_aux(dev, bufaddr, block_len, data)) {
+		printk(KERN_WARNING "%s: flash download at 0x%08x "
+		       "(len=%d) failed\n", dev->name, addr, block_len);
+		return -1;
+	}
+
+	HFA384X_OUTW(0, HFA384X_PARAM2_OFF);
+	HFA384X_OUTW(0, HFA384X_PARAM1_OFF);
+	if (hfa384x_cmd_wait(dev, HFA384X_CMDCODE_DOWNLOAD |
+			     (HFA384X_PROGMODE_PROGRAM_NON_VOLATILE << 8),
+			     0)) {
+		printk(KERN_WARNING "%s: Flash write command execution "
+		       "failed\n", dev->name);
+		return -1;
+	}
+
+	return block_len;
+}
+
+
+static int prism2_download_nonvolatile(local_info_t *local,
+				       struct prism2_download_data *dl)
+{
+	struct net_device *dev = local->dev;
+	int ret = 0, i;
+	struct {
+		u16 page;
+		u16 offset;
+		u16 len;
+	} dlbuffer;
+	u32 bufaddr;
+
+	if (local->hw_downloading) {
+		printk(KERN_WARNING "%s: Already downloading - aborting new "
+		       "request\n", dev->name);
+		return -1;
+	}
+
+	local->hw_downloading = 1;
+
+	ret = local->func->get_rid(dev, HFA384X_RID_DOWNLOADBUFFER,
+				   &dlbuffer, 6, 0);
+
+	if (ret < 0) {
+		printk(KERN_WARNING "%s: Could not read download buffer "
+		       "parameters\n", dev->name);
+		goto out;
+	}
+
+	dlbuffer.page = le16_to_cpu(dlbuffer.page);
+	dlbuffer.offset = le16_to_cpu(dlbuffer.offset);
+	dlbuffer.len = le16_to_cpu(dlbuffer.len);
+
+	printk(KERN_DEBUG "Download buffer: %d bytes at 0x%04x:0x%04x\n",
+	       dlbuffer.len, dlbuffer.page, dlbuffer.offset);
+
+	bufaddr = (dlbuffer.page << 7) + dlbuffer.offset;
+
+	if (!local->pri_only) {
+		prism2_hw_shutdown(dev, 0);
+
+		if (prism2_hw_init(dev, 0)) {
+			printk(KERN_WARNING "%s: Could not initialize card for"
+			       " download\n", dev->name);
+			ret = -1;
+			goto out;
+		}
+	}
+
+	hfa384x_disable_interrupts(dev);
+
+	if (prism2_enable_aux_port(dev, 1)) {
+		printk(KERN_WARNING "%s: Could not enable AUX port\n",
+		       dev->name);
+		ret = -1;
+		goto out;
+	}
+
+	printk(KERN_DEBUG "%s: starting flash download\n", dev->name);
+	for (i = 0; i < dl->num_areas; i++) {
+		int rest_len = dl->data[i].len;
+		int data_off = 0;
+
+		while (rest_len > 0) {
+			int block_len;
+
+			block_len = prism2_download_block(
+				dev, dl->data[i].addr + data_off,
+				dl->data[i].data + data_off, bufaddr,
+				rest_len);
+
+			if (block_len < 0) {
+				ret = -1;
+				goto out;
+			}
+
+			rest_len -= block_len;
+			data_off += block_len;
+		}
+	}
+
+	HFA384X_OUTW(0, HFA384X_PARAM1_OFF);
+	HFA384X_OUTW(0, HFA384X_PARAM2_OFF);
+	if (hfa384x_cmd_wait(dev, HFA384X_CMDCODE_DOWNLOAD |
+				(HFA384X_PROGMODE_DISABLE << 8), 0)) {
+		printk(KERN_WARNING "%s: Download command execution failed\n",
+		       dev->name);
+		ret = -1;
+		goto out;
+	}
+
+	if (prism2_enable_aux_port(dev, 0)) {
+		printk(KERN_DEBUG "%s: Disabling AUX port failed\n",
+		       dev->name);
+		/* continue anyway.. restart should have taken care of this */
+	}
+
+	mdelay(5);
+
+	local->func->hw_reset(dev);
+	local->hw_downloading = 0;
+	if (prism2_hw_config(dev, 2)) {
+		printk(KERN_WARNING "%s: Card configuration after flash "
+		       "download failed\n", dev->name);
+		ret = -1;
+	} else {
+		printk(KERN_INFO "%s: Card initialized successfully after "
+		       "flash download\n", dev->name);
+	}
+
+ out:
+	local->hw_downloading = 0;
+	return ret;
+}
+#endif /* PRISM2_NON_VOLATILE_DOWNLOAD */
+
+
+static void prism2_download_free_data(struct prism2_download_data *dl)
+{
+	int i;
+
+	if (dl == NULL)
+		return;
+
+	for (i = 0; i < dl->num_areas; i++)
+		kfree(dl->data[i].data);
+	kfree(dl);
+}
+
+
+static int prism2_download(local_info_t *local,
+			   struct prism2_download_param *param)
+{
+	int ret = 0;
+	int i;
+	u32 total_len = 0;
+	struct prism2_download_data *dl = NULL;
+
+	printk(KERN_DEBUG "prism2_download: dl_cmd=%d start_addr=0x%08x "
+	       "num_areas=%d\n",
+	       param->dl_cmd, param->start_addr, param->num_areas);
+
+	if (param->num_areas > 100) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	dl = kmalloc(sizeof(*dl) + param->num_areas *
+		     sizeof(struct prism2_download_data_area), GFP_KERNEL);
+	if (dl == NULL) {
+		ret = -ENOMEM;
+		goto out;
+	}
+	memset(dl, 0, sizeof(*dl) + param->num_areas *
+	       sizeof(struct prism2_download_data_area));
+	dl->dl_cmd = param->dl_cmd;
+	dl->start_addr = param->start_addr;
+	dl->num_areas = param->num_areas;
+	for (i = 0; i < param->num_areas; i++) {
+		printk(KERN_DEBUG "  area %d: addr=0x%08x len=%d ptr=0x%p\n",
+		       i, param->data[i].addr, param->data[i].len,
+		       param->data[i].ptr);
+
+		dl->data[i].addr = param->data[i].addr;
+		dl->data[i].len = param->data[i].len;
+
+		total_len += param->data[i].len;
+		if (param->data[i].len > PRISM2_MAX_DOWNLOAD_AREA_LEN ||
+		    total_len > PRISM2_MAX_DOWNLOAD_LEN) {
+			ret = -E2BIG;
+			goto out;
+		}
+
+		dl->data[i].data = kmalloc(dl->data[i].len, GFP_KERNEL);
+		if (dl->data[i].data == NULL) {
+			ret = -ENOMEM;
+			goto out;
+		}
+
+		if (copy_from_user(dl->data[i].data, param->data[i].ptr,
+				   param->data[i].len)) {
+			ret = -EFAULT;
+			goto out;
+		}
+	}
+
+	switch (param->dl_cmd) {
+	case PRISM2_DOWNLOAD_VOLATILE:
+	case PRISM2_DOWNLOAD_VOLATILE_PERSISTENT:
+		ret = prism2_download_volatile(local, dl);
+		break;
+	case PRISM2_DOWNLOAD_VOLATILE_GENESIS:
+	case PRISM2_DOWNLOAD_VOLATILE_GENESIS_PERSISTENT:
+		ret = prism2_download_genesis(local, dl);
+		break;
+	case PRISM2_DOWNLOAD_NON_VOLATILE:
+#ifdef PRISM2_NON_VOLATILE_DOWNLOAD
+		ret = prism2_download_nonvolatile(local, dl);
+#else /* PRISM2_NON_VOLATILE_DOWNLOAD */
+		printk(KERN_INFO "%s: non-volatile downloading not enabled\n",
+		       local->dev->name);
+		ret = -EOPNOTSUPP;
+#endif /* PRISM2_NON_VOLATILE_DOWNLOAD */
+		break;
+	default:
+		printk(KERN_DEBUG "%s: unsupported download command %d\n",
+		       local->dev->name, param->dl_cmd);
+		ret = -EINVAL;
+		break;
+	};
+
+ out:
+	if (ret == 0 && dl &&
+	    param->dl_cmd == PRISM2_DOWNLOAD_VOLATILE_GENESIS_PERSISTENT) {
+		prism2_download_free_data(local->dl_pri);
+		local->dl_pri = dl;
+	} else if (ret == 0 && dl &&
+		   param->dl_cmd == PRISM2_DOWNLOAD_VOLATILE_PERSISTENT) {
+		prism2_download_free_data(local->dl_sec);
+		local->dl_sec = dl;
+	} else
+		prism2_download_free_data(dl);
+
+	return ret;
+}
diff -Nur linux-orig/drivers/net/wireless/hostap.h linux/drivers/net/wireless/hostap.h
--- linux-orig/drivers/net/wireless/hostap.h	1970-01-01 03:00:00.000000000 +0300
+++ linux/drivers/net/wireless/hostap.h	2003-11-02 22:36:04.000000000 +0300
@@ -0,0 +1,54 @@
+#ifndef HOSTAP_H
+#define HOSTAP_H
+
+/* hostap.c */
+
+extern struct proc_dir_entry *hostap_proc;
+
+u16 hostap_tx_callback_register(local_info_t *local,
+				void (*func)(struct sk_buff *, int ok, void *),
+				void *data);
+int hostap_tx_callback_unregister(local_info_t *local, u16 idx);
+int hostap_set_word(struct net_device *dev, int rid, u16 val);
+int hostap_set_string(struct net_device *dev, int rid, const char *val);
+u16 hostap_get_porttype(local_info_t *local);
+int hostap_set_encryption(local_info_t *local);
+int hostap_set_antsel(local_info_t *local);
+int hostap_set_roaming(local_info_t *local);
+int hostap_set_auth_algs(local_info_t *local);
+void hostap_dump_rx_header(const char *name,
+			   const struct hfa384x_rx_frame *rx);
+void hostap_dump_tx_header(const char *name,
+			   const struct hfa384x_tx_frame *tx);
+void hostap_netif_wake_queues(struct net_device *dev);
+void hostap_netif_stop_queues(struct net_device *dev);
+int hostap_80211_header_parse(struct sk_buff *skb, unsigned char *haddr);
+int hostap_80211_prism_header_parse(struct sk_buff *skb, unsigned char *haddr);
+int hostap_80211_get_hdrlen(u16 fc);
+struct net_device_stats *hostap_get_stats(struct net_device *dev);
+void hostap_setup_dev(struct net_device *dev, local_info_t *local,
+		      int main_dev);
+void hostap_set_multicast_list_queue(void *data);
+int hostap_set_hostapd(local_info_t *local, int val, int rtnl_locked);
+void hostap_cleanup(local_info_t *local);
+void hostap_cleanup_handler(void *data);
+struct net_device * hostap_add_interface(struct local_info *local,
+					 int type, int rtnl_locked,
+					 const char *name);
+void hostap_remove_interface(struct net_device *dev, int rtnl_locked,
+			     int remove_from_list);
+
+
+/* hostap_proc.c */
+
+void hostap_init_proc(local_info_t *local);
+void hostap_remove_proc(local_info_t *local);
+
+
+/* hostap_info.c */
+
+void hostap_info_init(local_info_t *local);
+void hostap_info_process(local_info_t *local, struct sk_buff *skb);
+
+
+#endif /* HOSTAP_H */
diff -Nur linux-orig/drivers/net/wireless/hostap_hw.c linux/drivers/net/wireless/hostap_hw.c
--- linux-orig/drivers/net/wireless/hostap_hw.c	1970-01-01 03:00:00.000000000 +0300
+++ linux/drivers/net/wireless/hostap_hw.c	2003-11-02 22:36:04.000000000 +0300
@@ -0,0 +1,3686 @@
+/*
+ * Host AP (software wireless LAN access point) driver for
+ * Intersil Prism2/2.5/3.
+ *
+ * Copyright (c) 2001-2002, SSH Communications Security Corp and Jouni Malinen
+ * <jkmaline@cc.hut.fi>
+ * Copyright (c) 2002-2003, Jouni Malinen <jkmaline@cc.hut.fi>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation. See README and COPYING for
+ * more details.
+ *
+ * FIX:
+ * - there is currently no way of associating TX packets to correct wds device
+ *   when TX Exc/OK event occurs, so all tx_packets and some
+ *   tx_errors/tx_dropped are added to the main netdevice; using sw_support
+ *   field in txdesc might be used to fix this (using Alloc event to increment
+ *   tx_packets would need some further info in txfid table)
+ *
+ * Buffer Access Path (BAP) usage:
+ *   Prism2 cards have two separate BAPs for accessing the card memory. These
+ *   should allow concurrent access to two different frames and the driver
+ *   previously used BAP0 for sending data and BAP1 for receiving data.
+ *   However, there seems to be number of issues with concurrent access and at
+ *   least one know hardware bug in using BAP0 and BAP1 concurrently with PCI
+ *   Prism2.5. Therefore, the driver now only uses BAP0 for moving data between
+ *   host and card memories. BAP0 accesses are protected with local->baplock
+ *   (spin_lock_bh) to prevent concurrent use.
+ */
+
+
+#include <linux/config.h>
+#include <linux/version.h>
+
+#include <asm/delay.h>
+#include <asm/uaccess.h>
+
+#include <linux/slab.h>
+#include <linux/netdevice.h>
+#include <linux/etherdevice.h>
+#include <linux/proc_fs.h>
+#include <linux/if_arp.h>
+#include <linux/delay.h>
+#include <linux/random.h>
+#include <linux/wait.h>
+#include <linux/sched.h>
+#include <linux/rtnetlink.h>
+#include "hostap_wext.h"
+#include <asm/irq.h>
+
+
+#include "hostap_80211.h"
+#include "hostap.h"
+#include "hostap_ap.h"
+
+
+/* #define final_version */
+
+static int mtu = 1500;
+MODULE_PARM(mtu, "i");
+MODULE_PARM_DESC(mtu, "Maximum transfer unit");
+
+static int channel[MAX_PARM_DEVICES] = { 3, DEF_INTS };
+MODULE_PARM(channel, PARM_MIN_MAX "i");
+MODULE_PARM_DESC(channel, "Initial channel");
+
+static char *essid[MAX_PARM_DEVICES] = { "test" };
+MODULE_PARM(essid, PARM_MIN_MAX "s");
+MODULE_PARM_DESC(essid, "Host AP's ESSID");
+
+static int iw_mode[MAX_PARM_DEVICES] = { IW_MODE_MASTER, DEF_INTS };
+MODULE_PARM(iw_mode, PARM_MIN_MAX "i");
+MODULE_PARM_DESC(iw_mode, "Initial operation mode");
+
+static int beacon_int[MAX_PARM_DEVICES] = { 100, DEF_INTS };
+MODULE_PARM(beacon_int, PARM_MIN_MAX "i");
+MODULE_PARM_DESC(beacon_int, "Beacon interval (1 = 1024 usec)");
+
+static int dtim_period[MAX_PARM_DEVICES] = { 1, DEF_INTS };
+MODULE_PARM(dtim_period, PARM_MIN_MAX "i");
+MODULE_PARM_DESC(dtim_period, "DTIM period");
+
+static int delayed_enable /* = 0 */;
+MODULE_PARM(delayed_enable, "i");
+MODULE_PARM_DESC(delayed_enable, "Delay MAC port enable until netdevice open");
+
+static int disable_on_close /* = 0 */;
+MODULE_PARM(disable_on_close, "i");
+MODULE_PARM_DESC(disable_on_close, "Disable MAC port on netdevice close");
+
+#if defined(PRISM2_PCI) && defined(PRISM2_BUS_MASTER)
+static int bus_master_threshold_rx[MAX_PARM_DEVICES] = { 100, DEF_INTS };
+MODULE_PARM(bus_master_threshold_rx, "i");
+MODULE_PARM_DESC(bus_master_threshold_rx, "Packet length threshold for using "
+		 "PCI bus master on RX");
+
+static int bus_master_threshold_tx[MAX_PARM_DEVICES] = { 100, DEF_INTS };
+MODULE_PARM(bus_master_threshold_tx, "i");
+MODULE_PARM_DESC(bus_master_threshold_tx, "Packet length threshold for using "
+		 "PCI bus master on TX");
+#endif /* PRISM2_PCI and PRISM2_BUS_MASTER */
+
+static char *dev_template = "wlan%d";
+MODULE_PARM(dev_template, "s");
+MODULE_PARM_DESC(dev_template, "Prefix for network device name (default: "
+		 "wlan%d)");
+
+
+/* See IEEE 802.1H for LLC/SNAP encapsulation/decapsulation */
+/* Ethernet-II snap header (RFC1042 for most EtherTypes) */
+static unsigned char rfc1042_header[] =
+{ 0xaa, 0xaa, 0x03, 0x00, 0x00, 0x00 };
+/* Bridge-Tunnel header (for EtherTypes ETH_P_AARP and ETH_P_IPX) */
+static unsigned char bridge_tunnel_header[] =
+{ 0xaa, 0xaa, 0x03, 0x00, 0x00, 0xf8 };
+/* No encapsulation header if EtherType < 0x600 (=length) */
+
+
+#ifdef final_version
+#define EXTRA_EVENTS_WTERR 0
+#else
+/* check WTERR events (Wait Time-out) in development versions */
+#define EXTRA_EVENTS_WTERR HFA384X_EV_WTERR
+#endif
+
+#if defined(PRISM2_PCI) && defined(PRISM2_BUS_MASTER)
+#define EXTRA_EVENTS_BUS_MASTER (HFA384X_EV_PCI_M0 | HFA384X_EV_PCI_M1)
+#else
+#define EXTRA_EVENTS_BUS_MASTER 0
+#endif
+
+/* Events that will be using BAP0 */
+#define HFA384X_BAP0_EVENTS \
+	(HFA384X_EV_TXEXC | HFA384X_EV_RX | HFA384X_EV_INFO | HFA384X_EV_TX)
+
+/* event mask, i.e., events that will result in an interrupt */
+#define HFA384X_EVENT_MASK \
+	(HFA384X_BAP0_EVENTS | HFA384X_EV_ALLOC | HFA384X_EV_INFDROP | \
+	HFA384X_EV_CMD | HFA384X_EV_TICK | \
+	EXTRA_EVENTS_WTERR | EXTRA_EVENTS_BUS_MASTER)
+
+/* Default TX control flags: use 802.11 headers and request interrupt for
+ * failed transmits. Frames that request ACK callback, will add
+ * _TX_OK flag and _ALT_RTRY flag may be used to select different retry policy.
+ */
+#define HFA384X_TX_CTRL_FLAGS \
+	(HFA384X_TX_CTRL_802_11 | HFA384X_TX_CTRL_TX_EX)
+
+
+/* ca. 1 usec */
+#define HFA384X_CMD_BUSY_TIMEOUT 5000
+#define HFA384X_BAP_BUSY_TIMEOUT 50000
+
+/* ca. 10 usec */
+#define HFA384X_CMD_COMPL_TIMEOUT 20000
+#define HFA384X_DL_COMPL_TIMEOUT 1000000
+
+/* Wait times for initialization; yield to other processes to avoid busy
+ * waiting for long time. */
+#define HFA384X_INIT_TIMEOUT (HZ / 2) /* 500 ms */
+#define HFA384X_ALLOC_COMPL_TIMEOUT (HZ / 20) /* 50 ms */
+
+
+static void prism2_hw_reset(struct net_device *dev);
+static void prism2_check_sta_fw_version(local_info_t *local);
+
+#ifdef PRISM2_DOWNLOAD_SUPPORT
+/* hostap_download.c */
+static u8 * prism2_read_pda(struct net_device *dev);
+static int prism2_download(local_info_t *local,
+			   struct prism2_download_param *param);
+static void prism2_download_free_data(struct prism2_download_data *dl);
+static int prism2_download_volatile(local_info_t *local,
+				    struct prism2_download_data *param);
+static int prism2_download_genesis(local_info_t *local,
+				   struct prism2_download_data *param);
+#endif /* PRISM2_DOWNLOAD_SUPPORT */
+
+
+
+
+#ifndef final_version
+/* magic value written to SWSUPPORT0 reg. for detecting whether card is still
+ * present */
+#define HFA384X_MAGIC 0x8A32
+#endif
+
+
+static u16 hfa384x_read_reg(struct net_device *dev, u16 reg)
+{
+	return HFA384X_INW(reg);
+}
+
+
+static void hfa384x_read_regs(struct net_device *dev,
+			      struct hfa384x_regs *regs)
+{
+	regs->cmd = HFA384X_INW(HFA384X_CMD_OFF);
+	regs->evstat = HFA384X_INW(HFA384X_EVSTAT_OFF);
+	regs->offset0 = HFA384X_INW(HFA384X_OFFSET0_OFF);
+	regs->offset1 = HFA384X_INW(HFA384X_OFFSET1_OFF);
+	regs->swsupport0 = HFA384X_INW(HFA384X_SWSUPPORT0_OFF);
+}
+
+
+/* local->cmdlock must be locked when calling this helper function */
+static inline void __hostap_cmd_queue_free(local_info_t *local,
+					   struct hostap_cmd_queue *entry,
+					   int del_req)
+{
+	if (del_req) {
+		entry->del_req = 1;
+		if (!list_empty(&entry->list)) {
+			list_del_init(&entry->list);
+			local->cmd_queue_len--;
+		}
+	}
+
+	if (atomic_dec_and_test(&entry->usecnt) && entry->del_req)
+		kfree(entry);
+}
+
+static inline void hostap_cmd_queue_free(local_info_t *local,
+					 struct hostap_cmd_queue *entry,
+					 int del_req)
+{
+	unsigned long flags;
+
+	spin_lock_irqsave(&local->cmdlock, flags);
+	__hostap_cmd_queue_free(local, entry, del_req);
+	spin_unlock_irqrestore(&local->cmdlock, flags);
+}
+
+
+static inline int hfa384x_cmd_issue(struct net_device *dev,
+				    struct hostap_cmd_queue *entry)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int tries;
+	u16 reg;
+	unsigned long flags;
+
+	if (entry->issued) {
+		printk(KERN_DEBUG "%s: driver bug - re-issuing command @%p\n",
+		       dev->name, entry);
+	}
+
+	/* wait until busy bit is clear; this should always be clear since the
+	 * commands are serialized */
+	tries = HFA384X_CMD_BUSY_TIMEOUT;
+	while (HFA384X_INW(HFA384X_CMD_OFF) & HFA384X_CMD_BUSY && tries > 0) {
+		tries--;
+		udelay(1);
+	}
+#ifndef final_version
+	if (tries != HFA384X_CMD_BUSY_TIMEOUT) {
+		prism2_io_debug_error(dev, 1);
+		printk(KERN_DEBUG "%s: hfa384x_cmd_issue: cmd reg was busy "
+		       "for %d usec\n", dev->name,
+		       HFA384X_CMD_BUSY_TIMEOUT - tries);
+	}
+#endif
+	if (tries == 0) {
+		reg = HFA384X_INW(HFA384X_CMD_OFF);
+		prism2_io_debug_error(dev, 2);
+		printk(KERN_DEBUG "%s: hfa384x_cmd_issue - timeout - "
+		       "reg=0x%04x\n", dev->name, reg);
+		return -ETIMEDOUT;
+	}
+
+	/* write command */
+	spin_lock_irqsave(&local->cmdlock, flags);
+	HFA384X_OUTW(entry->param0, HFA384X_PARAM0_OFF);
+	HFA384X_OUTW(entry->param1, HFA384X_PARAM1_OFF);
+	HFA384X_OUTW(entry->cmd, HFA384X_CMD_OFF);
+	entry->issued = 1;
+	spin_unlock_irqrestore(&local->cmdlock, flags);
+
+	return 0;
+}
+
+
+/* Issue given command (possibly after waiting in command queue) and sleep
+ * until the command is completed (or timed out). This can be called only
+ * from user context. */
+static int hfa384x_cmd(struct net_device *dev, u16 cmd, u16 param0,
+		       u16 *param1, u16 *resp0)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int err, res, issue, issued = 0;
+	unsigned long flags;
+	struct hostap_cmd_queue *entry;
+	DECLARE_WAITQUEUE(wait, current);
+
+	if (in_interrupt()) {
+		printk(KERN_DEBUG "%s: hfa384x_cmd called from interrupt "
+		       "context\n", dev->name);
+		return -1;
+	}
+
+	if (local->cmd_queue_len >= HOSTAP_CMD_QUEUE_MAX_LEN) {
+		printk(KERN_DEBUG "%s: hfa384x_cmd: cmd_queue full\n",
+		       dev->name);
+		return -1;
+	}
+
+	if (signal_pending(current))
+		return -EINTR;
+
+	entry = (struct hostap_cmd_queue *)
+		kmalloc(sizeof(*entry), GFP_ATOMIC);
+	if (entry == NULL) {
+		printk(KERN_DEBUG "%s: hfa384x_cmd - kmalloc failed\n",
+		       dev->name);
+		return -ENOMEM;
+	}
+	memset(entry, 0, sizeof(*entry));
+	atomic_set(&entry->usecnt, 1);
+	entry->type = CMD_SLEEP;
+	entry->cmd = cmd;
+	entry->param0 = param0;
+	if (param1)
+		entry->param1 = *param1;
+	init_waitqueue_head(&entry->compl);
+
+	/* prepare to wait for command completion event, but do not sleep yet
+	 */
+	add_wait_queue(&entry->compl, &wait);
+	set_current_state(TASK_INTERRUPTIBLE);
+
+	spin_lock_irqsave(&local->cmdlock, flags);
+	issue = list_empty(&local->cmd_queue);
+	if (issue)
+		entry->issuing = 1;
+	list_add_tail(&entry->list, &local->cmd_queue);
+	local->cmd_queue_len++;
+	spin_unlock_irqrestore(&local->cmdlock, flags);
+
+	err = 0;
+	if (!issue)
+		goto wait_completion;
+
+	if (signal_pending(current))
+		err = -EINTR;
+
+	if (!err) {
+		if (hfa384x_cmd_issue(dev, entry))
+			err = -ETIMEDOUT;
+		else
+			issued = 1;
+	}
+
+ wait_completion:
+	if (!err && entry->type != CMD_COMPLETED) {
+		/* sleep until command is completed or timed out */
+		res = schedule_timeout(2 * HZ);
+	} else
+		res = -1;
+
+	if (!err && signal_pending(current))
+		err = -EINTR;
+
+	if (err && issued) {
+		/* the command was issued, so a CmdCompl event should occur
+		 * soon; however, there's a pending signal and
+		 * schedule_timeout() would be interrupted; wait a short period
+		 * of time to avoid removing entry from the list before
+		 * CmdCompl event */
+		udelay(300);
+	}
+
+	set_current_state(TASK_RUNNING);
+	remove_wait_queue(&entry->compl, &wait);
+
+	/* If entry->list is still in the list, it must be removed
+	 * first and in this case prism2_cmd_ev() does not yet have
+	 * local reference to it, and the data can be kfree()'d
+	 * here. If the command completion event is still generated,
+	 * it will be assigned to next (possibly) pending command, but
+	 * the driver will reset the card anyway due to timeout
+	 *
+	 * If the entry is not in the list prism2_cmd_ev() has a local
+	 * reference to it, but keeps cmdlock as long as the data is
+	 * needed, so the data can be kfree()'d here. */
+
+	/* FIX: if the entry->list is in the list, it has not been completed
+	 * yet, so removing it here is somewhat wrong.. this could cause
+	 * references to freed memory and next list_del() causing NULL pointer
+	 * dereference.. it would probably be better to leave the entry in the
+	 * list and the list should be emptied during hw reset */
+
+	spin_lock_irqsave(&local->cmdlock, flags);
+	if (!list_empty(&entry->list)) {
+		printk(KERN_DEBUG "%s: hfa384x_cmd: entry still in list? "
+		       "(entry=%p, type=%d, res=%d)\n", dev->name, entry,
+		       entry->type, res);
+		list_del_init(&entry->list);
+		local->cmd_queue_len--;
+	}
+	spin_unlock_irqrestore(&local->cmdlock, flags);
+
+	if (err) {
+		printk(KERN_DEBUG "%s: hfa384x_cmd: interrupted; err=%d\n",
+		       dev->name, err);
+		res = err;
+		goto done;
+	}
+
+	if (entry->type != CMD_COMPLETED) {
+		u16 reg = HFA384X_INW(HFA384X_EVSTAT_OFF);
+		printk(KERN_DEBUG "%s: hfa384x_cmd: command was not "
+		       "completed (res=%d, entry=%p, type=%d, cmd=0x%04x, "
+		       "param0=0x%04x, EVSTAT=%04x INTEN=%04x)\n", dev->name,
+		       res, entry, entry->type, entry->cmd, entry->param0, reg,
+		       HFA384X_INW(HFA384X_INTEN_OFF));
+		if (reg & HFA384X_EV_CMD) {
+			/* Command completion event is pending, but the
+			 * interrupt was not delivered - probably an issue
+			 * with pcmcia-cs configuration. */
+			printk(KERN_WARNING "%s: interrupt delivery does not "
+			       "seem to work\n", dev->name);
+		}
+		prism2_io_debug_error(dev, 3);
+		res = -ETIMEDOUT;
+		goto done;
+	}
+
+	if (resp0 != NULL)
+		*resp0 = entry->resp0;
+#ifndef final_version
+	if (entry->res) {
+		printk(KERN_DEBUG "%s: CMD=0x%04x => res=0x%02x, "
+		       "resp0=0x%04x\n",
+		       dev->name, cmd, entry->res, entry->resp0);
+	}
+#endif /* final_version */
+
+	res = entry->res;
+ done:
+	hostap_cmd_queue_free(local, entry, 1);
+	return res;
+}
+
+
+/* Issue given command (possibly after waiting in command queue) and use
+ * callback function to indicate command completion. This can be called both
+ * from user and interrupt context. */
+static int hfa384x_cmd_callback(struct net_device *dev, u16 cmd, u16 param0,
+				void (*callback)(struct net_device *dev,
+						 void *context, u16 resp0,
+						 u16 status),
+				void *context)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int issue, ret;
+	unsigned long flags;
+	struct hostap_cmd_queue *entry;
+
+	if (local->cmd_queue_len >= HOSTAP_CMD_QUEUE_MAX_LEN + 2) {
+		printk(KERN_DEBUG "%s: hfa384x_cmd: cmd_queue full\n",
+		       dev->name);
+		return -1;
+	}
+
+	entry = (struct hostap_cmd_queue *)
+		kmalloc(sizeof(*entry), GFP_ATOMIC);
+	if (entry == NULL) {
+		printk(KERN_DEBUG "%s: hfa384x_cmd_callback - kmalloc "
+		       "failed\n", dev->name);
+		return -ENOMEM;
+	}
+	memset(entry, 0, sizeof(*entry));
+	atomic_set(&entry->usecnt, 1);
+	entry->type = CMD_CALLBACK;
+	entry->cmd = cmd;
+	entry->param0 = param0;
+	entry->callback = callback;
+	entry->context = context;
+
+	spin_lock_irqsave(&local->cmdlock, flags);
+	issue = list_empty(&local->cmd_queue);
+	if (issue)
+		entry->issuing = 1;
+	list_add_tail(&entry->list, &local->cmd_queue);
+	local->cmd_queue_len++;
+	spin_unlock_irqrestore(&local->cmdlock, flags);
+
+	if (issue && hfa384x_cmd_issue(dev, entry))
+		ret = -ETIMEDOUT;
+	else
+		ret = 0;
+
+	hostap_cmd_queue_free(local, entry, ret);
+
+	return ret;
+}
+
+
+static int hfa384x_cmd_wait(struct net_device *dev, u16 cmd, u16 param0)
+{
+	int res, tries;
+	u16 reg;
+
+	/* wait until busy bit is clear; this should always be clear since the
+	 * commands are serialized */
+	tries = HFA384X_CMD_BUSY_TIMEOUT;
+	while (HFA384X_INW(HFA384X_CMD_OFF) & HFA384X_CMD_BUSY && tries > 0) {
+		tries--;
+		udelay(1);
+	}
+	if (tries == 0) {
+		prism2_io_debug_error(dev, 4);
+		printk(KERN_DEBUG "%s: hfa384x_cmd_wait - timeout - "
+		       "reg=0x%04x\n", dev->name,
+		       HFA384X_INW(HFA384X_CMD_OFF));
+		return -ETIMEDOUT;
+	}
+
+	/* write command */
+	HFA384X_OUTW(param0, HFA384X_PARAM0_OFF);
+	HFA384X_OUTW(cmd, HFA384X_CMD_OFF);
+
+        /* wait for command completion */
+	if ((cmd & HFA384X_CMDCODE_MASK) == HFA384X_CMDCODE_DOWNLOAD)
+		tries = HFA384X_DL_COMPL_TIMEOUT;
+	else
+		tries = HFA384X_CMD_COMPL_TIMEOUT;
+
+        while (!(HFA384X_INW(HFA384X_EVSTAT_OFF) & HFA384X_EV_CMD) &&
+               tries > 0) {
+                tries--;
+                udelay(10);
+        }
+        if (tries == 0) {
+                reg = HFA384X_INW(HFA384X_EVSTAT_OFF);
+		prism2_io_debug_error(dev, 5);
+                printk(KERN_DEBUG "%s: hfa384x_cmd_wait - timeout2 - "
+		       "reg=0x%04x\n", dev->name, reg);
+                return -ETIMEDOUT;
+        }
+
+        res = (HFA384X_INW(HFA384X_STATUS_OFF) &
+               (BIT(14) | BIT(13) | BIT(12) | BIT(11) | BIT(10) | BIT(9) |
+                BIT(8))) >> 8;
+#ifndef final_version
+	if (res) {
+		printk(KERN_DEBUG "%s: CMD=0x%04x => res=0x%02x\n",
+		       dev->name, cmd, res);
+	}
+#endif
+
+	HFA384X_OUTW(HFA384X_EV_CMD, HFA384X_EVACK_OFF);
+
+	return res;
+}
+
+
+static int hfa384x_cmd_no_wait(struct net_device *dev, u16 cmd, u16 param0)
+{
+	int tries;
+	u16 reg;
+
+	/* wait until busy bit is clear */
+	tries = HFA384X_CMD_BUSY_TIMEOUT;
+	while (HFA384X_INW(HFA384X_CMD_OFF) & HFA384X_CMD_BUSY && tries > 0) {
+		tries--;
+		udelay(1);
+	}
+	if (tries == 0) {
+		reg = HFA384X_INW(HFA384X_CMD_OFF);
+		prism2_io_debug_error(dev, 6);
+		printk("%s: hfa384x_cmd - timeout - reg=0x%04x\n", dev->name,
+		       reg);
+		return -ETIMEDOUT;
+	}
+
+	/* write command */
+	HFA384X_OUTW(param0, HFA384X_PARAM0_OFF);
+	HFA384X_OUTW(cmd, HFA384X_CMD_OFF);
+
+	return 0;
+}
+
+
+static inline int hfa384x_wait_offset(struct net_device *dev, u16 o_off)
+{
+	int tries = HFA384X_BAP_BUSY_TIMEOUT;
+	int res = HFA384X_INW(o_off) & HFA384X_OFFSET_BUSY;
+
+	while (res && tries > 0) {
+		tries--;
+		udelay(1);
+		res = HFA384X_INW(o_off) & HFA384X_OFFSET_BUSY;
+	}
+	return res;
+}
+
+
+/* Offset must be even */
+static int hfa384x_setup_bap(struct net_device *dev, u16 bap, u16 id,
+			     int offset)
+{
+	u16 o_off, s_off;
+	int ret = 0;
+
+	if (offset % 2 || bap > 1)
+		return -EINVAL;
+
+	if (bap == BAP1) {
+		o_off = HFA384X_OFFSET1_OFF;
+		s_off = HFA384X_SELECT1_OFF;
+	} else {
+		o_off = HFA384X_OFFSET0_OFF;
+		s_off = HFA384X_SELECT0_OFF;
+	}
+
+	if (hfa384x_wait_offset(dev, o_off)) {
+		prism2_io_debug_error(dev, 7);
+		printk(KERN_DEBUG "%s: hfa384x_setup_bap - timeout before\n",
+		       dev->name);
+		ret = -ETIMEDOUT;
+		goto out;
+	}
+
+	HFA384X_OUTW(id, s_off);
+	HFA384X_OUTW(offset, o_off);
+
+	if (hfa384x_wait_offset(dev, o_off)) {
+		prism2_io_debug_error(dev, 8);
+		printk(KERN_DEBUG "%s: hfa384x_setup_bap - timeout after\n",
+		       dev->name);
+		ret = -ETIMEDOUT;
+		goto out;
+	}
+#ifndef final_version
+	if (HFA384X_INW(o_off) & HFA384X_OFFSET_ERR) {
+		prism2_io_debug_error(dev, 9);
+		printk(KERN_DEBUG "%s: hfa384x_setup_bap - offset error "
+		       "(%d,0x04%x,%d); reg=0x%04x\n",
+		       dev->name, bap, id, offset, HFA384X_INW(o_off));
+		ret = -EINVAL;
+	}
+#endif
+
+ out:
+	return ret;
+}
+
+
+static int hfa384x_get_rid(struct net_device *dev, u16 rid, void *buf, int len,
+			   int exact_len)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int res, rlen = 0;
+	struct hfa384x_rid_hdr rec;
+
+	res = down_interruptible(&local->rid_bap_sem);
+	if (res)
+		return res;
+
+	res = hfa384x_cmd(dev, HFA384X_CMDCODE_ACCESS, rid, NULL, NULL);
+	if (res) {
+		printk(KERN_DEBUG "%s: hfa384x_get_rid: CMDCODE_ACCESS failed "
+		       "(res=%d, rid=%04x, len=%d)\n",
+		       dev->name, res, rid, len);
+		up(&local->rid_bap_sem);
+		return res;
+	}
+
+	spin_lock_bh(&local->baplock);
+
+	res = hfa384x_setup_bap(dev, BAP0, rid, 0);
+	if (!res)
+		res = hfa384x_from_bap(dev, BAP0, &rec, sizeof(rec));
+
+	if (le16_to_cpu(rec.len) == 0) {
+		/* RID not available */
+		res = -ENODATA;
+	}
+
+	rlen = (le16_to_cpu(rec.len) - 1) * 2;
+	if (!res && exact_len && rlen != len) {
+		printk(KERN_DEBUG "%s: hfa384x_get_rid - RID len mismatch: "
+		       "rid=0x%04x, len=%d (expected %d)\n",
+		       dev->name, rid, rlen, len);
+		res = -ENODATA;
+	}
+
+	if (!res)
+		res = hfa384x_from_bap(dev, BAP0, buf, len);
+
+	spin_unlock_bh(&local->baplock);
+	up(&local->rid_bap_sem);
+
+	if (res) {
+		if (res != -ENODATA)
+			printk(KERN_DEBUG "%s: hfa384x_get_rid (rid=%04x, "
+			       "len=%d) - failed - res=%d\n", dev->name, rid,
+			       len, res);
+		if (res == -ETIMEDOUT)
+			prism2_hw_reset(dev);
+		return res;
+	}
+
+	return rlen;
+}
+
+
+static int hfa384x_set_rid(struct net_device *dev, u16 rid, void *buf, int len)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	struct hfa384x_rid_hdr rec;
+	int res;
+
+	rec.rid = cpu_to_le16(rid);
+	/* RID len in words and +1 for rec.rid */
+	rec.len = cpu_to_le16(len / 2 + len % 2 + 1);
+
+	res = down_interruptible(&local->rid_bap_sem);
+	if (res)
+		return res;
+
+	spin_lock_bh(&local->baplock);
+	res = hfa384x_setup_bap(dev, BAP0, rid, 0);
+	if (!res)
+		res = hfa384x_to_bap(dev, BAP0, &rec, sizeof(rec));
+	if (!res)
+		res = hfa384x_to_bap(dev, BAP0, buf, len);
+	spin_unlock_bh(&local->baplock);
+
+	if (res) {
+		printk(KERN_DEBUG "%s: hfa384x_set_rid (rid=%04x, len=%d) - "
+		       "failed - res=%d\n", dev->name, rid, len, res);
+		up(&local->rid_bap_sem);
+		return res;
+	}
+
+	res = hfa384x_cmd(dev, HFA384X_CMDCODE_ACCESS_WRITE, rid, NULL, NULL);
+	up(&local->rid_bap_sem);
+	if (res) {
+		printk(KERN_DEBUG "%s: hfa384x_set_rid: CMDCODE_ACCESS_WRITE "
+		       "failed (res=%d, rid=%04x, len=%d)\n",
+		       dev->name, res, rid, len);
+		return res;
+	}
+
+	if (res == -ETIMEDOUT)
+		prism2_hw_reset(dev);
+
+	return res;
+}
+
+
+static void hfa384x_disable_interrupts(struct net_device *dev)
+{
+	/* disable interrupts and clear event status */
+	HFA384X_OUTW(0, HFA384X_INTEN_OFF);
+	HFA384X_OUTW(0xffff, HFA384X_EVACK_OFF);
+}
+
+
+static void hfa384x_enable_interrupts(struct net_device *dev)
+{
+	/* ack pending events and enable interrupts from selected events */
+	HFA384X_OUTW(0xffff, HFA384X_EVACK_OFF);
+	HFA384X_OUTW(HFA384X_EVENT_MASK, HFA384X_INTEN_OFF);
+}
+
+
+static void hfa384x_events_no_bap0(struct net_device *dev)
+{
+	HFA384X_OUTW(HFA384X_EVENT_MASK & ~HFA384X_BAP0_EVENTS,
+		     HFA384X_INTEN_OFF);
+}
+
+
+static void hfa384x_events_all(struct net_device *dev)
+{
+	HFA384X_OUTW(HFA384X_EVENT_MASK, HFA384X_INTEN_OFF);
+}
+
+
+static void hfa384x_events_only_cmd(struct net_device *dev)
+{
+	HFA384X_OUTW(HFA384X_EV_CMD, HFA384X_INTEN_OFF);
+}
+
+
+static u16 hfa384x_allocate_fid(struct net_device *dev, int len)
+{
+	u16 fid;
+	unsigned long delay;
+
+	/* FIX: this could be replace with hfa384x_cmd() if the Alloc event
+	 * below would be handled like CmdCompl event (sleep here, wake up from
+	 * interrupt handler */
+	if (hfa384x_cmd_wait(dev, HFA384X_CMDCODE_ALLOC, len)) {
+		printk(KERN_DEBUG "%s: cannot allocate fid, len=%d\n",
+		       dev->name, len);
+		return 0xffff;
+	}
+
+	delay = jiffies + HFA384X_ALLOC_COMPL_TIMEOUT;
+	while (!(HFA384X_INW(HFA384X_EVSTAT_OFF) & HFA384X_EV_ALLOC) &&
+	       time_before(jiffies, delay))
+		yield();
+	if (!(HFA384X_INW(HFA384X_EVSTAT_OFF) & HFA384X_EV_ALLOC)) {
+		printk("%s: fid allocate, len=%d - timeout\n", dev->name, len);
+		return 0xffff;
+	}
+
+	fid = HFA384X_INW(HFA384X_ALLOCFID_OFF);
+	HFA384X_OUTW(HFA384X_EV_ALLOC, HFA384X_EVACK_OFF);
+
+	return fid;
+}
+
+
+static int prism2_reset_port(struct net_device *dev)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int res;
+
+	if (!local->dev_enabled)
+		return 0;
+
+	res = hfa384x_cmd(dev, HFA384X_CMDCODE_DISABLE, 0,
+			  NULL, NULL);
+	if (res)
+		printk(KERN_DEBUG "%s: reset port failed to disable port\n",
+		       dev->name);
+	else {
+		res = hfa384x_cmd(dev, HFA384X_CMDCODE_ENABLE, 0,
+				  NULL, NULL);
+		if (res)
+			printk(KERN_DEBUG "%s: reset port failed to enable "
+			       "port\n", dev->name);
+	}
+
+	return res;
+}
+
+
+static int prism2_get_version_info(struct net_device *dev, u16 rid,
+				   const char *txt)
+{
+	struct hfa384x_comp_ident comp;
+
+	if (hfa384x_get_rid(dev, rid, &comp, sizeof(comp), 1) < 0) {
+		printk(KERN_DEBUG "Could not get RID for component %s\n", txt);
+		return -1;
+	}
+
+	printk(KERN_INFO "%s: %s: id=0x%02x v%d.%d.%d\n", dev->name, txt,
+	       __le16_to_cpu(comp.id), __le16_to_cpu(comp.major),
+	       __le16_to_cpu(comp.minor), __le16_to_cpu(comp.variant));
+	return 0;
+}
+
+
+static int prism2_setup_rids(struct net_device *dev)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	u16 tmp;
+	int ret = 0;
+
+	hostap_set_word(dev, HFA384X_RID_TICKTIME, 2000);
+
+	if (!local->fw_ap) {
+		tmp = hostap_get_porttype(local);
+		ret = hostap_set_word(dev, HFA384X_RID_CNFPORTTYPE, tmp);
+		if (ret) {
+			printk("%s: Port type setting to %d failed\n",
+			       dev->name, tmp);
+			goto fail;
+		}
+	}
+
+	/* Setting SSID to empty string seems to kill the card in Host AP mode
+	 */
+	if (local->iw_mode != IW_MODE_MASTER || local->essid[0] != '\0') {
+		ret = hostap_set_string(dev, HFA384X_RID_CNFOWNSSID,
+					local->essid);
+		if (ret) {
+			printk("%s: AP own SSID setting failed\n", dev->name);
+			goto fail;
+		}
+	}
+
+	ret = hostap_set_word(dev, HFA384X_RID_CNFMAXDATALEN,
+			      PRISM2_DATA_MAXLEN);
+	if (ret) {
+		printk("%s: MAC data length setting to %d failed\n",
+		       dev->name, PRISM2_DATA_MAXLEN);
+		goto fail;
+	}
+
+	if (hfa384x_get_rid(dev, HFA384X_RID_CHANNELLIST, &tmp, 2, 1) < 0) {
+		printk("%s: Channel list read failed\n", dev->name);
+		ret = -EINVAL;
+		goto fail;
+	}
+	local->channel_mask = __le16_to_cpu(tmp);
+
+	if (local->channel < 1 || local->channel > 14 ||
+	    !(local->channel_mask & (1 << (local->channel - 1)))) {
+		printk(KERN_WARNING "%s: Channel setting out of range "
+		       "(%d)!\n", dev->name, local->channel);
+		ret = -EBUSY;
+		goto fail;
+	}
+
+	ret = hostap_set_word(dev, HFA384X_RID_CNFOWNCHANNEL, local->channel);
+	if (ret) {
+		printk("%s: Channel setting to %d failed\n",
+		       dev->name, local->channel);
+		goto fail;
+	}
+
+	ret = hostap_set_word(dev, HFA384X_RID_CNFBEACONINT,
+			      local->beacon_int);
+	if (ret) {
+		printk("%s: Beacon interval setting to %d failed\n",
+		       dev->name, local->beacon_int);
+		/* this may fail with Symbol/Lucent firmware */
+		if (ret == -ETIMEDOUT)
+			goto fail;
+	}
+
+	ret = hostap_set_word(dev, HFA384X_RID_CNFOWNDTIMPERIOD,
+			      local->dtim_period);
+	if (ret) {
+		printk("%s: DTIM period setting to %d failed\n",
+		       dev->name, local->dtim_period);
+		/* this may fail with Symbol/Lucent firmware */
+		if (ret == -ETIMEDOUT)
+			goto fail;
+	}
+
+	ret = hostap_set_word(dev, HFA384X_RID_PROMISCUOUSMODE,
+			      local->is_promisc);
+	if (ret)
+		printk(KERN_INFO "%s: Setting promiscuous mode (%d) failed\n",
+		       dev->name, local->is_promisc);
+
+	if (!local->fw_ap) {
+		ret = hostap_set_string(dev, HFA384X_RID_CNFDESIREDSSID,
+					local->essid);
+		if (ret) {
+			printk("%s: Desired SSID setting failed\n", dev->name);
+			goto fail;
+		}
+	}
+
+	/* Setup TXRateControl, defaults to allow use of 1, 2, 5.5, and
+	 * 11 Mbps in automatic TX rate fallback and 1 and 2 Mbps as basic
+	 * rates */
+	if (local->tx_rate_control == 0) {
+		local->tx_rate_control =
+			HFA384X_RATES_1MBPS |
+			HFA384X_RATES_2MBPS |
+			HFA384X_RATES_5MBPS |
+			HFA384X_RATES_11MBPS;
+	}
+	if (local->basic_rates == 0)
+		local->basic_rates = HFA384X_RATES_1MBPS | HFA384X_RATES_2MBPS;
+
+	if (!local->fw_ap) {
+		ret = hostap_set_word(dev, HFA384X_RID_TXRATECONTROL,
+				      local->tx_rate_control);
+		if (ret) {
+			printk("%s: TXRateControl setting to %d failed\n",
+			       dev->name, local->tx_rate_control);
+			goto fail;
+		}
+
+		ret = hostap_set_word(dev, HFA384X_RID_CNFSUPPORTEDRATES,
+				      local->tx_rate_control);
+		if (ret) {
+			printk("%s: cnfSupportedRates setting to %d failed\n",
+			       dev->name, local->tx_rate_control);
+		}
+
+		ret = hostap_set_word(dev, HFA384X_RID_CNFBASICRATES,
+				      local->basic_rates);
+		if (ret) {
+			printk("%s: cnfBasicRates setting to %d failed\n",
+			       dev->name, local->basic_rates);
+		}
+
+		ret = hostap_set_word(dev, HFA384X_RID_CREATEIBSS, 1);
+		if (ret) {
+			printk("%s: Create IBSS setting to 1 failed\n",
+			       dev->name);
+		}
+	}
+
+	if (local->name_set)
+		(void) hostap_set_string(dev, HFA384X_RID_CNFOWNNAME,
+					 local->name);
+
+	if (hostap_set_encryption(local)) {
+		printk(KERN_INFO "%s: could not configure encryption\n",
+		       dev->name);
+	}
+
+	(void) hostap_set_antsel(local);
+
+	if (hostap_set_roaming(local)) {
+		printk(KERN_INFO "%s: could not set host roaming\n",
+		       dev->name);
+	}
+
+	if (local->sta_fw_ver >= PRISM2_FW_VER(1,6,3) &&
+	    hostap_set_word(dev, HFA384X_RID_CNFENHSECURITY, local->enh_sec))
+		printk(KERN_INFO "%s: cnfEnhSecurity setting to 0x%x failed\n",
+		       dev->name, local->enh_sec);
+
+	/* 32-bit tallies were added in STA f/w 0.8.0, but they were apparently
+	 * not working correctly (last seven counters report bogus values).
+	 * This has been fixed in 0.8.2, so enable 32-bit tallies only
+	 * beginning with that firmware version. Another bug fix for 32-bit
+	 * tallies in 1.4.0; should 16-bit tallies be used for some other
+	 * versions, too? */
+	if (local->sta_fw_ver >= PRISM2_FW_VER(0,8,2)) {
+		if (hostap_set_word(dev, HFA384X_RID_CNFTHIRTY2TALLY, 1)) {
+			printk(KERN_INFO "%s: cnfThirty2Tally setting "
+			       "failed\n", dev->name);
+			local->tallies32 = 0;
+		} else
+			local->tallies32 = 1;
+	} else
+		local->tallies32 = 0;
+
+	hostap_set_auth_algs(local);
+
+	if (hostap_set_word(dev, HFA384X_RID_FRAGMENTATIONTHRESHOLD,
+			    local->fragm_threshold)) {
+		printk(KERN_INFO "%s: setting FragmentationThreshold to %d "
+		       "failed\n", dev->name, local->fragm_threshold);
+	}
+
+	if (hostap_set_word(dev, HFA384X_RID_RTSTHRESHOLD,
+			    local->rts_threshold)) {
+		printk(KERN_INFO "%s: setting RTSThreshold to %d failed\n",
+		       dev->name, local->rts_threshold);
+	}
+
+ fail:
+	return ret;
+}
+
+
+static void prism2_clear_cmd_queue(local_info_t *local)
+{
+	struct list_head *ptr, *n;
+	unsigned long flags;
+	struct hostap_cmd_queue *entry;
+
+	spin_lock_irqsave(&local->cmdlock, flags);
+	for (ptr = local->cmd_queue.next, n = ptr->next;
+	     ptr != &local->cmd_queue; ptr = n, n = ptr->next) {
+		entry = list_entry(ptr, struct hostap_cmd_queue, list);
+		atomic_inc(&entry->usecnt);
+		printk(KERN_DEBUG "%s: removed pending cmd_queue entry "
+		       "(type=%d, cmd=0x%04x, param0=0x%04x)\n",
+		       local->dev->name, entry->type, entry->cmd,
+		       entry->param0);
+		__hostap_cmd_queue_free(local, entry, 1);
+	}
+	if (local->cmd_queue_len) {
+		printk(KERN_DEBUG "%s: cmd_queue_len (%d) not zero after "
+		       "flush\n", local->dev->name, local->cmd_queue_len);
+		local->cmd_queue_len = 0;
+	}
+	spin_unlock_irqrestore(&local->cmdlock, flags);
+}
+
+
+static int prism2_hw_init(struct net_device *dev, int initial)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int ret, first = 1;
+	unsigned long start, delay;
+
+	PDEBUG(DEBUG_FLOW, "prism2_hw_init()\n");
+
+	clear_bit(HOSTAP_BITS_TRANSMIT, &local->bits);
+
+ init:
+	/* initialize HFA 384x */
+	ret = hfa384x_cmd_no_wait(dev, HFA384X_CMDCODE_INIT, 0);
+	if (ret) {
+		printk("%s: first command failed - is the card compatible?\n",
+		       dev_info);
+		return 1;
+	}
+
+	if (first && (HFA384X_INW(HFA384X_EVSTAT_OFF) & HFA384X_EV_CMD)) {
+		/* EvStat has Cmd bit set in some cases, so retry once if no
+		 * wait was needed */
+		HFA384X_OUTW(HFA384X_EV_CMD, HFA384X_EVACK_OFF);
+		printk(KERN_DEBUG "%s: init command completed too quickly - "
+		       "retrying\n", dev->name);
+		first = 0;
+		goto init;
+	}
+
+	start = jiffies;
+	delay = jiffies + HFA384X_INIT_TIMEOUT;
+	while (!(HFA384X_INW(HFA384X_EVSTAT_OFF) & HFA384X_EV_CMD) &&
+	       time_before(jiffies, delay))
+		yield();
+	if (!(HFA384X_INW(HFA384X_EVSTAT_OFF) & HFA384X_EV_CMD)) {
+		printk("%s: card initialization timed out\n", dev_info);
+		return 1;
+	}
+	printk(KERN_DEBUG "prism2_hw_init: initialized in %lu ms\n",
+	       (jiffies - start) * 1000 / HZ);
+	HFA384X_OUTW(HFA384X_EV_CMD, HFA384X_EVACK_OFF);
+	return 0;
+}
+
+
+static int prism2_hw_init2(struct net_device *dev, int initial)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int i;
+
+#ifdef PRISM2_DOWNLOAD_SUPPORT
+	local->pda = prism2_read_pda(dev);
+#endif /* PRISM2_DOWNLOAD_SUPPORT */
+
+	hfa384x_disable_interrupts(dev);
+
+#ifndef final_version
+	HFA384X_OUTW(HFA384X_MAGIC, HFA384X_SWSUPPORT0_OFF);
+	if (HFA384X_INW(HFA384X_SWSUPPORT0_OFF) != HFA384X_MAGIC) {
+		printk("SWSUPPORT0 write/read failed: %04X != %04X\n",
+		       HFA384X_INW(HFA384X_SWSUPPORT0_OFF), HFA384X_MAGIC);
+		goto failed;
+	}
+#endif
+
+	if (initial || local->pri_only) {
+		hfa384x_events_only_cmd(dev);
+		/* get card version information */
+		if (prism2_get_version_info(dev, HFA384X_RID_NICID, "NIC") ||
+		    prism2_get_version_info(dev, HFA384X_RID_PRIID, "PRI")) {
+			hfa384x_disable_interrupts(dev);
+			goto failed;
+		}
+
+		if (prism2_get_version_info(dev, HFA384X_RID_STAID, "STA")) {
+			printk(KERN_DEBUG "%s: Failed to read STA f/w version "
+			       "- only Primary f/w present\n", dev->name);
+			local->pri_only = 1;
+			return 0;
+		}
+		local->pri_only = 0;
+		hfa384x_disable_interrupts(dev);
+	}
+
+	/* FIX: could convert allocate_fid to use sleeping CmdCompl wait and
+	 * enable interrupts before this. This would also require some sort of
+	 * sleeping AllocEv waiting */
+
+	/* allocate TX FIDs */
+	local->txfid_len = PRISM2_TXFID_LEN;
+	for (i = 0; i < PRISM2_TXFID_COUNT; i++) {
+		local->txfid[i] = hfa384x_allocate_fid(dev, local->txfid_len);
+		if (local->txfid[i] == 0xffff && local->txfid_len > 1600) {
+			local->txfid[i] = hfa384x_allocate_fid(dev, 1600);
+			if (local->txfid[i] != 0xffff) {
+				printk(KERN_DEBUG "%s: Using shorter TX FID "
+				       "(1600 bytes)\n", dev->name);
+				local->txfid_len = 1600;
+			}
+		}
+		if (local->txfid[i] == 0xffff)
+			goto failed;
+		local->intransmitfid[i] = PRISM2_TXFID_EMPTY;
+	}
+
+	hfa384x_events_only_cmd(dev);
+
+	if (initial) {
+		prism2_check_sta_fw_version(local);
+
+		if (hfa384x_get_rid(dev, HFA384X_RID_CNFOWNMACADDR,
+				    &dev->dev_addr, 6, 1) < 0) {
+			printk("%s: could not get own MAC address\n",
+			       dev->name);
+		}
+		if (local->apdev)
+			memcpy(local->apdev->dev_addr, dev->dev_addr,
+			       ETH_ALEN);
+		if (local->stadev)
+			memcpy(local->stadev->dev_addr, dev->dev_addr,
+			       ETH_ALEN);
+	} else if (local->fw_ap)
+		prism2_check_sta_fw_version(local);
+
+	prism2_setup_rids(dev);
+
+	/* MAC is now configured, but port 0 is not yet enabled */
+	return 0;
+
+ failed:
+	printk(KERN_WARNING "%s: Initialization failed\n", dev_info);
+	return 1;
+}
+
+
+static int prism2_hw_enable(struct net_device *dev, int initial)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int was_resetting = local->hw_resetting;
+
+	if (hfa384x_cmd(dev, HFA384X_CMDCODE_ENABLE, 0, NULL, NULL)) {
+		printk("%s: MAC port 0 enabling failed\n", dev->name);
+		return 1;
+	}
+
+	local->hw_ready = 1;
+	local->hw_reset_tries = 0;
+	local->hw_resetting = 0;
+	hfa384x_enable_interrupts(dev);
+
+	/* at least D-Link DWL-650 seems to require additional port reset
+	 * before it starts acting as an AP, so reset port automatically
+	 * here just in case */
+	if (initial && prism2_reset_port(dev)) {
+		printk("%s: MAC port 0 reseting failed\n", dev->name);
+		return 1;
+	}
+
+	if (was_resetting && netif_queue_stopped(dev)) {
+		/* If hw_reset() was called during pending transmit, netif
+		 * queue was stopped. Wake it up now since the wlan card has
+		 * been resetted. */
+		hostap_netif_wake_queues(dev);
+	}
+
+	return 0;
+}
+
+
+static int prism2_hw_config(struct net_device *dev, int initial)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	if (local->hw_downloading)
+		return 1;
+
+	if (prism2_hw_init(dev, initial) || prism2_hw_init2(dev, initial))
+		return 1;
+
+	if (!local->pri_only && (!initial || !delayed_enable)) {
+		if (!local->dev_enabled)
+			prism2_callback(local, PRISM2_CALLBACK_ENABLE);
+		local->dev_enabled = 1;
+		return prism2_hw_enable(dev, initial);
+	}
+
+	return 0;
+}
+
+
+static void prism2_hw_shutdown(struct net_device *dev, int no_disable)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+
+	/* Allow only command completion events during disable */
+	hfa384x_events_only_cmd(dev);
+
+	local->hw_ready = 0;
+	if (local->dev_enabled)
+		prism2_callback(local, PRISM2_CALLBACK_DISABLE);
+	local->dev_enabled = 0;
+
+	if (local->func->card_present && !local->func->card_present(local)) {
+		printk(KERN_DEBUG "%s: card already removed or not configured "
+		       "during shutdown\n", dev->name);
+		return;
+	}
+
+	if ((no_disable & HOSTAP_HW_NO_DISABLE) == 0 &&
+	    hfa384x_cmd(dev, HFA384X_CMDCODE_DISABLE, 0, NULL, NULL))
+		printk(KERN_WARNING "%s: Shutdown failed\n", dev_info);
+
+	hfa384x_disable_interrupts(dev);
+
+	if (no_disable & HOSTAP_HW_ENABLE_CMDCOMPL)
+		hfa384x_events_only_cmd(dev);
+	else
+		prism2_clear_cmd_queue(local);
+}
+
+
+static void prism2_hw_reset(struct net_device *dev)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+
+#if 0
+	static long last_reset = 0;
+
+	/* do not reset card more than once per second to avoid ending up in a
+	 * busy loop reseting the card */
+	if (time_before_eq(jiffies, last_reset + HZ))
+		return;
+	last_reset = jiffies;
+#endif
+
+	if (in_interrupt()) {
+		printk(KERN_DEBUG "%s: driver bug - prism2_hw_reset() called "
+		       "in interrupt context\n", dev->name);
+		return;
+	}
+
+	if (local->hw_downloading)
+		return;
+
+	if (local->hw_resetting) {
+		printk(KERN_WARNING "%s: %s: already resetting card - "
+		       "ignoring reset request\n", dev_info, dev->name);
+		return;
+	}
+
+	local->hw_reset_tries++;
+	if (local->hw_reset_tries > 10) {
+		printk(KERN_WARNING "%s: too many reset tries, skipping\n",
+		       dev->name);
+		return;
+	}
+
+	printk(KERN_WARNING "%s: %s: resetting card\n", dev_info, dev->name);
+	hfa384x_disable_interrupts(dev);
+	local->hw_resetting = 1;
+	if (local->func->cor_sreset) {
+		/* Host system seems to hang in some cases with high traffic
+		 * load or shared interrupts during COR sreset. Disable shared
+		 * interrupts during reset to avoid these crashes. COS sreset
+		 * takes quite a long time, so it is unfortunate that this
+		 * seems to be needed. Anyway, I do not know of any better way
+		 * of avoiding the crash. */
+		disable_irq(dev->irq);
+		local->func->cor_sreset(local);
+		enable_irq(dev->irq);
+	}
+	prism2_hw_shutdown(dev, 1);
+	prism2_hw_config(dev, 0);
+	local->hw_resetting = 0;
+
+#ifdef PRISM2_DOWNLOAD_SUPPORT
+	if (local->dl_pri) {
+		printk(KERN_DEBUG "%s: persistent download of primary "
+		       "firmware\n", dev->name);
+		if (prism2_download_genesis(local, local->dl_pri) < 0)
+			printk(KERN_WARNING "%s: download (PRI) failed\n",
+			       dev->name);
+	}
+
+	if (local->dl_sec) {
+		printk(KERN_DEBUG "%s: persistent download of secondary "
+		       "firmware\n", dev->name);
+		if (prism2_download_volatile(local, local->dl_sec) < 0)
+			printk(KERN_WARNING "%s: download (SEC) failed\n",
+			       dev->name);
+	}
+#endif /* PRISM2_DOWNLOAD_SUPPORT */
+}
+
+
+static void prism2_schedule_reset(local_info_t *local)
+{
+	PRISM2_SCHEDULE_TASK(&local->reset_queue);
+}
+
+
+/* Called only as scheduled task after noticing card timeout in interrupt
+ * context */
+static void handle_reset_queue(void *data)
+{
+	local_info_t *local = (local_info_t *) data;
+
+	printk(KERN_DEBUG "%s: scheduled card reset\n", local->dev->name);
+	prism2_hw_reset(local->dev);
+
+	if (netif_queue_stopped(local->dev)) {
+		int i;
+
+		for (i = 0; i < PRISM2_TXFID_COUNT; i++)
+			if (local->intransmitfid[i] == PRISM2_TXFID_EMPTY) {
+				PDEBUG(DEBUG_EXTRA, "prism2_tx_timeout: "
+				       "wake up queue\n");
+				hostap_netif_wake_queues(local->dev);
+				break;
+			}
+	}
+
+#ifndef NEW_MODULE_CODE
+	MOD_DEC_USE_COUNT;
+#endif
+}
+
+
+/* TODO: share one netif queue for all interfaces and get rid of this
+ * function.. */
+/* update trans_start for all used devices */
+static void prism2_netif_update_trans_start(struct net_device *dev)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	struct list_head *ptr;
+
+	read_lock_bh(&local->iface_lock);
+	list_for_each(ptr, &local->hostap_interfaces) {
+		iface = list_entry(ptr, struct hostap_interface, list);
+		iface->dev->trans_start = jiffies;
+	}
+	read_unlock_bh(&local->iface_lock);
+}
+
+
+static int prism2_get_txfid_idx(local_info_t *local)
+{
+	int idx, end;
+	unsigned long flags;
+
+	spin_lock_irqsave(&local->txfidlock, flags);
+	end = idx = local->next_txfid;
+	do {
+		if (local->intransmitfid[idx] == PRISM2_TXFID_EMPTY) {
+			local->intransmitfid[idx] = PRISM2_TXFID_RESERVED;
+			spin_unlock_irqrestore(&local->txfidlock, flags);
+			return idx;
+		}
+		idx++;
+		if (idx >= PRISM2_TXFID_COUNT)
+			idx = 0;
+	} while (idx != end);
+	spin_unlock_irqrestore(&local->txfidlock, flags);
+
+	PDEBUG(DEBUG_EXTRA2, "prism2_get_txfid_idx: no room in txfid buf: "
+	       "packet dropped\n");
+	local->stats.tx_dropped++;
+
+	return -1;
+}
+
+
+/* Called only from hardware IRQ */
+static void prism2_transmit_cb(struct net_device *dev, void *context,
+			       u16 resp0, u16 res)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int idx = (int) context;
+
+	if (res) {
+		printk(KERN_DEBUG "%s: prism2_transmit_cb - res=0x%02x\n",
+		       dev->name, res);
+		return;
+	}
+
+	if (idx < 0 || idx >= PRISM2_TXFID_COUNT) {
+		printk(KERN_DEBUG "%s: prism2_transmit_cb called with invalid "
+		       "idx=%d\n", dev->name, idx);
+		return;
+	}
+
+	if (!test_and_clear_bit(HOSTAP_BITS_TRANSMIT, &local->bits)) {
+		printk(KERN_DEBUG "%s: driver bug: prism2_transmit_cb called "
+		       "with no pending transmit\n", dev->name);
+	}
+
+	if (netif_queue_stopped(dev)) {
+		/* ready for next TX, so wake up queue that was stopped in
+		 * prism2_transmit() */
+		hostap_netif_wake_queues(dev);
+	}
+
+	spin_lock(&local->txfidlock);
+
+	/* With reclaim, Resp0 contains new txfid for transmit; the old txfid
+	 * will be automatically allocated for the next TX frame */
+	local->intransmitfid[idx] = resp0;
+
+	PDEBUG(DEBUG_FID, "%s: prism2_cmd_ev: txfid[%d]=0x%04x, resp0=0x%04x, "
+	       "transmit_txfid=0x%04x\n", dev->name, idx, local->txfid[idx],
+	       resp0, local->intransmitfid[local->next_txfid]);
+
+	idx++;
+	if (idx >= PRISM2_TXFID_COUNT)
+		idx = 0;
+	local->next_txfid = idx;
+
+	/* check if all TX buffers are occupied */
+	do {
+		if (local->intransmitfid[idx] == PRISM2_TXFID_EMPTY) {
+			spin_unlock(&local->txfidlock);
+			return;
+		}
+		idx++;
+		if (idx >= PRISM2_TXFID_COUNT)
+			idx = 0;
+	} while (idx != local->next_txfid);
+	spin_unlock(&local->txfidlock);
+
+	/* no empty TX buffers, stop queue */
+	hostap_netif_stop_queues(dev);
+}
+
+
+/* Called only from software IRQ if PCI bus master is not used (with bus master
+ * this can be called both from software and hardware IRQ) */
+static int prism2_transmit(struct net_device *dev, int idx)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int res;
+
+	/* The driver tries to stop netif queue so that there would not be
+	 * more than one attempt to transmit frames going on; check that this
+	 * is really the case */
+
+	if (test_and_set_bit(HOSTAP_BITS_TRANSMIT, &local->bits)) {
+		printk(KERN_DEBUG "%s: driver bug - prism2_transmit() called "
+		       "when previous TX was pending\n", dev->name);
+		return -1;
+	}
+
+	/* stop the queue for the time that transmit is pending */
+	hostap_netif_stop_queues(dev);
+
+	/* transmit packet */
+	res = hfa384x_cmd_callback(
+		dev,
+		HFA384X_CMDCODE_TRANSMIT | HFA384X_CMD_TX_RECLAIM,
+		local->txfid[idx],
+		prism2_transmit_cb, (void *) idx);
+
+	if (res) {
+		struct net_device_stats *stats;
+		printk(KERN_DEBUG "%s: prism2_transmit: CMDCODE_TRANSMIT "
+		       "failed (res=%d)\n", dev->name, res);
+		stats = hostap_get_stats(dev);
+		stats->tx_dropped++;
+		hostap_netif_wake_queues(dev);
+		return -1;
+	}
+	prism2_netif_update_trans_start(dev);
+
+	/* Since we did not wait for command completion, the card continues
+	 * to process on the background and we will finish handling when
+	 * command completion event is handled (prism2_cmd_ev() function) */
+
+	return 0;
+}
+
+
+/* Called only from hardware IRQ */
+static void prism2_cmd_ev(struct net_device *dev)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	struct hostap_cmd_queue *entry = NULL;
+
+	spin_lock(&local->cmdlock);
+	if (!list_empty(&local->cmd_queue)) {
+		entry = list_entry(local->cmd_queue.next,
+				   struct hostap_cmd_queue, list);
+		atomic_inc(&entry->usecnt);
+		list_del_init(&entry->list);
+		local->cmd_queue_len--;
+
+		if (!entry->issued) {
+			printk(KERN_DEBUG "%s: Command completion event, but "
+			       "cmd not issued\n", dev->name);
+			__hostap_cmd_queue_free(local, entry, 1);
+			entry = NULL;
+		}
+	}
+	spin_unlock(&local->cmdlock);
+
+	if (!entry) {
+		HFA384X_OUTW(HFA384X_EV_CMD, HFA384X_EVACK_OFF);
+		printk(KERN_DEBUG "%s: Command completion event, but no "
+		       "pending commands\n", dev->name);
+		return;
+	}
+
+	entry->resp0 = HFA384X_INW(HFA384X_RESP0_OFF);
+	entry->res = (HFA384X_INW(HFA384X_STATUS_OFF) &
+		      (BIT(14) | BIT(13) | BIT(12) | BIT(11) | BIT(10) |
+		       BIT(9) | BIT(8))) >> 8;
+	HFA384X_OUTW(HFA384X_EV_CMD, HFA384X_EVACK_OFF);
+
+	/* TODO: rest of the CmdEv handling could be moved to tasklet */
+	if (entry->type == CMD_SLEEP) {
+		entry->type = CMD_COMPLETED;
+		wake_up_interruptible(&entry->compl);
+	} else if (entry->type == CMD_CALLBACK) {
+		if (entry->callback)
+			entry->callback(dev, entry->context, entry->resp0,
+					entry->res);
+	} else {
+		printk(KERN_DEBUG "%s: Invalid command completion type %d\n",
+		       dev->name, entry->type);
+	}
+	hostap_cmd_queue_free(local, entry, 1);
+
+	/* issue next command, if pending */
+	entry = NULL;
+	spin_lock(&local->cmdlock);
+	if (!list_empty(&local->cmd_queue)) {
+		entry = list_entry(local->cmd_queue.next,
+				   struct hostap_cmd_queue, list);
+		if (entry->issuing) {
+			/* hfa384x_cmd() has already started issuing this
+			 * command, so do not start here */
+			entry = NULL;
+		}
+		if (entry)
+			atomic_inc(&entry->usecnt);
+	}
+	spin_unlock(&local->cmdlock);
+
+	if (entry) {
+		/* issue next command; if command issuing fails, remove the
+		 * entry from cmd_queue */
+		int res = hfa384x_cmd_issue(dev, entry);
+		spin_lock(&local->cmdlock);
+		__hostap_cmd_queue_free(local, entry, res);
+		spin_unlock(&local->cmdlock);
+	}
+}
+
+
+#if defined(PRISM2_PCI) && defined(PRISM2_BUS_MASTER)
+static void prism2_tx_cb(struct net_device *dev, void *context,
+			 u16 resp0, u16 res)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	unsigned long addr;
+	int buf_len = (int) context;
+
+	if (res) {
+		printk(KERN_DEBUG "%s: prism2_tx_cb - res=0x%02x\n",
+		       dev->name, res);
+		return;
+	}
+
+	addr = virt_to_phys(local->bus_m0_buf);
+	HFA384X_OUTW((addr & 0xffff0000) >> 16, HFA384X_PCI_M0_ADDRH_OFF);
+	HFA384X_OUTW(addr & 0x0000ffff, HFA384X_PCI_M0_ADDRL_OFF);
+	HFA384X_OUTW(buf_len / 2, HFA384X_PCI_M0_LEN_OFF);
+	HFA384X_OUTW(HFA384X_PCI_CTL_TO_BAP, HFA384X_PCI_M0_CTL_OFF);
+}
+#endif /* PRISM2_PCI and PRISM2_BUS_MASTER */
+
+
+/* Called only from software IRQ */
+static int prism2_tx(struct sk_buff *skb, struct net_device *dev)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int res, idx = -1, ret = 1, data_len;
+	struct hfa384x_tx_frame txdesc;
+	u16 fc, ethertype = 0;
+	enum { WDS_NO, WDS_OWN_FRAME, WDS_COMPLIANT_FRAME } use_wds = WDS_NO;
+	struct net_device_stats *stats;
+	u8 *wepbuf = NULL;
+	int wepbuf_len = 0, host_encrypt = 0;
+	struct prism2_crypt_data *crypt = NULL;
+	void *sta = NULL;
+	u8 *encaps_data;
+	int encaps_len, skip_header_bytes;
+	int no_encrypt = 0;
+	int to_assoc_ap = 0;
+
+	prism2_callback(local, PRISM2_CALLBACK_TX_START);
+	stats = hostap_get_stats(dev);
+
+	if ((local->func->card_present && !local->func->card_present(local)) ||
+	    !local->hw_ready || local->hw_downloading || local->pri_only) {
+		if (net_ratelimit())
+			printk(KERN_DEBUG "%s: prism2_tx: hw not ready - "
+			       "skipping\n", dev->name);
+		ret = 0;
+		goto fail;
+	}
+
+	if (skb->len < ETH_HLEN) {
+		printk(KERN_DEBUG "%s: prism2_tx: short skb (len=%d)\n",
+		       dev->name, skb->len);
+		ret = 0;
+		goto fail;
+	}
+
+	if (local->dev != dev) {
+		use_wds = (local->iw_mode == IW_MODE_MASTER &&
+			   !(local->wds_type & HOSTAP_WDS_STANDARD_FRAME)) ?
+			WDS_OWN_FRAME : WDS_COMPLIANT_FRAME;
+		if (dev == local->stadev) {
+			to_assoc_ap = 1;
+			use_wds = WDS_NO;
+		} else if (dev == local->apdev) {
+			printk(KERN_DEBUG "%s: prism2_tx: trying to use "
+			       "AP device with Ethernet net dev\n", dev->name);
+			ret = 0;
+			goto fail;
+		}
+	} else {
+		if (local->iw_mode == IW_MODE_REPEAT) {
+			printk(KERN_DEBUG "%s: prism2_tx: trying to use "
+			       "non-WDS link in Repeater mode\n", dev->name);
+			ret = 0;
+			goto fail;
+		} else if (local->iw_mode == IW_MODE_INFRA &&
+			   (local->wds_type & HOSTAP_WDS_AP_CLIENT) &&
+			   memcmp(skb->data + ETH_ALEN, dev->dev_addr,
+				  ETH_ALEN) != 0) {
+			/* AP client mode: send frames with foreign src addr
+			 * using 4-addr WDS frames */
+			use_wds = WDS_COMPLIANT_FRAME;
+		}
+	}
+
+	if (local->host_encrypt) {
+		/* Set crypt to default algorithm and key; will be replaced in
+		 * AP code if STA has own alg/key */
+		crypt = local->crypt;
+		host_encrypt = 1;
+	}
+
+	if (skb->protocol == __constant_htons(ETH_P_HOSTAP)) {
+		/* frame from prism2_send_mgmt() */
+		if (skb->len < sizeof(txdesc)) {
+			printk(KERN_DEBUG "%s: prism2_tx: short ETH_P_HOSTAP "
+			       "skb\n", dev->name);
+			ret = 0;
+			goto fail;
+		}
+		memcpy(&txdesc, skb->data, sizeof(txdesc));
+		skb_pull(skb, sizeof(txdesc));
+		encaps_data = NULL;
+		encaps_len = 0;
+		skip_header_bytes = 0;
+		data_len = skb->len;
+
+		fc = le16_to_cpu(txdesc.frame_control);
+
+		/* data frames use normal host encryption, if needed */
+		if (WLAN_FC_GET_TYPE(fc) == WLAN_FC_TYPE_DATA)
+			goto data_txdesc_set;
+
+		/* mgmt/ctrl frames do not need further processing, so skip to
+		 * frame transmit */
+		goto frame_processing_done;
+	}
+
+	/* Incoming skb->data: dst_addr[6], src_addr[6], proto[2], payload
+	 * ==>
+	 * Prism2 TX frame with 802.11 header:
+	 * txdesc (address order depending on used mode; includes dst_addr and
+	 * src_addr), possible encapsulation (RFC1042/Bridge-Tunnel;
+	 * proto[2], payload {, possible addr4[6]} */
+
+	ethertype = (skb->data[12] << 8) | skb->data[13];
+
+	memset(&txdesc, 0, sizeof(txdesc));
+
+	txdesc.tx_control = __cpu_to_le16(local->tx_control);
+
+	/* Length of data after txdesc */
+	data_len = skb->len - ETH_HLEN;
+	encaps_data = NULL;
+	encaps_len = 0;
+	skip_header_bytes = ETH_HLEN;
+	if (ethertype == ETH_P_AARP || ethertype == ETH_P_IPX) {
+		encaps_data = bridge_tunnel_header;
+		encaps_len = sizeof(bridge_tunnel_header);
+		data_len += encaps_len + 2;
+		skip_header_bytes -= 2;
+	} else if (ethertype >= 0x600) {
+		encaps_data = rfc1042_header;
+		encaps_len = sizeof(rfc1042_header);
+		data_len += encaps_len + 2;
+		skip_header_bytes -= 2;
+	}
+
+	fc = (WLAN_FC_TYPE_DATA << 2) | (WLAN_FC_STYPE_DATA << 4);
+	memcpy(&txdesc.dst_addr, skb->data, 2 * ETH_ALEN);
+
+	if (use_wds != WDS_NO) {
+		/* Note! Prism2 station firmware has problems with sending real
+		 * 802.11 frames with four addresses; until these problems can
+		 * be fixed or worked around, 4-addr frames needed for WDS are
+		 * using incompatible format: FromDS flag is not set and the
+		 * fourth address is added after the frame payload; it is
+		 * assumed, that the receiving station knows how to handle this
+		 * frame format */
+
+		if (use_wds == WDS_COMPLIANT_FRAME) {
+			fc |= WLAN_FC_FROMDS | WLAN_FC_TODS;
+			/* From&To DS: Addr1 = RA, Addr2 = TA, Addr3 = DA,
+			 * Addr4 = SA */
+			memcpy(&txdesc.addr4, skb->data + ETH_ALEN, ETH_ALEN);
+		} else {
+			/* bogus 4-addr format to workaround Prism2 station
+			 * f/w bug */
+			fc |= WLAN_FC_TODS;
+			/* From DS: Addr1 = DA (used as RA),
+			 * Addr2 = BSSID (used as TA), Addr3 = SA (used as DA),
+			 */
+
+			/* SA from skb->data + ETH_ALEN will be added after
+			 * frame payload */
+			data_len += ETH_ALEN;
+
+			memcpy(&txdesc.src_addr, dev->dev_addr, ETH_ALEN);
+		}
+
+		/* send broadcast and multicast frames to broadcast RA, if
+		 * configured; otherwise, use unicast RA of the WDS link */
+		if ((local->wds_type & HOSTAP_WDS_BROADCAST_RA) &&
+		    skb->data[0] & 0x01)
+			memset(&txdesc.addr1, 0xff, ETH_ALEN);
+		else if (iface->type == HOSTAP_INTERFACE_WDS)
+			memcpy(&txdesc.addr1, iface->u.wds.remote_addr,
+			       ETH_ALEN);
+		else
+			memcpy(&txdesc.addr1, local->bssid, ETH_ALEN);
+		memcpy(&txdesc.addr2, dev->dev_addr, ETH_ALEN);
+		memcpy(&txdesc.addr3, skb->data, ETH_ALEN);
+	} else if (local->iw_mode == IW_MODE_MASTER && !to_assoc_ap) {
+		fc |= WLAN_FC_FROMDS;
+		/* From DS: Addr1 = DA, Addr2 = BSSID, Addr3 = SA */
+		memcpy(&txdesc.addr1, skb->data, ETH_ALEN);
+		/* FIX - addr2 replaced by f/w, so no need to fill it now(?) */
+		memcpy(&txdesc.addr2, dev->dev_addr, ETH_ALEN);
+		memcpy(&txdesc.addr3, skb->data + ETH_ALEN, ETH_ALEN);
+	} else if (local->iw_mode == IW_MODE_INFRA || to_assoc_ap) {
+		fc |= WLAN_FC_TODS;
+		/* To DS: Addr1 = BSSID, Addr2 = SA, Addr3 = DA */
+		memcpy(&txdesc.addr1, to_assoc_ap ?
+		       local->assoc_ap_addr : local->bssid, ETH_ALEN);
+		memcpy(&txdesc.addr2, skb->data + ETH_ALEN, ETH_ALEN);
+		memcpy(&txdesc.addr3, skb->data, ETH_ALEN);
+	} else if (local->iw_mode == IW_MODE_ADHOC) {
+		/* not From/To DS: Addr1 = DA, Addr2 = SA, Addr3 = BSSID */
+		memcpy(&txdesc.addr1, skb->data, ETH_ALEN);
+		memcpy(&txdesc.addr2, skb->data + ETH_ALEN, ETH_ALEN);
+		memcpy(&txdesc.addr3, local->bssid, ETH_ALEN);
+	}
+
+	txdesc.frame_control = __cpu_to_le16(fc);
+	txdesc.data_len = __cpu_to_le16(data_len);
+	txdesc.len = __cpu_to_be16(data_len);
+
+	skb->dev = dev;
+
+ data_txdesc_set:
+	if (to_assoc_ap)
+		goto skip_ap_processing;
+
+	switch (hostap_handle_sta_tx(local, skb, &txdesc, use_wds != WDS_NO,
+				     host_encrypt, &crypt, &sta)) {
+	case AP_TX_CONTINUE:
+		break;
+	case AP_TX_CONTINUE_NOT_AUTHORIZED:
+		if (local->ieee_802_1x && ethertype != ETH_P_PAE &&
+		    use_wds == WDS_NO) {
+			printk(KERN_DEBUG "%s: dropped frame to unauthorized "
+			       "port (IEEE 802.1X): ethertype=0x%04x\n",
+			       dev->name, ethertype);
+			hostap_dump_tx_header(dev->name, &txdesc);
+
+			ret = 0; /* drop packet */
+			stats->tx_dropped++;
+			goto fail;
+		}
+		break;
+	case AP_TX_DROP:
+		ret = 0; /* drop packet */
+		stats->tx_dropped++;
+		goto fail;
+	case AP_TX_RETRY:
+		goto fail;
+	case AP_TX_BUFFERED:
+		/* do not free skb here, it will be freed when the
+		 * buffered frame is sent/timed out */
+		ret = 0;
+		goto tx_exit;
+	}
+
+ skip_ap_processing:
+
+	if (local->ieee_802_1x && ethertype == ETH_P_PAE) {
+		if (crypt) {
+			no_encrypt = 1;
+			printk(KERN_DEBUG "%s: TX: IEEE 802.1X - passing "
+			       "unencrypted EAPOL frame\n", dev->name);
+		}
+		crypt = NULL; /* no encryption for IEEE 802.1X frames */
+	}
+
+	if (crypt && (!crypt->ops || !crypt->ops->encrypt))
+		crypt = NULL;
+	else if ((crypt || local->crypt) && !no_encrypt) {
+		/* Add ISWEP flag both for firmware and host based encryption
+		 */
+		fc |= WLAN_FC_ISWEP;
+		txdesc.frame_control = cpu_to_le16(fc);
+	}
+
+	if (crypt) {
+		/* Perform host driver -based encryption */
+		u8 *pos;
+		int olen;
+
+		olen = data_len;
+		data_len += crypt->ops->extra_prefix_len +
+			crypt->ops->extra_postfix_len;
+		txdesc.data_len = cpu_to_le16(data_len);
+		txdesc.len = cpu_to_be16(data_len);
+
+		wepbuf_len = data_len;
+		wepbuf = (u8 *) kmalloc(wepbuf_len, GFP_ATOMIC);
+		if (wepbuf == NULL) {
+			printk(KERN_DEBUG "%s: could not allocate TX wepbuf\n",
+			       dev->name);
+			goto fail;
+		}
+
+		pos = wepbuf + crypt->ops->extra_prefix_len;
+		if (encaps_len > 0) {
+			memcpy(pos, encaps_data, encaps_len);
+			pos += encaps_len;
+		}
+		memcpy(pos, skb->data + skip_header_bytes,
+		       skb->len - skip_header_bytes);
+		if (use_wds == WDS_OWN_FRAME) {
+			memcpy(pos + skb->len - skip_header_bytes,
+			       skb->data + ETH_ALEN, ETH_ALEN);
+		}
+
+		atomic_inc(&crypt->refcnt);
+		olen = crypt->ops->encrypt(wepbuf, olen, crypt->priv);
+		atomic_dec(&crypt->refcnt);
+		if (olen > wepbuf_len) {
+			printk(KERN_WARNING "%s: encrypt overwrote wepbuf "
+			       "(%d > %d)\n", dev->name, olen, wepbuf_len);
+		}
+		if (olen < 0)
+			goto fail;
+
+		data_len = wepbuf_len = olen;
+		txdesc.data_len = cpu_to_le16(data_len);
+		txdesc.len = cpu_to_be16(data_len);
+	}
+
+ frame_processing_done:
+	idx = prism2_get_txfid_idx(local);
+	if (idx < 0)
+		goto fail;
+
+	if (local->frame_dump & PRISM2_DUMP_TX_HDR)
+		hostap_dump_tx_header(dev->name, &txdesc);
+
+	spin_lock(&local->baplock);
+	res = hfa384x_setup_bap(dev, BAP0, local->txfid[idx], 0);
+
+#if defined(PRISM2_PCI) && defined(PRISM2_BUS_MASTER)
+	if (!res && skb->len >= local->bus_master_threshold_tx) {
+		u8 *pos;
+		int buf_len;
+
+		local->bus_m0_tx_idx = idx;
+
+		/* FIX: BAP0 should be locked during bus master transfer, but
+		 * baplock with BH's disabled is not OK for this; netif queue
+		 * stopping is not enough since BAP0 is used also for RID
+		 * read/write */
+
+		/* stop the queue for the time that bus mastering on BAP0 is
+		 * in use */
+		hostap_netif_stop_queues(dev);
+
+		spin_unlock(&local->baplock);
+
+		/* Copy frame data to bus_m0_buf */
+		pos = local->bus_m0_buf;
+		memcpy(pos, &txdesc, sizeof(txdesc));
+		pos += sizeof(txdesc);
+
+		if (!wepbuf) {
+			if (encaps_len > 0) {
+				memcpy(pos, encaps_data, encaps_len);
+				pos += encaps_len;
+			}
+			memcpy(pos, skb->data + skip_header_bytes,
+			       skb->len - skip_header_bytes);
+			pos += skb->len - skip_header_bytes;
+		}
+		if (!wepbuf && use_wds == WDS_OWN_FRAME) {
+			/* add addr4 (SA) to bogus frame format if WDS is used
+			 */
+			memcpy(pos, skb->data + ETH_ALEN, ETH_ALEN);
+			pos += ETH_ALEN;
+		}
+
+		if (wepbuf) {
+			memcpy(pos, wepbuf, wepbuf_len);
+			pos += wepbuf_len;
+		}
+
+		buf_len = pos - local->bus_m0_buf;
+		if (buf_len & 1)
+			buf_len++;
+
+#ifdef PRISM2_ENABLE_BEFORE_TX_BUS_MASTER
+		/* Any RX packet seems to break something with TX bus
+		 * mastering; enable command is enough to fix this.. */
+		if (hfa384x_cmd_callback(dev, HFA384X_CMDCODE_ENABLE, 0,
+					 prism2_tx_cb, (void *) buf_len)) {
+			printk(KERN_DEBUG "%s: TX: enable port0 failed\n",
+			       dev->name);
+		}
+#else /* PRISM2_ENABLE_BEFORE_TX_BUS_MASTER */
+		prism2_tx_cb(dev, (void *) buf_len, 0, 0);
+#endif /* PRISM2_ENABLE_BEFORE_TX_BUS_MASTER */
+
+		/* Bus master transfer will be started from command completion
+		 * event handler and TX handling will be finished by calling
+		 * prism2_transmit() from bus master event handler */
+		goto tx_stats;
+	}
+#endif /* PRISM2_PCI and PRISM2_BUS_MASTER */
+
+	if (!res)
+		res = hfa384x_to_bap(dev, BAP0, &txdesc, sizeof(txdesc));
+	if (!res && !wepbuf && encaps_len > 0)
+		res = hfa384x_to_bap(dev, BAP0, encaps_data, encaps_len);
+	if (!res && !wepbuf && use_wds != WDS_OWN_FRAME)
+		res = hfa384x_to_bap(dev, BAP0, skb->data + skip_header_bytes,
+				     skb->len - skip_header_bytes);
+	else if (!res && !wepbuf && use_wds == WDS_OWN_FRAME) {
+		int wlen, is_odd;
+
+		wlen = skb->len - skip_header_bytes;
+		is_odd = wlen & 1;
+
+		if (is_odd)
+			wlen--; /* need to avoid using odd offset */
+
+		res = hfa384x_to_bap(dev, BAP0, skb->data + skip_header_bytes,
+				     wlen);
+
+		/* add addr4 (SA) to bogus frame format if WDS is used */
+		if (!res && is_odd) {
+			char tmpbuf[ETH_ALEN + 1];
+			tmpbuf[0] = *(skb->data + skb->len - 1);
+			memcpy(tmpbuf + 1, skb->data + ETH_ALEN, ETH_ALEN);
+			res = hfa384x_to_bap(dev, BAP0, tmpbuf, ETH_ALEN + 1);
+		} else if (!res) {
+			res = hfa384x_to_bap(dev, BAP0, skb->data + ETH_ALEN,
+					     ETH_ALEN);
+		}
+	}
+
+	if (!res && wepbuf)
+		res = hfa384x_to_bap(dev, BAP0, wepbuf, wepbuf_len);
+	spin_unlock(&local->baplock);
+
+	if (!res)
+		res = prism2_transmit(dev, idx);
+	if (res) {
+		printk(KERN_DEBUG "%s: prism2_tx - to BAP0 failed\n",
+		       dev->name);
+		local->intransmitfid[idx] = PRISM2_TXFID_EMPTY;
+		PRISM2_SCHEDULE_TASK(&local->reset_queue);
+		ret = 0; /* do not retry failed frames to avoid problems */
+		goto fail;
+	}
+
+#if defined(PRISM2_PCI) && defined(PRISM2_BUS_MASTER)
+ tx_stats:
+#endif
+	stats->tx_packets++;
+	stats->tx_bytes += data_len + 36;
+
+	ret = 0;
+
+ fail:
+	if (wepbuf)
+		kfree(wepbuf);
+
+	if (!ret)
+		dev_kfree_skb(skb);
+
+ tx_exit:
+	if (sta)
+		hostap_handle_sta_release(sta);
+
+	prism2_callback(local, PRISM2_CALLBACK_TX_END);
+	return ret;
+}
+
+
+/* Called only from software IRQ */
+static int prism2_tx_80211(struct sk_buff *skb, struct net_device *dev)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	struct hfa384x_tx_frame txdesc;
+	int hdr_len, data_len, ret = 1, idx, res;
+	u16 fc, tx_control;
+
+	if ((local->func->card_present && !local->func->card_present(local)) ||
+	    !local->hw_ready || local->hw_downloading || local->pri_only) {
+		printk(KERN_DEBUG "%s: prism2_tx_80211: hw not ready - "
+		       "skipping\n", dev->name);
+		ret = 0;
+		local->apdevstats.tx_dropped++;
+		goto fail;
+	}
+
+	if (skb->len < 24) {
+		printk(KERN_DEBUG "%s: prism2_tx_80211: short skb (len=%d)\n",
+		       dev->name, skb->len);
+		ret = 0;
+		local->apdevstats.tx_dropped++;
+		goto fail;
+	}
+
+	memset(&txdesc, 0, sizeof(txdesc));
+	/* txdesc.tx_rate might need to be set if f/w does not select suitable
+	 * TX rate */
+
+	/* skb->data starts with txdesc->frame_control */
+	hdr_len = 24;
+	memcpy(&txdesc.frame_control, skb->data, hdr_len);
+ 	fc = le16_to_cpu(txdesc.frame_control);
+	if (WLAN_FC_GET_TYPE(fc) == WLAN_FC_TYPE_DATA &&
+	    (fc & WLAN_FC_FROMDS) && (fc & WLAN_FC_TODS) && skb->len >= 30) {
+		/* Addr4 */
+		memcpy(txdesc.addr4, skb->data + hdr_len, ETH_ALEN);
+		hdr_len += ETH_ALEN;
+	}
+
+	tx_control = local->tx_control;
+	/* Request TX callback if protocol version is 2 in 802.11 header;
+	 * this version 2 is a special case used between hostapd and kernel
+	 * driver */
+	if (((fc & WLAN_FC_PVER) == BIT(1)) &&
+	    local->ap && local->ap->tx_callback_idx) {
+		tx_control |= HFA384X_TX_CTRL_TX_OK;
+		txdesc.sw_support = cpu_to_le16(local->ap->tx_callback_idx);
+
+		/* remove special version from the frame header */
+		fc &= ~WLAN_FC_PVER;
+		txdesc.frame_control = cpu_to_le16(fc);
+	}
+	txdesc.tx_control = cpu_to_le16(tx_control);
+	
+	data_len = skb->len - hdr_len;
+	txdesc.data_len = __cpu_to_le16(data_len);
+	txdesc.len = __cpu_to_be16(data_len);
+
+	/* We do not need to care about frame authorization etc. here since
+	 * hostapd has full knowledge of auth/assoc status. However, we need to
+	 * buffer the frame is the destination STA is in power saving mode.
+	 *
+	 * Wi-Fi 802.11b test plan suggests that AP should ignore power save
+	 * bit in authentication and (re)association frames and assume tha
+	 * STA remains awake for the response. */
+	if (hostap_handle_sta_tx(local, skb, &txdesc, 0, 0, NULL, NULL) ==
+	    AP_TX_BUFFERED &&
+	    (WLAN_FC_GET_TYPE(fc) != WLAN_FC_TYPE_MGMT ||
+	     (WLAN_FC_GET_STYPE(fc) != WLAN_FC_STYPE_AUTH &&
+	      WLAN_FC_GET_STYPE(fc) != WLAN_FC_STYPE_ASSOC_RESP &&
+	      WLAN_FC_GET_STYPE(fc) != WLAN_FC_STYPE_REASSOC_RESP))) {
+		/* do not free skb here, it will be freed when the
+		 * buffered frame is sent/timed out */
+		ret = 0;
+		goto tx_exit;
+	}
+
+	idx = prism2_get_txfid_idx(local);
+	if (idx < 0) {
+		local->apdevstats.tx_dropped++;
+		goto fail;
+	}
+
+	spin_lock(&local->baplock);
+	res = hfa384x_setup_bap(dev, BAP0, local->txfid[idx], 0);
+	if (!res)
+		res = hfa384x_to_bap(dev, BAP0, &txdesc, sizeof(txdesc));
+	if (!res)
+		res = hfa384x_to_bap(dev, BAP0, skb->data + hdr_len,
+				     skb->len - hdr_len);
+	spin_unlock(&local->baplock);
+
+	if (!res)
+		res = prism2_transmit(dev, idx);
+	if (res) {
+		printk(KERN_DEBUG "%s: prism2_tx_80211 - to BAP0 failed\n",
+		       dev->name);
+		local->intransmitfid[idx] = PRISM2_TXFID_EMPTY;
+		PRISM2_SCHEDULE_TASK(&local->reset_queue);
+		local->apdevstats.tx_dropped++;
+		ret = 0;
+		goto fail;
+	}
+
+	ret = 0;
+
+	local->apdevstats.tx_packets++;
+	local->apdevstats.tx_bytes += skb->len;
+
+ fail:
+	if (!ret)
+		dev_kfree_skb(skb);
+ tx_exit:
+	return ret;
+}
+
+
+/* Some SMP systems have reported number of odd errors with hostap_pci. fid
+ * register has changed values between consecutive reads for an unknown reason.
+ * This should really not happen, so more debugging is needed. This test
+ * version is a big slower, but it will detect most of such register changes
+ * and will try to get the correct fid eventually. */
+#define EXTRA_FID_READ_TESTS
+
+static inline u16 prism2_read_fid_reg(struct net_device *dev, u16 reg)
+{
+#ifdef EXTRA_FID_READ_TESTS
+	u16 val, val2, val3;
+	int i;
+
+	for (i = 0; i < 10; i++) {
+		val = HFA384X_INW(reg);
+		val2 = HFA384X_INW(reg);
+		val3 = HFA384X_INW(reg);
+
+		if (val == val2 && val == val3)
+			return val;
+
+		printk(KERN_DEBUG "%s: detected fid change (try=%d, reg=%04x):"
+		       " %04x %04x %04x\n",
+		       dev->name, i, reg, val, val2, val3);
+		if ((val == val2 || val == val3) && val != 0)
+			return val;
+		if (val2 == val3 && val2 != 0)
+			return val2;
+	}
+	printk(KERN_WARNING "%s: Uhhuh.. could not read good fid from reg "
+	       "%04x (%04x %04x %04x)\n", dev->name, reg, val, val2, val3);
+	return val;
+#else /* EXTRA_FID_READ_TESTS */
+	return HFA384X_INW(reg);
+#endif /* EXTRA_FID_READ_TESTS */
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+static void prism2_rx(local_info_t *local)
+{
+	struct net_device *dev = local->dev;
+	int res, rx_pending = 0;
+	u16 len, hdr_len, rxfid, status, macport;
+	struct net_device_stats *stats;
+	struct hfa384x_rx_frame rxdesc;
+	struct sk_buff *skb = NULL;
+
+	prism2_callback(local, PRISM2_CALLBACK_RX_START);
+	stats = hostap_get_stats(dev);
+
+	rxfid = prism2_read_fid_reg(dev, HFA384X_RXFID_OFF);
+#ifndef final_version
+	if (rxfid == 0) {
+		rxfid = HFA384X_INW(HFA384X_RXFID_OFF);
+		printk(KERN_DEBUG "prism2_rx: rxfid=0 (next 0x%04x)\n",
+		       rxfid);
+		if (rxfid == 0) {
+			PRISM2_SCHEDULE_TASK(&local->reset_queue);
+			goto rx_dropped;
+		}
+		/* try to continue with the new rxfid value */
+	}
+#endif
+
+	spin_lock(&local->baplock);
+	res = hfa384x_setup_bap(dev, BAP0, rxfid, 0);
+	if (!res)
+		res = hfa384x_from_bap(dev, BAP0, &rxdesc, sizeof(rxdesc));
+
+	if (res) {
+		spin_unlock(&local->baplock);
+		printk(KERN_DEBUG "%s: copy from BAP0 failed %d\n", dev->name,
+		       res);
+		if (res == -ETIMEDOUT) {
+			PRISM2_SCHEDULE_TASK(&local->reset_queue);
+		}
+		goto rx_dropped;
+	}
+
+	len = le16_to_cpu(rxdesc.data_len);
+	hdr_len = sizeof(rxdesc);
+	status = le16_to_cpu(rxdesc.status);
+	macport = (status >> 8) & 0x07;
+
+	/* Drop frames with too large reported payload length. Monitor mode
+	 * seems to sometimes pass frames (e.g., ctrl::ack) with signed and
+	 * negative value, so allow also values 65522 .. 65534 (-14 .. -2) for
+	 * macport 7 */
+	if (len > PRISM2_DATA_MAXLEN + 8 /* WEP */) {
+		if (macport == 7 && local->iw_mode == IW_MODE_MONITOR) {
+			if (len >= (u16) -14) {
+				hdr_len -= 65535 - len;
+				hdr_len--;
+			}
+			len = 0;
+		} else {
+			spin_unlock(&local->baplock);
+			printk(KERN_DEBUG "%s: Received frame with invalid "
+			       "length 0x%04x\n", dev->name, len);
+			hostap_dump_rx_header(dev->name, &rxdesc);
+			goto rx_dropped;
+		}
+	}
+
+	skb = dev_alloc_skb(len + hdr_len);
+	if (!skb) {
+		spin_unlock(&local->baplock);
+		printk(KERN_DEBUG "%s: RX failed to allocate skb\n",
+		       dev->name);
+		goto rx_dropped;
+	}
+	skb->dev = dev;
+	memcpy(skb_put(skb, hdr_len), &rxdesc, hdr_len);
+
+#if defined(PRISM2_PCI) && defined(PRISM2_BUS_MASTER)
+	if (len >= local->bus_master_threshold_rx) {
+		unsigned long addr;
+
+		hfa384x_events_no_bap1(dev);
+
+		local->rx_skb = skb;
+		/* Internal BAP0 offset points to the byte following rxdesc;
+		 * copy rest of the data using bus master */
+		addr = virt_to_phys(skb_put(skb, len));
+		HFA384X_OUTW((addr & 0xffff0000) >> 16,
+			     HFA384X_PCI_M0_ADDRH_OFF);
+		HFA384X_OUTW(addr & 0x0000ffff, HFA384X_PCI_M0_ADDRL_OFF);
+		if (len & 1)
+			len++;
+		HFA384X_OUTW(len / 2, HFA384X_PCI_M0_LEN_OFF);
+		HFA384X_OUTW(HFA384X_PCI_CTL_FROM_BAP, HFA384X_PCI_M0_CTL_OFF);
+
+		/* pci_bus_m1 event will be generated when data transfer is
+		 * complete and the frame will then be added to rx_list and
+		 * rx_tasklet is scheduled */
+		rx_pending = 1;
+
+		/* Have to release baplock before returning, although BAP0
+		 * should really not be used before DMA transfer has been
+		 * completed. */
+		spin_unlock(&local->baplock);
+	} else
+#endif /* PRISM2_PCI and PRISM2_BUS_MASTER */
+	{
+		if (len > 0)
+			res = hfa384x_from_bap(dev, BAP0, skb_put(skb, len),
+					       len);
+		spin_unlock(&local->baplock);
+		if (res) {
+			printk(KERN_DEBUG "%s: RX failed to read "
+			       "frame data\n", dev->name);
+			goto rx_dropped;
+		}
+
+		skb_queue_tail(&local->rx_list, skb);
+		tasklet_schedule(&local->rx_tasklet);
+	}
+
+ rx_exit:
+	prism2_callback(local, PRISM2_CALLBACK_RX_END);
+	if (!rx_pending) {
+		HFA384X_OUTW(HFA384X_EV_RX, HFA384X_EVACK_OFF);
+	}
+
+	return;
+
+ rx_dropped:
+	stats->rx_dropped++;
+	if (skb)
+		dev_kfree_skb(skb);
+	goto rx_exit;
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+static void hostap_rx_skb(local_info_t *local, struct sk_buff *skb)
+{
+	struct hfa384x_rx_frame *rxdesc;
+	struct net_device *dev = skb->dev;
+	struct hostap_80211_rx_status stats;
+	int hdrlen, rx_hdrlen;
+
+	rx_hdrlen = sizeof(*rxdesc);
+	if (skb->len < sizeof(*rxdesc)) {
+		/* Allow monitor mode to receive shorter frames */
+		if (local->iw_mode == IW_MODE_MONITOR &&
+		    skb->len >= sizeof(*rxdesc) - 30) {
+			rx_hdrlen = skb->len;
+		} else {
+			dev_kfree_skb(skb);
+			return;
+		}
+	}
+
+	rxdesc = (struct hfa384x_rx_frame *) skb->data;
+
+	if (local->frame_dump & PRISM2_DUMP_RX_HDR &&
+	    skb->len >= sizeof(*rxdesc))
+		hostap_dump_rx_header(dev->name, rxdesc);
+
+	if (le16_to_cpu(rxdesc->status) & HFA384X_RX_STATUS_FCSERR &&
+	    (!local->monitor_allow_fcserr ||
+	     local->iw_mode != IW_MODE_MONITOR))
+		goto drop;
+
+	if (skb->len > PRISM2_DATA_MAXLEN) {
+		printk(KERN_DEBUG "%s: RX: len(%d) > MAX(%d)\n",
+		       dev->name, skb->len, PRISM2_DATA_MAXLEN);
+		goto drop;
+	}
+
+	stats.mac_time = le32_to_cpu(rxdesc->time);
+	stats.signal = HFA384X_RSSI_LEVEL_TO_dBm(rxdesc->signal);
+	stats.noise = HFA384X_RSSI_LEVEL_TO_dBm(rxdesc->silence);
+	stats.rate = rxdesc->rate;
+
+	/* Convert Prism2 RX structure into IEEE 802.11 header */
+	hdrlen = hostap_80211_get_hdrlen(le16_to_cpu(rxdesc->frame_control));
+	if (hdrlen > rx_hdrlen)
+		hdrlen = rx_hdrlen;
+
+	memmove(skb_pull(skb, rx_hdrlen - hdrlen),
+		&rxdesc->frame_control, hdrlen);
+
+	hostap_80211_rx(dev, skb, &stats);
+	return;
+
+ drop:
+	dev_kfree_skb(skb);
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+static void hostap_rx_tasklet(unsigned long data)
+{
+	local_info_t *local = (local_info_t *) data;
+	struct sk_buff *skb;
+
+	while ((skb = skb_dequeue(&local->rx_list)) != NULL)
+		hostap_rx_skb(local, skb);
+}
+
+
+/* Called only from hardware IRQ */
+static void prism2_alloc_ev(struct net_device *dev)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int idx;
+	u16 fid;
+
+	fid = prism2_read_fid_reg(dev, HFA384X_ALLOCFID_OFF);
+
+	PDEBUG(DEBUG_FID, "FID: interrupt: ALLOC - fid=0x%04x\n", fid);
+
+	spin_lock(&local->txfidlock);
+	idx = local->next_alloc;
+
+	do {
+		if (local->txfid[idx] == fid) {
+			PDEBUG(DEBUG_FID, "FID: found matching txfid[%d]\n",
+			       idx);
+
+#ifndef final_version
+			if (local->intransmitfid[idx] == PRISM2_TXFID_EMPTY)
+				printk("Already released txfid found at idx "
+				       "%d\n", idx);
+			if (local->intransmitfid[idx] == PRISM2_TXFID_RESERVED)
+				printk("Already reserved txfid found at idx "
+				       "%d\n", idx);
+#endif
+			local->intransmitfid[idx] = PRISM2_TXFID_EMPTY;
+			idx++;
+			local->next_alloc = idx >= PRISM2_TXFID_COUNT ? 0 :
+				idx;
+
+			if (!test_bit(HOSTAP_BITS_TRANSMIT, &local->bits) &&
+			    netif_queue_stopped(dev))
+				hostap_netif_wake_queues(dev);
+
+			spin_unlock(&local->txfidlock);
+			return;
+		}
+
+		idx++;
+		if (idx >= PRISM2_TXFID_COUNT)
+			idx = 0;
+	} while (idx != local->next_alloc);
+
+	printk(KERN_WARNING "%s: could not find matching txfid (0x%04x, new "
+	       "read 0x%04x) for alloc event\n", dev->name, fid,
+	       HFA384X_INW(HFA384X_ALLOCFID_OFF));
+	printk(KERN_DEBUG "TXFIDs:");
+	for (idx = 0; idx < PRISM2_TXFID_COUNT; idx++)
+		printk(" %04x[%04x]", local->txfid[idx],
+		       local->intransmitfid[idx]);
+	printk("\n");
+	spin_unlock(&local->txfidlock);
+
+	/* FIX: should probably schedule reset; reference to one txfid was lost
+	 * completely.. Bad things will happen if we run out of txfids
+	 * Actually, this will cause netdev watchdog to notice TX timeout and
+	 * then card reset after all txfids have been leaked. */
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+static void hostap_tx_callback(local_info_t *local,
+			       struct hfa384x_tx_frame *txdesc, int ok,
+			       char *payload)
+{
+	u16 sw_support, hdrlen, len;
+	struct sk_buff *skb;
+	struct hostap_tx_callback_info *cb;
+
+	/* Make sure that frame was from us. */
+	if (memcmp(txdesc->addr2, local->dev->dev_addr, ETH_ALEN)) {
+		printk(KERN_DEBUG "%s: TX callback - foreign frame\n",
+		       local->dev->name);
+		return;
+	}
+
+	sw_support = le16_to_cpu(txdesc->sw_support);
+
+	spin_lock(&local->lock);
+	cb = local->tx_callback;
+	while (cb != NULL && cb->idx != sw_support)
+		cb = cb->next;
+	spin_unlock(&local->lock);
+
+	if (cb == NULL) {
+		printk(KERN_DEBUG "%s: could not find TX callback (idx %d)\n",
+		       local->dev->name, sw_support);
+		return;
+	}
+
+	hdrlen = hostap_80211_get_hdrlen(le16_to_cpu(txdesc->frame_control));
+	len = le16_to_cpu(txdesc->data_len);
+	skb = dev_alloc_skb(hdrlen + len);
+	if (skb == NULL) {
+		printk(KERN_DEBUG "%s: hostap_tx_callback failed to allocate "
+		       "skb\n", local->dev->name);
+		return;
+	}
+
+	memcpy(skb_put(skb, hdrlen), (void *) &txdesc->frame_control, hdrlen);
+	if (payload)
+		memcpy(skb_put(skb, len), payload, len);
+
+	skb->dev = local->dev;
+	skb->mac.raw = skb->data;
+
+	cb->func(skb, ok, cb->data);
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+static int hostap_tx_compl_read(local_info_t *local, int error,
+				struct hfa384x_tx_frame *txdesc,
+				char **payload)
+{
+	u16 fid, len;
+	int res, ret = 0;
+	struct net_device *dev = local->dev;
+
+	fid = prism2_read_fid_reg(dev, HFA384X_TXCOMPLFID_OFF);
+
+	PDEBUG(DEBUG_FID, "interrupt: TX (err=%d) - fid=0x%04x\n", fid, error);
+
+	spin_lock(&local->baplock);
+	res = hfa384x_setup_bap(dev, BAP0, fid, 0);
+	if (!res)
+		res = hfa384x_from_bap(dev, BAP0, txdesc, sizeof(*txdesc));
+	if (res) {
+		PDEBUG(DEBUG_EXTRA, "%s: TX (err=%d) - fid=0x%04x - could not "
+		       "read txdesc\n", dev->name, error, fid);
+		if (res == -ETIMEDOUT) {
+			PRISM2_SCHEDULE_TASK(&local->reset_queue);
+		}
+		ret = -1;
+		goto fail;
+	}
+	if (txdesc->sw_support) {
+		len = le16_to_cpu(txdesc->data_len);
+		if (len < PRISM2_DATA_MAXLEN) {
+			*payload = (char *) kmalloc(len, GFP_ATOMIC);
+			if (*payload == NULL ||
+			    hfa384x_from_bap(dev, BAP0, *payload, len)) {
+				PDEBUG(DEBUG_EXTRA, "%s: could not read TX "
+				       "frame payload\n", dev->name);
+				kfree(*payload);
+				*payload = NULL;
+				ret = -1;
+				goto fail;
+			}
+		}
+	}
+
+ fail:
+	spin_unlock(&local->baplock);
+
+	return ret;
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+static void prism2_tx_ev(local_info_t *local)
+{
+	struct net_device *dev = local->dev;
+	char *payload = NULL;
+	struct hfa384x_tx_frame txdesc;
+
+	if (hostap_tx_compl_read(local, 0, &txdesc, &payload))
+		goto fail;
+
+	if (local->frame_dump & PRISM2_DUMP_TX_HDR) {
+		PDEBUG(DEBUG_EXTRA, "%s: TX - status=0x%04x "
+		       "retry_count=%d tx_rate=%d seq_ctrl=%d "
+		       "duration_id=%d\n",
+		       dev->name, le16_to_cpu(txdesc.status),
+		       txdesc.retry_count, txdesc.tx_rate,
+		       le16_to_cpu(txdesc.seq_ctrl),
+		       le16_to_cpu(txdesc.duration_id));
+	}
+
+	if (txdesc.sw_support)
+		hostap_tx_callback(local, &txdesc, 1, payload);
+	kfree(payload);
+
+ fail:
+	HFA384X_OUTW(HFA384X_EV_TX, HFA384X_EVACK_OFF);
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+static void hostap_sta_tx_exc_tasklet(unsigned long data)
+{
+	local_info_t *local = (local_info_t *) data;
+	struct sk_buff *skb;
+
+	while ((skb = skb_dequeue(&local->sta_tx_exc_list)) != NULL) {
+		struct hfa384x_tx_frame *txdesc =
+			(struct hfa384x_tx_frame *) skb->data;
+		hostap_handle_sta_tx_exc(local, txdesc);
+		dev_kfree_skb(skb);
+	}
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+static void prism2_txexc(local_info_t *local)
+{
+	struct net_device *dev = local->dev;
+	u16 status, fc;
+	int show_dump, res;
+	char *payload = NULL;
+	struct hfa384x_tx_frame txdesc;
+
+	show_dump = local->frame_dump & PRISM2_DUMP_TXEXC_HDR;
+	local->stats.tx_errors++;
+
+	res = hostap_tx_compl_read(local, 1, &txdesc, &payload);
+	HFA384X_OUTW(HFA384X_EV_TXEXC, HFA384X_EVACK_OFF);
+	if (res)
+		return;
+
+	status = le16_to_cpu(txdesc.status);
+
+#if WIRELESS_EXT > 13
+	/* We produce a TXDROP event only for retry or lifetime
+	 * exceeded, because that's the only status that really mean
+	 * that this particular node went away.
+	 * Other errors means that *we* screwed up. - Jean II */
+	if (status & (HFA384X_TX_STATUS_RETRYERR | HFA384X_TX_STATUS_AGEDERR))
+	{
+		union iwreq_data wrqu;
+
+		/* Copy 802.11 dest address. */
+		memcpy(wrqu.addr.sa_data, txdesc.addr1, ETH_ALEN);
+		wrqu.addr.sa_family = ARPHRD_ETHER;
+		wireless_send_event(dev, IWEVTXDROP, &wrqu, NULL);
+	} else
+		show_dump = 1;
+#endif /* WIRELESS_EXT > 13 */
+
+	if (local->iw_mode == IW_MODE_MASTER ||
+	    local->iw_mode == IW_MODE_REPEAT ||
+	    local->wds_type & HOSTAP_WDS_AP_CLIENT) {
+		struct sk_buff *skb;
+		skb = dev_alloc_skb(sizeof(txdesc));
+		if (skb) {
+			memcpy(skb_put(skb, sizeof(txdesc)), &txdesc,
+			       sizeof(txdesc));
+			skb_queue_tail(&local->sta_tx_exc_list, skb);
+			tasklet_schedule(&local->sta_tx_exc_tasklet);
+		}
+	}
+
+	if (txdesc.sw_support)
+		hostap_tx_callback(local, &txdesc, 0, payload);
+	kfree(payload);
+
+	if (!show_dump)
+		return;
+
+	PDEBUG(DEBUG_EXTRA, "%s: TXEXC - status=0x%04x (%s%s%s%s)"
+	       " tx_control=%04x\n",
+	       dev->name, status,
+	       status & HFA384X_TX_STATUS_RETRYERR ? "[RetryErr]" : "",
+	       status & HFA384X_TX_STATUS_AGEDERR ? "[AgedErr]" : "",
+	       status & HFA384X_TX_STATUS_DISCON ? "[Discon]" : "",
+	       status & HFA384X_TX_STATUS_FORMERR ? "[FormErr]" : "",
+	       le16_to_cpu(txdesc.tx_control));
+
+	fc = le16_to_cpu(txdesc.frame_control);
+	PDEBUG(DEBUG_EXTRA, "   retry_count=%d tx_rate=%d fc=0x%04x "
+	       "(%s%s%s::%d%s%s)\n",
+	       txdesc.retry_count, txdesc.tx_rate, fc,
+	       WLAN_FC_GET_TYPE(fc) == WLAN_FC_TYPE_MGMT ? "Mgmt" : "",
+	       WLAN_FC_GET_TYPE(fc) == WLAN_FC_TYPE_CTRL ? "Ctrl" : "",
+	       WLAN_FC_GET_TYPE(fc) == WLAN_FC_TYPE_DATA ? "Data" : "",
+	       WLAN_FC_GET_STYPE(fc),
+	       fc & WLAN_FC_TODS ? " ToDS" : "",
+	       fc & WLAN_FC_FROMDS ? " FromDS" : "");
+	PDEBUG(DEBUG_EXTRA, "   A1=" MACSTR " A2=" MACSTR " A3="
+	       MACSTR " A4=" MACSTR "\n",
+	       MAC2STR(txdesc.addr1), MAC2STR(txdesc.addr2),
+	       MAC2STR(txdesc.addr3), MAC2STR(txdesc.addr4));
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+static void hostap_info_tasklet(unsigned long data)
+{
+	local_info_t *local = (local_info_t *) data;
+	struct sk_buff *skb;
+
+	while ((skb = skb_dequeue(&local->info_list)) != NULL) {
+		hostap_info_process(local, skb);
+		dev_kfree_skb(skb);
+	}
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+static void prism2_info(local_info_t *local)
+{
+	struct net_device *dev = local->dev;
+	u16 fid;
+	int res, left;
+	struct hfa384x_info_frame info;
+	struct sk_buff *skb;
+
+	fid = HFA384X_INW(HFA384X_INFOFID_OFF);
+
+	spin_lock(&local->baplock);
+	res = hfa384x_setup_bap(dev, BAP0, fid, 0);
+	if (!res)
+		res = hfa384x_from_bap(dev, BAP0, &info, sizeof(info));
+	if (res) {
+		spin_unlock(&local->baplock);
+		printk(KERN_DEBUG "Could not get info frame (fid=0x%04x)\n",
+		       fid);
+		if (res == -ETIMEDOUT) {
+			PRISM2_SCHEDULE_TASK(&local->reset_queue);
+		}
+		goto out;
+	}
+
+	le16_to_cpus(&info.len);
+	le16_to_cpus(&info.type);
+	left = (info.len - 1) * 2;
+
+	if (info.len & 0x8000 || info.len == 0 || left > 2060) {
+		/* data register seems to give 0x8000 in some error cases even
+		 * though busy bit is not set in offset register;
+		 * in addition, length must be at least 1 due to type field */
+		spin_unlock(&local->baplock);
+		printk(KERN_DEBUG "%s: Received info frame with invalid "
+		       "length 0x%04x (type 0x%04x)\n", dev->name, info.len,
+		       info.type);
+		goto out;
+	}
+
+	skb = dev_alloc_skb(sizeof(info) + left);
+	if (skb == NULL) {
+		spin_unlock(&local->baplock);
+		printk(KERN_DEBUG "%s: Could not allocate skb for info "
+		       "frame\n", dev->name);
+		goto out;
+	}
+
+	memcpy(skb_put(skb, sizeof(info)), &info, sizeof(info));
+	if (left > 0 && hfa384x_from_bap(dev, BAP0, skb_put(skb, left), left))
+	{
+		spin_unlock(&local->baplock);
+		printk(KERN_WARNING "%s: Info frame read failed (fid=0x%04x, "
+		       "len=0x%04x, type=0x%04x\n",
+		       dev->name, fid, info.len, info.type);
+		dev_kfree_skb(skb);
+		goto out;
+	}
+	spin_unlock(&local->baplock);
+
+	skb_queue_tail(&local->info_list, skb);
+	tasklet_schedule(&local->info_tasklet);
+
+ out:
+	HFA384X_OUTW(HFA384X_EV_INFO, HFA384X_EVACK_OFF);
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+static void hostap_bap_tasklet(unsigned long data)
+{
+	local_info_t *local = (local_info_t *) data;
+	struct net_device *dev = local->dev;
+	u16 ev;
+	int frames = 30;
+
+	if (local->func->card_present && !local->func->card_present(local))
+		return;
+
+	set_bit(HOSTAP_BITS_BAP_TASKLET, &local->bits);
+
+	/* Process all pending BAP events without generating new interrupts
+	 * for them */
+	while (frames-- > 0) {
+		ev = HFA384X_INW(HFA384X_EVSTAT_OFF);
+		if (ev == 0xffff || !(ev & HFA384X_BAP0_EVENTS))
+			break;
+		if (ev & HFA384X_EV_RX)
+			prism2_rx(local);
+		if (ev & HFA384X_EV_INFO)
+			prism2_info(local);
+		if (ev & HFA384X_EV_TX)
+			prism2_tx_ev(local);
+		if (ev & HFA384X_EV_TXEXC)
+			prism2_txexc(local);
+	}
+
+	set_bit(HOSTAP_BITS_BAP_TASKLET2, &local->bits);
+	clear_bit(HOSTAP_BITS_BAP_TASKLET, &local->bits);
+
+	/* Enable interrupts for new BAP events */
+	hfa384x_events_all(dev);
+	clear_bit(HOSTAP_BITS_BAP_TASKLET2, &local->bits);
+}
+
+
+#if defined(PRISM2_PCI) && defined(PRISM2_BUS_MASTER)
+/* Called only from hardware IRQ */
+static void prism2_bus_master_ev(struct net_device *dev, int bap)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	if (bap == BAP1) {
+		/* FIX: frame payload was DMA'd to skb->data; might need to
+		 * invalidate data cache for that memory area */
+		skb_queue_tail(&local->rx_list, local->rx_skb);
+		tasklet_schedule(&local->rx_tasklet);
+		HFA384X_OUTW(HFA384X_EV_RX, HFA384X_EVACK_OFF);
+	} else {
+		if (prism2_transmit(dev, local->bus_m0_tx_idx)) {
+			printk(KERN_DEBUG "%s: prism2_transmit() failed "
+			       "when called from bus master event\n",
+			       dev->name);
+			local->intransmitfid[local->bus_m0_tx_idx] =
+				PRISM2_TXFID_EMPTY;
+			PRISM2_SCHEDULE_TASK(&local->reset_queue);
+		}
+	}
+}
+#endif /* PRISM2_PCI and PRISM2_BUS_MASTER */
+
+
+/* Called only from hardware IRQ */
+static void prism2_infdrop(struct net_device *dev)
+{
+	static unsigned long last_inquire = 0;
+
+	PDEBUG(DEBUG_EXTRA, "%s: INFDROP event\n", dev->name);
+
+	/* some firmware versions seem to get stuck with
+	 * full CommTallies in high traffic load cases; every
+	 * packet will then cause INFDROP event and CommTallies
+	 * info frame will not be sent automatically. Try to
+	 * get out of this state by inquiring CommTallies. */
+	if (!last_inquire || time_after(jiffies, last_inquire + HZ)) {
+		hfa384x_cmd_callback(dev, HFA384X_CMDCODE_INQUIRE,
+				     HFA384X_INFO_COMMTALLIES, NULL, NULL);
+		last_inquire = jiffies;
+	}
+}
+
+
+/* Called only from hardware IRQ */
+static void prism2_ev_tick(struct net_device *dev)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	u16 evstat, inten;
+	static int prev_stuck = 0;
+
+	if (time_after(jiffies, local->last_tick_timer + 5 * HZ) &&
+	    local->last_tick_timer) {
+		evstat = HFA384X_INW(HFA384X_EVSTAT_OFF);
+		inten = HFA384X_INW(HFA384X_INTEN_OFF);
+		if (!prev_stuck) {
+			printk(KERN_INFO "%s: SW TICK stuck? "
+			       "bits=0x%lx EvStat=%04x IntEn=%04x\n",
+			       dev->name, local->bits, evstat, inten);
+		}
+		local->sw_tick_stuck++;
+		if ((evstat & HFA384X_BAP0_EVENTS) &&
+		    (inten & HFA384X_BAP0_EVENTS)) {
+			printk(KERN_INFO "%s: trying to recover from IRQ "
+			       "hang\n", dev->name);
+			hfa384x_events_no_bap0(dev);
+		}
+		prev_stuck = 1;
+	} else
+		prev_stuck = 0;
+}
+
+
+/* Called only from hardware IRQ */
+static inline void prism2_check_magic(local_info_t *local)
+{
+	/* at least PCI Prism2.5 with bus mastering seems to sometimes
+	 * return 0x0000 in SWSUPPORT0 for unknown reason, but re-reading the
+	 * register once or twice seems to get the correct value.. PCI cards
+	 * cannot anyway be removed during normal operation, so there is not
+	 * really any need for this verification with them. */
+
+#ifndef PRISM2_PCI
+#ifndef final_version
+	static unsigned long last_magic_err = 0;
+	struct net_device *dev = local->dev;
+
+	if (HFA384X_INW(HFA384X_SWSUPPORT0_OFF) != HFA384X_MAGIC) {
+		if (!local->hw_ready)
+			return;
+		HFA384X_OUTW(0xffff, HFA384X_EVACK_OFF);
+		if (time_after(jiffies, last_magic_err + 10 * HZ)) {
+			printk("%s: Interrupt, but SWSUPPORT0 does not match: "
+			       "%04X != %04X - card removed?\n", dev->name,
+			       HFA384X_INW(HFA384X_SWSUPPORT0_OFF),
+			       HFA384X_MAGIC);
+			last_magic_err = jiffies;
+		} else if (net_ratelimit()) {
+			printk(KERN_DEBUG "%s: interrupt - SWSUPPORT0=%04x "
+			       "MAGIC=%04x\n", dev->name,
+			       HFA384X_INW(HFA384X_SWSUPPORT0_OFF),
+			       HFA384X_MAGIC);
+		}
+		if (HFA384X_INW(HFA384X_SWSUPPORT0_OFF) != 0xffff)
+			PRISM2_SCHEDULE_TASK(&local->reset_queue);
+		return;
+	}
+#endif /* final_version */
+#endif /* !PRISM2_PCI */
+}
+
+
+/* Called only from hardware IRQ */
+static irqreturn_t prism2_interrupt(int irq, void *dev_id, struct pt_regs *regs)
+{
+	struct net_device *dev = (struct net_device *) dev_id;
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int events = 0;
+	u16 ev;
+
+	prism2_io_debug_add(dev, PRISM2_IO_DEBUG_CMD_INTERRUPT, 0, 0);
+
+	if (local->func->card_present && !local->func->card_present(local)) {
+		printk(KERN_DEBUG "%s: Interrupt, but dev not OK\n",
+		       dev->name);
+		return IRQ_HANDLED;
+	}
+
+	prism2_check_magic(local);
+
+	for (;;) {
+		ev = HFA384X_INW(HFA384X_EVSTAT_OFF);
+		if (ev == 0xffff) {
+			if (local->shutdown)
+				return IRQ_HANDLED;
+			HFA384X_OUTW(0xffff, HFA384X_EVACK_OFF);
+			printk(KERN_DEBUG "%s: prism2_interrupt: ev=0xffff\n",
+			       dev->name);
+			return IRQ_HANDLED;
+		}
+
+		ev &= HFA384X_INW(HFA384X_INTEN_OFF);
+		if (ev == 0)
+			break;
+
+		if (ev & HFA384X_EV_CMD) {
+			prism2_cmd_ev(dev);
+		}
+
+		/* Above events are needed even before hw is ready, but other
+		 * events should be skipped during initialization. This may
+		 * change for AllocEv if allocate_fid is implemented without
+		 * busy waiting. */
+		if (!local->hw_ready || local->hw_resetting ||
+		    !local->dev_enabled) {
+			ev = HFA384X_INW(HFA384X_EVSTAT_OFF);
+			if (ev & HFA384X_EV_CMD)
+				goto next_event;
+			if ((ev & HFA384X_EVENT_MASK) == 0)
+				return IRQ_HANDLED;
+			if (local->dev_enabled && (ev & ~HFA384X_EV_TICK) &&
+			    net_ratelimit()) {
+				printk(KERN_DEBUG "%s: prism2_interrupt: hw "
+				       "not ready; skipping events 0x%04x "
+				       "(IntEn=0x%04x)%s%s%s\n",
+				       dev->name, ev,
+				       HFA384X_INW(HFA384X_INTEN_OFF),
+				       !local->hw_ready ? " (!hw_ready)" : "",
+				       local->hw_resetting ?
+				       " (hw_resetting)" : "",
+				       !local->dev_enabled ?
+				       " (!dev_enabled)" : "");
+			}
+			HFA384X_OUTW(ev, HFA384X_EVACK_OFF);
+			return IRQ_HANDLED;
+		}
+
+		if (ev & HFA384X_EV_TICK) {
+			prism2_ev_tick(dev);
+			HFA384X_OUTW(HFA384X_EV_TICK, HFA384X_EVACK_OFF);
+		}
+
+#if defined(PRISM2_PCI) && defined(PRISM2_BUS_MASTER)
+		if (ev & HFA384X_EV_PCI_M0) {
+			prism2_bus_master_ev(dev, BAP0);
+			HFA384X_OUTW(HFA384X_EV_PCI_M0, HFA384X_EVACK_OFF);
+		}
+
+		if (ev & HFA384X_EV_PCI_M1) {
+			/* previous RX has been copied can be ACKed now */
+			HFA384X_OUTW(HFA384X_EV_RX, HFA384X_EVACK_OFF);
+
+			prism2_bus_master_ev(dev, BAP1);
+			HFA384X_OUTW(HFA384X_EV_PCI_M1, HFA384X_EVACK_OFF);
+		}
+#endif /* PRISM2_PCI and PRISM2_BUS_MASTER */
+
+		if (ev & HFA384X_EV_ALLOC) {
+			prism2_alloc_ev(dev);
+			HFA384X_OUTW(HFA384X_EV_ALLOC, HFA384X_EVACK_OFF);
+		}
+
+		/* Reading data from the card is quite time consuming, so do it
+		 * in tasklets. TX, TXEXC, RX, and INFO events will be ACKed
+		 * and unmasked after needed data has been read completely. */
+		if (ev & HFA384X_BAP0_EVENTS) {
+			hfa384x_events_no_bap0(dev);
+			tasklet_schedule(&local->bap_tasklet);
+		}
+
+#ifndef final_version
+		if (ev & HFA384X_EV_WTERR) {
+			PDEBUG(DEBUG_EXTRA, "%s: WTERR event\n", dev->name);
+			HFA384X_OUTW(HFA384X_EV_WTERR, HFA384X_EVACK_OFF);
+		}
+#endif /* final_version */
+
+		if (ev & HFA384X_EV_INFDROP) {
+			prism2_infdrop(dev);
+			HFA384X_OUTW(HFA384X_EV_INFDROP, HFA384X_EVACK_OFF);
+		}
+
+	next_event:
+		events++;
+		if (events >= PRISM2_MAX_INTERRUPT_EVENTS) {
+			PDEBUG(DEBUG_EXTRA, "prism2_interrupt: >%d events "
+			       "(EvStat=0x%04x)\n",
+			       PRISM2_MAX_INTERRUPT_EVENTS,
+			       HFA384X_INW(HFA384X_EVSTAT_OFF));
+			break;
+		}
+	}
+	prism2_io_debug_add(dev, PRISM2_IO_DEBUG_CMD_INTERRUPT, 0, 1);
+	return IRQ_RETVAL(events);
+}
+
+
+static void prism2_check_sta_fw_version(local_info_t *local)
+{
+	struct hfa384x_comp_ident comp;
+	int id, variant, major, minor;
+
+	if (hfa384x_get_rid(local->dev, HFA384X_RID_STAID,
+			    &comp, sizeof(comp), 1) < 0)
+		return;
+
+	local->fw_ap = 0;
+	id = le16_to_cpu(comp.id);
+	if (id != HFA384X_COMP_ID_STA) {
+		if (id == HFA384X_COMP_ID_FW_AP)
+			local->fw_ap = 1;
+		return;
+	}
+
+	major = __le16_to_cpu(comp.major);
+	minor = __le16_to_cpu(comp.minor);
+	variant = __le16_to_cpu(comp.variant);
+	local->sta_fw_ver = PRISM2_FW_VER(major, minor, variant);
+
+	/* Station firmware versions before 1.4.x seem to have a bug in
+	 * firmware-based WEP encryption when using Host AP mode, so use
+	 * host_encrypt as a default for them. Firmware version 1.4.9 is the
+	 * first one that has been seen to produce correct encryption, but the
+	 * bug might be fixed before that (although, at least 1.4.2 is broken).
+	 */
+	local->fw_encrypt_ok = local->sta_fw_ver >= PRISM2_FW_VER(1,4,9);
+
+	if (local->iw_mode == IW_MODE_MASTER && !local->host_encrypt &&
+	    !local->fw_encrypt_ok) {
+		printk(KERN_DEBUG "%s: defaulting to host-based encryption as "
+		       "a workaround for firmware bug in Host AP mode WEP\n",
+		       local->dev->name);
+		local->host_encrypt = 1;
+	}
+
+	/* IEEE 802.11 standard compliant WDS frames (4 addresses) were broken
+	 * in station firmware versions before 1.5.x. With these versions, the
+	 * driver uses a workaround with bogus frame format (4th address after
+	 * the payload). This is not compatible with other AP devices. Since
+	 * the firmware bug is fixed in the latest station firmware versions,
+	 * automatically enable standard compliant mode for cards using station
+	 * firmware version 1.5.0 or newer. */
+	if (local->sta_fw_ver >= PRISM2_FW_VER(1,5,0))
+		local->wds_type |= HOSTAP_WDS_STANDARD_FRAME;
+	else {
+		printk(KERN_DEBUG "%s: defaulting to bogus WDS frame as a "
+		       "workaround for firmware bug in Host AP mode WDS\n",
+		       local->dev->name);
+	}
+
+	hostap_check_sta_fw_version(local->ap, local->sta_fw_ver);
+}
+
+
+static void prism2_crypt_deinit_entries(local_info_t *local, int force)
+{
+	struct list_head *ptr, *n;
+	struct prism2_crypt_data *entry;
+
+	for (ptr = local->crypt_deinit_list.next, n = ptr->next;
+	     ptr != &local->crypt_deinit_list; ptr = n, n = ptr->next) {
+		entry = list_entry(ptr, struct prism2_crypt_data, list);
+
+		if (atomic_read(&entry->refcnt) != 0 && !force)
+			continue;
+
+		list_del(ptr);
+
+		if (entry->ops)
+			entry->ops->deinit(entry->priv);
+		kfree(entry);
+	}
+}
+
+
+static void prism2_crypt_deinit_handler(unsigned long data)
+{
+	local_info_t *local = (local_info_t *) data;
+	unsigned long flags;
+
+	spin_lock_irqsave(&local->lock, flags);
+	prism2_crypt_deinit_entries(local, 0);
+	if (!list_empty(&local->crypt_deinit_list)) {
+		printk(KERN_DEBUG "%s: entries remaining in delayed crypt "
+		       "deletion list\n", local->dev->name);
+		local->crypt_deinit_timer.expires = jiffies + HZ;
+		add_timer(&local->crypt_deinit_timer);
+	}
+	spin_unlock_irqrestore(&local->lock, flags);
+
+}
+
+
+static void hostap_passive_scan(unsigned long data)
+{
+	local_info_t *local = (local_info_t *) data;
+	struct net_device *dev = local->dev;
+	u16 channel;
+
+	if (local->passive_scan_interval <= 0)
+		return;
+
+	if (local->passive_scan_state == PASSIVE_SCAN_LISTEN) {
+		int max_tries = 16;
+
+		/* Even though host system does not really know when the WLAN
+		 * MAC is sending frames, try to avoid changing channels for
+		 * passive scanning when a host-generated frame is being
+		 * transmitted */
+		if (test_bit(HOSTAP_BITS_TRANSMIT, &local->bits)) {
+			printk(KERN_DEBUG "%s: passive scan detected pending "
+			       "TX - delaying\n", dev->name);
+			local->passive_scan_timer.expires = jiffies + HZ / 10;
+			add_timer(&local->passive_scan_timer);
+			return;
+		}
+
+		do {
+			local->passive_scan_channel++;
+			if (local->passive_scan_channel > 14)
+				local->passive_scan_channel = 1;
+			max_tries--;
+		} while (!(local->channel_mask &
+			   (1 << (local->passive_scan_channel - 1))) &&
+			 max_tries > 0);
+
+		if (max_tries == 0) {
+			printk(KERN_INFO "%s: no allowed passive scan channels"
+			       " found\n", dev->name);
+			return;
+		}
+
+		printk(KERN_DEBUG "%s: passive scan channel %d\n",
+		       dev->name, local->passive_scan_channel);
+		channel = local->passive_scan_channel;
+		local->passive_scan_state = PASSIVE_SCAN_WAIT;
+		local->passive_scan_timer.expires = jiffies + HZ / 10;
+	} else {
+		channel = local->channel;
+		local->passive_scan_state = PASSIVE_SCAN_LISTEN;
+		local->passive_scan_timer.expires = jiffies +
+			local->passive_scan_interval * HZ;
+	}
+
+	if (hfa384x_cmd_callback(dev, HFA384X_CMDCODE_TEST |
+				 (HFA384X_TEST_CHANGE_CHANNEL << 8),
+				 channel, NULL, NULL))
+		printk(KERN_ERR "%s: passive scan channel set %d "
+		       "failed\n", dev->name, channel);
+
+	add_timer(&local->passive_scan_timer);
+}
+
+
+/* Software watchdog - called as a timer. Hardware interrupt (Tick event) is
+ * used to monitor that local->last_tick_timer is being updated. If not,
+ * interrupt busy-loop is assumed and driver tries to recover by masking out
+ * some events. */
+static void hostap_tick_timer(unsigned long data)
+{
+	static unsigned long last_inquire = 0;
+	local_info_t *local = (local_info_t *) data;
+	local->last_tick_timer = jiffies;
+
+	/* Inquire CommTallies every 10 seconds to keep the statistics updated
+	 * more often during low load and when using 32-bit tallies. */
+	if ((!last_inquire || time_after(jiffies, last_inquire + 10 * HZ)) &&
+	    !local->hw_downloading && local->hw_ready &&
+	    !local->hw_resetting && local->dev_enabled) {
+		hfa384x_cmd_callback(local->dev, HFA384X_CMDCODE_INQUIRE,
+				     HFA384X_INFO_COMMTALLIES, NULL, NULL);
+		last_inquire = jiffies;
+	}
+
+	local->tick_timer.expires = jiffies + 2 * HZ;
+	add_timer(&local->tick_timer);
+}
+
+
+#ifndef PRISM2_NO_PROCFS_DEBUG
+static int prism2_registers_proc_read(char *page, char **start, off_t off,
+				      int count, int *eof, void *data)
+{
+	char *p = page;
+	local_info_t *local = (local_info_t *) data;
+
+	if (off != 0) {
+		*eof = 1;
+		return 0;
+	}
+
+#define SHOW_REG(n) \
+p += sprintf(p, #n "=%04x\n", hfa384x_read_reg(local->dev, HFA384X_##n##_OFF))
+
+	SHOW_REG(CMD);
+	SHOW_REG(PARAM0);
+	SHOW_REG(PARAM1);
+	SHOW_REG(PARAM2);
+	SHOW_REG(STATUS);
+	SHOW_REG(RESP0);
+	SHOW_REG(RESP1);
+	SHOW_REG(RESP2);
+	SHOW_REG(INFOFID);
+	SHOW_REG(CONTROL);
+	SHOW_REG(SELECT0);
+	SHOW_REG(SELECT1);
+	SHOW_REG(OFFSET0);
+	SHOW_REG(OFFSET1);
+	SHOW_REG(RXFID);
+	SHOW_REG(ALLOCFID);
+	SHOW_REG(TXCOMPLFID);
+	SHOW_REG(SWSUPPORT0);
+	SHOW_REG(SWSUPPORT1);
+	SHOW_REG(SWSUPPORT2);
+	SHOW_REG(EVSTAT);
+	SHOW_REG(INTEN);
+	SHOW_REG(EVACK);
+	/* Do not read data registers, because they change the state of the
+	 * MAC (offset += 2) */
+	/* SHOW_REG(DATA0); */
+	/* SHOW_REG(DATA1); */
+	SHOW_REG(AUXPAGE);
+	SHOW_REG(AUXOFFSET);
+	/* SHOW_REG(AUXDATA); */
+#ifdef PRISM2_PCI
+	SHOW_REG(PCICOR);
+	SHOW_REG(PCIHCR);
+	SHOW_REG(PCI_M0_ADDRH);
+	SHOW_REG(PCI_M0_ADDRL);
+	SHOW_REG(PCI_M0_LEN);
+	SHOW_REG(PCI_M0_CTL);
+	SHOW_REG(PCI_STATUS);
+	SHOW_REG(PCI_M1_ADDRH);
+	SHOW_REG(PCI_M1_ADDRL);
+	SHOW_REG(PCI_M1_LEN);
+	SHOW_REG(PCI_M1_CTL);
+#endif /* PRISM2_PCI */
+
+	return (p - page);
+}
+#endif /* PRISM2_NO_PROCFS_DEBUG */
+
+
+static struct net_device *
+prism2_init_local_data(struct prism2_helper_functions *funcs, int card_idx)
+{
+	struct net_device *dev;
+	struct hostap_interface *iface;
+	struct local_info *local;
+	int len, i;
+
+	if (funcs == NULL)
+		return NULL;
+
+	len = sizeof(struct hostap_interface) +
+		3 + sizeof(struct local_info) +
+		3 + sizeof(struct ap_data);
+
+	dev = alloc_etherdev(len);
+	if (dev == NULL)
+		return NULL;
+
+	iface = dev->priv;
+	local = (struct local_info *) ((((long) (iface + 1)) + 3) & ~3);
+	local->ap = (struct ap_data *) ((((long) (local + 1)) + 3) & ~3);
+	local->dev = iface->dev = dev;
+	iface->local = local;
+	iface->type = HOSTAP_INTERFACE_MAIN;
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,4,0))
+	dev->name = iface->name;
+#endif
+	INIT_LIST_HEAD(&local->hostap_interfaces);
+	list_add(&iface->list, &local->hostap_interfaces);
+
+	local->hw_module = THIS_MODULE;
+
+#ifdef PRISM2_IO_DEBUG
+	local->io_debug_enabled = 1;
+#endif /* PRISM2_IO_DEBUG */
+
+#if defined(PRISM2_PCI) && defined(PRISM2_BUS_MASTER)
+	local->bus_m0_buf = (u8 *) kmalloc(sizeof(struct hfa384x_tx_frame) +
+					   PRISM2_DATA_MAXLEN, GFP_DMA);
+	if (local->bus_m0_buf == NULL)
+		goto fail;
+#endif /* PRISM2_PCI and PRISM2_BUS_MASTER */
+
+	local->func = funcs;
+	local->func->cmd = hfa384x_cmd;
+	local->func->read_regs = hfa384x_read_regs;
+	local->func->get_rid = hfa384x_get_rid;
+	local->func->set_rid = hfa384x_set_rid;
+	local->func->hw_enable = prism2_hw_enable;
+	local->func->hw_config = prism2_hw_config;
+	local->func->hw_reset = prism2_hw_reset;
+	local->func->hw_shutdown = prism2_hw_shutdown;
+	local->func->reset_port = prism2_reset_port;
+	local->func->tx = prism2_tx;
+	local->func->schedule_reset = prism2_schedule_reset;
+#ifdef PRISM2_DOWNLOAD_SUPPORT
+	local->func->download = prism2_download;
+#endif /* PRISM2_DOWNLOAD_SUPPORT */
+	local->func->tx_80211 = prism2_tx_80211;
+
+	local->disable_on_close = disable_on_close;
+	local->mtu = mtu;
+
+	rwlock_init(&local->iface_lock);
+	spin_lock_init(&local->txfidlock);
+	spin_lock_init(&local->cmdlock);
+	spin_lock_init(&local->baplock);
+	spin_lock_init(&local->lock);
+	init_MUTEX(&local->rid_bap_sem);
+
+	if (card_idx < 0 || card_idx >= MAX_PARM_DEVICES)
+		card_idx = 0;
+	local->card_idx = card_idx;
+
+	i = essid[card_idx] == NULL ? 0 : card_idx;
+	len = strlen(essid[i]);
+	memcpy(local->essid, essid[i],
+	       len > MAX_SSID_LEN ? MAX_SSID_LEN : len);
+	local->essid[MAX_SSID_LEN] = '\0';
+	i = GET_INT_PARM(iw_mode, card_idx);
+	if ((i >= IW_MODE_ADHOC && i <= IW_MODE_REPEAT) ||
+	    i == IW_MODE_MONITOR) {
+		local->iw_mode = i;
+	} else {
+		printk(KERN_WARNING "prism2: Unknown iw_mode %d; using "
+		       "IW_MODE_MASTER\n", i);
+		local->iw_mode = IW_MODE_MASTER;
+	}
+	local->channel = GET_INT_PARM(channel, card_idx);
+	local->beacon_int = GET_INT_PARM(beacon_int, card_idx);
+	local->dtim_period = GET_INT_PARM(dtim_period, card_idx);
+	local->wds_max_connections = 16;
+	local->tx_control = HFA384X_TX_CTRL_FLAGS;
+	local->manual_retry_count = -1;
+	local->rts_threshold = 2347;
+	local->fragm_threshold = 2346;
+	local->auth_algs = PRISM2_AUTH_OPEN | PRISM2_AUTH_SHARED_KEY;
+#if defined(PRISM2_PCI) && defined(PRISM2_BUS_MASTER)
+	local->bus_master_threshold_rx = GET_INT_PARM(bus_master_threshold_rx,
+						      card_idx);
+	local->bus_master_threshold_tx = GET_INT_PARM(bus_master_threshold_tx,
+						      card_idx);
+#endif /* PRISM2_PCI and PRISM2_BUS_MASTER */
+
+	/* Initialize task queue structures */
+	INIT_WORK(&local->reset_queue, handle_reset_queue, local);
+	INIT_WORK(&local->set_multicast_list_queue,
+		  hostap_set_multicast_list_queue, local->dev);
+
+	/* Initialize tasklets for handling hardware IRQ related operations
+	 * outside hw IRQ handler */
+	HOSTAP_TASKLET_INIT(&local->bap_tasklet, hostap_bap_tasklet,
+			    (unsigned long) local);
+
+	HOSTAP_TASKLET_INIT(&local->info_tasklet, hostap_info_tasklet,
+			    (unsigned long) local);
+	hostap_info_init(local);
+
+	HOSTAP_TASKLET_INIT(&local->rx_tasklet,
+			    hostap_rx_tasklet, (unsigned long) local);
+	skb_queue_head_init(&local->rx_list);
+
+	HOSTAP_TASKLET_INIT(&local->sta_tx_exc_tasklet,
+			    hostap_sta_tx_exc_tasklet, (unsigned long) local);
+	skb_queue_head_init(&local->sta_tx_exc_list);
+
+	INIT_LIST_HEAD(&local->cmd_queue);
+	init_waitqueue_head(&local->hostscan_wq);
+	INIT_LIST_HEAD(&local->crypt_deinit_list);
+	init_timer(&local->crypt_deinit_timer);
+	local->crypt_deinit_timer.data = (unsigned long) local;
+	local->crypt_deinit_timer.function = prism2_crypt_deinit_handler;
+
+	init_timer(&local->passive_scan_timer);
+	local->passive_scan_timer.data = (unsigned long) local;
+	local->passive_scan_timer.function = hostap_passive_scan;
+
+	init_timer(&local->tick_timer);
+	local->tick_timer.data = (unsigned long) local;
+	local->tick_timer.function = hostap_tick_timer;
+	local->tick_timer.expires = jiffies + 2 * HZ;
+	add_timer(&local->tick_timer);
+
+	hostap_setup_dev(dev, local, 1);
+
+	local->saved_eth_header_parse = dev->hard_header_parse;
+
+	return dev;
+
+#if defined(PRISM2_PCI) && defined(PRISM2_BUS_MASTER)
+ fail:
+	kfree(local->bus_m0_buf);
+	free_netdev(dev);
+	return NULL;
+#endif /* PRISM2_PCI and PRISM2_BUS_MASTER */
+}
+
+
+static int prism2_init_dev(local_info_t *local)
+{
+	struct net_device *dev = local->dev;
+	int len, ret;
+
+	len = strlen(dev_template);
+	if (len >= IFNAMSIZ || strstr(dev_template, "%d") == NULL) {
+		printk(KERN_WARNING "hostap: Invalid dev_template='%s'\n",
+		       dev_template);
+		return 1;
+	}
+
+	rtnl_lock();
+	ret = dev_alloc_name(dev, dev_template);
+	if (ret >= 0)
+		ret = register_netdevice(dev);
+	rtnl_unlock();
+	if (ret < 0) {
+		printk(KERN_WARNING "%s: register netdevice failed!\n",
+		       dev_info);
+		return 1;
+	}
+	printk(KERN_INFO "%s: Registered netdevice %s\n", dev_info, dev->name);
+
+	hostap_init_proc(local);
+#ifndef PRISM2_NO_PROCFS_DEBUG
+	create_proc_read_entry("registers", 0, local->proc,
+			       prism2_registers_proc_read, local);
+#endif /* PRISM2_NO_PROCFS_DEBUG */
+	hostap_init_data(local);
+
+	return 0;
+}
+
+
+static void prism2_free_local_data(struct net_device *dev)
+{
+	struct hostap_tx_callback_info *tx_cb, *tx_cb_prev;
+	int i;
+	struct sk_buff *skb;
+	struct hostap_interface *iface;
+	struct local_info *local;
+	struct list_head *ptr, *n;
+
+	if (dev == NULL)
+		return;
+
+	iface = dev->priv;
+	local = iface->local;
+
+	flush_scheduled_work();
+
+	if (timer_pending(&local->crypt_deinit_timer))
+		del_timer(&local->crypt_deinit_timer);
+	prism2_crypt_deinit_entries(local, 1);
+
+	if (timer_pending(&local->passive_scan_timer))
+		del_timer(&local->passive_scan_timer);
+
+	if (timer_pending(&local->tick_timer))
+		del_timer(&local->tick_timer);
+
+	prism2_clear_cmd_queue(local);
+
+	while ((skb = skb_dequeue(&local->info_list)) != NULL)
+		dev_kfree_skb(skb);
+
+	while ((skb = skb_dequeue(&local->rx_list)) != NULL)
+		dev_kfree_skb(skb);
+
+	while ((skb = skb_dequeue(&local->sta_tx_exc_list)) != NULL)
+		dev_kfree_skb(skb);
+
+	if (local->dev_enabled)
+		prism2_callback(local, PRISM2_CALLBACK_DISABLE);
+
+	if (local->crypt) {
+		if (local->crypt->ops)
+			local->crypt->ops->deinit(local->crypt->priv);
+		kfree(local->crypt);
+		local->crypt = NULL;
+	}
+
+	if (local->ap != NULL)
+		hostap_free_data(local->ap);
+
+#ifndef PRISM2_NO_PROCFS_DEBUG
+	if (local->proc != NULL)
+		remove_proc_entry("registers", local->proc);
+#endif /* PRISM2_NO_PROCFS_DEBUG */
+	hostap_remove_proc(local);
+
+	tx_cb = local->tx_callback;
+	while (tx_cb != NULL) {
+		tx_cb_prev = tx_cb;
+		tx_cb = tx_cb->next;
+		kfree(tx_cb_prev);
+	}
+
+	hostap_set_hostapd(local, 0, 0);
+
+	for (i = 0; i < PRISM2_FRAG_CACHE_LEN; i++) {
+		if (local->frag_cache[i].skb != NULL)
+			dev_kfree_skb(local->frag_cache[i].skb);
+	}
+
+#ifdef PRISM2_DOWNLOAD_SUPPORT
+	prism2_download_free_data(local->dl_pri);
+	prism2_download_free_data(local->dl_sec);
+#endif /* PRISM2_DOWNLOAD_SUPPORT */
+
+	list_for_each_safe(ptr, n, &local->hostap_interfaces) {
+		iface = list_entry(ptr, struct hostap_interface, list);
+		if (iface->type == HOSTAP_INTERFACE_MAIN) {
+			/* special handling for this interface below */
+			continue;
+		}
+		hostap_remove_interface(iface->dev, 0, 1);
+	}
+
+#if defined(PRISM2_PCI) && defined(PRISM2_BUS_MASTER)
+	kfree(local->bus_m0_buf);
+#endif /* PRISM2_PCI and PRISM2_BUS_MASTER */
+	kfree(local->pda);
+	kfree(local->last_scan_results);
+
+	unregister_netdev(local->dev);
+	free_netdev(local->dev);
+}
+
+
+/* These might at some point be compiled separately and used as separate
+ * kernel modules or linked into one */
+#ifdef PRISM2_DOWNLOAD_SUPPORT
+#include "hostap_download.c"
+#endif /* PRISM2_DOWNLOAD_SUPPORT */
+
+#ifdef PRISM2_CALLBACK
+/* External hostap_callback.c file can be used to, e.g., blink activity led.
+ * This can use platform specific code and must define prism2_callback()
+ * function (if PRISM2_CALLBACK is not defined, these function calls are not
+ * used. */
+#include "hostap_callback.c"
+#endif /* PRISM2_CALLBACK */
diff -Nur linux-orig/drivers/net/wireless/hostap_info.c linux/drivers/net/wireless/hostap_info.c
--- linux-orig/drivers/net/wireless/hostap_info.c	1970-01-01 03:00:00.000000000 +0300
+++ linux/drivers/net/wireless/hostap_info.c	2003-10-10 07:29:44.000000000 +0400
@@ -0,0 +1,476 @@
+/* Host AP driver Info Frame processing (part of hostap.o module) */
+
+
+/* Called only as a tasklet (software IRQ) */
+static void prism2_info_commtallies16(local_info_t *local, unsigned char *buf,
+				      int left)
+{
+	struct hfa384x_comm_tallies *tallies;
+
+	if (left < sizeof(struct hfa384x_comm_tallies)) {
+		printk(KERN_DEBUG "%s: too short (len=%d) commtallies "
+		       "info frame\n", local->dev->name, left);
+		return;
+	}
+
+	tallies = (struct hfa384x_comm_tallies *) buf;
+#define ADD_COMM_TALLIES(name) \
+local->comm_tallies.name += le16_to_cpu(tallies->name)
+	ADD_COMM_TALLIES(tx_unicast_frames);
+	ADD_COMM_TALLIES(tx_multicast_frames);
+	ADD_COMM_TALLIES(tx_fragments);
+	ADD_COMM_TALLIES(tx_unicast_octets);
+	ADD_COMM_TALLIES(tx_multicast_octets);
+	ADD_COMM_TALLIES(tx_deferred_transmissions);
+	ADD_COMM_TALLIES(tx_single_retry_frames);
+	ADD_COMM_TALLIES(tx_multiple_retry_frames);
+	ADD_COMM_TALLIES(tx_retry_limit_exceeded);
+	ADD_COMM_TALLIES(tx_discards);
+	ADD_COMM_TALLIES(rx_unicast_frames);
+	ADD_COMM_TALLIES(rx_multicast_frames);
+	ADD_COMM_TALLIES(rx_fragments);
+	ADD_COMM_TALLIES(rx_unicast_octets);
+	ADD_COMM_TALLIES(rx_multicast_octets);
+	ADD_COMM_TALLIES(rx_fcs_errors);
+	ADD_COMM_TALLIES(rx_discards_no_buffer);
+	ADD_COMM_TALLIES(tx_discards_wrong_sa);
+	ADD_COMM_TALLIES(rx_discards_wep_undecryptable);
+	ADD_COMM_TALLIES(rx_message_in_msg_fragments);
+	ADD_COMM_TALLIES(rx_message_in_bad_msg_fragments);
+#undef ADD_COMM_TALLIES
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+static void prism2_info_commtallies32(local_info_t *local, unsigned char *buf,
+				      int left)
+{
+	struct hfa384x_comm_tallies32 *tallies;
+
+	if (left < sizeof(struct hfa384x_comm_tallies32)) {
+		printk(KERN_DEBUG "%s: too short (len=%d) commtallies32 "
+		       "info frame\n", local->dev->name, left);
+		return;
+	}
+
+	tallies = (struct hfa384x_comm_tallies32 *) buf;
+#define ADD_COMM_TALLIES(name) \
+local->comm_tallies.name += le32_to_cpu(tallies->name)
+	ADD_COMM_TALLIES(tx_unicast_frames);
+	ADD_COMM_TALLIES(tx_multicast_frames);
+	ADD_COMM_TALLIES(tx_fragments);
+	ADD_COMM_TALLIES(tx_unicast_octets);
+	ADD_COMM_TALLIES(tx_multicast_octets);
+	ADD_COMM_TALLIES(tx_deferred_transmissions);
+	ADD_COMM_TALLIES(tx_single_retry_frames);
+	ADD_COMM_TALLIES(tx_multiple_retry_frames);
+	ADD_COMM_TALLIES(tx_retry_limit_exceeded);
+	ADD_COMM_TALLIES(tx_discards);
+	ADD_COMM_TALLIES(rx_unicast_frames);
+	ADD_COMM_TALLIES(rx_multicast_frames);
+	ADD_COMM_TALLIES(rx_fragments);
+	ADD_COMM_TALLIES(rx_unicast_octets);
+	ADD_COMM_TALLIES(rx_multicast_octets);
+	ADD_COMM_TALLIES(rx_fcs_errors);
+	ADD_COMM_TALLIES(rx_discards_no_buffer);
+	ADD_COMM_TALLIES(tx_discards_wrong_sa);
+	ADD_COMM_TALLIES(rx_discards_wep_undecryptable);
+	ADD_COMM_TALLIES(rx_message_in_msg_fragments);
+	ADD_COMM_TALLIES(rx_message_in_bad_msg_fragments);
+#undef ADD_COMM_TALLIES
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+static void prism2_info_commtallies(local_info_t *local, unsigned char *buf,
+				    int left)
+{
+	if (local->tallies32)
+		prism2_info_commtallies32(local, buf, left);
+	else
+		prism2_info_commtallies16(local, buf, left);
+}
+
+
+#ifndef PRISM2_NO_STATION_MODES
+#ifndef PRISM2_NO_DEBUG
+static const char* hfa384x_linkstatus_str(u16 linkstatus)
+{
+	switch (linkstatus) {
+	case HFA384X_LINKSTATUS_CONNECTED:
+		return "Connected";
+	case HFA384X_LINKSTATUS_DISCONNECTED:
+		return "Disconnected";
+	case HFA384X_LINKSTATUS_AP_CHANGE:
+		return "Access point change";
+	case HFA384X_LINKSTATUS_AP_OUT_OF_RANGE:
+		return "Access point out of range";
+	case HFA384X_LINKSTATUS_AP_IN_RANGE:
+		return "Access point in range";
+	case HFA384X_LINKSTATUS_ASSOC_FAILED:
+		return "Association failed";
+	default:
+		return "Unknown";
+	}
+}
+#endif /* PRISM2_NO_DEBUG */
+
+
+/* Called only as a tasklet (software IRQ) */
+static void prism2_info_linkstatus(local_info_t *local, unsigned char *buf,
+				    int left)
+{
+	u16 val;
+	int non_sta_mode;
+
+	/* Alloc new JoinRequests to occur since LinkStatus for the previous
+	 * has been received */
+	local->last_join_time = 0;
+
+	if (left != 2) {
+		printk(KERN_DEBUG "%s: invalid linkstatus info frame "
+		       "length %d\n", local->dev->name, left);
+		return;
+	}
+
+	non_sta_mode = local->iw_mode == IW_MODE_MASTER ||
+		local->iw_mode == IW_MODE_REPEAT ||
+		local->iw_mode == IW_MODE_MONITOR;
+
+	val = buf[0] | (buf[1] << 8);
+	if (!non_sta_mode || val != HFA384X_LINKSTATUS_DISCONNECTED) {
+		PDEBUG(DEBUG_EXTRA, "%s: LinkStatus=%d (%s)\n",
+		       local->dev->name, val, hfa384x_linkstatus_str(val));
+	}
+
+	if (non_sta_mode)
+		return;
+
+	/* Get current BSSID later in scheduled task */
+	set_bit(PRISM2_INFO_PENDING_LINKSTATUS, &local->pending_info);
+	local->prev_link_status = val;
+	PRISM2_SCHEDULE_TASK(&local->info_queue);
+}
+
+
+static void prism2_host_roaming(local_info_t *local)
+{
+	struct hfa384x_join_request req;
+	struct net_device *dev = local->dev;
+	struct hfa384x_scan_result *selected, *entry;
+	int i;
+	unsigned long flags;
+
+	if (local->last_join_time &&
+	    time_before(jiffies, local->last_join_time + 10 * HZ)) {
+		PDEBUG(DEBUG_EXTRA, "%s: last join request has not yet been "
+		       "completed - waiting for it before issuing new one\n",
+		       dev->name);
+		return;
+	}
+
+	/* ScanResults are sorted: first ESS results in decreasing signal
+	 * quality then IBSS results in similar order.
+	 * Trivial roaming policy: just select the first entry.
+	 * This could probably be improved by adding hysteresis to limit
+	 * number of handoffs, etc.
+	 *
+	 * Could do periodic RID_SCANREQUEST or Inquire F101 to get new
+	 * ScanResults */
+	spin_lock_irqsave(&local->lock, flags);
+	if (local->last_scan_results == NULL ||
+	    local->last_scan_results_count == 0) {
+		spin_unlock_irqrestore(&local->lock, flags);
+		PDEBUG(DEBUG_EXTRA, "%s: no scan results for host roaming\n",
+		       dev->name);
+		return;
+	}
+
+	selected = &local->last_scan_results[0];
+
+	if (local->preferred_ap[0] || local->preferred_ap[1] ||
+	    local->preferred_ap[2] || local->preferred_ap[3] ||
+	    local->preferred_ap[4] || local->preferred_ap[5]) {
+		/* Try to find preferred AP */
+		PDEBUG(DEBUG_EXTRA, "%s: Preferred AP BSSID " MACSTR "\n",
+		       dev->name, MAC2STR(local->preferred_ap));
+		for (i = 0; i < local->last_scan_results_count; i++) {
+			entry = &local->last_scan_results[i];
+			if (memcmp(local->preferred_ap, entry->bssid, 6) == 0)
+			{
+				PDEBUG(DEBUG_EXTRA, "%s: using preferred AP "
+				       "selection\n", dev->name);
+				selected = entry;
+				break;
+			}
+		}
+	}
+
+	memcpy(req.bssid, selected->bssid, 6);
+	req.channel = selected->chid;
+	spin_unlock_irqrestore(&local->lock, flags);
+
+	PDEBUG(DEBUG_EXTRA, "%s: JoinRequest: BSSID=" MACSTR " channel=%d\n",
+	       dev->name, MAC2STR(req.bssid), le16_to_cpu(req.channel));
+	if (local->func->set_rid(dev, HFA384X_RID_JOINREQUEST, &req,
+				 sizeof(req))) {
+		printk(KERN_DEBUG "%s: JoinRequest failed\n", dev->name);
+	}
+	local->last_join_time = jiffies;
+}
+
+
+#if WIRELESS_EXT > 13
+static void hostap_report_scan_complete(local_info_t *local)
+{
+	union iwreq_data wrqu;
+
+	/* Inform user space about new scan results (just empty event,
+	 * SIOCGIWSCAN can be used to fetch data */
+	wrqu.data.length = 0;
+	wrqu.data.flags = 0;
+	wireless_send_event(local->dev, SIOCGIWSCAN, &wrqu, NULL);
+
+	/* Allow SIOCGIWSCAN handling to occur since we have received
+	 * scanning result */
+	local->scan_timestamp = 0;
+}
+#else /* WIRELESS_EXT > 13 */
+static inline void hostap_report_scan_complete(local_info_t *local)
+{
+}
+#endif /* WIRELESS_EXT > 13 */
+
+
+/* Called only as a tasklet (software IRQ) */
+static void prism2_info_scanresults(local_info_t *local, unsigned char *buf,
+				    int left)
+{
+	u16 *pos;
+	int new_count;
+	unsigned long flags;
+	struct hfa384x_scan_result *results, *prev;
+
+	if (left < 4) {
+		printk(KERN_DEBUG "%s: invalid scanresult info frame "
+		       "length %d\n", local->dev->name, left);
+		return;
+	}
+
+	pos = (u16 *) buf;
+	pos++;
+	pos++;
+	left -= 4;
+
+	new_count = left / sizeof(struct hfa384x_scan_result);
+	results = kmalloc(new_count * sizeof(struct hfa384x_scan_result),
+			  GFP_ATOMIC);
+	if (results == NULL)
+		return;
+	memcpy(results, pos, new_count * sizeof(struct hfa384x_scan_result));
+
+	spin_lock_irqsave(&local->lock, flags);
+	local->last_scan_type = PRISM2_SCAN;
+	prev = local->last_scan_results;
+	local->last_scan_results = results;
+	local->last_scan_results_count = new_count;
+	spin_unlock_irqrestore(&local->lock, flags);
+	kfree(prev);
+
+	hostap_report_scan_complete(local);
+
+	/* Perform rest of ScanResults handling later in scheduled task */
+	set_bit(PRISM2_INFO_PENDING_SCANRESULTS, &local->pending_info);
+	PRISM2_SCHEDULE_TASK(&local->info_queue);
+}
+
+
+/* Called only as a tasklet (software IRQ) */
+static void prism2_info_hostscanresults(local_info_t *local,
+					unsigned char *buf, int left)
+{
+	int i, result_size, copy_len, new_count;
+	struct hfa384x_hostscan_result *results, *prev;
+	unsigned long flags;
+	u16 *pos;
+	u8 *ptr;
+
+	wake_up_interruptible(&local->hostscan_wq);
+
+	if (left < 4) {
+		printk(KERN_DEBUG "%s: invalid hostscanresult info frame "
+		       "length %d\n", local->dev->name, left);
+		return;
+	}
+
+	pos = (u16 *) buf;
+	copy_len = result_size = le16_to_cpu(*pos);
+	if (result_size == 0) {
+		printk(KERN_DEBUG "%s: invalid result_size (0) in "
+		       "hostscanresults\n", local->dev->name);
+		return;
+	}
+	if (copy_len > sizeof(struct hfa384x_hostscan_result))
+		copy_len = sizeof(struct hfa384x_hostscan_result);
+
+	pos++;
+	pos++;
+	left -= 4;
+	ptr = (u8 *) pos;
+
+	new_count = left / result_size;
+	results = kmalloc(new_count * sizeof(struct hfa384x_hostscan_result),
+			  GFP_ATOMIC);
+	if (results == NULL)
+		return;
+	memset(results, 0, new_count * sizeof(struct hfa384x_hostscan_result));
+
+	for (i = 0; i < new_count; i++) {
+		memcpy(&results[i], ptr, copy_len);
+		ptr += result_size;
+		left -= result_size;
+	}
+
+	if (left) {
+		printk(KERN_DEBUG "%s: short HostScan result entry (%d/%d)\n",
+		       local->dev->name, left, result_size);
+	}
+
+	spin_lock_irqsave(&local->lock, flags);
+	local->last_scan_type = PRISM2_HOSTSCAN;
+	prev = local->last_hostscan_results;
+	local->last_hostscan_results = results;
+	local->last_hostscan_results_count = new_count;
+	spin_unlock_irqrestore(&local->lock, flags);
+	kfree(prev);
+
+	hostap_report_scan_complete(local);
+}
+#endif /* PRISM2_NO_STATION_MODES */
+
+
+/* Called only as a tasklet (software IRQ) */
+void hostap_info_process(local_info_t *local, struct sk_buff *skb)
+{
+	struct hfa384x_info_frame *info;
+	unsigned char *buf;
+	int left;
+#ifndef PRISM2_NO_DEBUG
+	int i;
+#endif /* PRISM2_NO_DEBUG */
+
+	info = (struct hfa384x_info_frame *) skb->data;
+	buf = skb->data + sizeof(*info);
+	left = skb->len - sizeof(*info);
+
+	switch (info->type) {
+	case HFA384X_INFO_COMMTALLIES:
+		prism2_info_commtallies(local, buf, left);
+		break;
+
+#ifndef PRISM2_NO_STATION_MODES
+	case HFA384X_INFO_LINKSTATUS:
+		prism2_info_linkstatus(local, buf, left);
+		break;
+
+	case HFA384X_INFO_SCANRESULTS:
+		prism2_info_scanresults(local, buf, left);
+		break;
+
+	case HFA384X_INFO_HOSTSCANRESULTS:
+		prism2_info_hostscanresults(local, buf, left);
+		break;
+#endif /* PRISM2_NO_STATION_MODES */
+
+#ifndef PRISM2_NO_DEBUG
+	default:
+		PDEBUG(DEBUG_EXTRA, "%s: INFO - len=%d type=0x%04x\n",
+		       local->dev->name, info->len, info->type);
+		PDEBUG(DEBUG_EXTRA, "Unknown info frame:");
+		for (i = 0; i < (left < 100 ? left : 100); i++)
+			PDEBUG2(DEBUG_EXTRA, " %02x", buf[i]);
+		PDEBUG2(DEBUG_EXTRA, "\n");
+		break;
+#endif /* PRISM2_NO_DEBUG */
+	}
+}
+
+
+#ifndef PRISM2_NO_STATION_MODES
+static void handle_info_queue_linkstatus(local_info_t *local)
+{
+	int val = local->prev_link_status;
+	int connected;
+
+	connected =
+		val == HFA384X_LINKSTATUS_CONNECTED ||
+		val == HFA384X_LINKSTATUS_AP_CHANGE ||
+		val == HFA384X_LINKSTATUS_AP_IN_RANGE;
+
+	if (local->func->get_rid(local->dev, HFA384X_RID_CURRENTBSSID,
+				 local->bssid, ETH_ALEN, 1) < 0) {
+		printk(KERN_DEBUG "%s: could not read CURRENTBSSID after "
+		       "LinkStatus event\n", local->dev->name);
+	} else {
+		PDEBUG(DEBUG_EXTRA, "%s: LinkStatus: BSSID=" MACSTR "\n",
+		       local->dev->name,
+		       MAC2STR((unsigned char *) local->bssid));
+		if (local->wds_type & HOSTAP_WDS_AP_CLIENT)
+			hostap_add_sta(local->ap, local->bssid);
+	}
+
+#if WIRELESS_EXT > 13
+	{
+		union iwreq_data wrqu;
+
+		/* Get BSSID if we have a valid AP address */
+		if (connected)
+			memcpy(wrqu.ap_addr.sa_data, local->bssid, ETH_ALEN);
+		else
+			memset(wrqu.ap_addr.sa_data, 0, ETH_ALEN);
+		wrqu.ap_addr.sa_family = ARPHRD_ETHER;
+		wireless_send_event(local->dev, SIOCGIWAP, &wrqu, NULL);
+	}
+#endif /* WIRELESS_EXT > 13 */
+}
+
+
+static void handle_info_queue_scanresults(local_info_t *local)
+{
+	if (local->host_roaming == 1 && local->iw_mode == IW_MODE_INFRA)
+		prism2_host_roaming(local);
+}
+
+
+/* Called only as scheduled task after receiving info frames (used to avoid
+ * pending too much time in HW IRQ handler). */
+static void handle_info_queue(void *data)
+{
+	local_info_t *local = (local_info_t *) data;
+
+	if (test_and_clear_bit(PRISM2_INFO_PENDING_LINKSTATUS,
+			       &local->pending_info))
+		handle_info_queue_linkstatus(local);
+
+	if (test_and_clear_bit(PRISM2_INFO_PENDING_SCANRESULTS,
+			       &local->pending_info))
+		handle_info_queue_scanresults(local);
+
+#ifndef NEW_MODULE_CODE
+	MOD_DEC_USE_COUNT;
+#endif
+}
+#endif /* PRISM2_NO_STATION_MODES */
+
+
+void hostap_info_init(local_info_t *local)
+{
+	skb_queue_head_init(&local->info_list);
+#ifndef PRISM2_NO_STATION_MODES
+	INIT_WORK(&local->info_queue, handle_info_queue, local);
+#endif /* PRISM2_NO_STATION_MODES */
+}
+
+
+EXPORT_SYMBOL(hostap_info_init);
+EXPORT_SYMBOL(hostap_info_process);
diff -Nur linux-orig/drivers/net/wireless/hostap_ioctl.c linux/drivers/net/wireless/hostap_ioctl.c
--- linux-orig/drivers/net/wireless/hostap_ioctl.c	1970-01-01 03:00:00.000000000 +0300
+++ linux/drivers/net/wireless/hostap_ioctl.c	2003-11-02 22:42:57.000000000 +0300
@@ -0,0 +1,3688 @@
+/* ioctl() (mostly Linux Wireless Extensions) routines for Host AP driver */
+
+#ifdef WIRELESS_EXT
+
+#ifdef in_atomic
+/* Get kernel_locked() for in_atomic() */
+#include <linux/smp_lock.h>
+#endif
+
+
+static struct iw_statistics *hostap_get_wireless_stats(struct net_device *dev)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+
+	local->wstats.status = 0;
+	local->wstats.discard.code =
+		local->comm_tallies.rx_discards_wep_undecryptable;
+	local->wstats.discard.misc =
+		local->comm_tallies.rx_fcs_errors +
+		local->comm_tallies.rx_discards_no_buffer +
+		local->comm_tallies.tx_discards_wrong_sa;
+
+#if WIRELESS_EXT > 11
+	local->wstats.discard.retries =
+		local->comm_tallies.tx_retry_limit_exceeded;
+	local->wstats.discard.fragment =
+		local->comm_tallies.rx_message_in_bad_msg_fragments;
+#endif /* WIRELESS_EXT > 11 */
+
+	if (local->iw_mode != IW_MODE_MASTER &&
+	    local->iw_mode != IW_MODE_REPEAT) {
+		struct hfa384x_comms_quality sq;
+#ifdef in_atomic
+		/* FIX: get_rid() will sleep and it must not be called
+		 * in interrupt context or while atomic. However, this
+		 * function seems to be called while atomic (at least in Linux
+		 * 2.5.59). Now, we just avoid illegal call, but in this case
+		 * the signal quality values are not shown. Statistics could be
+		 * collected before, if this really needs to be called while
+		 * atomic. */
+		if (in_atomic()) {
+			printk(KERN_DEBUG "%s: hostap_get_wireless_stats() "
+			       "called while atomic - skipping signal "
+			       "quality query\n", dev->name);
+		} else
+#endif /* in_atomic */
+		if (local->func->get_rid(local->dev,
+						HFA384X_RID_COMMSQUALITY,
+						&sq, sizeof(sq), 1) >= 0) {
+			local->wstats.qual.qual = le16_to_cpu(sq.comm_qual);
+			local->wstats.qual.level = HFA384X_LEVEL_TO_dBm(
+				le16_to_cpu(sq.signal_level));
+			local->wstats.qual.noise = HFA384X_LEVEL_TO_dBm(
+				le16_to_cpu(sq.noise_level));
+			local->wstats.qual.updated = 7;
+		}
+	}
+
+	return &local->wstats;
+}
+
+
+static int prism2_get_datarates(struct net_device *dev, u8 *rates)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	u8 buf[12];
+	int len;
+	u16 val;
+
+	len = local->func->get_rid(dev, HFA384X_RID_SUPPORTEDDATARATES, buf,
+				   sizeof(buf), 0);
+	if (len < 2)
+		return 0;
+
+	val = le16_to_cpu(*(u16 *) buf); /* string length */
+
+	if (len - 2 < val || val > 10)
+		return 0;
+
+	memcpy(rates, buf + 2, val);
+	return val;
+}
+
+
+static int prism2_get_name(struct net_device *dev,
+			   struct iw_request_info *info,
+			   char *name, char *extra)
+{
+	u8 rates[10];
+	int len, i, over2 = 0;
+
+	len = prism2_get_datarates(dev, rates);
+
+	for (i = 0; i < len; i++) {
+		if (rates[i] == 0x0b || rates[i] == 0x16) {
+			over2 = 1;
+			break;
+		}
+	}
+
+	strcpy(name, over2 ? "IEEE 802.11b" : "IEEE 802.11-DS");
+
+	return 0;
+}
+
+
+static void prism2_crypt_delayed_deinit(local_info_t *local,
+					struct prism2_crypt_data **crypt)
+{
+	struct prism2_crypt_data *tmp;
+	unsigned long flags;
+
+	tmp = *crypt;
+	*crypt = NULL;
+
+	if (tmp == NULL)
+		return;
+
+	/* must not run ops->deinit() while there may be pending encrypt or
+	 * decrypt operations. Use a list of delayed deinits to avoid needing
+	 * locking. */
+
+	spin_lock_irqsave(&local->lock, flags);
+	list_add(&tmp->list, &local->crypt_deinit_list);
+	if (!timer_pending(&local->crypt_deinit_timer)) {
+		local->crypt_deinit_timer.expires = jiffies + HZ;
+		add_timer(&local->crypt_deinit_timer);
+	}
+	spin_unlock_irqrestore(&local->lock, flags);
+}
+
+
+static int prism2_ioctl_siwencode(struct net_device *dev,
+				  struct iw_request_info *info,
+				  struct iw_point *erq, char *keybuf)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int i;
+	int first = 0;
+
+	if (erq->flags & IW_ENCODE_DISABLED) {
+		prism2_crypt_delayed_deinit(local, &local->crypt);
+		goto done;
+	}
+
+	if (local->crypt != NULL && local->crypt->ops != NULL &&
+	    strcmp(local->crypt->ops->name, "WEP") != 0) {
+		/* changing to use WEP; deinit previously used algorithm */
+		prism2_crypt_delayed_deinit(local, &local->crypt);
+	}
+
+	if (local->crypt == NULL) {
+		struct prism2_crypt_data *new_crypt;
+
+		/* take WEP into use */
+		new_crypt = (struct prism2_crypt_data *)
+			kmalloc(sizeof(struct prism2_crypt_data), GFP_KERNEL);
+		if (new_crypt == NULL)
+			return -ENOMEM;
+		memset(new_crypt, 0, sizeof(struct prism2_crypt_data));
+		new_crypt->ops = hostap_get_crypto_ops("WEP");
+		if (!new_crypt->ops) {
+			request_module("hostap_crypt_wep");
+			new_crypt->ops = hostap_get_crypto_ops("WEP");
+		}
+		if (new_crypt->ops)
+			new_crypt->priv = new_crypt->ops->init();
+		if (!new_crypt->ops || !new_crypt->priv) {
+			kfree(new_crypt);
+			new_crypt = NULL;
+
+			printk(KERN_WARNING "%s: could not initialize WEP: "
+			       "load module hostap_crypt_wep.o\n",
+			       dev->name);
+			return -EOPNOTSUPP;
+		}
+		first = 1;
+		local->crypt = new_crypt;
+	}
+
+	i = erq->flags & IW_ENCODE_INDEX;
+	if (i < 1 || i > 4)
+		i = local->crypt->ops->get_key_idx(local->crypt->priv);
+	else
+		i--;
+	if (i < 0 || i >= WEP_KEYS)
+		return -EINVAL;
+
+	if (erq->length > 0) {
+		int len = erq->length <= 5 ? 5 : 13;
+		if (len > erq->length)
+			memset(keybuf + erq->length, 0, len - erq->length);
+		local->crypt->ops->set_key(i, keybuf, len, local->crypt->priv);
+		if (first)
+			local->crypt->ops->set_key_idx(i, local->crypt->priv);
+	} else {
+		if (local->crypt->ops->set_key_idx(i, local->crypt->priv) < 0)
+			return -EINVAL; /* keyidx not valid */
+	}
+
+ done:
+	local->open_wep = erq->flags & IW_ENCODE_OPEN;
+
+	if (hostap_set_encryption(local)) {
+		printk(KERN_DEBUG "%s: set_encryption failed\n", dev->name);
+		return -EINVAL;
+	}
+
+	/* Do not reset port0 if card is in Managed mode since resetting will
+	 * generate new IEEE 802.11 authentication which may end up in looping
+	 * with IEEE 802.1X. Prism2 documentation seem to require port reset
+	 * after WEP configuration. However, keys are apparently changed at
+	 * least in Managed mode. */
+	if (local->iw_mode != IW_MODE_INFRA && local->func->reset_port(dev)) {
+		printk(KERN_DEBUG "%s: reset_port failed\n", dev->name);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+
+static int prism2_ioctl_giwencode(struct net_device *dev,
+				  struct iw_request_info *info,
+				  struct iw_point *erq, char *key)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int i, len;
+	u16 val;
+
+	if (local->crypt == NULL || local->crypt->ops == NULL) {
+		erq->length = 0;
+		erq->flags = IW_ENCODE_DISABLED;
+		return 0;
+	}
+
+	if (strcmp(local->crypt->ops->name, "WEP") != 0) {
+		/* only WEP is supported with wireless extensions, so just
+		 * report that encryption is used */
+		erq->length = 0;
+		erq->flags = IW_ENCODE_ENABLED;
+		return 0;
+	}
+
+	i = erq->flags & IW_ENCODE_INDEX;
+	if (i < 1 || i > 4)
+		i = local->crypt->ops->get_key_idx(local->crypt->priv);
+	else
+		i--;
+	if (i < 0 || i >= WEP_KEYS)
+		return -EINVAL;
+
+	erq->flags = i + 1;
+
+	/* Reads from HFA384X_RID_CNFDEFAULTKEY* return bogus values, so show
+	 * the keys from driver buffer */
+	len = local->crypt->ops->get_key(i, key, WEP_KEY_LEN,
+					 local->crypt->priv);
+	erq->length = (len >= 0 ? len : 0);
+
+	if (local->func->get_rid(dev, HFA384X_RID_CNFWEPFLAGS, &val, 2, 1) < 0)
+	{
+		printk("CNFWEPFLAGS reading failed\n");
+		return -EOPNOTSUPP;
+	}
+	le16_to_cpus(&val);
+	if (val & HFA384X_WEPFLAGS_PRIVACYINVOKED)
+		erq->flags |= IW_ENCODE_ENABLED;
+	else
+		erq->flags |= IW_ENCODE_DISABLED;
+	if (val & HFA384X_WEPFLAGS_EXCLUDEUNENCRYPTED)
+		erq->flags |= IW_ENCODE_RESTRICTED;
+	else
+		erq->flags |= IW_ENCODE_OPEN;
+
+	return 0;
+}
+
+
+#if WIRELESS_EXT <= 15
+static int prism2_ioctl_giwspy(struct net_device *dev,
+			       struct iw_request_info *info,
+			       struct iw_point *srq, char *extra)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	struct sockaddr addr[IW_MAX_SPY];
+	struct iw_quality qual[IW_MAX_SPY];
+
+	if (local->iw_mode != IW_MODE_MASTER) {
+		printk("SIOCGIWSPY is currently only supported in Host AP "
+		       "mode\n");
+		srq->length = 0;
+		return -EOPNOTSUPP;
+	}
+
+	srq->length = prism2_ap_get_sta_qual(local, addr, qual, IW_MAX_SPY, 0);
+
+	memcpy(extra, &addr, sizeof(addr[0]) * srq->length);
+	memcpy(extra + sizeof(addr[0]) * srq->length, &qual,
+	       sizeof(qual[0]) * srq->length);
+
+	return 0;
+}
+#endif /* WIRELESS_EXT <= 15 */
+
+
+static int hostap_set_rate(struct net_device *dev)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int ret, basic_rates;
+
+	basic_rates = local->basic_rates & local->tx_rate_control;
+	if (!basic_rates || basic_rates != local->basic_rates) {
+		printk(KERN_INFO "%s: updating basic rate set automatically "
+		       "to match with the new supported rate set\n",
+		       dev->name);
+		if (!basic_rates)
+			basic_rates = local->tx_rate_control;
+
+		local->basic_rates = basic_rates;
+		if (hostap_set_word(dev, HFA384X_RID_CNFBASICRATES,
+				    basic_rates))
+			printk(KERN_WARNING "%s: failed to set "
+			       "cnfBasicRates\n", dev->name);
+	}
+
+	ret = (hostap_set_word(dev, HFA384X_RID_TXRATECONTROL,
+			       local->tx_rate_control) ||
+	       hostap_set_word(dev, HFA384X_RID_CNFSUPPORTEDRATES,
+			       local->tx_rate_control) ||
+	       local->func->reset_port(dev));
+		
+	if (ret) {
+		printk(KERN_WARNING "%s: TXRateControl/cnfSupportedRates "
+		       "setting to 0x%x failed\n",
+		       dev->name, local->tx_rate_control);
+	}
+
+	/* Update TX rate configuration for all STAs based on new operational
+	 * rate set. */
+	hostap_update_rates(local);
+
+	return ret;
+}
+
+
+static int prism2_ioctl_siwrate(struct net_device *dev,
+				struct iw_request_info *info,
+				struct iw_param *rrq, char *extra)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+
+	if (rrq->fixed) {
+		switch (rrq->value) {
+		case 11000000:
+			local->tx_rate_control = HFA384X_RATES_11MBPS;
+			break;
+		case 5500000:
+			local->tx_rate_control = HFA384X_RATES_5MBPS;
+			break;
+		case 2000000:
+			local->tx_rate_control = HFA384X_RATES_2MBPS;
+			break;
+		case 1000000:
+			local->tx_rate_control = HFA384X_RATES_1MBPS;
+			break;
+		default:
+			local->tx_rate_control = HFA384X_RATES_1MBPS |
+				HFA384X_RATES_2MBPS | HFA384X_RATES_5MBPS |
+				HFA384X_RATES_11MBPS;
+			break;
+		}
+	} else {
+		switch (rrq->value) {
+		case 11000000:
+			local->tx_rate_control = HFA384X_RATES_1MBPS |
+				HFA384X_RATES_2MBPS | HFA384X_RATES_5MBPS |
+				HFA384X_RATES_11MBPS;
+			break;
+		case 5500000:
+			local->tx_rate_control = HFA384X_RATES_1MBPS |
+				HFA384X_RATES_2MBPS | HFA384X_RATES_5MBPS;
+			break;
+		case 2000000:
+			local->tx_rate_control = HFA384X_RATES_1MBPS |
+				HFA384X_RATES_2MBPS;
+			break;
+		case 1000000:
+			local->tx_rate_control = HFA384X_RATES_1MBPS;
+			break;
+		default:
+			local->tx_rate_control = HFA384X_RATES_1MBPS |
+				HFA384X_RATES_2MBPS | HFA384X_RATES_5MBPS |
+				HFA384X_RATES_11MBPS;
+			break;
+		}
+	}
+
+	return hostap_set_rate(dev);
+}
+
+
+static int prism2_ioctl_giwrate(struct net_device *dev,
+				struct iw_request_info *info,
+				struct iw_param *rrq, char *extra)
+{
+	u16 val;
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int ret = 0;
+
+	if (local->func->get_rid(dev, HFA384X_RID_TXRATECONTROL, &val, 2, 1) <
+	    0)
+		return -EINVAL;
+
+	if ((val & 0x1) && (val > 1))
+		rrq->fixed = 0;
+	else
+		rrq->fixed = 1;
+
+	if (local->iw_mode == IW_MODE_MASTER && local->ap != NULL &&
+	    !local->fw_tx_rate_control) {
+		/* HFA384X_RID_CURRENTTXRATE seems to always be 2 Mbps in
+		 * Host AP mode, so use the recorded TX rate of the last sent
+		 * frame */
+		rrq->value = local->ap->last_tx_rate > 0 ?
+			local->ap->last_tx_rate * 100000 : 11000000;
+		return 0;
+	}
+
+	if (local->func->get_rid(dev, HFA384X_RID_CURRENTTXRATE, &val, 2, 1) <
+	    0)
+		return -EINVAL;
+
+	switch (val) {
+	case HFA384X_RATES_1MBPS:
+		rrq->value = 1000000;
+		break;
+	case HFA384X_RATES_2MBPS:
+		rrq->value = 2000000;
+		break;
+	case HFA384X_RATES_5MBPS:
+		rrq->value = 5500000;
+		break;
+	case HFA384X_RATES_11MBPS:
+		rrq->value = 11000000;
+		break;
+	default:
+		/* should not happen */
+		rrq->value = 11000000;
+		ret = -EINVAL;
+		break;
+	}
+
+	return ret;
+}
+
+
+static int prism2_ioctl_siwsens(struct net_device *dev,
+				struct iw_request_info *info,
+				struct iw_param *sens, char *extra)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+
+	/* Set the desired AP density */
+	if (sens->value < 1 || sens->value > 3)
+		return -EINVAL;
+
+	if (hostap_set_word(dev, HFA384X_RID_CNFSYSTEMSCALE, sens->value) ||
+	    local->func->reset_port(dev))
+		return -EINVAL;
+
+	return 0;
+}
+
+static int prism2_ioctl_giwsens(struct net_device *dev,
+				struct iw_request_info *info,
+				struct iw_param *sens, char *extra)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	u16 val;
+
+	/* Get the current AP density */
+	if (local->func->get_rid(dev, HFA384X_RID_CNFSYSTEMSCALE, &val, 2, 1) <
+	    0)
+		return -EINVAL;
+
+	sens->value = __le16_to_cpu(val);
+	sens->fixed = 1;
+
+	return 0;
+}
+
+
+/* Deprecated in new wireless extension API */
+static int prism2_ioctl_giwaplist(struct net_device *dev,
+				  struct iw_request_info *info,
+				  struct iw_point *data, char *extra)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	struct sockaddr addr[IW_MAX_AP];
+	struct iw_quality qual[IW_MAX_AP];
+
+	if (local->iw_mode != IW_MODE_MASTER) {
+		printk(KERN_DEBUG "SIOCGIWAPLIST is currently only supported "
+		       "in Host AP mode\n");
+		data->length = 0;
+		return -EOPNOTSUPP;
+	}
+
+	data->length = prism2_ap_get_sta_qual(local, addr, qual, IW_MAX_AP, 1);
+
+	memcpy(extra, &addr, sizeof(addr[0]) * data->length);
+	data->flags = 1; /* has quality information */
+	memcpy(extra + sizeof(addr[0]) * data->length, &qual,
+	       sizeof(qual[0]) * data->length);
+
+	return 0;
+}
+
+
+static int prism2_ioctl_siwrts(struct net_device *dev,
+			       struct iw_request_info *info,
+			       struct iw_param *rts, char *extra)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	u16 val;
+
+	if (rts->disabled)
+		val = __constant_cpu_to_le16(2347);
+	else if (rts->value < 0 || rts->value > 2347)
+		return -EINVAL;
+	else
+		val = __cpu_to_le16(rts->value);
+
+	if (local->func->set_rid(dev, HFA384X_RID_RTSTHRESHOLD, &val, 2) ||
+	    local->func->reset_port(dev))
+		return -EINVAL;
+
+	local->rts_threshold = rts->value;
+
+	return 0;
+}
+
+static int prism2_ioctl_giwrts(struct net_device *dev,
+			       struct iw_request_info *info,
+			       struct iw_param *rts, char *extra)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	u16 val;
+
+	if (local->func->get_rid(dev, HFA384X_RID_RTSTHRESHOLD, &val, 2, 1) <
+	    0)
+		return -EINVAL;
+
+	rts->value = __le16_to_cpu(val);
+	rts->disabled = (rts->value == 2347);
+	rts->fixed = 1;
+
+	return 0;
+}
+
+
+static int prism2_ioctl_siwfrag(struct net_device *dev,
+				struct iw_request_info *info,
+				struct iw_param *rts, char *extra)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	u16 val;
+
+	if (rts->disabled)
+		val = __constant_cpu_to_le16(2346);
+	else if (rts->value < 256 || rts->value > 2346)
+		return -EINVAL;
+	else
+		val = __cpu_to_le16(rts->value & ~0x1); /* even numbers only */
+
+	if (local->func->set_rid(dev, HFA384X_RID_FRAGMENTATIONTHRESHOLD, &val,
+				 2)
+	    || local->func->reset_port(dev))
+		return -EINVAL;
+
+	local->fragm_threshold = rts->value & ~0x1;
+
+	return 0;
+}
+
+static int prism2_ioctl_giwfrag(struct net_device *dev,
+				struct iw_request_info *info,
+				struct iw_param *rts, char *extra)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	u16 val;
+
+	if (local->func->get_rid(dev, HFA384X_RID_FRAGMENTATIONTHRESHOLD,
+				 &val, 2, 1) < 0)
+		return -EINVAL;
+
+	rts->value = __le16_to_cpu(val);
+	rts->disabled = (rts->value == 2346);
+	rts->fixed = 1;
+
+	return 0;
+}
+
+
+static int hostap_join_ap(struct net_device *dev)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	struct hfa384x_join_request req;
+	unsigned long flags;
+	int i;
+	struct hfa384x_scan_result *entry;
+
+	memcpy(req.bssid, local->preferred_ap, ETH_ALEN);
+	req.channel = 0;
+
+	spin_lock_irqsave(&local->lock, flags);
+	for (i = 0; i < local->last_scan_results_count; i++) {
+		if (!local->last_scan_results)
+			break;
+		entry = &local->last_scan_results[i];
+		if (memcmp(local->preferred_ap, entry->bssid, ETH_ALEN) == 0) {
+			req.channel = entry->chid;
+			break;
+		}
+	}
+	spin_unlock_irqrestore(&local->lock, flags);
+
+	if (local->func->set_rid(dev, HFA384X_RID_JOINREQUEST, &req,
+				 sizeof(req))) {
+		printk(KERN_DEBUG "%s: JoinRequest " MACSTR
+		       " failed\n",
+		       dev->name, MAC2STR(local->preferred_ap));
+		return -1;
+	}
+
+	printk(KERN_DEBUG "%s: Trying to join BSSID " MACSTR "\n",
+	       dev->name, MAC2STR(local->preferred_ap));
+
+	return 0;
+}
+
+
+static int prism2_ioctl_siwap(struct net_device *dev,
+			      struct iw_request_info *info,
+			      struct sockaddr *ap_addr, char *extra)
+{
+#ifdef PRISM2_NO_STATION_MODES
+	return -EOPNOTSUPP;
+#else /* PRISM2_NO_STATION_MODES */
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+
+	memcpy(local->preferred_ap, &ap_addr->sa_data, ETH_ALEN);
+
+	if (local->host_roaming == 1 && local->iw_mode == IW_MODE_INFRA) {
+		struct hfa384x_scan_request scan_req;
+		memset(&scan_req, 0, sizeof(scan_req));
+		scan_req.channel_list = __constant_cpu_to_le16(0x3fff);
+		scan_req.txrate = __constant_cpu_to_le16(HFA384X_RATES_1MBPS);
+		if (local->func->set_rid(dev, HFA384X_RID_SCANREQUEST,
+					 &scan_req, sizeof(scan_req))) {
+			printk(KERN_DEBUG "%s: ScanResults request failed - "
+			       "preferred AP delayed to next unsolicited "
+			       "scan\n", dev->name);
+		}
+	} else if (local->host_roaming == 2 &&
+		   local->iw_mode == IW_MODE_INFRA) {
+		if (hostap_join_ap(dev))
+			return -EINVAL;
+	} else {
+		printk(KERN_DEBUG "%s: Preferred AP (SIOCSIWAP) is used only "
+		       "in Managed mode when host_roaming is enabled\n",
+		       dev->name);
+	}
+
+	return 0;
+#endif /* PRISM2_NO_STATION_MODES */
+}
+
+static int prism2_ioctl_giwap(struct net_device *dev,
+			      struct iw_request_info *info,
+			      struct sockaddr *ap_addr, char *extra)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+
+	if (dev == local->stadev) {
+		memcpy(&ap_addr->sa_data, local->assoc_ap_addr, ETH_ALEN);
+		ap_addr->sa_family = ARPHRD_ETHER;
+		return 0;
+	}
+
+	if (local->func->get_rid(dev, HFA384X_RID_CURRENTBSSID,
+				 &ap_addr->sa_data, ETH_ALEN, 1) < 0)
+		return -EOPNOTSUPP;
+
+	/* local->bssid is also updated in LinkStatus handler when in station
+	 * mode */
+	memcpy(local->bssid, &ap_addr->sa_data, ETH_ALEN);
+	ap_addr->sa_family = ARPHRD_ETHER;
+
+	return 0;
+}
+
+
+static int prism2_ioctl_siwnickn(struct net_device *dev,
+				 struct iw_request_info *info,
+				 struct iw_point *data, char *nickname)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+
+	memset(local->name, 0, sizeof(local->name));
+	memcpy(local->name, nickname, data->length);
+	local->name_set = 1;
+
+	if (hostap_set_string(dev, HFA384X_RID_CNFOWNNAME, local->name) ||
+	    local->func->reset_port(dev))
+		return -EINVAL;
+
+	return 0;
+}
+
+static int prism2_ioctl_giwnickn(struct net_device *dev,
+				 struct iw_request_info *info,
+				 struct iw_point *data, char *nickname)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int len;
+	char name[MAX_NAME_LEN + 3];
+	u16 val;
+
+	len = local->func->get_rid(dev, HFA384X_RID_CNFOWNNAME,
+				   &name, MAX_NAME_LEN + 2, 0);
+	val = __le16_to_cpu(*(u16 *) name);
+	if (len > MAX_NAME_LEN + 2 || len < 0 || val > MAX_NAME_LEN)
+		return -EOPNOTSUPP;
+
+	name[val + 2] = '\0';
+	data->length = val + 1;
+	memcpy(nickname, name + 2, val + 1);
+
+	return 0;
+}
+
+
+static int prism2_ioctl_siwfreq(struct net_device *dev,
+				struct iw_request_info *info,
+				struct iw_freq *freq, char *extra)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+
+	/* freq => chan. */
+	if (freq->e == 1 &&
+	    freq->m / 100000 >= freq_list[0] &&
+	    freq->m / 100000 <= freq_list[FREQ_COUNT - 1]) {
+		int ch;
+		int fr = freq->m / 100000;
+		for (ch = 0; ch < FREQ_COUNT; ch++) {
+			if (fr == freq_list[ch]) {
+				freq->e = 0;
+				freq->m = ch + 1;
+				break;
+			}
+		}
+	}
+
+	if (freq->e != 0 || freq->m < 1 || freq->m > FREQ_COUNT ||
+	    !(local->channel_mask & (1 << (freq->m - 1))))
+		return -EINVAL;
+
+	local->channel = freq->m; /* channel is used in prism2_setup_rids() */
+	if (hostap_set_word(dev, HFA384X_RID_CNFOWNCHANNEL, local->channel) ||
+	    local->func->reset_port(dev))
+		return -EINVAL;
+
+	return 0;
+}
+
+static int prism2_ioctl_giwfreq(struct net_device *dev,
+				struct iw_request_info *info,
+				struct iw_freq *freq, char *extra)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	u16 val;
+
+	if (local->func->get_rid(dev, HFA384X_RID_CURRENTCHANNEL, &val, 2, 1) <
+	    0)
+		return -EINVAL;
+
+	le16_to_cpus(&val);
+	if (val < 1 || val > FREQ_COUNT)
+		return -EINVAL;
+
+	freq->m = freq_list[val - 1] * 100000;
+	freq->e = 1;
+
+	return 0;
+}
+
+
+static void hostap_monitor_set_type(local_info_t *local)
+{
+	struct net_device *dev = local->dev;
+
+	if (local->monitor_type == PRISM2_MONITOR_PRISM ||
+	    local->monitor_type == PRISM2_MONITOR_CAPHDR) {
+		dev->type = ARPHRD_IEEE80211_PRISM;
+		dev->hard_header_parse =
+			hostap_80211_prism_header_parse;
+	} else {
+		dev->type = ARPHRD_IEEE80211;
+		dev->hard_header_parse = hostap_80211_header_parse;
+	}
+}
+
+
+static int prism2_ioctl_siwessid(struct net_device *dev,
+				 struct iw_request_info *info,
+				 struct iw_point *data, char *ssid)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+
+	if (data->flags == 0)
+		ssid[0] = '\0'; /* ANY */
+
+	if (local->iw_mode == IW_MODE_MASTER && ssid[0] == '\0') {
+		/* Setting SSID to empty string seems to kill the card in
+		 * Host AP mode */
+		printk(KERN_DEBUG "%s: Host AP mode does not support "
+		       "'Any' essid\n", dev->name);
+		return -EINVAL;
+	}
+
+	memcpy(local->essid, ssid, data->length);
+	local->essid[data->length] = '\0';
+
+	if ((!local->fw_ap &&
+	     hostap_set_string(dev, HFA384X_RID_CNFDESIREDSSID, local->essid))
+	    || hostap_set_string(dev, HFA384X_RID_CNFOWNSSID, local->essid) ||
+	    local->func->reset_port(dev))
+		return -EINVAL;
+
+	return 0;
+}
+
+static int prism2_ioctl_giwessid(struct net_device *dev,
+				 struct iw_request_info *info,
+				 struct iw_point *data, char *essid)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	u16 val;
+
+	data->flags = 1; /* active */
+	if (local->iw_mode == IW_MODE_MASTER) {
+		data->length = strlen(local->essid);
+		memcpy(essid, local->essid, IW_ESSID_MAX_SIZE);
+	} else {
+		int len;
+		char ssid[MAX_SSID_LEN + 2];
+		memset(ssid, 0, sizeof(ssid));
+		len = local->func->get_rid(dev, HFA384X_RID_CURRENTSSID,
+					   &ssid, MAX_SSID_LEN + 2, 0);
+		val = __le16_to_cpu(*(u16 *) ssid);
+		if (len > MAX_SSID_LEN + 2 || len < 0 || val > MAX_SSID_LEN) {
+			return -EOPNOTSUPP;
+		}
+		data->length = val;
+		memcpy(essid, ssid + 2, IW_ESSID_MAX_SIZE);
+	}
+
+	return 0;
+}
+
+
+static int prism2_ioctl_giwrange(struct net_device *dev,
+				 struct iw_request_info *info,
+				 struct iw_point *data, char *extra)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	struct iw_range *range = (struct iw_range *) extra;
+	u8 rates[10];
+	u16 val;
+	int i, len, over2;
+
+	data->length = sizeof(struct iw_range);
+	memset(range, 0, sizeof(struct iw_range));
+
+#if WIRELESS_EXT > 9
+	/* TODO: could fill num_txpower and txpower array with
+	 * something; however, there are 128 different values.. */
+
+	range->txpower_capa = IW_TXPOW_DBM;
+
+	if (local->iw_mode == IW_MODE_INFRA || local->iw_mode == IW_MODE_ADHOC)
+	{
+		range->min_pmp = 1 * 1024;
+		range->max_pmp = 65535 * 1024;
+		range->min_pmt = 1 * 1024;
+		range->max_pmt = 1000 * 1024;
+		range->pmp_flags = IW_POWER_PERIOD;
+		range->pmt_flags = IW_POWER_TIMEOUT;
+		range->pm_capa = IW_POWER_PERIOD | IW_POWER_TIMEOUT |
+			IW_POWER_UNICAST_R | IW_POWER_ALL_R;
+	}
+#endif /* WIRELESS_EXT > 9 */
+
+#if WIRELESS_EXT > 10
+	range->we_version_compiled = WIRELESS_EXT;
+	range->we_version_source = 13;
+
+	range->retry_capa = IW_RETRY_LIMIT;
+	range->retry_flags = IW_RETRY_LIMIT;
+	range->min_retry = 0;
+	range->max_retry = 255;
+#endif /* WIRELESS_EXT > 10 */
+
+	range->num_channels = FREQ_COUNT;
+
+	val = 0;
+	for (i = 0; i < FREQ_COUNT; i++) {
+		if (local->channel_mask & (1 << i)) {
+			range->freq[val].i = i + 1;
+			range->freq[val].m = freq_list[i] * 100000;
+			range->freq[val].e = 1;
+			val++;
+		}
+		if (val == IW_MAX_FREQUENCIES)
+			break;
+	}
+	range->num_frequency = val;
+
+	range->max_qual.qual = 92; /* 0 .. 92 */
+	range->max_qual.level = 154; /* 27 .. 154 */
+	range->max_qual.noise = 154; /* 27 .. 154 */
+	range->sensitivity = 3;
+
+	range->max_encoding_tokens = WEP_KEYS;
+	range->num_encoding_sizes = 2;
+	range->encoding_size[0] = 5;
+	range->encoding_size[1] = 13;
+
+	over2 = 0;
+	len = prism2_get_datarates(dev, rates);
+	range->num_bitrates = 0;
+	for (i = 0; i < len; i++) {
+		if (range->num_bitrates < IW_MAX_BITRATES) {
+			range->bitrate[range->num_bitrates] =
+				rates[i] * 500000;
+			range->num_bitrates++;
+		}
+		if (rates[i] == 0x0b || rates[i] == 0x16)
+			over2 = 1;
+	}
+	/* estimated maximum TCP throughput values (bps) */
+	range->throughput = over2 ? 5500000 : 1500000;
+
+	range->min_rts = 0;
+	range->max_rts = 2347;
+	range->min_frag = 256;
+	range->max_frag = 2346;
+
+	return 0;
+}
+
+
+static int hostap_monitor_mode_enable(local_info_t *local)
+{
+	struct net_device *dev = local->dev;
+
+	printk(KERN_DEBUG "Enabling monitor mode\n");
+	hostap_monitor_set_type(local);
+
+	if (hostap_set_word(dev, HFA384X_RID_CNFPORTTYPE,
+			    HFA384X_PORTTYPE_PSEUDO_IBSS)) {
+		printk(KERN_DEBUG "Port type setting for monitor mode "
+		       "failed\n");
+		return -EOPNOTSUPP;
+	}
+
+	/* Host decrypt is needed to get the IV and ICV fields;
+	 * however, monitor mode seems to remove WEP flag from frame
+	 * control field */
+	if (hostap_set_word(dev, HFA384X_RID_CNFWEPFLAGS,
+			    HFA384X_WEPFLAGS_HOSTENCRYPT |
+			    HFA384X_WEPFLAGS_HOSTDECRYPT)) {
+		printk(KERN_DEBUG "WEP flags setting failed\n");
+		return -EOPNOTSUPP;
+	}
+
+	if (local->func->reset_port(dev) ||
+	    local->func->cmd(dev, HFA384X_CMDCODE_TEST |
+			     (HFA384X_TEST_MONITOR << 8),
+			     0, NULL, NULL)) {
+		printk(KERN_DEBUG "Setting monitor mode failed\n");
+		return -EOPNOTSUPP;
+	}
+
+	return 0;
+}
+
+
+static int hostap_monitor_mode_disable(local_info_t *local)
+{
+	struct net_device *dev = local->dev;
+
+	printk(KERN_DEBUG "%s: Disabling monitor mode\n", dev->name);
+	dev->type = ARPHRD_ETHER;
+	dev->hard_header_parse = local->saved_eth_header_parse;
+	if (local->func->cmd(dev, HFA384X_CMDCODE_TEST |
+			     (HFA384X_TEST_STOP << 8),
+			     0, NULL, NULL))
+		return -1;
+	return hostap_set_encryption(local);
+}
+
+
+static int prism2_ioctl_siwmode(struct net_device *dev,
+				struct iw_request_info *info,
+				__u32 *mode, char *extra)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int double_reset = 0;
+
+	if (*mode != IW_MODE_ADHOC && *mode != IW_MODE_INFRA &&
+	    *mode != IW_MODE_MASTER && *mode != IW_MODE_REPEAT &&
+	    *mode != IW_MODE_MONITOR)
+		return -EOPNOTSUPP;
+
+#ifdef PRISM2_NO_STATION_MODES
+	if (*mode == IW_MODE_ADHOC || *mode == IW_MODE_INFRA)
+		return -EOPNOTSUPP;
+#endif /* PRISM2_NO_STATION_MODES */
+
+	if (*mode == local->iw_mode)
+		return 0;
+
+	if (*mode == IW_MODE_MASTER && local->essid[0] == '\0') {
+		printk(KERN_WARNING "%s: empty SSID not allowed in Master "
+		       "mode\n", dev->name);
+		return -EINVAL;
+	}
+
+	if (local->iw_mode == IW_MODE_MONITOR)
+		hostap_monitor_mode_disable(local);
+
+	if (local->iw_mode == IW_MODE_ADHOC && *mode == IW_MODE_MASTER) {
+		/* There seems to be a firmware bug in at least STA f/w v1.5.6
+		 * that leaves beacon frames to use IBSS type when moving from
+		 * IBSS to Host AP mode. Doing double Port0 reset seems to be
+		 * enough to workaround this. */
+		double_reset = 1;
+	}
+
+	printk(KERN_DEBUG "prism2: %s: operating mode changed "
+	       "%d -> %d\n", dev->name, local->iw_mode, *mode);
+	local->iw_mode = *mode;
+
+	if (local->iw_mode == IW_MODE_MONITOR)
+		hostap_monitor_mode_enable(local);
+	else if (local->iw_mode == IW_MODE_MASTER && !local->host_encrypt &&
+		 !local->fw_encrypt_ok) {
+		printk(KERN_DEBUG "%s: defaulting to host-based encryption as "
+		       "a workaround for firmware bug in Host AP mode WEP\n",
+		       dev->name);
+		local->host_encrypt = 1;
+	}
+
+	if (hostap_set_word(dev, HFA384X_RID_CNFPORTTYPE,
+			    hostap_get_porttype(local)))
+		return -EOPNOTSUPP;
+
+	if (local->func->reset_port(dev))
+		return -EINVAL;
+	if (double_reset && local->func->reset_port(dev))
+		return -EINVAL;
+
+	return 0;
+}
+
+
+static int prism2_ioctl_giwmode(struct net_device *dev,
+				struct iw_request_info *info,
+				__u32 *mode, char *extra)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+
+	if (dev == local->stadev) {
+		*mode = IW_MODE_INFRA;
+		return 0;
+	}
+
+	*mode = local->iw_mode;
+	return 0;
+}
+
+
+static int prism2_ioctl_siwpower(struct net_device *dev,
+				 struct iw_request_info *info,
+				 struct iw_param *wrq, char *extra)
+{
+#ifdef PRISM2_NO_STATION_MODES
+	return -EOPNOTSUPP;
+#else /* PRISM2_NO_STATION_MODES */
+	int ret = 0;
+
+	if (wrq->disabled)
+		return hostap_set_word(dev, HFA384X_RID_CNFPMENABLED, 0);
+
+	switch (wrq->flags & IW_POWER_MODE) {
+	case IW_POWER_UNICAST_R:
+		ret = hostap_set_word(dev, HFA384X_RID_CNFMULTICASTRECEIVE, 0);
+		if (ret)
+			return ret;
+		ret = hostap_set_word(dev, HFA384X_RID_CNFPMENABLED, 1);
+		if (ret)
+			return ret;
+		break;
+	case IW_POWER_ALL_R:
+		ret = hostap_set_word(dev, HFA384X_RID_CNFMULTICASTRECEIVE, 1);
+		if (ret)
+			return ret;
+		ret = hostap_set_word(dev, HFA384X_RID_CNFPMENABLED, 1);
+		if (ret)
+			return ret;
+		break;
+	case IW_POWER_ON:
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	if (wrq->flags & IW_POWER_TIMEOUT) {
+		ret = hostap_set_word(dev, HFA384X_RID_CNFPMENABLED, 1);
+		if (ret)
+			return ret;
+		ret = hostap_set_word(dev, HFA384X_RID_CNFPMHOLDOVERDURATION,
+				      wrq->value / 1024);
+		if (ret)
+			return ret;
+	}
+	if (wrq->flags & IW_POWER_PERIOD) {
+		ret = hostap_set_word(dev, HFA384X_RID_CNFPMENABLED, 1);
+		if (ret)
+			return ret;
+		ret = hostap_set_word(dev, HFA384X_RID_CNFMAXSLEEPDURATION,
+				      wrq->value / 1024);
+		if (ret)
+			return ret;
+	}
+
+	return ret;
+#endif /* PRISM2_NO_STATION_MODES */
+}
+
+
+static int prism2_ioctl_giwpower(struct net_device *dev,
+				 struct iw_request_info *info,
+				 struct iw_param *rrq, char *extra)
+{
+#ifdef PRISM2_NO_STATION_MODES
+	return -EOPNOTSUPP;
+#else /* PRISM2_NO_STATION_MODES */
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	u16 enable, mcast;
+
+	if (local->func->get_rid(dev, HFA384X_RID_CNFPMENABLED, &enable, 2, 1)
+	    < 0)
+		return -EINVAL;
+
+	if (!__le16_to_cpu(enable)) {
+		rrq->disabled = 1;
+		return 0;
+	}
+
+	rrq->disabled = 0;
+
+	if ((rrq->flags & IW_POWER_TYPE) == IW_POWER_TIMEOUT) {
+		u16 timeout;
+		if (local->func->get_rid(dev,
+					 HFA384X_RID_CNFPMHOLDOVERDURATION,
+					 &timeout, 2, 1) < 0)
+			return -EINVAL;
+
+		rrq->flags = IW_POWER_TIMEOUT;
+		rrq->value = __le16_to_cpu(timeout) * 1024;
+	} else {
+		u16 period;
+		if (local->func->get_rid(dev, HFA384X_RID_CNFMAXSLEEPDURATION,
+					 &period, 2, 1) < 0)
+			return -EINVAL;
+
+		rrq->flags = IW_POWER_PERIOD;
+		rrq->value = __le16_to_cpu(period) * 1024;
+	}
+
+	if (local->func->get_rid(dev, HFA384X_RID_CNFMULTICASTRECEIVE, &mcast,
+				 2, 1) < 0)
+		return -EINVAL;
+
+	if (__le16_to_cpu(mcast))
+		rrq->flags |= IW_POWER_ALL_R;
+	else
+		rrq->flags |= IW_POWER_UNICAST_R;
+
+	return 0;
+#endif /* PRISM2_NO_STATION_MODES */
+}
+
+
+#if WIRELESS_EXT > 10
+static int prism2_ioctl_siwretry(struct net_device *dev,
+				 struct iw_request_info *info,
+				 struct iw_param *rrq, char *extra)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+
+	if (rrq->disabled)
+		return -EINVAL;
+
+	/* setting retry limits is not supported with the current station
+	 * firmware code; simulate this with alternative retry count for now */
+	if (rrq->flags == IW_RETRY_LIMIT) {
+		if (rrq->value < 0) {
+			/* disable manual retry count setting and use firmware
+			 * defaults */
+			local->manual_retry_count = -1;
+			local->tx_control &= ~HFA384X_TX_CTRL_ALT_RTRY;
+		} else {
+			if (hostap_set_word(dev, HFA384X_RID_CNFALTRETRYCOUNT,
+					    rrq->value)) {
+				printk(KERN_DEBUG "%s: Alternate retry count "
+				       "setting to %d failed\n",
+				       dev->name, rrq->value);
+				return -EOPNOTSUPP;
+			}
+
+			local->manual_retry_count = rrq->value;
+			local->tx_control |= HFA384X_TX_CTRL_ALT_RTRY;
+		}
+		return 0;
+	}
+
+	return -EOPNOTSUPP;
+
+#if 0
+	/* what could be done, if firmware would support this.. */
+
+	if (rrq->flags & IW_RETRY_LIMIT) {
+		if (rrq->flags & IW_RETRY_MAX)
+			HFA384X_RID_LONGRETRYLIMIT = rrq->value;
+		else if (rrq->flags & IW_RETRY_MIN)
+			HFA384X_RID_SHORTRETRYLIMIT = rrq->value;
+		else {
+			HFA384X_RID_LONGRETRYLIMIT = rrq->value;
+			HFA384X_RID_SHORTRETRYLIMIT = rrq->value;
+		}
+
+	}
+
+	if (rrq->flags & IW_RETRY_LIFETIME) {
+		HFA384X_RID_MAXTRANSMITLIFETIME = rrq->value / 1024;
+	}
+
+	return 0;
+#endif /* 0 */
+}
+
+static int prism2_ioctl_giwretry(struct net_device *dev,
+				 struct iw_request_info *info,
+				 struct iw_param *rrq, char *extra)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	u16 shortretry, longretry, lifetime;
+
+	if (local->func->get_rid(dev, HFA384X_RID_SHORTRETRYLIMIT, &shortretry,
+				 2, 1) < 0 ||
+	    local->func->get_rid(dev, HFA384X_RID_LONGRETRYLIMIT, &longretry,
+				 2, 1) < 0 ||
+	    local->func->get_rid(dev, HFA384X_RID_MAXTRANSMITLIFETIME,
+				 &lifetime, 2, 1) < 0)
+		return -EINVAL;
+
+	le16_to_cpus(&shortretry);
+	le16_to_cpus(&longretry);
+	le16_to_cpus(&lifetime);
+
+	rrq->disabled = 0;
+
+	if ((rrq->flags & IW_RETRY_TYPE) == IW_RETRY_LIFETIME) {
+		rrq->flags = IW_RETRY_LIFETIME;
+		rrq->value = lifetime * 1024;
+	} else {
+		if (local->manual_retry_count >= 0) {
+			rrq->flags = IW_RETRY_LIMIT;
+			rrq->value = local->manual_retry_count;
+		} else if ((rrq->flags & IW_RETRY_MAX)) {
+			rrq->flags = IW_RETRY_LIMIT | IW_RETRY_MAX;
+			rrq->value = longretry;
+		} else {
+			rrq->flags = IW_RETRY_LIMIT;
+			rrq->value = shortretry;
+			if (shortretry != longretry)
+				rrq->flags |= IW_RETRY_MIN;
+		}
+	}
+	return 0;
+}
+#endif /* WIRELESS_EXT > 10 */
+
+
+#if WIRELESS_EXT > 9
+
+/* Note! This TX power controlling is experimental and should not be used in
+ * production use. It just sets raw power register and does not use any kind of
+ * feedback information from the measured TX power (CR58). This is now
+ * commented out to make sure that it is not used by accident. TX power
+ * configuration will be enabled again after proper algorithm using feedback
+ * has been implemented. */
+
+#ifdef RAW_TXPOWER_SETTING
+/* Map HFA386x's CR31 to and from dBm with some sort of ad hoc mapping..
+ * This version assumes following mapping:
+ * CR31 is 7-bit value with -64 to +63 range.
+ * -64 is mapped into +20dBm and +63 into -43dBm.
+ * This is certainly not an exact mapping for every card, but at least
+ * increasing dBm value should correspond to increasing TX power.
+ */
+
+static int prism2_txpower_hfa386x_to_dBm(u16 val)
+{
+	signed char tmp;
+
+	if (val > 255)
+		val = 255;
+
+	tmp = val;
+	tmp >>= 2;
+
+	return -12 - tmp;
+}
+
+static u16 prism2_txpower_dBm_to_hfa386x(int val)
+{
+	signed char tmp;
+
+	if (val > 20)
+		return 128;
+	else if (val < -43)
+		return 127;
+
+	tmp = val;
+	tmp = -12 - tmp;
+	tmp <<= 2;
+
+	return (unsigned char) tmp;
+}
+#endif /* RAW_TXPOWER_SETTING */
+
+
+static int prism2_ioctl_siwtxpow(struct net_device *dev,
+				 struct iw_request_info *info,
+				 struct iw_param *rrq, char *extra)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+#ifdef RAW_TXPOWER_SETTING
+	char *tmp;
+#endif
+	u16 val;
+	int ret = 0;
+
+	if (rrq->disabled) {
+		if (local->txpower_type != PRISM2_TXPOWER_OFF) {
+			val = 0xff; /* use all standby and sleep modes */
+			ret = local->func->cmd(dev, HFA384X_CMDCODE_WRITEMIF,
+					       HFA386X_CR_A_D_TEST_MODES2,
+					       &val, NULL);
+			printk(KERN_DEBUG "%s: Turning radio off: %s\n",
+			       dev->name, ret ? "failed" : "OK");
+			local->txpower_type = PRISM2_TXPOWER_OFF;
+		}
+		return (ret ? -EOPNOTSUPP : 0);
+	}
+
+	if (local->txpower_type == PRISM2_TXPOWER_OFF) {
+		val = 0; /* disable all standby and sleep modes */
+		ret = local->func->cmd(dev, HFA384X_CMDCODE_WRITEMIF,
+				       HFA386X_CR_A_D_TEST_MODES2, &val, NULL);
+		printk(KERN_DEBUG "%s: Turning radio on: %s\n",
+		       dev->name, ret ? "failed" : "OK");
+		local->txpower_type = PRISM2_TXPOWER_UNKNOWN;
+	}
+
+#ifdef RAW_TXPOWER_SETTING
+	if (!rrq->fixed && local->txpower_type != PRISM2_TXPOWER_AUTO) {
+		printk(KERN_DEBUG "Setting ALC on\n");
+		val = HFA384X_TEST_CFG_BIT_ALC;
+		local->func->cmd(dev, HFA384X_CMDCODE_TEST |
+				 (HFA384X_TEST_CFG_BITS << 8), 1, &val, NULL);
+		local->txpower_type = PRISM2_TXPOWER_AUTO;
+		return 0;
+	}
+
+	if (local->txpower_type != PRISM2_TXPOWER_FIXED) {
+		printk(KERN_DEBUG "Setting ALC off\n");
+		val = HFA384X_TEST_CFG_BIT_ALC;
+		local->func->cmd(dev, HFA384X_CMDCODE_TEST |
+				 (HFA384X_TEST_CFG_BITS << 8), 0, &val, NULL);
+			local->txpower_type = PRISM2_TXPOWER_FIXED;
+	}
+
+	if (rrq->flags == IW_TXPOW_DBM)
+		tmp = "dBm";
+	else if (rrq->flags == IW_TXPOW_MWATT)
+		tmp = "mW";
+	else
+		tmp = "UNKNOWN";
+	printk(KERN_DEBUG "Setting TX power to %d %s\n", rrq->value, tmp);
+
+	if (rrq->flags != IW_TXPOW_DBM) {
+		printk("SIOCSIWTXPOW with mW is not supported; use dBm\n");
+		return -EOPNOTSUPP;
+	}
+
+	local->txpower = rrq->value;
+	val = prism2_txpower_dBm_to_hfa386x(local->txpower);
+	if (local->func->cmd(dev, HFA384X_CMDCODE_WRITEMIF,
+			     HFA386X_CR_MANUAL_TX_POWER, &val, NULL))
+		ret = -EOPNOTSUPP;
+#else /* RAW_TXPOWER_SETTING */
+	if (rrq->fixed)
+		ret = -EOPNOTSUPP;
+#endif /* RAW_TXPOWER_SETTING */
+
+	return ret;
+}
+
+static int prism2_ioctl_giwtxpow(struct net_device *dev,
+				 struct iw_request_info *info,
+				 struct iw_param *rrq, char *extra)
+{
+#ifdef RAW_TXPOWER_SETTING
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	u16 resp0;
+
+	rrq->flags = IW_TXPOW_DBM;
+	rrq->disabled = 0;
+	rrq->fixed = 0;
+
+	if (local->txpower_type == PRISM2_TXPOWER_AUTO) {
+		if (local->func->cmd(dev, HFA384X_CMDCODE_READMIF,
+				     HFA386X_CR_MANUAL_TX_POWER,
+				     NULL, &resp0) == 0) {
+			rrq->value = prism2_txpower_hfa386x_to_dBm(resp0);
+		} else {
+			/* Could not get real txpower; guess 15 dBm */
+			rrq->value = 15;
+		}
+	} else if (local->txpower_type == PRISM2_TXPOWER_OFF) {
+		rrq->value = 0;
+		rrq->disabled = 1;
+	} else if (local->txpower_type == PRISM2_TXPOWER_FIXED) {
+		rrq->value = local->txpower;
+		rrq->fixed = 1;
+	} else {
+		printk("SIOCGIWTXPOW - unknown txpower_type=%d\n",
+		       local->txpower_type);
+	}
+	return 0;
+#else /* RAW_TXPOWER_SETTING */
+	return -EOPNOTSUPP;
+#endif /* RAW_TXPOWER_SETTING */
+}
+#endif /* WIRELESS_EXT > 9 */
+
+
+#if WIRELESS_EXT > 13
+
+#ifndef PRISM2_NO_STATION_MODES
+
+/* HostScan request works with and without host_roaming mode. In addition, it
+ * does not break current association. However, it requires newer station
+ * firmware version (>= 1.3.1) than scan request. */
+static int prism2_request_hostscan(struct net_device *dev)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	struct hfa384x_hostscan_request scan_req;
+
+	memset(&scan_req, 0, sizeof(scan_req));
+	scan_req.channel_list = __constant_cpu_to_le16(local->channel_mask);
+	scan_req.txrate = __constant_cpu_to_le16(HFA384X_RATES_1MBPS);
+	/* leave target_ssid empty so that all SSIDs are accepted */
+
+	if (local->func->set_rid(dev, HFA384X_RID_HOSTSCAN, &scan_req,
+				 sizeof(scan_req))) {
+		printk(KERN_DEBUG "%s: HOSTSCAN failed\n", dev->name);
+		return -EINVAL;
+	}
+	return 0;
+}
+
+
+static int prism2_request_scan(struct net_device *dev)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	struct hfa384x_scan_request scan_req;
+	int ret = 0;
+
+	memset(&scan_req, 0, sizeof(scan_req));
+	scan_req.channel_list = __constant_cpu_to_le16(local->channel_mask);
+	scan_req.txrate = __constant_cpu_to_le16(HFA384X_RATES_1MBPS);
+
+	/* FIX:
+	 * It seems to be enough to set roaming mode for a short moment to
+	 * host-based and then setup scanrequest data and return the mode to
+	 * firmware-based.
+	 *
+	 * Master mode would need to drop to Managed mode for a short while
+	 * to make scanning work.. Or sweep through the different channels and
+	 * use passive scan based on beacons. */
+
+	if (!local->host_roaming)
+		hostap_set_word(dev, HFA384X_RID_CNFROAMINGMODE,
+				HFA384X_ROAMING_HOST);
+
+	if (local->func->set_rid(dev, HFA384X_RID_SCANREQUEST, &scan_req,
+				 sizeof(scan_req))) {
+		printk(KERN_DEBUG "SCANREQUEST failed\n");
+		ret = -EINVAL;
+	}
+
+	if (!local->host_roaming)
+		hostap_set_word(dev, HFA384X_RID_CNFROAMINGMODE,
+				HFA384X_ROAMING_FIRMWARE);
+
+	return 0;
+}
+
+#else /* !PRISM2_NO_STATION_MODES */
+
+static inline int prism2_request_hostscan(struct net_device *dev)
+{
+	return -EOPNOTSUPP;
+}
+
+
+static inline int prism2_request_scan(struct net_device *dev)
+{
+	return -EOPNOTSUPP;
+}
+
+#endif /* !PRISM2_NO_STATION_MODES */
+
+
+static int prism2_ioctl_siwscan(struct net_device *dev,
+				struct iw_request_info *info,
+				struct iw_point *data, char *extra)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int ret;
+
+	if (local->iw_mode == IW_MODE_MASTER) {
+		/* In master mode, we just return the results of our local
+		 * tables, so we don't need to start anything...
+		 * Jean II */
+		data->length = 0;
+		return 0;
+	}
+
+	if (local->sta_fw_ver >= PRISM2_FW_VER(1,3,1))
+		ret = prism2_request_hostscan(dev);
+	else
+		ret = prism2_request_scan(dev);
+
+	if (ret == 0)
+		local->scan_timestamp = jiffies;
+
+	/* Could inquire F101, F103 or wait for SIOCGIWSCAN and read RID */
+
+	return ret;
+}
+
+
+#ifndef PRISM2_NO_STATION_MODES
+/* Translate scan data returned from the card to a card independant
+ * format that the Wireless Tools will understand - Jean II */
+static inline int prism2_translate_scan(local_info_t *local, char *buffer)
+{
+	struct hfa384x_scan_result *scan;
+	struct hfa384x_hostscan_result *hscan;
+	int i, entries, entry, hostscan;
+	struct iw_event iwe;
+	char *current_ev = buffer;
+	char *end_buf = buffer + IW_SCAN_MAX_DATA;
+	char *current_val;
+	u16 capabilities;
+	u8 *pos;
+
+	spin_lock_bh(&local->lock);
+
+	hostscan = local->last_scan_type == PRISM2_HOSTSCAN;
+	entries = hostscan ? local->last_hostscan_results_count :
+		local->last_scan_results_count;
+	for (entry = 0; entry < entries; entry++) {
+		scan = &local->last_scan_results[entry];
+		hscan = &local->last_hostscan_results[entry];
+
+		/* First entry *MUST* be the AP MAC address */
+		memset(&iwe, 0, sizeof(iwe));
+		iwe.cmd = SIOCGIWAP;
+		iwe.u.ap_addr.sa_family = ARPHRD_ETHER;
+		memcpy(iwe.u.ap_addr.sa_data,
+		       hostscan ? hscan->bssid : scan->bssid, ETH_ALEN);
+		/* FIX:
+		 * I do not know how this is possible, but iwe_stream_add_event
+		 * seems to re-order memcpy execution so that len is set only
+		 * after copying.. Pre-setting len here "fixes" this, but real
+		 * problems should be solved (after which these iwe.len
+		 * settings could be removed from this function). */
+		iwe.len = IW_EV_ADDR_LEN;
+		current_ev = iwe_stream_add_event(current_ev, end_buf, &iwe,
+						  IW_EV_ADDR_LEN);
+
+		/* Other entries will be displayed in the order we give them */
+
+		memset(&iwe, 0, sizeof(iwe));
+		iwe.cmd = SIOCGIWESSID;
+		iwe.u.data.length = le16_to_cpu(hostscan ? hscan->ssid_len :
+						scan->ssid_len);
+		if (iwe.u.data.length > 32)
+			iwe.u.data.length = 32;
+		iwe.u.data.flags = 1;
+		iwe.len = IW_EV_POINT_LEN + iwe.u.data.length;
+		current_ev = iwe_stream_add_point(current_ev, end_buf, &iwe,
+						  hostscan ? hscan->ssid :
+						  scan->ssid);
+
+		memset(&iwe, 0, sizeof(iwe));
+		iwe.cmd = SIOCGIWMODE;
+		capabilities = le16_to_cpu(hostscan ? hscan->capability :
+					   scan->capability);
+		if (capabilities & (WLAN_CAPABILITY_ESS |
+				    WLAN_CAPABILITY_IBSS)) {
+			if (capabilities & WLAN_CAPABILITY_ESS)
+				iwe.u.mode = IW_MODE_MASTER;
+			else
+				iwe.u.mode = IW_MODE_ADHOC;
+			iwe.len = IW_EV_UINT_LEN;
+			current_ev = iwe_stream_add_event(current_ev, end_buf,
+							  &iwe,
+							  IW_EV_UINT_LEN);
+		}
+
+		memset(&iwe, 0, sizeof(iwe));
+		iwe.cmd = SIOCGIWFREQ;
+		iwe.u.freq.m = freq_list[le16_to_cpu(hostscan ? hscan->chid :
+						     scan->chid) - 1] * 100000;
+		iwe.u.freq.e = 1;
+		iwe.len = IW_EV_FREQ_LEN;
+		current_ev = iwe_stream_add_event(current_ev, end_buf, &iwe,
+						  IW_EV_FREQ_LEN);
+
+		memset(&iwe, 0, sizeof(iwe));
+		iwe.cmd = IWEVQUAL;
+		if (hostscan) {
+			iwe.u.qual.level = le16_to_cpu(hscan->sl);
+			iwe.u.qual.noise = le16_to_cpu(hscan->anl);
+		} else {
+			iwe.u.qual.level = HFA384X_LEVEL_TO_dBm(
+				le16_to_cpu(scan->sl));
+			iwe.u.qual.noise = HFA384X_LEVEL_TO_dBm(
+				le16_to_cpu(scan->anl));
+		}
+		iwe.len = IW_EV_QUAL_LEN;
+		current_ev = iwe_stream_add_event(current_ev, end_buf, &iwe,
+						  IW_EV_QUAL_LEN);
+
+		memset(&iwe, 0, sizeof(iwe));
+		iwe.cmd = SIOCGIWENCODE;
+		if (capabilities & WLAN_CAPABILITY_PRIVACY)
+			iwe.u.data.flags = IW_ENCODE_ENABLED | IW_ENCODE_NOKEY;
+		else
+			iwe.u.data.flags = IW_ENCODE_DISABLED;
+		iwe.u.data.length = 0;
+		iwe.len = IW_EV_POINT_LEN + iwe.u.data.length;
+		current_ev = iwe_stream_add_point(current_ev, end_buf, &iwe,
+						  "");
+
+		memset(&iwe, 0, sizeof(iwe));
+		iwe.cmd = SIOCGIWRATE;
+		current_val = current_ev + IW_EV_LCP_LEN;
+		pos = hostscan ? hscan->sup_rates : scan->sup_rates;
+		for (i = 0; i < sizeof(scan->sup_rates); i++) {
+			if (pos[i] == 0)
+				break;
+			/* Bit rate given in 500 kb/s units (+ 0x80) */
+			iwe.u.bitrate.value =
+				((pos[i] & 0x7f) * 500000);
+			current_val = iwe_stream_add_value(
+				current_ev, current_val, end_buf, &iwe,
+				IW_EV_PARAM_LEN);
+		}
+		/* Check if we added any event */
+		if ((current_val - current_ev) > IW_EV_LCP_LEN)
+			current_ev = current_val;
+
+#if WIRELESS_EXT > 14
+		{
+			char buf[20];
+			memset(&iwe, 0, sizeof(iwe));
+			iwe.cmd = IWEVCUSTOM;
+			sprintf(buf, "bcn_int=%d",
+				le16_to_cpu(hostscan ? hscan->beacon_interval :
+					    scan->beacon_interval));
+			iwe.u.data.length = strlen(buf);
+			current_ev = iwe_stream_add_point(current_ev, end_buf,
+							  &iwe, buf);
+
+			memset(&iwe, 0, sizeof(iwe));
+			iwe.cmd = IWEVCUSTOM;
+			sprintf(buf, "resp_rate=%d",
+				le16_to_cpu(hostscan ? hscan->rate :
+					    scan->rate));
+			iwe.u.data.length = strlen(buf);
+			current_ev = iwe_stream_add_point(current_ev, end_buf,
+							  &iwe, buf);
+
+			if (hostscan && (capabilities & WLAN_CAPABILITY_IBSS))
+			{
+				memset(&iwe, 0, sizeof(iwe));
+				iwe.cmd = IWEVCUSTOM;
+				sprintf(buf, "atim=%d",
+					le16_to_cpu(hscan->atim));
+				iwe.u.data.length = strlen(buf);
+				current_ev = iwe_stream_add_point(
+					current_ev, end_buf, &iwe, buf);
+			}
+		}
+#endif /* WIRELESS_EXT > 14 */
+
+
+		/* Could add beacon_interval and rate (of the received
+		 * ProbeResp) to scan results. With hostscan, could also add
+		 * ATIM. */
+	}
+
+	spin_unlock_bh(&local->lock);
+
+	return current_ev - buffer;
+}
+#endif /* PRISM2_NO_STATION_MODES */
+
+
+static inline int prism2_ioctl_giwscan_sta(struct net_device *dev,
+					   struct iw_request_info *info,
+					   struct iw_point *data, char *extra)
+{
+#ifdef PRISM2_NO_STATION_MODES
+	return -EOPNOTSUPP;
+#else /* PRISM2_NO_STATION_MODES */
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int res;
+
+	/* Wait until the scan is finished. We can probably do better
+	 * than that - Jean II */
+	if (local->scan_timestamp &&
+	    time_before(jiffies, local->scan_timestamp + 3 * HZ)) {
+		/* Important note : we don't want to block the caller
+		 * until results are ready for various reasons.
+		 * First, managing wait queues is complex and racy
+		 * (there may be multiple simultaneous callers).
+		 * Second, we grab some rtnetlink lock before comming
+		 * here (in dev_ioctl()).
+		 * Third, the caller can wait on the Wireless Event
+		 * - Jean II */
+		return -EAGAIN;
+	}
+	local->scan_timestamp = 0;
+
+	res = prism2_translate_scan(local, extra);
+
+	if (res >= 0) {
+		data->length = res;
+		return 0;
+	} else {
+		data->length = 0;
+		return res;
+	}
+#endif /* PRISM2_NO_STATION_MODES */
+}
+
+
+static int prism2_ioctl_giwscan(struct net_device *dev,
+				struct iw_request_info *info,
+				struct iw_point *data, char *extra)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int res;
+
+	if (local->iw_mode == IW_MODE_MASTER) {
+		/* In MASTER mode, it doesn't make sense to go around
+		 * scanning the frequencies and make the stations we serve
+		 * wait when what the user is really interested about is the
+		 * list of stations and access points we are talking to.
+		 * So, just extract results from our cache...
+		 * Jean II */
+
+		/* Translate to WE format */
+		res = prism2_ap_translate_scan(dev, extra);
+		if (res >= 0) {
+			printk(KERN_DEBUG "Scan result translation succeeded "
+			       "(length=%d)\n", res);
+			data->length = res;
+			return 0;
+		} else {
+			printk(KERN_DEBUG
+			       "Scan result translation failed (res=%d)\n",
+			       res);
+			data->length = 0;
+			return res;
+		}
+	} else {
+		/* Station mode */
+		return prism2_ioctl_giwscan_sta(dev, info, data, extra);
+	}
+}
+#endif /* WIRELESS_EXT > 13 */
+
+
+static const struct iw_priv_args prism2_priv[] = {
+	{ PRISM2_IOCTL_MONITOR,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "monitor" },
+	{ PRISM2_IOCTL_READMIF,
+	  IW_PRIV_TYPE_BYTE | IW_PRIV_SIZE_FIXED | 1,
+	  IW_PRIV_TYPE_BYTE | IW_PRIV_SIZE_FIXED | 1, "readmif" },
+	{ PRISM2_IOCTL_WRITEMIF,
+	  IW_PRIV_TYPE_BYTE | IW_PRIV_SIZE_FIXED | 2, 0, "writemif" },
+	{ PRISM2_IOCTL_RESET,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "reset" },
+	{ PRISM2_IOCTL_INQUIRE,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "inquire" },
+	{ PRISM2_IOCTL_SET_RID_WORD,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 2, 0, "set_rid_word" },
+	{ PRISM2_IOCTL_MACCMD,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "maccmd" },
+#ifdef PRISM2_USE_WE_TYPE_ADDR
+	{ PRISM2_IOCTL_WDS_ADD,
+	  IW_PRIV_TYPE_ADDR | IW_PRIV_SIZE_FIXED | 1, 0, "wds_add" },
+	{ PRISM2_IOCTL_WDS_DEL,
+	  IW_PRIV_TYPE_ADDR | IW_PRIV_SIZE_FIXED | 1, 0, "wds_del" },
+	{ PRISM2_IOCTL_ADDMAC,
+	  IW_PRIV_TYPE_ADDR | IW_PRIV_SIZE_FIXED | 1, 0, "addmac" },
+	{ PRISM2_IOCTL_DELMAC,
+	  IW_PRIV_TYPE_ADDR | IW_PRIV_SIZE_FIXED | 1, 0, "delmac" },
+	{ PRISM2_IOCTL_KICKMAC,
+	  IW_PRIV_TYPE_ADDR | IW_PRIV_SIZE_FIXED | 1, 0, "kickmac" },
+#else /* PRISM2_USE_WE_TYPE_ADDR */
+	{ PRISM2_IOCTL_WDS_ADD,
+	  IW_PRIV_TYPE_CHAR | IW_PRIV_SIZE_FIXED | 18, 0, "wds_add" },
+	{ PRISM2_IOCTL_WDS_DEL,
+	  IW_PRIV_TYPE_CHAR | IW_PRIV_SIZE_FIXED | 18, 0, "wds_del" },
+	{ PRISM2_IOCTL_ADDMAC,
+	  IW_PRIV_TYPE_CHAR | IW_PRIV_SIZE_FIXED | 18, 0, "addmac" },
+	{ PRISM2_IOCTL_DELMAC,
+	  IW_PRIV_TYPE_CHAR | IW_PRIV_SIZE_FIXED | 18, 0, "delmac" },
+	{ PRISM2_IOCTL_KICKMAC,
+	  IW_PRIV_TYPE_CHAR | IW_PRIV_SIZE_FIXED | 18, 0, "kickmac" },
+#endif /* PRISM2_USE_WE_TYPE_ADDR */
+	/* --- raw access to sub-ioctls --- */
+	{ PRISM2_IOCTL_PRISM2_PARAM,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 2, 0, "prism2_param" },
+#if WIRELESS_EXT >= 12
+	{ PRISM2_IOCTL_GET_PRISM2_PARAM,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getprism2_param" },
+#ifdef PRISM2_USE_WE_SUB_IOCTLS
+	/* --- sub-ioctls handlers --- */
+	{ PRISM2_IOCTL_PRISM2_PARAM,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "" },
+	{ PRISM2_IOCTL_GET_PRISM2_PARAM,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "" },
+	/* --- sub-ioctls definitions --- */
+	{ PRISM2_PARAM_PTYPE,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "ptype" },
+	{ PRISM2_PARAM_PTYPE,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getptype" },
+	{ PRISM2_PARAM_TXRATECTRL,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "txratectrl" },
+	{ PRISM2_PARAM_TXRATECTRL,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "gettxratectrl" },
+	{ PRISM2_PARAM_BEACON_INT,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "beacon_int" },
+	{ PRISM2_PARAM_BEACON_INT,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getbeacon_int" },
+#ifndef PRISM2_NO_STATION_MODES
+	{ PRISM2_PARAM_PSEUDO_IBSS,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "pseudo_ibss" },
+	{ PRISM2_PARAM_PSEUDO_IBSS,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getpseudo_ibss" },
+#endif /* PRISM2_NO_STATION_MODES */
+	{ PRISM2_PARAM_ALC,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "alc" },
+	{ PRISM2_PARAM_ALC,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getalc" },
+	{ PRISM2_PARAM_TXPOWER,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "txpower" },
+	{ PRISM2_PARAM_TXPOWER,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getxpower" },
+	{ PRISM2_PARAM_DUMP,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "dump" },
+	{ PRISM2_PARAM_DUMP,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getdump" },
+	{ PRISM2_PARAM_OTHER_AP_POLICY,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "other_ap_policy" },
+	{ PRISM2_PARAM_OTHER_AP_POLICY,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getother_ap_pol" },
+	{ PRISM2_PARAM_AP_MAX_INACTIVITY,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "max_inactivity" },
+	{ PRISM2_PARAM_AP_MAX_INACTIVITY,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getmax_inactivi" },
+	{ PRISM2_PARAM_AP_BRIDGE_PACKETS,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "bridge_packets" },
+	{ PRISM2_PARAM_AP_BRIDGE_PACKETS,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getbridge_packe" },
+	{ PRISM2_PARAM_DTIM_PERIOD,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "dtim_period" },
+	{ PRISM2_PARAM_DTIM_PERIOD,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getdtim_period" },
+	{ PRISM2_PARAM_AP_NULLFUNC_ACK,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "nullfunc_ack" },
+	{ PRISM2_PARAM_AP_NULLFUNC_ACK,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getnullfunc_ack" },
+	{ PRISM2_PARAM_MAX_WDS,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "max_wds" },
+	{ PRISM2_PARAM_MAX_WDS,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getmax_wds" },
+	{ PRISM2_PARAM_AP_AUTOM_AP_WDS,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "autom_ap_wds" },
+	{ PRISM2_PARAM_AP_AUTOM_AP_WDS,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getautom_ap_wds" },
+	{ PRISM2_PARAM_AP_AUTH_ALGS,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "ap_auth_algs" },
+	{ PRISM2_PARAM_AP_AUTH_ALGS,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getap_auth_algs" },
+	{ PRISM2_PARAM_MONITOR_ALLOW_FCSERR,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "allow_fcserr" },
+	{ PRISM2_PARAM_MONITOR_ALLOW_FCSERR,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getallow_fcserr" },
+	{ PRISM2_PARAM_HOST_ENCRYPT,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "host_encrypt" },
+	{ PRISM2_PARAM_HOST_ENCRYPT,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "gethost_encrypt" },
+	{ PRISM2_PARAM_HOST_DECRYPT,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "host_decrypt" },
+	{ PRISM2_PARAM_HOST_DECRYPT,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "gethost_decrypt" },
+	{ PRISM2_PARAM_BUS_MASTER_THRESHOLD_RX,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "busmaster_rx" },
+	{ PRISM2_PARAM_BUS_MASTER_THRESHOLD_RX,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getbusmaster_rx" },
+	{ PRISM2_PARAM_BUS_MASTER_THRESHOLD_TX,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "busmaster_tx" },
+	{ PRISM2_PARAM_BUS_MASTER_THRESHOLD_TX,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getbusmaster_tx" },
+#ifndef PRISM2_NO_STATION_MODES
+	{ PRISM2_PARAM_HOST_ROAMING,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "host_roaming" },
+	{ PRISM2_PARAM_HOST_ROAMING,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "gethost_roaming" },
+#endif /* PRISM2_NO_STATION_MODES */
+	{ PRISM2_PARAM_BCRX_STA_KEY,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "bcrx_sta_key" },
+	{ PRISM2_PARAM_BCRX_STA_KEY,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getbcrx_sta_key" },
+	{ PRISM2_PARAM_IEEE_802_1X,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "ieee_802_1x" },
+	{ PRISM2_PARAM_IEEE_802_1X,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getieee_802_1x" },
+	{ PRISM2_PARAM_ANTSEL_TX,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "antsel_tx" },
+	{ PRISM2_PARAM_ANTSEL_TX,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getantsel_tx" },
+	{ PRISM2_PARAM_ANTSEL_RX,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "antsel_rx" },
+	{ PRISM2_PARAM_ANTSEL_RX,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getantsel_rx" },
+	{ PRISM2_PARAM_MONITOR_TYPE,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "monitor_type" },
+	{ PRISM2_PARAM_MONITOR_TYPE,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getmonitor_type" },
+	{ PRISM2_PARAM_WDS_TYPE,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "wds_type" },
+	{ PRISM2_PARAM_WDS_TYPE,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getwds_type" },
+	{ PRISM2_PARAM_HOSTSCAN,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "hostscan" },
+	{ PRISM2_PARAM_HOSTSCAN,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "gethostscan" },
+	{ PRISM2_PARAM_AP_SCAN,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "ap_scan" },
+	{ PRISM2_PARAM_AP_SCAN,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getap_scan" },
+	{ PRISM2_PARAM_ENH_SEC,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "enh_sec" },
+	{ PRISM2_PARAM_ENH_SEC,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getenh_sec" },
+#ifdef PRISM2_IO_DEBUG
+	{ PRISM2_PARAM_IO_DEBUG,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "io_debug" },
+	{ PRISM2_PARAM_IO_DEBUG,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getio_debug" },
+#endif /* PRISM2_IO_DEBUG */
+	{ PRISM2_PARAM_BASIC_RATES,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "basic_rates" },
+	{ PRISM2_PARAM_BASIC_RATES,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getbasic_rates" },
+	{ PRISM2_PARAM_OPER_RATES,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "oper_rates" },
+	{ PRISM2_PARAM_OPER_RATES,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "getoper_rates" },
+	{ PRISM2_PARAM_HOSTAPD,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "hostapd" },
+	{ PRISM2_PARAM_HOSTAPD,
+	  0, IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, "gethostapd" },
+#endif /* PRISM2_USE_WE_SUB_IOCTLS */
+#endif /* WIRELESS_EXT >= 12 */
+};
+
+
+#if WIRELESS_EXT <= 12
+static int prism2_ioctl_giwpriv(struct net_device *dev, struct iw_point *data)
+{
+
+	if (!data->pointer ||
+	    verify_area(VERIFY_WRITE, data->pointer, sizeof(prism2_priv)))
+		return -EINVAL;
+
+	data->length = sizeof(prism2_priv) / sizeof(prism2_priv[0]);
+	if (copy_to_user(data->pointer, prism2_priv, sizeof(prism2_priv)))
+		return -EINVAL;
+	return 0;
+}
+#endif /* WIRELESS_EXT <= 12 */
+
+
+static int prism2_ioctl_priv_inquire(struct net_device *dev, int *i)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+
+	if (local->func->cmd(dev, HFA384X_CMDCODE_INQUIRE, *i, NULL, NULL))
+		return -EOPNOTSUPP;
+
+	return 0;
+}
+
+
+static int prism2_ioctl_priv_prism2_param(struct net_device *dev,
+					  struct iw_request_info *info,
+					  void *wrqu, char *extra)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int *i = (int *) extra;
+	int param = *i;
+	int value = *(i + 1);
+	int ret = 0;
+	u16 val;
+
+	switch (param) {
+	case PRISM2_PARAM_PTYPE:
+		if (hostap_set_word(dev, HFA384X_RID_CNFPORTTYPE, value)) {
+			ret = -EOPNOTSUPP;
+			break;
+		}
+
+		if (local->func->reset_port(dev))
+			ret = -EINVAL;
+		break;
+
+	case PRISM2_PARAM_TXRATECTRL:
+		local->fw_tx_rate_control = value;
+		break;
+
+	case PRISM2_PARAM_BEACON_INT:
+		if (hostap_set_word(dev, HFA384X_RID_CNFBEACONINT, value) ||
+		    local->func->reset_port(dev))
+			ret = -EINVAL;
+		else
+			local->beacon_int = value;
+		break;
+
+#ifndef PRISM2_NO_STATION_MODES
+	case PRISM2_PARAM_PSEUDO_IBSS:
+		if (value == local->pseudo_adhoc)
+			break;
+
+		if (value != 0 && value != 1) {
+			ret = -EINVAL;
+			break;
+		}
+
+		printk(KERN_DEBUG "prism2: %s: pseudo IBSS change %d -> %d\n",
+		       dev->name, local->pseudo_adhoc, value);
+		local->pseudo_adhoc = value;
+		if (local->iw_mode != IW_MODE_ADHOC)
+			break;
+
+		if (hostap_set_word(dev, HFA384X_RID_CNFPORTTYPE,
+				    hostap_get_porttype(local))) {
+			ret = -EOPNOTSUPP;
+			break;
+		}
+
+		if (local->func->reset_port(dev))
+			ret = -EINVAL;
+		break;
+#endif /* PRISM2_NO_STATION_MODES */
+
+	case PRISM2_PARAM_ALC:
+		printk(KERN_DEBUG "%s: %s ALC\n", dev->name,
+		       value == 0 ? "Disabling" : "Enabling");
+		val = HFA384X_TEST_CFG_BIT_ALC;
+		local->func->cmd(dev, HFA384X_CMDCODE_TEST |
+				 (HFA384X_TEST_CFG_BITS << 8),
+				 value == 0 ? 0 : 1, &val, NULL);
+		break;
+
+	case PRISM2_PARAM_TXPOWER:
+		val = value;
+		if (local->func->cmd(dev, HFA384X_CMDCODE_WRITEMIF,
+				     HFA386X_CR_MANUAL_TX_POWER, &val, NULL))
+			ret = -EOPNOTSUPP;
+		break;
+
+	case PRISM2_PARAM_DUMP:
+		local->frame_dump = value;
+		break;
+
+	case PRISM2_PARAM_OTHER_AP_POLICY:
+		if (value < 0 || value > 3) {
+			ret = -EINVAL;
+			break;
+		}
+		if (local->ap != NULL)
+			local->ap->ap_policy = value;
+		break;
+
+	case PRISM2_PARAM_AP_MAX_INACTIVITY:
+		if (value < 0 || value > 7 * 24 * 60 * 60) {
+			ret = -EINVAL;
+			break;
+		}
+		if (local->ap != NULL)
+			local->ap->max_inactivity = value * HZ;
+		break;
+
+	case PRISM2_PARAM_AP_BRIDGE_PACKETS:
+		if (local->ap != NULL)
+			local->ap->bridge_packets = value;
+		break;
+
+	case PRISM2_PARAM_DTIM_PERIOD:
+		if (value < 0 || value > 65535) {
+			ret = -EINVAL;
+			break;
+		}
+		if (hostap_set_word(dev, HFA384X_RID_CNFOWNDTIMPERIOD, value)
+		    || local->func->reset_port(dev))
+			ret = -EINVAL;
+		else
+			local->dtim_period = value;
+		break;
+
+	case PRISM2_PARAM_AP_NULLFUNC_ACK:
+		if (local->ap != NULL)
+			local->ap->nullfunc_ack = value;
+		break;
+
+	case PRISM2_PARAM_MAX_WDS:
+		local->wds_max_connections = value;
+		break;
+
+	case PRISM2_PARAM_AP_AUTOM_AP_WDS:
+		if (local->ap != NULL) {
+			if (!local->ap->autom_ap_wds && value) {
+				/* add WDS link to all APs in STA table */
+				hostap_add_wds_links(local);
+			}
+			local->ap->autom_ap_wds = value;
+		}
+		break;
+
+	case PRISM2_PARAM_AP_AUTH_ALGS:
+		local->auth_algs = value;
+		if (hostap_set_auth_algs(local))
+			ret = -EINVAL;
+		break;
+
+	case PRISM2_PARAM_MONITOR_ALLOW_FCSERR:
+		local->monitor_allow_fcserr = value;
+		break;
+
+	case PRISM2_PARAM_HOST_ENCRYPT:
+		local->host_encrypt = value;
+		if (hostap_set_encryption(local) ||
+		    local->func->reset_port(dev))
+			ret = -EINVAL;
+		break;
+
+	case PRISM2_PARAM_HOST_DECRYPT:
+		local->host_decrypt = value;
+		if (hostap_set_encryption(local) ||
+		    local->func->reset_port(dev))
+			ret = -EINVAL;
+		break;
+
+	case PRISM2_PARAM_BUS_MASTER_THRESHOLD_RX:
+		local->bus_master_threshold_rx = value;
+		break;
+
+	case PRISM2_PARAM_BUS_MASTER_THRESHOLD_TX:
+		local->bus_master_threshold_tx = value;
+		break;
+
+#ifndef PRISM2_NO_STATION_MODES
+	case PRISM2_PARAM_HOST_ROAMING:
+		if (value < 0 || value > 2) {
+			ret = -EINVAL;
+			break;
+		}
+		local->host_roaming = value;
+		if (hostap_set_roaming(local) || local->func->reset_port(dev))
+			ret = -EINVAL;
+		break;
+#endif /* PRISM2_NO_STATION_MODES */
+
+	case PRISM2_PARAM_BCRX_STA_KEY:
+		local->bcrx_sta_key = value;
+		break;
+
+	case PRISM2_PARAM_IEEE_802_1X:
+		local->ieee_802_1x = value;
+		break;
+
+	case PRISM2_PARAM_ANTSEL_TX:
+		if (value < 0 || value > HOSTAP_ANTSEL_HIGH) {
+			ret = -EINVAL;
+			break;
+		}
+		local->antsel_tx = value;
+		hostap_set_antsel(local);
+		break;
+
+	case PRISM2_PARAM_ANTSEL_RX:
+		if (value < 0 || value > HOSTAP_ANTSEL_HIGH) {
+			ret = -EINVAL;
+			break;
+		}
+		local->antsel_rx = value;
+		hostap_set_antsel(local);
+		break;
+
+	case PRISM2_PARAM_MONITOR_TYPE:
+		if (value != PRISM2_MONITOR_80211 &&
+		    value != PRISM2_MONITOR_CAPHDR &&
+		    value != PRISM2_MONITOR_PRISM) {
+			ret = -EINVAL;
+			break;
+		}
+		local->monitor_type = value;
+		if (local->iw_mode == IW_MODE_MONITOR)
+			hostap_monitor_set_type(local);
+		break;
+
+	case PRISM2_PARAM_WDS_TYPE:
+		local->wds_type = value;
+		break;
+
+	case PRISM2_PARAM_HOSTSCAN:
+	{
+		struct hfa384x_hostscan_request scan_req;
+		u16 rate;
+
+		memset(&scan_req, 0, sizeof(scan_req));
+		scan_req.channel_list = __constant_cpu_to_le16(0x3fff);
+		switch (value) {
+		case 1: rate = HFA384X_RATES_1MBPS; break;
+		case 2: rate = HFA384X_RATES_2MBPS; break;
+		case 3: rate = HFA384X_RATES_5MBPS; break;
+		case 4: rate = HFA384X_RATES_11MBPS; break;
+		default: rate = HFA384X_RATES_1MBPS; break;
+		}
+		scan_req.txrate = cpu_to_le16(rate);
+		/* leave SSID empty to accept all SSIDs */
+
+		if (local->iw_mode == IW_MODE_MASTER) {
+			if (hostap_set_word(dev, HFA384X_RID_CNFPORTTYPE,
+					    HFA384X_PORTTYPE_BSS) ||
+			    local->func->reset_port(dev))
+				printk(KERN_DEBUG "Leaving Host AP mode "
+				       "for HostScan failed\n");
+		}
+
+		if (local->func->set_rid(dev, HFA384X_RID_HOSTSCAN, &scan_req,
+					 sizeof(scan_req))) {
+			printk(KERN_DEBUG "HOSTSCAN failed\n");
+			ret = -EINVAL;
+		}
+		if (local->iw_mode == IW_MODE_MASTER) {
+			wait_queue_t __wait;
+			init_waitqueue_entry(&__wait, current);
+			add_wait_queue(&local->hostscan_wq, &__wait);
+			set_current_state(TASK_INTERRUPTIBLE);
+			schedule_timeout(HZ);
+			if (signal_pending(current))
+				ret = -EINTR;
+			set_current_state(TASK_RUNNING);
+			remove_wait_queue(&local->hostscan_wq, &__wait);
+
+			if (hostap_set_word(dev, HFA384X_RID_CNFPORTTYPE,
+					    HFA384X_PORTTYPE_HOSTAP) ||
+			    local->func->reset_port(dev))
+				printk(KERN_DEBUG "Returning to Host AP mode "
+				       "after HostScan failed\n");
+		}
+		break;
+	}
+
+	case PRISM2_PARAM_AP_SCAN:
+		local->passive_scan_interval = value;
+		if (timer_pending(&local->passive_scan_timer))
+			del_timer(&local->passive_scan_timer);
+		if (value > 0) {
+			local->passive_scan_timer.expires = jiffies +
+				local->passive_scan_interval * HZ;
+			add_timer(&local->passive_scan_timer);
+		}
+		break;
+
+	case PRISM2_PARAM_ENH_SEC:
+		if (value < 0 || value > 3) {
+			ret = -EINVAL;
+			break;
+		}
+		local->enh_sec = value;
+		if (hostap_set_word(dev, HFA384X_RID_CNFENHSECURITY,
+				    local->enh_sec) ||
+		    local->func->reset_port(dev)) {
+			printk(KERN_INFO "%s: cnfEnhSecurity requires STA f/w "
+			       "1.6.3 or newer\n", dev->name);
+			ret = -EOPNOTSUPP;
+		}
+		break;
+
+#ifdef PRISM2_IO_DEBUG
+	case PRISM2_PARAM_IO_DEBUG:
+		local->io_debug_enabled = value;
+		break;
+#endif /* PRISM2_IO_DEBUG */
+
+	case PRISM2_PARAM_BASIC_RATES:
+		if ((value & local->tx_rate_control) != value || value == 0) {
+			printk(KERN_INFO "%s: invalid basic rate set - basic "
+			       "rates must be in supported rate set\n",
+			       dev->name);
+			ret = -EINVAL;
+			break;
+		}
+		local->basic_rates = value;
+		if (hostap_set_word(dev, HFA384X_RID_CNFBASICRATES,
+				    local->basic_rates) ||
+		    local->func->reset_port(dev))
+			ret = -EINVAL;
+		break;
+
+	case PRISM2_PARAM_OPER_RATES:
+		local->tx_rate_control = value;
+		if (hostap_set_rate(dev))
+			ret = -EINVAL;
+		break;
+
+	case PRISM2_PARAM_HOSTAPD:
+		ret = hostap_set_hostapd(local, value, 1);
+		break;
+
+	default:
+		printk(KERN_DEBUG "%s: prism2_param: unknown param %d\n",
+		       dev->name, param);
+		ret = -EOPNOTSUPP;
+		break;
+	}
+
+	return ret;
+}
+
+
+#if WIRELESS_EXT >= 12
+static int prism2_ioctl_priv_get_prism2_param(struct net_device *dev,
+					      struct iw_request_info *info,
+					      void *wrqu, char *extra)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int *param = (int *) extra;
+	int ret = 0;
+	u16 val;
+
+	switch (*param) {
+	case PRISM2_PARAM_PTYPE:
+		if (local->func->get_rid(dev, HFA384X_RID_CNFPORTTYPE,
+					 &val, 2, 1) < 0)
+			ret = -EINVAL;
+		else
+			*param = le16_to_cpu(val);
+		break;
+
+	case PRISM2_PARAM_TXRATECTRL:
+		*param = local->fw_tx_rate_control;
+		break;
+
+	case PRISM2_PARAM_BEACON_INT:
+		*param = local->beacon_int;
+		break;
+
+	case PRISM2_PARAM_PSEUDO_IBSS:
+		*param = local->pseudo_adhoc;
+		break;
+
+	case PRISM2_PARAM_ALC:
+		ret = -EOPNOTSUPP; /* FIX */
+		break;
+
+	case PRISM2_PARAM_TXPOWER:
+		if (local->func->cmd(dev, HFA384X_CMDCODE_READMIF,
+				HFA386X_CR_MANUAL_TX_POWER, NULL, &val))
+			ret = -EOPNOTSUPP;
+		*param = val;
+		break;
+
+	case PRISM2_PARAM_DUMP:
+		*param = local->frame_dump;
+		break;
+
+	case PRISM2_PARAM_OTHER_AP_POLICY:
+		if (local->ap != NULL)
+			*param = local->ap->ap_policy;
+		else
+			ret = -EOPNOTSUPP;
+		break;
+
+	case PRISM2_PARAM_AP_MAX_INACTIVITY:
+		if (local->ap != NULL)
+			*param = local->ap->max_inactivity / HZ;
+		else
+			ret = -EOPNOTSUPP;
+		break;
+
+	case PRISM2_PARAM_AP_BRIDGE_PACKETS:
+		if (local->ap != NULL)
+			*param = local->ap->bridge_packets;
+		else
+			ret = -EOPNOTSUPP;
+		break;
+
+	case PRISM2_PARAM_DTIM_PERIOD:
+		*param = local->dtim_period;
+		break;
+
+	case PRISM2_PARAM_AP_NULLFUNC_ACK:
+		if (local->ap != NULL)
+			*param = local->ap->nullfunc_ack;
+		else
+			ret = -EOPNOTSUPP;
+		break;
+
+	case PRISM2_PARAM_MAX_WDS:
+		*param = local->wds_max_connections;
+		break;
+
+	case PRISM2_PARAM_AP_AUTOM_AP_WDS:
+		if (local->ap != NULL)
+			*param = local->ap->autom_ap_wds;
+		else
+			ret = -EOPNOTSUPP;
+		break;
+
+	case PRISM2_PARAM_AP_AUTH_ALGS:
+		*param = local->auth_algs;
+		break;
+
+	case PRISM2_PARAM_MONITOR_ALLOW_FCSERR:
+		*param = local->monitor_allow_fcserr;
+		break;
+
+	case PRISM2_PARAM_HOST_ENCRYPT:
+		*param = local->host_encrypt;
+		break;
+
+	case PRISM2_PARAM_HOST_DECRYPT:
+		*param = local->host_decrypt;
+		break;
+
+	case PRISM2_PARAM_BUS_MASTER_THRESHOLD_RX:
+		*param = local->bus_master_threshold_rx;
+		break;
+
+	case PRISM2_PARAM_BUS_MASTER_THRESHOLD_TX:
+		*param = local->bus_master_threshold_tx;
+		break;
+
+	case PRISM2_PARAM_HOST_ROAMING:
+		*param = local->host_roaming;
+		break;
+
+	case PRISM2_PARAM_BCRX_STA_KEY:
+		*param = local->bcrx_sta_key;
+		break;
+
+	case PRISM2_PARAM_IEEE_802_1X:
+		*param = local->ieee_802_1x;
+		break;
+
+	case PRISM2_PARAM_ANTSEL_TX:
+		*param = local->antsel_tx;
+		break;
+
+	case PRISM2_PARAM_ANTSEL_RX:
+		*param = local->antsel_rx;
+		break;
+
+	case PRISM2_PARAM_MONITOR_TYPE:
+		*param = local->monitor_type;
+		break;
+
+	case PRISM2_PARAM_WDS_TYPE:
+		*param = local->wds_type;
+		break;
+
+	case PRISM2_PARAM_HOSTSCAN:
+		ret = -EOPNOTSUPP;
+		break;
+
+	case PRISM2_PARAM_AP_SCAN:
+		*param = local->passive_scan_interval;
+		break;
+
+	case PRISM2_PARAM_ENH_SEC:
+		*param = local->enh_sec;
+		break;
+
+#ifdef PRISM2_IO_DEBUG
+	case PRISM2_PARAM_IO_DEBUG:
+		*param = local->io_debug_enabled;
+		break;
+#endif /* PRISM2_IO_DEBUG */
+
+	case PRISM2_PARAM_BASIC_RATES:
+		*param = local->basic_rates;
+		break;
+
+	case PRISM2_PARAM_OPER_RATES:
+		*param = local->tx_rate_control;
+		break;
+
+	case PRISM2_PARAM_HOSTAPD:
+		*param = local->hostapd;
+		break;
+
+	default:
+		printk(KERN_DEBUG "%s: get_prism2_param: unknown param %d\n",
+		       dev->name, *param);
+		ret = -EOPNOTSUPP;
+		break;
+	}
+
+	return ret;
+}
+#endif /* WIRELESS_EXT >= 12 */
+
+
+static int prism2_ioctl_priv_readmif(struct net_device *dev,
+				     struct iw_request_info *info,
+				     void *wrqu, char *extra)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	u16 resp0;
+
+	if (local->func->cmd(dev, HFA384X_CMDCODE_READMIF, *extra, NULL,
+			     &resp0))
+		return -EOPNOTSUPP;
+	else
+		*extra = resp0;
+
+	return 0;
+}
+
+
+static int prism2_ioctl_priv_writemif(struct net_device *dev,
+				      struct iw_request_info *info,
+				      void *wrqu, char *extra)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	u16 cr, val;
+
+	cr = *extra;
+	val = *(extra + 1);
+	if (local->func->cmd(dev, HFA384X_CMDCODE_WRITEMIF, cr, &val, NULL))
+		return -EOPNOTSUPP;
+
+	return 0;
+}
+
+
+static int prism2_ioctl_priv_monitor(struct net_device *dev, int *i)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int ret = 0;
+	u32 mode;
+
+	printk(KERN_DEBUG "%s: process %d (%s) used deprecated iwpriv monitor "
+	       "- update software to use iwconfig mode monitor\n",
+	       dev->name, current->pid, current->comm);
+
+	/* Backward compatibility code - this can be removed at some point */
+
+	if (*i == 0) {
+		/* Disable monitor mode - old mode was not saved, so go to
+		 * Master mode */
+		mode = IW_MODE_MASTER;
+		ret = prism2_ioctl_siwmode(dev, NULL, &mode, NULL);
+	} else if (*i == 1) {
+		/* netlink socket mode is not supported anymore since it did
+		 * not separate different devices from each other and was not
+		 * best method for delivering large amount of packets to
+		 * user space */
+		ret = -EOPNOTSUPP;
+	} else if (*i == 2 || *i == 3) {
+		switch (*i) {
+		case 2:
+			local->monitor_type = PRISM2_MONITOR_80211;
+			break;
+		case 3:
+			local->monitor_type = PRISM2_MONITOR_PRISM;
+			break;
+		}
+		mode = IW_MODE_MONITOR;
+		ret = prism2_ioctl_siwmode(dev, NULL, &mode, NULL);
+		hostap_monitor_mode_enable(local);
+	} else
+		ret = -EINVAL;
+
+	return ret;
+}
+
+
+static int prism2_ioctl_priv_reset(struct net_device *dev, int *i)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+
+	printk(KERN_DEBUG "%s: manual reset request(%d)\n", dev->name, *i);
+	switch (*i) {
+	case 0:
+		/* Disable and enable card */
+		local->func->hw_shutdown(dev, 1);
+		local->func->hw_config(dev, 0);
+		break;
+
+	case 1:
+		/* COR sreset */
+		local->func->hw_reset(dev);
+		break;
+
+	case 2:
+		/* Disable and enable port 0 */
+		local->func->reset_port(dev);
+		break;
+
+	case 3:
+		if (local->func->cmd(dev, HFA384X_CMDCODE_DISABLE, 0, NULL,
+				     NULL))
+			return -EINVAL;
+		break;
+
+	case 4:
+		if (local->func->cmd(dev, HFA384X_CMDCODE_ENABLE, 0, NULL,
+				     NULL))
+			return -EINVAL;
+		break;
+
+	default:
+		printk(KERN_DEBUG "Unknown reset request %d\n", *i);
+		return -EOPNOTSUPP;
+	}
+
+	return 0;
+}
+
+
+#ifndef PRISM2_USE_WE_TYPE_ADDR
+static inline int hex2int(char c)
+{
+	if (c >= '0' && c <= '9')
+		return (c - '0');
+	if (c >= 'a' && c <= 'f')
+		return (c - 'a' + 10);
+	if (c >= 'A' && c <= 'F')
+		return (c - 'A' + 10);
+	return -1;
+}
+
+static int macstr2addr(char *macstr, u8 *addr)
+{
+	int i, val, val2;
+	char *pos = macstr;
+
+	for (i = 0; i < 6; i++) {
+		val = hex2int(*pos++);
+		if (val < 0)
+			return -1;
+		val2 = hex2int(*pos++);
+		if (val2 < 0)
+			return -1;
+		addr[i] = (val * 16 + val2) & 0xff;
+
+		if (i < 5 && *pos++ != ':')
+			return -1;
+	}
+
+	return 0;
+}
+
+
+static int prism2_ioctl_priv_wds(struct net_device *dev, int add, char *macstr)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	u8 addr[6];
+
+	if (macstr2addr(macstr, addr)) {
+		printk(KERN_DEBUG "Invalid MAC address\n");
+		return -EINVAL;
+	}
+
+	if (add)
+		return prism2_wds_add(local, addr, 1);
+	else
+		return prism2_wds_del(local, addr, 1, 0);
+}
+#endif /* PRISM2_USE_WE_TYPE_ADDR */
+
+
+static int prism2_ioctl_priv_set_rid_word(struct net_device *dev, int *i)
+{
+	int rid = *i;
+	int value = *(i + 1);
+
+	printk(KERN_DEBUG "%s: Set RID[0x%X] = %d\n", dev->name, rid, value);
+
+	if (hostap_set_word(dev, rid, value))
+		return -EINVAL;
+
+	return 0;
+}
+
+
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+static int ap_mac_cmd_ioctl(local_info_t *local, int *cmd)
+{
+	int ret = 0;
+
+	switch (*cmd) {
+	case AP_MAC_CMD_POLICY_OPEN:
+		local->ap->mac_restrictions.policy = MAC_POLICY_OPEN;
+		break;
+	case AP_MAC_CMD_POLICY_ALLOW:
+		local->ap->mac_restrictions.policy = MAC_POLICY_ALLOW;
+		break;
+	case AP_MAC_CMD_POLICY_DENY:
+		local->ap->mac_restrictions.policy = MAC_POLICY_DENY;
+		break;
+	case AP_MAC_CMD_FLUSH:
+		ap_control_flush_macs(&local->ap->mac_restrictions);
+		break;
+	case AP_MAC_CMD_KICKALL:
+		ap_control_kickall(local->ap);
+		hostap_deauth_all_stas(local->dev, local->ap, 0);
+		break;
+	default:
+		ret = -EOPNOTSUPP;
+		break;
+	}
+
+	return ret;
+}
+
+
+enum { AP_CTRL_MAC_ADD, AP_CTRL_MAC_DEL, AP_CTRL_MAC_KICK };
+
+#ifndef PRISM2_USE_WE_TYPE_ADDR
+static int ap_mac_ioctl(local_info_t *local, char *macstr, int cmd)
+{
+	u8 addr[6];
+
+	if (macstr2addr(macstr, addr)) {
+		printk(KERN_DEBUG "Invalid MAC address '%s'\n", macstr);
+		return -EINVAL;
+	}
+
+	switch (cmd) {
+	case AP_CTRL_MAC_ADD:
+		return ap_control_add_mac(&local->ap->mac_restrictions, addr);
+	case AP_CTRL_MAC_DEL:
+		return ap_control_del_mac(&local->ap->mac_restrictions, addr);
+	case AP_CTRL_MAC_KICK:
+		return ap_control_kick_mac(local->ap, local->dev, addr);
+	default:
+		return -EOPNOTSUPP;
+	}
+}
+#endif /* PRISM2_USE_WE_TYPE_ADDR */
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+
+
+#ifdef PRISM2_DOWNLOAD_SUPPORT
+static int prism2_ioctl_priv_download(local_info_t *local, struct iw_point *p)
+{
+	struct prism2_download_param *param;
+	int ret = 0;
+
+	if (p->length < sizeof(struct prism2_download_param) ||
+	    p->length > 1024 || !p->pointer)
+		return -EINVAL;
+
+	param = (struct prism2_download_param *)
+		kmalloc(p->length, GFP_KERNEL);
+	if (param == NULL)
+		return -ENOMEM;
+
+	if (copy_from_user(param, p->pointer, p->length)) {
+		ret = -EFAULT;
+		goto out;
+	}
+
+	if (p->length < sizeof(struct prism2_download_param) +
+	    param->num_areas * sizeof(struct prism2_download_area)) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	ret = local->func->download(local, param);
+
+ out:
+	if (param != NULL)
+		kfree(param);
+
+	return ret;
+}
+#endif /* PRISM2_DOWNLOAD_SUPPORT */
+
+
+static int prism2_ioctl_set_encryption(local_info_t *local,
+				       struct prism2_hostapd_param *param,
+				       int param_len)
+{
+	int ret = 0;
+	struct hostap_crypto_ops *ops;
+	struct prism2_crypt_data **crypt;
+	void *sta_ptr;
+
+	param->u.crypt.err = 0;
+	param->u.crypt.alg[HOSTAP_CRYPT_ALG_NAME_LEN - 1] = '\0';
+
+	if (param_len !=
+	    (int) ((char *) param->u.crypt.key - (char *) param) +
+	    param->u.crypt.key_len)
+		return -EINVAL;
+
+	if (param->sta_addr[0] == 0xff && param->sta_addr[1] == 0xff &&
+	    param->sta_addr[2] == 0xff && param->sta_addr[3] == 0xff &&
+	    param->sta_addr[4] == 0xff && param->sta_addr[5] == 0xff) {
+		sta_ptr = NULL;
+		crypt = &local->crypt;
+	} else {
+		sta_ptr = ap_crypt_get_ptrs(
+			local->ap, param->sta_addr,
+			(param->u.crypt.flags & HOSTAP_CRYPT_FLAG_PERMANENT),
+			&crypt);
+
+		if (sta_ptr == NULL) {
+			param->u.crypt.err = HOSTAP_CRYPT_ERR_UNKNOWN_ADDR;
+			return -EINVAL;
+		}
+	}
+
+	if (strcmp(param->u.crypt.alg, "none") == 0) {
+		prism2_crypt_delayed_deinit(local, crypt);
+		goto done;
+	}
+
+	ops = hostap_get_crypto_ops(param->u.crypt.alg);
+	if (ops == NULL && strcmp(param->u.crypt.alg, "WEP") == 0) {
+		request_module("hostap_crypt_wep");
+		ops = hostap_get_crypto_ops(param->u.crypt.alg);
+	}
+	if (ops == NULL) {
+		printk(KERN_DEBUG "%s: unknown crypto alg '%s'\n",
+		       local->dev->name, param->u.crypt.alg);
+		param->u.crypt.err = HOSTAP_CRYPT_ERR_UNKNOWN_ALG;
+		ret = -EINVAL;
+		goto done;
+	}
+
+	/* station based encryption and other than WEP algorithms require
+	 * host-based encryption, so force them on automatically */
+	local->host_decrypt = local->host_encrypt = 1;
+
+	if (*crypt == NULL || (*crypt)->ops != ops) {
+		struct prism2_crypt_data *new_crypt;
+
+		prism2_crypt_delayed_deinit(local, crypt);
+
+		new_crypt = (struct prism2_crypt_data *)
+			kmalloc(sizeof(struct prism2_crypt_data), GFP_KERNEL);
+		if (new_crypt == NULL) {
+			ret = -ENOMEM;
+			goto done;
+		}
+		memset(new_crypt, 0, sizeof(struct prism2_crypt_data));
+		new_crypt->ops = ops;
+		new_crypt->priv = new_crypt->ops->init();
+		if (new_crypt->priv == NULL) {
+			kfree(new_crypt);
+			param->u.crypt.err =
+				HOSTAP_CRYPT_ERR_CRYPT_INIT_FAILED;
+			ret = -EINVAL;
+			goto done;
+		}
+
+		*crypt = new_crypt;
+	}
+
+	if ((!(param->u.crypt.flags & HOSTAP_CRYPT_FLAG_SET_TX_KEY) ||
+	     param->u.crypt.key_len > 0) && (*crypt)->ops->set_key &&
+	    (*crypt)->ops->set_key(param->u.crypt.idx, param->u.crypt.key,
+			      param->u.crypt.key_len, (*crypt)->priv) < 0) {
+		printk(KERN_DEBUG "%s: key setting failed\n",
+		       local->dev->name);
+		param->u.crypt.err = HOSTAP_CRYPT_ERR_KEY_SET_FAILED;
+		ret = -EINVAL;
+		goto done;
+	}
+
+	if ((param->u.crypt.flags & HOSTAP_CRYPT_FLAG_SET_TX_KEY) &&
+	    (*crypt)->ops->set_key_idx &&
+	    (*crypt)->ops->set_key_idx(param->u.crypt.idx, (*crypt)->priv) < 0)
+	{
+		printk(KERN_DEBUG "%s: TX key idx setting failed\n",
+		       local->dev->name);
+		param->u.crypt.err = HOSTAP_CRYPT_ERR_TX_KEY_SET_FAILED;
+		ret = -EINVAL;
+		goto done;
+	}
+
+ done:
+	if (sta_ptr)
+		hostap_handle_sta_release(sta_ptr);
+
+	if (ret == 0 &&
+	    (hostap_set_encryption(local) ||
+	     local->func->reset_port(local->dev))) {
+		param->u.crypt.err = HOSTAP_CRYPT_ERR_CARD_CONF_FAILED;
+		return -EINVAL;
+	}
+
+	return ret;
+}
+
+
+static int prism2_ioctl_get_encryption(local_info_t *local,
+				       struct prism2_hostapd_param *param,
+				       int param_len)
+{
+	struct prism2_crypt_data **crypt;
+	void *sta_ptr;
+	int max_key_len;
+
+	param->u.crypt.err = 0;
+
+	max_key_len = param_len -
+		(int) ((char *) param->u.crypt.key - (char *) param);
+	if (max_key_len < 0)
+		return -EINVAL;
+
+	if (param->sta_addr[0] == 0xff && param->sta_addr[1] == 0xff &&
+	    param->sta_addr[2] == 0xff && param->sta_addr[3] == 0xff &&
+	    param->sta_addr[4] == 0xff && param->sta_addr[5] == 0xff) {
+		sta_ptr = NULL;
+		crypt = &local->crypt;
+	} else {
+		sta_ptr = ap_crypt_get_ptrs(local->ap, param->sta_addr, 0,
+					    &crypt);
+
+		if (sta_ptr == NULL) {
+			param->u.crypt.err = HOSTAP_CRYPT_ERR_UNKNOWN_ADDR;
+			return -EINVAL;
+		}
+	}
+
+	if (*crypt == NULL || (*crypt)->ops == NULL) {
+		memcpy(param->u.crypt.alg, "none", 5);
+		param->u.crypt.key_len = 0;
+		param->u.crypt.idx = 0xff;
+	} else {
+		strncpy(param->u.crypt.alg, (*crypt)->ops->name,
+			HOSTAP_CRYPT_ALG_NAME_LEN);
+		param->u.crypt.key_len = 0;
+		if (param->u.crypt.idx >= WEP_KEYS &&
+		    (*crypt)->ops->get_key_idx)
+			param->u.crypt.idx =
+				(*crypt)->ops->get_key_idx((*crypt)->priv);
+
+		if (param->u.crypt.idx < WEP_KEYS && (*crypt)->ops->get_key)
+			param->u.crypt.key_len =
+				(*crypt)->ops->get_key(param->u.crypt.idx,
+						       param->u.crypt.key,
+						       max_key_len,
+						       (*crypt)->priv);
+	}
+
+	if (sta_ptr)
+		hostap_handle_sta_release(sta_ptr);
+
+	return 0;
+}
+
+
+static int prism2_ioctl_get_rid(local_info_t *local,
+				struct prism2_hostapd_param *param,
+				int param_len)
+{
+	int max_len, res;
+
+	max_len = param_len - PRISM2_HOSTAPD_RID_HDR_LEN;
+	if (max_len < 0)
+		return -EINVAL;
+
+	res = local->func->get_rid(local->dev, param->u.rid.rid,
+				   param->u.rid.data, param->u.rid.len, 0);
+	if (res >= 0) {
+		param->u.rid.len = res;
+		return 0;
+	}
+
+	return res;
+}
+
+
+static int prism2_ioctl_set_rid(local_info_t *local,
+				struct prism2_hostapd_param *param,
+				int param_len)
+{
+	int max_len;
+
+	max_len = param_len - PRISM2_HOSTAPD_RID_HDR_LEN;
+	if (max_len < 0 || max_len < param->u.rid.len)
+		return -EINVAL;
+
+	return local->func->set_rid(local->dev, param->u.rid.rid,
+				    param->u.rid.data, param->u.rid.len);
+}
+
+
+static int prism2_ioctl_set_assoc_ap_addr(local_info_t *local,
+					  struct prism2_hostapd_param *param,
+					  int param_len)
+{
+	printk(KERN_DEBUG "%ssta: associated as client with AP " MACSTR "\n",
+	       local->dev->name, MAC2STR(param->sta_addr));
+	memcpy(local->assoc_ap_addr, param->sta_addr, ETH_ALEN);
+	return 0;
+}
+
+
+static int prism2_ioctl_priv_hostapd(local_info_t *local, struct iw_point *p)
+{
+	struct prism2_hostapd_param *param;
+	int ret = 0;
+	int ap_ioctl = 0;
+
+	if (p->length < sizeof(struct prism2_hostapd_param) ||
+	    p->length > PRISM2_HOSTAPD_MAX_BUF_SIZE || !p->pointer)
+		return -EINVAL;
+
+	param = (struct prism2_hostapd_param *) kmalloc(p->length, GFP_KERNEL);
+	if (param == NULL)
+		return -ENOMEM;
+
+	if (copy_from_user(param, p->pointer, p->length)) {
+		ret = -EFAULT;
+		goto out;
+	}
+
+	switch (param->cmd) {
+	case PRISM2_SET_ENCRYPTION:
+		ret = prism2_ioctl_set_encryption(local, param, p->length);
+		break;
+	case PRISM2_GET_ENCRYPTION:
+		ret = prism2_ioctl_get_encryption(local, param, p->length);
+		break;
+	case PRISM2_HOSTAPD_GET_RID:
+		ret = prism2_ioctl_get_rid(local, param, p->length);
+		break;
+	case PRISM2_HOSTAPD_SET_RID:
+		ret = prism2_ioctl_set_rid(local, param, p->length);
+		break;
+	case PRISM2_HOSTAPD_SET_ASSOC_AP_ADDR:
+		ret = prism2_ioctl_set_assoc_ap_addr(local, param, p->length);
+		break;
+	default:
+		ret = prism2_hostapd(local->ap, param);
+		ap_ioctl = 1;
+		break;
+	}
+
+	if (ret == 1 || !ap_ioctl) {
+		if (copy_to_user(p->pointer, param, p->length)) {
+			ret = -EFAULT;
+			goto out;
+		} else if (ap_ioctl)
+			ret = 0;
+	}
+
+ out:
+	if (param != NULL)
+		kfree(param);
+
+	return ret;
+}
+
+
+#if WIRELESS_EXT > 12
+/* Structures to export the Wireless Handlers */
+
+static const iw_handler prism2_handler[] =
+{
+	(iw_handler) NULL,				/* SIOCSIWCOMMIT */
+	(iw_handler) prism2_get_name,			/* SIOCGIWNAME */
+	(iw_handler) NULL,				/* SIOCSIWNWID */
+	(iw_handler) NULL,				/* SIOCGIWNWID */
+	(iw_handler) prism2_ioctl_siwfreq,		/* SIOCSIWFREQ */
+	(iw_handler) prism2_ioctl_giwfreq,		/* SIOCGIWFREQ */
+	(iw_handler) prism2_ioctl_siwmode,		/* SIOCSIWMODE */
+	(iw_handler) prism2_ioctl_giwmode,		/* SIOCGIWMODE */
+	(iw_handler) prism2_ioctl_siwsens,		/* SIOCSIWSENS */
+	(iw_handler) prism2_ioctl_giwsens,		/* SIOCGIWSENS */
+	(iw_handler) NULL /* not used */,		/* SIOCSIWRANGE */
+	(iw_handler) prism2_ioctl_giwrange,		/* SIOCGIWRANGE */
+	(iw_handler) NULL /* not used */,		/* SIOCSIWPRIV */
+	(iw_handler) NULL /* kernel code */,		/* SIOCGIWPRIV */
+	(iw_handler) NULL /* not used */,		/* SIOCSIWSTATS */
+	(iw_handler) NULL /* kernel code */,		/* SIOCGIWSTATS */
+#if WIRELESS_EXT > 15
+	iw_handler_set_spy,				/* SIOCSIWSPY */
+	iw_handler_get_spy,				/* SIOCGIWSPY */
+	iw_handler_set_thrspy,				/* SIOCSIWTHRSPY */
+	iw_handler_get_thrspy,				/* SIOCGIWTHRSPY */
+#else /* WIRELESS_EXT > 15 */
+	(iw_handler) NULL,				/* SIOCSIWSPY */
+	(iw_handler) prism2_ioctl_giwspy,		/* SIOCGIWSPY */
+	(iw_handler) NULL,				/* -- hole -- */
+	(iw_handler) NULL,				/* -- hole -- */
+#endif /* WIRELESS_EXT > 15 */
+	(iw_handler) prism2_ioctl_siwap,		/* SIOCSIWAP */
+	(iw_handler) prism2_ioctl_giwap,		/* SIOCGIWAP */
+	(iw_handler) NULL,				/* -- hole -- */
+	(iw_handler) prism2_ioctl_giwaplist,		/* SIOCGIWAPLIST */
+#if WIRELESS_EXT > 13
+	(iw_handler) prism2_ioctl_siwscan,		/* SIOCSIWSCAN */
+	(iw_handler) prism2_ioctl_giwscan,		/* SIOCGIWSCAN */
+#else /* WIRELESS_EXT > 13 */
+	(iw_handler) NULL,				/* SIOCSIWSCAN */
+	(iw_handler) NULL,				/* SIOCGIWSCAN */
+#endif /* WIRELESS_EXT > 13 */
+	(iw_handler) prism2_ioctl_siwessid,		/* SIOCSIWESSID */
+	(iw_handler) prism2_ioctl_giwessid,		/* SIOCGIWESSID */
+	(iw_handler) prism2_ioctl_siwnickn,		/* SIOCSIWNICKN */
+	(iw_handler) prism2_ioctl_giwnickn,		/* SIOCGIWNICKN */
+	(iw_handler) NULL,				/* -- hole -- */
+	(iw_handler) NULL,				/* -- hole -- */
+	(iw_handler) prism2_ioctl_siwrate,		/* SIOCSIWRATE */
+	(iw_handler) prism2_ioctl_giwrate,		/* SIOCGIWRATE */
+	(iw_handler) prism2_ioctl_siwrts,		/* SIOCSIWRTS */
+	(iw_handler) prism2_ioctl_giwrts,		/* SIOCGIWRTS */
+	(iw_handler) prism2_ioctl_siwfrag,		/* SIOCSIWFRAG */
+	(iw_handler) prism2_ioctl_giwfrag,		/* SIOCGIWFRAG */
+	(iw_handler) prism2_ioctl_siwtxpow,		/* SIOCSIWTXPOW */
+	(iw_handler) prism2_ioctl_giwtxpow,		/* SIOCGIWTXPOW */
+	(iw_handler) prism2_ioctl_siwretry,		/* SIOCSIWRETRY */
+	(iw_handler) prism2_ioctl_giwretry,		/* SIOCGIWRETRY */
+	(iw_handler) prism2_ioctl_siwencode,		/* SIOCSIWENCODE */
+	(iw_handler) prism2_ioctl_giwencode,		/* SIOCGIWENCODE */
+	(iw_handler) prism2_ioctl_siwpower,		/* SIOCSIWPOWER */
+	(iw_handler) prism2_ioctl_giwpower,		/* SIOCGIWPOWER */
+};
+
+static const iw_handler prism2_private_handler[] =
+{							/* SIOCIWFIRSTPRIV + */
+	(iw_handler) prism2_ioctl_priv_prism2_param,	/* 0 */
+	(iw_handler) prism2_ioctl_priv_get_prism2_param, /* 1 */
+	(iw_handler) prism2_ioctl_priv_writemif,	/* 2 */
+	(iw_handler) prism2_ioctl_priv_readmif,		/* 3 */
+};
+
+static const struct iw_handler_def hostap_iw_handler_def =
+{
+	.num_standard	= sizeof(prism2_handler) / sizeof(iw_handler),
+	.num_private	= sizeof(prism2_private_handler) / sizeof(iw_handler),
+	.num_private_args = sizeof(prism2_priv) / sizeof(struct iw_priv_args),
+	.standard	= (iw_handler *) prism2_handler,
+	.private	= (iw_handler *) prism2_private_handler,
+	.private_args	= (struct iw_priv_args *) prism2_priv,
+#if WIRELESS_EXT > 15
+	.spy_offset	= offsetof(struct hostap_interface, spy_data),
+#endif /* WIRELESS_EXT > 15 */
+};
+#endif	/* WIRELESS_EXT > 12 */
+
+
+int hostap_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
+{
+	struct iwreq *wrq = (struct iwreq *) ifr;
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	int ret = 0;
+
+	switch (cmd) {
+
+#if WIRELESS_EXT <= 12
+	case SIOCGIWNAME:
+		ret = prism2_get_name(dev, NULL, (char *) &wrq->u, NULL);
+		break;
+
+	case SIOCSIWFREQ:
+		ret = prism2_ioctl_siwfreq(dev, NULL, &wrq->u.freq, NULL);
+		break;
+	case SIOCGIWFREQ:
+		ret = prism2_ioctl_giwfreq(dev, NULL, &wrq->u.freq, NULL);
+		break;
+
+	case SIOCSIWAP:
+		ret = prism2_ioctl_siwap(dev, NULL, &wrq->u.ap_addr, NULL);
+		break;
+	case SIOCGIWAP:
+		ret = prism2_ioctl_giwap(dev, NULL, &wrq->u.ap_addr, NULL);
+		break;
+
+	case SIOCSIWESSID:
+		if (!wrq->u.essid.pointer)
+			ret = -EINVAL;
+		else if (wrq->u.essid.length > IW_ESSID_MAX_SIZE)
+			ret = -E2BIG;
+		else {
+			char ssid[IW_ESSID_MAX_SIZE];
+			if (copy_from_user(ssid, wrq->u.essid.pointer,
+					   wrq->u.essid.length)) {
+				ret = -EFAULT;
+				break;
+			}
+			ret = prism2_ioctl_siwessid(dev, NULL, &wrq->u.essid,
+						    ssid);
+		}
+		break;
+	case SIOCGIWESSID:
+		if (wrq->u.essid.length > IW_ESSID_MAX_SIZE)
+			ret = -E2BIG;
+		else if (wrq->u.essid.pointer) {
+			char ssid[IW_ESSID_MAX_SIZE];
+			ret = prism2_ioctl_giwessid(dev, NULL, &wrq->u.essid,
+						    ssid);
+			if (copy_to_user(wrq->u.essid.pointer, ssid,
+					 wrq->u.essid.length))
+				ret = -EFAULT;
+		}
+		break;
+
+	case SIOCSIWRATE:
+		ret = prism2_ioctl_siwrate(dev, NULL, &wrq->u.bitrate, NULL);
+		break;
+	case SIOCGIWRATE:
+		ret = prism2_ioctl_giwrate(dev, NULL, &wrq->u.bitrate, NULL);
+		break;
+
+	case SIOCSIWRTS:
+		ret = prism2_ioctl_siwrts(dev, NULL, &wrq->u.rts, NULL);
+		break;
+	case SIOCGIWRTS:
+		ret = prism2_ioctl_giwrts(dev, NULL, &wrq->u.rts, NULL);
+		break;
+
+	case SIOCSIWFRAG:
+		ret = prism2_ioctl_siwfrag(dev, NULL, &wrq->u.rts, NULL);
+		break;
+	case SIOCGIWFRAG:
+		ret = prism2_ioctl_giwfrag(dev, NULL, &wrq->u.rts, NULL);
+		break;
+
+	case SIOCSIWENCODE:
+		{
+			char keybuf[WEP_KEY_LEN];
+			if (wrq->u.encoding.pointer) {
+				if (wrq->u.encoding.length > WEP_KEY_LEN) {
+					ret = -E2BIG;
+					break;
+				}
+				if (copy_from_user(keybuf,
+						   wrq->u.encoding.pointer,
+						   wrq->u.encoding.length)) {
+					ret = -EFAULT;
+					break;
+				}
+			} else if (wrq->u.encoding.length != 0) {
+				ret = -EINVAL;
+				break;
+			}
+			ret = prism2_ioctl_siwencode(dev, NULL,
+						     &wrq->u.encoding, keybuf);
+		}
+		break;
+	case SIOCGIWENCODE:
+		if (!capable(CAP_NET_ADMIN))
+			ret = -EPERM;
+		else if (wrq->u.encoding.pointer) {
+			char keybuf[WEP_KEY_LEN];
+			ret = prism2_ioctl_giwencode(dev, NULL,
+						     &wrq->u.encoding, keybuf);
+			if (copy_to_user(wrq->u.encoding.pointer, keybuf,
+					 wrq->u.encoding.length))
+				ret = -EFAULT;
+		}
+		break;
+
+	case SIOCSIWNICKN:
+		if (wrq->u.essid.length > IW_ESSID_MAX_SIZE)
+			ret = -E2BIG;
+		else if (wrq->u.essid.pointer) {
+			char nickbuf[IW_ESSID_MAX_SIZE + 1];
+			if (copy_from_user(nickbuf, wrq->u.essid.pointer,
+					   wrq->u.essid.length)) {
+				ret = -EFAULT;
+				break;
+			}
+			ret = prism2_ioctl_siwnickn(dev, NULL, &wrq->u.essid,
+						    nickbuf);
+		}
+		break;
+	case SIOCGIWNICKN:
+		if (wrq->u.essid.pointer) {
+			char nickbuf[IW_ESSID_MAX_SIZE + 1];
+			ret = prism2_ioctl_giwnickn(dev, NULL, &wrq->u.essid,
+						    nickbuf);
+			if (copy_to_user(wrq->u.essid.pointer, nickbuf,
+					 wrq->u.essid.length))
+				ret = -EFAULT;
+		}
+		break;
+
+	case SIOCGIWSPY:
+		{
+			char buffer[IW_MAX_SPY * (sizeof(struct sockaddr) +
+						  sizeof(struct iw_quality))];
+			ret = prism2_ioctl_giwspy(dev, NULL, &wrq->u.data,
+						  buffer);
+			if (ret == 0 && wrq->u.data.pointer &&
+			    copy_to_user(wrq->u.data.pointer, buffer,
+					 wrq->u.data.length *
+					 (sizeof(struct sockaddr) +
+					  sizeof(struct iw_quality))))
+				ret = -EFAULT;
+		}
+		break;
+
+	case SIOCGIWRANGE:
+		{
+			struct iw_range range;
+			ret = prism2_ioctl_giwrange(dev, NULL, &wrq->u.data,
+						    (char *) &range);
+			if (copy_to_user(wrq->u.data.pointer, &range,
+					 sizeof(struct iw_range)))
+				ret = -EFAULT;
+		}
+		break;
+
+	case SIOCSIWSENS:
+		ret = prism2_ioctl_siwsens(dev, NULL, &wrq->u.sens, NULL);
+		break;
+	case SIOCGIWSENS:
+		ret = prism2_ioctl_giwsens(dev, NULL, &wrq->u.sens, NULL);
+		break;
+
+	case SIOCGIWAPLIST:
+		if (wrq->u.data.pointer) {
+			char buffer[IW_MAX_AP * (sizeof(struct sockaddr) +
+						 sizeof(struct iw_quality))];
+			ret = prism2_ioctl_giwaplist(dev, NULL, &wrq->u.data,
+						     buffer);
+			if (copy_to_user(wrq->u.data.pointer, buffer,
+					 (wrq->u.data.length *
+					  (sizeof(struct sockaddr) +
+					   sizeof(struct iw_quality)))))
+				ret = -EFAULT;
+		}
+		break;
+
+	case SIOCSIWMODE:
+		ret = prism2_ioctl_siwmode(dev, NULL, &wrq->u.mode, NULL);
+		break;
+	case SIOCGIWMODE:
+		ret = prism2_ioctl_giwmode(dev, NULL, &wrq->u.mode, NULL);
+		break;
+
+	case SIOCSIWPOWER:
+		ret = prism2_ioctl_siwpower(dev, NULL, &wrq->u.power, NULL);
+		break;
+	case SIOCGIWPOWER:
+		ret = prism2_ioctl_giwpower(dev, NULL, &wrq->u.power, NULL);
+		break;
+
+	case SIOCGIWPRIV:
+		ret = prism2_ioctl_giwpriv(dev, &wrq->u.data);
+		break;
+
+#if WIRELESS_EXT > 9
+	case SIOCSIWTXPOW:
+		ret = prism2_ioctl_siwtxpow(dev, NULL, &wrq->u.txpower, NULL);
+		break;
+	case SIOCGIWTXPOW:
+		ret = prism2_ioctl_giwtxpow(dev, NULL, &wrq->u.txpower, NULL);
+		break;
+#endif /* WIRELESS_EXT > 9 */
+
+#if WIRELESS_EXT > 10
+	case SIOCSIWRETRY:
+		ret = prism2_ioctl_siwretry(dev, NULL, &wrq->u.retry, NULL);
+		break;
+	case SIOCGIWRETRY:
+		ret = prism2_ioctl_giwretry(dev, NULL, &wrq->u.retry, NULL);
+		break;
+#endif /* WIRELESS_EXT > 10 */
+
+	/* not supported wireless extensions */
+	case SIOCSIWNWID:
+	case SIOCGIWNWID:
+		ret = -EOPNOTSUPP;
+		break;
+
+	/* FIX: add support for this: */
+	case SIOCSIWSPY:
+		printk(KERN_DEBUG "%s unsupported WIRELESS_EXT ioctl(0x%04x)\n"
+		       , dev->name, cmd);
+		ret = -EOPNOTSUPP;
+		break;
+
+
+		/* Private ioctls (iwpriv); these are in SIOCDEVPRIVATE range
+		 * if WIRELESS_EXT < 12, so better check privileges */
+
+	case PRISM2_IOCTL_PRISM2_PARAM:
+		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
+		else ret = prism2_ioctl_priv_prism2_param(dev, NULL, &wrq->u,
+							  (char *) &wrq->u);
+		break;
+#if WIRELESS_EXT >= 12
+	case PRISM2_IOCTL_GET_PRISM2_PARAM:
+		ret = prism2_ioctl_priv_get_prism2_param(dev, NULL, &wrq->u,
+							 (char *) &wrq->u);
+		break;
+#endif /* WIRELESS_EXT >= 12 */
+
+	case PRISM2_IOCTL_WRITEMIF:
+		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
+		else ret = prism2_ioctl_priv_writemif(dev, NULL, &wrq->u,
+						      (char *) &wrq->u);
+		break;
+
+	case PRISM2_IOCTL_READMIF:
+		ret = prism2_ioctl_priv_readmif(dev, NULL, &wrq->u,
+						(char *) &wrq->u);
+		break;
+
+#endif /* WIRELESS_EXT <= 12 */
+
+
+		/* Private ioctls (iwpriv) that have not yet been converted
+		 * into new wireless extensions API */
+
+	case PRISM2_IOCTL_INQUIRE:
+		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
+		else ret = prism2_ioctl_priv_inquire(dev, (int *) wrq->u.name);
+		break;
+
+	case PRISM2_IOCTL_MONITOR:
+		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
+		else ret = prism2_ioctl_priv_monitor(dev, (int *) wrq->u.name);
+		break;
+
+	case PRISM2_IOCTL_RESET:
+		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
+		else ret = prism2_ioctl_priv_reset(dev, (int *) wrq->u.name);
+		break;
+
+#ifdef PRISM2_USE_WE_TYPE_ADDR
+	case PRISM2_IOCTL_WDS_ADD:
+		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
+		else ret = prism2_wds_add(local, wrq->u.ap_addr.sa_data, 1);
+		break;
+
+	case PRISM2_IOCTL_WDS_DEL:
+		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
+		else ret = prism2_wds_del(local, wrq->u.ap_addr.sa_data, 1, 0);
+		break;
+#else /* PRISM2_USE_WE_TYPE_ADDR */
+	case PRISM2_IOCTL_WDS_ADD:
+		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
+		else if (wrq->u.data.pointer) {
+			char addrbuf[18];
+			if (copy_from_user(addrbuf, wrq->u.data.pointer, 18)) {
+				ret = -EFAULT;
+				break;
+			}
+			ret = prism2_ioctl_priv_wds(dev, 1, addrbuf);
+		}
+		break;
+
+	case PRISM2_IOCTL_WDS_DEL:
+		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
+		else if (wrq->u.data.pointer) {
+			char addrbuf[18];
+			if (copy_from_user(addrbuf, wrq->u.data.pointer, 18)) {
+				ret = -EFAULT;
+				break;
+			}
+			ret = prism2_ioctl_priv_wds(dev, 0, addrbuf);
+		}
+		break;
+#endif /* PRISM2_USE_WE_TYPE_ADDR */
+
+	case PRISM2_IOCTL_SET_RID_WORD:
+		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
+		else ret = prism2_ioctl_priv_set_rid_word(dev,
+							  (int *) wrq->u.name);
+		break;
+
+#ifndef PRISM2_NO_KERNEL_IEEE80211_MGMT
+	case PRISM2_IOCTL_MACCMD:
+		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
+		else ret = ap_mac_cmd_ioctl(local, (int *) wrq->u.name);
+		break;
+
+#ifdef PRISM2_USE_WE_TYPE_ADDR
+	case PRISM2_IOCTL_ADDMAC:
+		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
+		else ret = ap_control_add_mac(&local->ap->mac_restrictions,
+					      wrq->u.ap_addr.sa_data);
+		break;
+	case PRISM2_IOCTL_DELMAC:
+		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
+		else ret = ap_control_del_mac(&local->ap->mac_restrictions,
+					      wrq->u.ap_addr.sa_data);
+		break;
+	case PRISM2_IOCTL_KICKMAC:
+		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
+		else ret = ap_control_kick_mac(local->ap, local->dev,
+					       wrq->u.ap_addr.sa_data);
+		break;
+#else /* PRISM2_USE_WE_TYPE_ADDR */
+	case PRISM2_IOCTL_ADDMAC:
+		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
+		else if (wrq->u.data.pointer) {
+			char addrbuf[18];
+			if (copy_from_user(addrbuf, wrq->u.data.pointer, 18)) {
+				ret = -EFAULT;
+				break;
+			}
+			ret = ap_mac_ioctl(local, addrbuf, AP_CTRL_MAC_ADD);
+		}
+		break;
+
+	case PRISM2_IOCTL_DELMAC:
+		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
+		else if (wrq->u.data.pointer) {
+			char addrbuf[18];
+			if (copy_from_user(addrbuf, wrq->u.data.pointer, 18)) {
+				ret = -EFAULT;
+				break;
+			}
+			ret = ap_mac_ioctl(local, addrbuf, AP_CTRL_MAC_DEL);
+		}
+		break;
+
+	case PRISM2_IOCTL_KICKMAC:
+		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
+		else if (wrq->u.data.pointer) {
+			char addrbuf[18];
+			if (copy_from_user(addrbuf, wrq->u.data.pointer, 18)) {
+				ret = -EFAULT;
+				break;
+			}
+			ret = ap_mac_ioctl(local, addrbuf, AP_CTRL_MAC_KICK);
+		}
+		break;
+#endif /* PRISM2_USE_WE_TYPE_ADDR */
+#endif /* PRISM2_NO_KERNEL_IEEE80211_MGMT */
+
+
+		/* Private ioctls that are not used with iwpriv;
+		 * in SIOCDEVPRIVATE range */
+
+#ifdef PRISM2_DOWNLOAD_SUPPORT
+	case PRISM2_IOCTL_DOWNLOAD:
+		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
+		else ret = prism2_ioctl_priv_download(local, &wrq->u.data);
+		break;
+#endif /* PRISM2_DOWNLOAD_SUPPORT */
+
+	case PRISM2_IOCTL_HOSTAPD:
+		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
+		else ret = prism2_ioctl_priv_hostapd(local, &wrq->u.data);
+		break;
+
+	default:
+#if WIRELESS_EXT > 12
+		if (cmd >= SIOCSIWCOMMIT && cmd <= SIOCGIWPOWER) {
+			/* unsupport wireless extensions get through here - do
+			 * not report these to debug log */
+			ret = -EOPNOTSUPP;
+			break;
+		}
+#endif /* WIRELESS_EXT > 12 */
+		printk(KERN_DEBUG "%s unsupported ioctl(0x%04x)\n",
+		       dev->name, cmd);
+		ret = -EOPNOTSUPP;
+		break;
+	}
+
+	return ret;
+}
+
+#endif /* WIRELESS_EXT */
diff -Nur linux-orig/drivers/net/wireless/hostap_pci.c linux/drivers/net/wireless/hostap_pci.c
--- linux-orig/drivers/net/wireless/hostap_pci.c	1970-01-01 03:00:00.000000000 +0300
+++ linux/drivers/net/wireless/hostap_pci.c	2003-10-11 21:11:56.000000000 +0400
@@ -0,0 +1,433 @@
+#define PRISM2_PCI
+
+/* Host AP driver's support for Intersil Prism2.5 PCI cards is based on
+ * driver patches from Reyk Floeter <reyk@vantronix.net> and
+ * Andy Warner <andyw@pobox.com> */
+
+#include <linux/config.h>
+#include <linux/version.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/if.h>
+#include <linux/skbuff.h>
+#include <linux/netdevice.h>
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,5,44))
+#include <linux/tqueue.h>
+#else
+#include <linux/workqueue.h>
+#endif
+#include "hostap_wext.h"
+
+#include <linux/ioport.h>
+#include <linux/pci.h>
+
+#include "hostap_wlan.h"
+
+
+static char *version = PRISM2_VERSION " (Jouni Malinen <jkmaline@cc.hut.fi>)";
+static char *dev_info = "hostap_pci";
+
+
+MODULE_AUTHOR("SSH Communications Security Corp, Jouni Malinen");
+MODULE_DESCRIPTION("Support for Intersil Prism2.5-based 802.11 wireless LAN "
+		   "PCI cards.");
+MODULE_SUPPORTED_DEVICE("Intersil Prism2.5-based WLAN PCI cards");
+MODULE_LICENSE("GPL");
+
+
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,4,0))
+/* PCI initialization uses Linux 2.4.x version and older kernels do not support
+ * this */
+#error Prism2.5 PCI version requires at least Linux kernel version 2.4.0
+#endif /* kernel < 2.4.0 */
+
+
+/* FIX: do we need mb/wmb/rmb with memory operations? */
+
+
+static struct pci_device_id prism2_pci_id_table[] __devinitdata = {
+	/* Intersil Prism3 ISL3872 11Mb/s WLAN Controller */
+	{ 0x1260, 0x3872, PCI_ANY_ID, PCI_ANY_ID },
+	/* Intersil Prism2.5 ISL3874 11Mb/s WLAN Controller */
+	{ 0x1260, 0x3873, PCI_ANY_ID, PCI_ANY_ID },
+	/* Samsung MagicLAN SWL-2210P */
+	{ 0x167d, 0xa000, PCI_ANY_ID, PCI_ANY_ID },
+	{ 0 }
+};
+
+
+#ifdef PRISM2_IO_DEBUG
+
+static inline void hfa384x_outb_debug(struct net_device *dev, int a, u8 v)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	unsigned long flags;
+
+	spin_lock_irqsave(&local->lock, flags);
+	prism2_io_debug_add(dev, PRISM2_IO_DEBUG_CMD_OUTB, a, v);
+	writeb(v, dev->mem_start + a);
+	spin_unlock_irqrestore(&local->lock, flags);
+}
+
+static inline u8 hfa384x_inb_debug(struct net_device *dev, int a)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	unsigned long flags;
+	u8 v;
+
+	spin_lock_irqsave(&local->lock, flags);
+	v = readb(dev->mem_start + a);
+	prism2_io_debug_add(dev, PRISM2_IO_DEBUG_CMD_INB, a, v);
+	spin_unlock_irqrestore(&local->lock, flags);
+	return v;
+}
+
+static inline void hfa384x_outw_debug(struct net_device *dev, int a, u16 v)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	unsigned long flags;
+
+	spin_lock_irqsave(&local->lock, flags);
+	prism2_io_debug_add(dev, PRISM2_IO_DEBUG_CMD_OUTW, a, v);
+	writew(v, dev->mem_start + a);
+	spin_unlock_irqrestore(&local->lock, flags);
+}
+
+static inline u16 hfa384x_inw_debug(struct net_device *dev, int a)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	unsigned long flags;
+	u16 v;
+
+	spin_lock_irqsave(&local->lock, flags);
+	v = readw(dev->mem_start + a);
+	prism2_io_debug_add(dev, PRISM2_IO_DEBUG_CMD_INW, a, v);
+	spin_unlock_irqrestore(&local->lock, flags);
+	return v;
+}
+
+#define HFA384X_OUTB(v,a) hfa384x_outb_debug(dev, (a), (v))
+#define HFA384X_INB(a) hfa384x_inb_debug(dev, (a))
+#define HFA384X_OUTW(v,a) hfa384x_outw_debug(dev, (a), (v))
+#define HFA384X_INW(a) hfa384x_inw_debug(dev, (a))
+#define HFA384X_OUTW_DATA(v,a) hfa384x_outw_debug(dev, (a), cpu_to_le16((v)))
+#define HFA384X_INW_DATA(a) (u16) le16_to_cpu(hfa384x_inw_debug(dev, (a)))
+
+#else /* PRISM2_IO_DEBUG */
+
+#define HFA384X_OUTB(v,a) writeb((v), dev->mem_start + (a))
+#define HFA384X_INB(a) (u8) readb(dev->mem_start + (a))
+#define HFA384X_OUTW(v,a) writew((v), dev->mem_start + (a))
+#define HFA384X_INW(a) (u16) readw(dev->mem_start + (a))
+#define HFA384X_OUTW_DATA(v,a) writew(cpu_to_le16(v), dev->mem_start + (a))
+#define HFA384X_INW_DATA(a) (u16) le16_to_cpu(readw(dev->mem_start + (a)))
+
+#endif /* PRISM2_IO_DEBUG */
+
+
+static int hfa384x_from_bap(struct net_device *dev, u16 bap, void *buf,
+			    int len)
+{
+	u16 d_off;
+	u16 *pos;
+
+	d_off = (bap == 1) ? HFA384X_DATA1_OFF : HFA384X_DATA0_OFF;
+	pos = (u16 *) buf;
+
+	for ( ; len > 1; len -= 2)
+		*pos++ = HFA384X_INW_DATA(d_off);
+
+	if (len & 1)
+		*((char *) pos) = HFA384X_INB(d_off);
+
+	return 0;
+}
+
+
+static int hfa384x_to_bap(struct net_device *dev, u16 bap, void *buf, int len)
+{
+	u16 d_off;
+	u16 *pos;
+
+	d_off = (bap == 1) ? HFA384X_DATA1_OFF : HFA384X_DATA0_OFF;
+	pos = (u16 *) buf;
+
+	for ( ; len > 1; len -= 2)
+		HFA384X_OUTW_DATA(*pos++, d_off);
+
+	if (len & 1)
+		HFA384X_OUTB(*((char *) pos), d_off);
+
+	return 0;
+}
+
+
+/* FIX: This might change at some point.. */
+#include "hostap_hw.c"
+
+static void prism2_pci_cor_sreset(local_info_t *local)
+{
+	struct net_device *dev = local->dev;
+
+	/* linux-wlan-ng uses extremely long hold and settle times for
+	 * COR sreset. A comment in the driver code mentions that the long
+	 * delays appear to be necessary. However, at least IBM 22P6901 seems
+	 * to work fine with shorter delays.
+	 *
+	 * Longer delays can be configured by uncommenting following line: */
+/* #define PRISM2_PCI_USE_LONG_DELAYS */
+
+#ifdef PRISM2_PCI_USE_LONG_DELAYS
+	int i;
+
+	HFA384X_OUTW(0x0080, HFA384X_PCICOR_OFF);
+	mdelay(250);
+
+	HFA384X_OUTW(0x0, HFA384X_PCICOR_OFF);
+	mdelay(500);
+
+	/* Wait for f/w to complete initialization (CMD:BUSY == 0) */
+	i = 2000000 / 10;
+	while ((HFA384X_INW(HFA384X_CMD_OFF) & HFA384X_CMD_BUSY) && --i)
+		udelay(10);
+
+#else /* PRISM2_PCI_USE_LONG_DELAYS */
+
+	HFA384X_OUTW(0x0080, HFA384X_PCICOR_OFF);
+	mdelay(1);
+	HFA384X_OUTW(0x0, HFA384X_PCICOR_OFF);
+	mdelay(1);
+
+#endif /* PRISM2_PCI_USE_LONG_DELAYS */
+
+	if (HFA384X_INW(HFA384X_CMD_OFF) & HFA384X_CMD_BUSY) {
+		printk(KERN_DEBUG "%s: COR sreset timeout\n", dev->name);
+	}
+}
+
+
+static void prism2_pci_genesis_reset(local_info_t *local, int hcr)
+{
+	struct net_device *dev = local->dev;
+
+	HFA384X_OUTW(0x00C5, HFA384X_PCICOR_OFF);
+	mdelay(10);
+	HFA384X_OUTW(hcr, HFA384X_PCIHCR_OFF);
+	mdelay(10);
+	HFA384X_OUTW(0x0045, HFA384X_PCICOR_OFF);
+	mdelay(10);
+}
+
+
+static struct prism2_helper_functions prism2_pci_funcs =
+{
+	.card_present	= NULL,
+	.cor_sreset	= prism2_pci_cor_sreset,
+	.dev_open	= NULL,
+	.dev_close	= NULL,
+	.genesis_reset	= prism2_pci_genesis_reset,
+};
+
+
+static int prism2_pci_probe(struct pci_dev *pdev,
+			    const struct pci_device_id *id)
+{
+	unsigned long phymem;
+	unsigned long mem = 0;
+	local_info_t *local = NULL;
+	struct net_device *dev = NULL;
+	static int cards_found /* = 0 */;
+	int irq_registered = 0;
+	struct hostap_interface *iface;
+
+	if (pci_enable_device(pdev))
+		return -EIO;
+
+	phymem = pci_resource_start(pdev, 0);
+
+	if (!request_mem_region(phymem, pci_resource_len(pdev, 0), "Prism2")) {
+		printk(KERN_ERR "prism2: Cannot reserve PCI memory region\n");
+		goto err_out_disable;
+	}
+
+	mem = (unsigned long) ioremap(phymem, pci_resource_len(pdev, 0));
+	if (!mem) {
+		printk(KERN_ERR "prism2: Cannot remap PCI memory region\n") ;
+		goto fail;
+	}
+
+#ifdef PRISM2_BUS_MASTER
+	pci_set_master(pdev);
+#endif /* PRISM2_BUS_MASTER */
+
+	dev = prism2_init_local_data(&prism2_pci_funcs, cards_found);
+	if (dev == NULL)
+		goto fail;
+	iface = dev->priv;
+	local = iface->local;
+	cards_found++;
+
+        dev->irq = pdev->irq;
+        dev->mem_start = mem;
+        dev->mem_end = mem + pci_resource_len(pdev, 0);
+
+	if (prism2_init_dev(local))
+		goto fail;
+
+	prism2_pci_cor_sreset(local);
+
+	pci_set_drvdata(pdev, dev);
+
+	if (request_irq(dev->irq, prism2_interrupt, SA_SHIRQ, dev->name,
+			dev)) {
+		printk(KERN_WARNING "%s: request_irq failed\n", dev->name);
+		goto fail;
+	} else
+		irq_registered = 1;
+
+	if (!local->pri_only && prism2_hw_config(dev, 1)) {
+		printk(KERN_DEBUG "%s: hardware initialization failed\n",
+		       dev_info);
+		goto fail;
+	}
+
+	printk(KERN_INFO "%s: Intersil Prism2.5 PCI: "
+	       "mem=0x%lx, irq=%d\n", dev->name, phymem, dev->irq);
+
+	return 0;
+
+ fail:
+	if (irq_registered && dev)
+		free_irq(dev->irq, dev);
+
+	if (mem)
+		iounmap((void *) mem);
+
+	release_mem_region(phymem, pci_resource_len(pdev, 0));
+
+ err_out_disable:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,4))
+	pci_disable_device(pdev);
+#endif
+
+	prism2_free_local_data(dev);
+
+	return -ENODEV;
+}
+
+
+static void prism2_pci_remove(struct pci_dev *pdev)
+{
+	struct net_device *dev = pci_get_drvdata(pdev);
+	struct hostap_interface *iface = dev->priv;
+	unsigned long mem_start;
+
+	/* Reset the hardware, and ensure interrupts are disabled. */
+	prism2_pci_cor_sreset(iface->local);
+	hfa384x_disable_interrupts(dev);
+
+	if (dev->irq)
+		free_irq(dev->irq, dev);
+
+	mem_start = dev->mem_start;
+	prism2_free_local_data(dev);
+
+	iounmap((void *) mem_start);
+
+	release_mem_region(pci_resource_start(pdev, 0),
+			   pci_resource_len(pdev, 0));
+
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,4))
+	pci_disable_device(pdev);
+#endif
+}
+
+
+#ifdef CONFIG_PM
+static int prism2_pci_suspend(struct pci_dev *pdev, u32 state)
+{
+	struct net_device *dev = pci_get_drvdata(pdev);
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+
+	if (netif_running(dev)) {
+		hostap_netif_stop_queues(dev);
+		netif_device_detach(dev);
+	}
+	prism2_hw_shutdown(dev, 0);
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,6))
+	pci_save_state(pdev, local->pci_save_state);
+#endif
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,4))
+	pci_disable_device(pdev);
+#endif
+	pci_set_power_state(pdev, 3);
+
+	return 0;
+}
+
+static int prism2_pci_resume(struct pci_dev *pdev)
+{
+	struct net_device *dev = pci_get_drvdata(pdev);
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+
+	pci_enable_device(pdev);
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,6))
+	pci_restore_state(pdev, local->pci_save_state);
+#endif
+	prism2_hw_config(dev, 0);
+	if (netif_running(dev)) {
+		netif_device_attach(dev);
+		netif_start_queue(dev);
+	}
+
+	return 0;
+}
+#endif /* CONFIG_PM */
+
+
+MODULE_DEVICE_TABLE(pci, prism2_pci_id_table);
+
+static struct pci_driver prism2_pci_drv_id = {
+	.name		= "prism2_pci",
+	.id_table	= prism2_pci_id_table,
+	.probe		= prism2_pci_probe,
+	.remove		= prism2_pci_remove,
+#ifdef CONFIG_PM
+	.suspend	= prism2_pci_suspend,
+	.resume		= prism2_pci_resume,
+#endif /* CONFIG_PM */
+	/* Linux 2.4.6 added save_state and enable_wake that are not used here
+	 */
+};
+
+
+static int __init init_prism2_pci(void)
+{
+	printk(KERN_INFO "%s: %s\n", dev_info, version);
+
+	if (pci_register_driver(&prism2_pci_drv_id) <= 0) {
+		printk("hostap_pci: No devices found, driver not "
+		       "installed.\n");
+		pci_unregister_driver(&prism2_pci_drv_id);
+		return -ENODEV;
+	}
+
+	return 0;
+}
+
+
+static void __exit exit_prism2_pci(void)
+{
+	pci_unregister_driver(&prism2_pci_drv_id);
+	printk(KERN_INFO "%s: Driver unloaded\n", dev_info);
+}
+
+
+module_init(init_prism2_pci);
+module_exit(exit_prism2_pci);
diff -Nur linux-orig/drivers/net/wireless/hostap_plx.c linux/drivers/net/wireless/hostap_plx.c
--- linux-orig/drivers/net/wireless/hostap_plx.c	1970-01-01 03:00:00.000000000 +0300
+++ linux/drivers/net/wireless/hostap_plx.c	2003-10-11 21:11:56.000000000 +0400
@@ -0,0 +1,619 @@
+#define PRISM2_PLX
+
+/* Host AP driver's support for PC Cards on PCI adapters using PLX9052 is
+ * based on:
+ * - Host AP driver patch from james@madingley.org
+ * - linux-wlan-ng driver, Copyright (C) AbsoluteValue Systems, Inc.
+ */
+
+
+#include <linux/config.h>
+#include <linux/version.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/if.h>
+#include <linux/skbuff.h>
+#include <linux/netdevice.h>
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,5,44))
+#include <linux/tqueue.h>
+#else
+#include <linux/workqueue.h>
+#endif
+#include "hostap_wext.h"
+
+#include <linux/ioport.h>
+#include <linux/pci.h>
+
+#include "hostap_wlan.h"
+
+
+static char *version = PRISM2_VERSION " (Jouni Malinen <jkmaline@cc.hut.fi>)";
+static char *dev_info = "hostap_plx";
+
+
+MODULE_AUTHOR("SSH Communications Security Corp, Jouni Malinen");
+MODULE_DESCRIPTION("Support for Intersil Prism2-based 802.11 wireless LAN "
+		   "cards (PLX).");
+MODULE_SUPPORTED_DEVICE("Intersil Prism2-based WLAN cards (PLX)");
+MODULE_LICENSE("GPL");
+
+
+static int ignore_cis = 0;
+MODULE_PARM(ignore_cis, "i");
+MODULE_PARM_DESC(ignore_cis, "Do not verify manfid information in CIS");
+
+
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,4,0))
+/* PCI initialization uses Linux 2.4.x version and older kernels do not support
+ * this */
+#error PLX9052 version requires at least Linux kernel version 2.4.0
+#endif /* kernel < 2.4.0 */
+
+
+#define PLX_MIN_ATTR_LEN 512	/* at least 2 x 256 is needed for CIS */
+#define COR_SRESET       0x80
+#define COR_LEVLREQ      0x40
+#define COR_ENABLE_FUNC  0x01
+/* PCI Configuration Registers */
+#define PLX_PCIIPR       0x3d   /* PCI Interrupt Pin */
+/* Local Configuration Registers */
+#define PLX_INTCSR       0x4c   /* Interrupt Control/Status Register */
+#define PLX_INTCSR_PCI_INTEN BIT(6) /* PCI Interrupt Enable */
+#define PLX_CNTRL        0x50
+#define PLX_CNTRL_SERIAL_EEPROM_PRESENT BIT(28)
+
+
+#define PLXDEV(vendor,dev,str) { vendor, dev, PCI_ANY_ID, PCI_ANY_ID }
+
+static struct pci_device_id prism2_plx_id_table[] __devinitdata = {
+	PLXDEV(0x10b7, 0x7770, "3Com AirConnect PCI 777A"),
+	PLXDEV(0x111a, 0x1023, "Siemens SpeedStream SS1023"),
+	PLXDEV(0x126c, 0x8030, "Nortel emobility"),
+	PLXDEV(0x1385, 0x4100, "Netgear MA301"),
+	PLXDEV(0x15e8, 0x0130, "National Datacomm NCP130 (PLX9052)"),
+	PLXDEV(0x15e8, 0x0131, "National Datacomm NCP130 (TMD7160)"),
+	PLXDEV(0x1638, 0x1100, "Eumitcom WL11000"),
+	PLXDEV(0x16ab, 0x1101, "Global Sun Tech GL24110P (?)"),
+	PLXDEV(0x16ab, 0x1102, "Linksys WPC11 with WDT11"),
+	PLXDEV(0x16ab, 0x1103, "Longshine 8031"),
+	PLXDEV(0x16ec, 0x3685, "US Robotics USR2415"),
+	PLXDEV(0xec80, 0xec00, "Belkin F5D6000"),
+	{ 0 }
+};
+
+
+/* Array of known Prism2/2.5 PC Card manufactured ids. If your card's manfid
+ * is not listed here, you will need to add it here to get the driver
+ * initialized. */
+static struct prism2_plx_manfid {
+	u16 manfid1, manfid2;
+} prism2_plx_known_manfids[] = {
+	{ 0x000b, 0x7300 } /* Philips 802.11b WLAN PCMCIA */,
+	{ 0x0101, 0x0777 } /* 3Com AirConnect PCI 777A */,
+	{ 0x0126, 0x8000 } /* Proxim RangeLAN */,
+	{ 0x0138, 0x0002 } /* Compaq WL100 */,
+	{ 0x0156, 0x0002 } /* Intersil Prism II Ref. Design (and others) */,
+	{ 0x026f, 0x030b } /* Buffalo WLI-CF-S11G */,
+	{ 0x0274, 0x1612 } /* Linksys WPC11 Ver 2.5 */,
+	{ 0x0274, 0x1613 } /* Linksys WPC11 Ver 3 */,
+	{ 0x028a, 0x0002 } /* D-Link DRC-650 */,
+	{ 0x0250, 0x0002 } /* Samsung SWL2000-N */,
+	{ 0xc250, 0x0002 } /* EMTAC A2424i */,
+	{ 0xd601, 0x0002 } /* Z-Com XI300 */,
+	{ 0xd601, 0x0005 } /* Zcomax XI-325H 200mW */,
+	{ 0, 0}
+};
+
+
+#ifdef PRISM2_IO_DEBUG
+
+static inline void hfa384x_outb_debug(struct net_device *dev, int a, u8 v)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	unsigned long flags;
+
+	spin_lock_irqsave(&local->lock, flags);
+	prism2_io_debug_add(dev, PRISM2_IO_DEBUG_CMD_OUTB, a, v);
+	outb(v, dev->base_addr + a);
+	spin_unlock_irqrestore(&local->lock, flags);
+}
+
+static inline u8 hfa384x_inb_debug(struct net_device *dev, int a)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	unsigned long flags;
+	u8 v;
+
+	spin_lock_irqsave(&local->lock, flags);
+	v = inb(dev->base_addr + a);
+	prism2_io_debug_add(dev, PRISM2_IO_DEBUG_CMD_INB, a, v);
+	spin_unlock_irqrestore(&local->lock, flags);
+	return v;
+}
+
+static inline void hfa384x_outw_debug(struct net_device *dev, int a, u16 v)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	unsigned long flags;
+
+	spin_lock_irqsave(&local->lock, flags);
+	prism2_io_debug_add(dev, PRISM2_IO_DEBUG_CMD_OUTW, a, v);
+	outw(v, dev->base_addr + a);
+	spin_unlock_irqrestore(&local->lock, flags);
+}
+
+static inline u16 hfa384x_inw_debug(struct net_device *dev, int a)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	unsigned long flags;
+	u16 v;
+
+	spin_lock_irqsave(&local->lock, flags);
+	v = inw(dev->base_addr + a);
+	prism2_io_debug_add(dev, PRISM2_IO_DEBUG_CMD_INW, a, v);
+	spin_unlock_irqrestore(&local->lock, flags);
+	return v;
+}
+
+static inline void hfa384x_outsw_debug(struct net_device *dev, int a,
+				       u8 *buf, int wc)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	unsigned long flags;
+
+	spin_lock_irqsave(&local->lock, flags);
+	prism2_io_debug_add(dev, PRISM2_IO_DEBUG_CMD_OUTSW, a, wc);
+	outsw(dev->base_addr + a, buf, wc);
+	spin_unlock_irqrestore(&local->lock, flags);
+}
+
+static inline void hfa384x_insw_debug(struct net_device *dev, int a,
+				      u8 *buf, int wc)
+{
+	struct hostap_interface *iface = dev->priv;
+	local_info_t *local = iface->local;
+	unsigned long flags;
+
+	spin_lock_irqsave(&local->lock, flags);
+	prism2_io_debug_add(dev, PRISM2_IO_DEBUG_CMD_INSW, a, wc);
+	insw(dev->base_addr + a, buf, wc);
+	spin_unlock_irqrestore(&local->lock, flags);
+}
+
+#define HFA384X_OUTB(v,a) hfa384x_outb_debug(dev, (a), (v))
+#define HFA384X_INB(a) hfa384x_inb_debug(dev, (a))
+#define HFA384X_OUTW(v,a) hfa384x_outw_debug(dev, (a), (v))
+#define HFA384X_INW(a) hfa384x_inw_debug(dev, (a))
+#define HFA384X_OUTSW(a, buf, wc) hfa384x_outsw_debug(dev, (a), (buf), (wc))
+#define HFA384X_INSW(a, buf, wc) hfa384x_insw_debug(dev, (a), (buf), (wc))
+
+#else /* PRISM2_IO_DEBUG */
+
+#define HFA384X_OUTB(v,a) outb((v), dev->base_addr + (a))
+#define HFA384X_INB(a) inb(dev->base_addr + (a))
+#define HFA384X_OUTW(v,a) outw((v), dev->base_addr + (a))
+#define HFA384X_INW(a) inw(dev->base_addr + (a))
+#define HFA384X_INSW(a, buf, wc) insw(dev->base_addr + (a), buf, wc)
+#define HFA384X_OUTSW(a, buf, wc) outsw(dev->base_addr + (a), buf, wc)
+
+#endif /* PRISM2_IO_DEBUG */
+
+
+static int hfa384x_from_bap(struct net_device *dev, u16 bap, void *buf,
+			    int len)
+{
+	u16 d_off;
+	u16 *pos;
+
+	d_off = (bap == 1) ? HFA384X_DATA1_OFF : HFA384X_DATA0_OFF;
+	pos = (u16 *) buf;
+
+	if (len / 2)
+		HFA384X_INSW(d_off, buf, len / 2);
+	pos += len / 2;
+
+	if (len & 1)
+		*((char *) pos) = HFA384X_INB(d_off);
+
+	return 0;
+}
+
+
+static int hfa384x_to_bap(struct net_device *dev, u16 bap, void *buf, int len)
+{
+	u16 d_off;
+	u16 *pos;
+
+	d_off = (bap == 1) ? HFA384X_DATA1_OFF : HFA384X_DATA0_OFF;
+	pos = (u16 *) buf;
+
+	if (len / 2)
+		HFA384X_OUTSW(d_off, buf, len / 2);
+	pos += len / 2;
+
+	if (len & 1)
+		HFA384X_OUTB(*((char *) pos), d_off);
+
+	return 0;
+}
+
+
+/* FIX: This might change at some point.. */
+#include "hostap_hw.c"
+
+
+static void prism2_plx_cor_sreset(local_info_t *local)
+{
+	unsigned char corsave;
+
+	printk(KERN_DEBUG "%s: Doing reset via direct COR access.\n",
+	       dev_info);
+
+	/* Set sreset bit of COR and clear it after hold time */
+
+	if (local->attr_mem == 0) {
+		/* TMD7160 - COR at card's first I/O addr */
+		corsave = inb(local->cor_offset);
+		outb(corsave | COR_SRESET, local->cor_offset);
+		mdelay(1);
+		outb(corsave & ~COR_SRESET, local->cor_offset);
+		mdelay(1);
+	} else {
+		/* PLX9052 */
+		corsave = readb(local->attr_mem + local->cor_offset);
+		writeb(corsave | COR_SRESET,
+		       local->attr_mem + local->cor_offset);
+		mdelay(1);
+		writeb(corsave & ~COR_SRESET,
+		       local->attr_mem + local->cor_offset);
+		mdelay(1);
+	}
+}
+
+
+static void prism2_plx_genesis_reset(local_info_t *local, int hcr)
+{
+	unsigned char corsave;
+
+	if (local->attr_mem == 0) {
+		/* TMD7160 - COR at card's first I/O addr */
+		corsave = inb(local->cor_offset);
+		outb(corsave | COR_SRESET, local->cor_offset);
+		mdelay(10);
+		outb(hcr, local->cor_offset + 2);
+		mdelay(10);
+		outb(corsave & ~COR_SRESET, local->cor_offset);
+		mdelay(10);
+	} else {
+		/* PLX9052 */
+		corsave = readb(local->attr_mem + local->cor_offset);
+		writeb(corsave | COR_SRESET,
+		       local->attr_mem + local->cor_offset);
+		mdelay(10);
+		writeb(hcr, local->attr_mem + local->cor_offset + 2);
+		mdelay(10);
+		writeb(corsave & ~COR_SRESET,
+		       local->attr_mem + local->cor_offset);
+		mdelay(10);
+	}
+}
+
+
+static struct prism2_helper_functions prism2_plx_funcs =
+{
+	.card_present	= NULL,
+	.cor_sreset	= prism2_plx_cor_sreset,
+	.dev_open	= NULL,
+	.dev_close	= NULL,
+	.genesis_reset	= prism2_plx_genesis_reset,
+};
+
+
+static int prism2_plx_check_cis(unsigned long attr_mem, int attr_len,
+				unsigned int *cor_offset,
+				unsigned int *cor_index)
+{
+#define CISTPL_CONFIG 0x1A
+#define CISTPL_MANFID 0x20
+#define CISTPL_END 0xFF
+#define CIS_MAX_LEN 256
+	u8 cis[CIS_MAX_LEN];
+	int i, pos;
+	unsigned int rmsz, rasz, manfid1, manfid2;
+	struct prism2_plx_manfid *manfid;
+
+	/* read CIS; it is in even offsets in the beginning of attr_mem */
+	for (i = 0; i < CIS_MAX_LEN; i++)
+		cis[i] = readb(attr_mem + 2 * i);
+	printk(KERN_DEBUG "%s: CIS: %02x %02x %02x %02x %02x %02x ...\n",
+	       dev_info, cis[0], cis[1], cis[2], cis[3], cis[4], cis[5]);
+
+	/* set reasonable defaults for Prism2 cards just in case CIS parsing
+	 * fails */
+	*cor_offset = 0x3e0;
+	*cor_index = 0x01;
+	manfid1 = manfid2 = 0;
+
+	pos = 0;
+	while (pos < CIS_MAX_LEN - 1 && cis[pos] != CISTPL_END) {
+		if (pos + cis[pos + 1] >= CIS_MAX_LEN)
+			goto cis_error;
+
+		switch (cis[pos]) {
+		case CISTPL_CONFIG:
+			if (cis[pos + 1] < 1)
+				goto cis_error;
+			rmsz = (cis[pos + 2] & 0x3c) >> 2;
+			rasz = cis[pos + 2] & 0x03;
+			if (4 + rasz + rmsz > cis[pos + 1])
+				goto cis_error;
+			*cor_index = cis[pos + 3] & 0x3F;
+			*cor_offset = 0;
+			for (i = 0; i <= rasz; i++)
+				*cor_offset += cis[pos + 4 + i] << (8 * i);
+			printk(KERN_DEBUG "%s: cor_index=0x%x "
+			       "cor_offset=0x%x\n", dev_info,
+			       *cor_index, *cor_offset);
+			if (*cor_offset > attr_len) {
+				printk(KERN_ERR "%s: COR offset not within "
+				       "attr_mem\n", dev_info);
+				return -1;
+			}
+			break;
+
+		case CISTPL_MANFID:
+			if (cis[pos + 1] < 4)
+				goto cis_error;
+			manfid1 = cis[pos + 2] + (cis[pos + 3] << 8);
+			manfid2 = cis[pos + 4] + (cis[pos + 5] << 8);
+			printk(KERN_DEBUG "%s: manfid=0x%04x, 0x%04x\n",
+			       dev_info, manfid1, manfid2);
+			break;
+		}
+
+		pos += cis[pos + 1] + 2;
+	}
+
+	if (pos >= CIS_MAX_LEN || cis[pos] != CISTPL_END)
+		goto cis_error;
+
+	for (manfid = prism2_plx_known_manfids; manfid->manfid1 != 0; manfid++)
+		if (manfid1 == manfid->manfid1 && manfid2 == manfid->manfid2)
+			return 0;
+
+	printk(KERN_INFO "%s: unknown manfid 0x%04x, 0x%04x - assuming this is"
+	       " not supported card\n", dev_info, manfid1, manfid2);
+	goto fail;
+
+ cis_error:
+	printk(KERN_WARNING "%s: invalid CIS data\n", dev_info);
+
+ fail:
+	if (ignore_cis) {
+		printk(KERN_INFO "%s: ignore_cis parameter set - ignoring "
+		       "errors during CIS verification\n", dev_info);
+		return 0;
+	}
+	return -1;
+}
+
+
+static int prism2_plx_probe(struct pci_dev *pdev,
+			    const struct pci_device_id *id)
+{
+	unsigned int pccard_ioaddr, plx_ioaddr;
+	unsigned long pccard_attr_mem;
+	unsigned int pccard_attr_len;
+	unsigned long attr_mem = 0;
+	unsigned int cor_offset, cor_index;
+	u32 reg;
+	local_info_t *local = NULL;
+	struct net_device *dev = NULL;
+	struct hostap_interface *iface;
+	static int cards_found /* = 0 */;
+	int irq_registered = 0;
+	int tmd7160;
+
+	if (pci_enable_device(pdev))
+		return -EIO;
+
+	/* National Datacomm NCP130 based on TMD7160, not PLX9052. */
+	tmd7160 = (pdev->vendor == 0x15e8) && (pdev->device == 0x0131);
+
+	plx_ioaddr = pci_resource_start(pdev, 1);
+	pccard_ioaddr = pci_resource_start(pdev, tmd7160 ? 2 : 3);
+
+	if (tmd7160) {
+		/* TMD7160 */
+		attr_mem = 0; /* no access to PC Card attribute memory */
+
+		printk(KERN_INFO "TMD7160 PCI/PCMCIA adapter: io=0x%x, "
+		       "irq=%d, pccard_io=0x%x\n",
+		       plx_ioaddr, pdev->irq, pccard_ioaddr);
+
+		cor_offset = plx_ioaddr;
+		cor_index = 0x04;
+
+		outb(cor_index | COR_LEVLREQ | COR_ENABLE_FUNC, plx_ioaddr);
+		mdelay(1);
+		reg = inb(plx_ioaddr);
+		if (reg != (cor_index | COR_LEVLREQ | COR_ENABLE_FUNC)) {
+			printk(KERN_ERR "%s: Error setting COR (expected="
+			       "0x%02x, was=0x%02x)\n", dev_info,
+			       cor_index | COR_LEVLREQ | COR_ENABLE_FUNC, reg);
+			goto fail;
+		}
+	} else {
+		/* PLX9052 */
+		pccard_attr_mem = pci_resource_start(pdev, 2);
+		pccard_attr_len = pci_resource_len(pdev, 2);
+		if (pccard_attr_len < PLX_MIN_ATTR_LEN)
+			goto fail;
+
+
+		attr_mem = (unsigned long) ioremap(pccard_attr_mem,
+						   pccard_attr_len);
+		if (!attr_mem) {
+			printk(KERN_ERR "%s: cannot remap attr_mem\n",
+			       dev_info);
+			goto fail;
+		}
+
+		printk(KERN_INFO "PLX9052 PCI/PCMCIA adapter: "
+		       "mem=0x%lx, plx_io=0x%x, irq=%d, pccard_io=0x%x\n",
+		       pccard_attr_mem, plx_ioaddr, pdev->irq, pccard_ioaddr);
+
+		if (prism2_plx_check_cis(attr_mem, pccard_attr_len,
+					 &cor_offset, &cor_index)) {
+			printk(KERN_INFO "Unknown PC Card CIS - not a "
+			       "Prism2/2.5 card?\n");
+			goto fail;
+		}
+
+		printk(KERN_DEBUG "Prism2/2.5 PC Card detected in PLX9052 "
+		       "adapter\n");
+
+		/* Write COR to enable PC Card */
+		writeb(cor_index | COR_LEVLREQ | COR_ENABLE_FUNC,
+		       attr_mem + cor_offset);
+
+		/* Enable PCI interrupts if they are not already enabled */
+		reg = inl(plx_ioaddr + PLX_INTCSR);
+		printk(KERN_DEBUG "PLX_INTCSR=0x%x\n", reg);
+		if (!(reg & PLX_INTCSR_PCI_INTEN)) {
+			outl(reg | PLX_INTCSR_PCI_INTEN,
+			     plx_ioaddr + PLX_INTCSR);
+			if (!(inl(plx_ioaddr + PLX_INTCSR) &
+			      PLX_INTCSR_PCI_INTEN)) {
+				printk(KERN_WARNING "%s: Could not enable "
+				       "Local Interrupts\n", dev_info);
+				goto fail;
+			}
+		}
+
+		reg = inl(plx_ioaddr + PLX_CNTRL);
+		printk(KERN_DEBUG "PLX_CNTRL=0x%x (Serial EEPROM "
+		       "present=%d)\n",
+		       reg, (reg & PLX_CNTRL_SERIAL_EEPROM_PRESENT) != 0);
+		/* should set PLX_PCIIPR to 0x01 (INTA#) if Serial EEPROM is
+		 * not present; but are there really such cards in use(?) */
+	}
+
+	dev = prism2_init_local_data(&prism2_plx_funcs, cards_found);
+	if (dev == NULL)
+		goto fail;
+	iface = dev->priv;
+	local = iface->local;
+	cards_found++;
+
+	dev->irq = pdev->irq;
+	dev->base_addr = pccard_ioaddr;
+	local->attr_mem = attr_mem;
+	local->cor_offset = cor_offset;
+
+	if (prism2_init_dev(local))
+		goto fail;
+
+	pci_set_drvdata(pdev, dev);
+
+	if (request_irq(dev->irq, prism2_interrupt, SA_SHIRQ, dev->name,
+			dev)) {
+		printk(KERN_WARNING "%s: request_irq failed\n", dev->name);
+		goto fail;
+	} else
+		irq_registered = 1;
+
+	if (prism2_hw_config(dev, 1)) {
+		printk(KERN_DEBUG "%s: hardware initialization failed\n",
+		       dev_info);
+		goto fail;
+	}
+
+	return 0;
+
+ fail:
+	prism2_free_local_data(dev);
+
+	if (irq_registered && dev)
+		free_irq(dev->irq, dev);
+
+	if (attr_mem)
+		iounmap((void *) attr_mem);
+
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,4))
+	pci_disable_device(pdev);
+#endif
+
+	return -ENODEV;
+}
+
+
+static void prism2_plx_remove(struct pci_dev *pdev)
+{
+	struct net_device *dev = pci_get_drvdata(pdev);
+	struct hostap_interface *iface = dev->priv;
+
+	/* Reset the hardware, and ensure interrupts are disabled. */
+	prism2_plx_cor_sreset(iface->local);
+	hfa384x_disable_interrupts(dev);
+
+	if (iface->local->attr_mem)
+		iounmap((void *) iface->local->attr_mem);
+	if (dev->irq)
+		free_irq(dev->irq, dev);
+
+	prism2_free_local_data(dev);
+
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,4))
+	pci_disable_device(pdev);
+#endif
+}
+
+
+MODULE_DEVICE_TABLE(pci, prism2_plx_id_table);
+
+static struct pci_driver prism2_plx_drv_id = {
+	.name		= "prism2_plx",
+	.id_table	= prism2_plx_id_table,
+	.probe		= prism2_plx_probe,
+	.remove		= prism2_plx_remove,
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,6))
+	.suspend	= NULL,
+	.resume		= NULL,
+	.enable_wake	= NULL
+#else /* Linux < 2.4.6 */
+	.suspend	= NULL,
+	.resume		= NULL
+#endif /* Linux >= 2.4.6 */
+};
+
+
+static int __init init_prism2_plx(void)
+{
+	printk(KERN_INFO "%s: %s\n", dev_info, version);
+
+	if (pci_register_driver(&prism2_plx_drv_id) <= 0) {
+		printk("hostap_plx: No devices found, driver not "
+		       "installed.\n");
+		pci_unregister_driver(&prism2_plx_drv_id);
+		return -ENODEV;
+	}
+
+	return 0;
+}
+
+
+static void __exit exit_prism2_plx(void)
+{
+	pci_unregister_driver(&prism2_plx_drv_id);
+	printk(KERN_INFO "%s: Driver unloaded\n", dev_info);
+}
+
+
+module_init(init_prism2_plx);
+module_exit(exit_prism2_plx);
diff -Nur linux-orig/drivers/net/wireless/hostap_proc.c linux/drivers/net/wireless/hostap_proc.c
--- linux-orig/drivers/net/wireless/hostap_proc.c	1970-01-01 03:00:00.000000000 +0300
+++ linux/drivers/net/wireless/hostap_proc.c	2003-10-11 21:11:56.000000000 +0400
@@ -0,0 +1,344 @@
+/* /proc routines for Host AP driver */
+
+#define PROC_LIMIT (PAGE_SIZE - 80)
+
+
+#ifndef PRISM2_NO_PROCFS_DEBUG
+static int prism2_debug_proc_read(char *page, char **start, off_t off,
+				  int count, int *eof, void *data)
+{
+	char *p = page;
+	local_info_t *local = (local_info_t *) data;
+	int i;
+
+	if (off != 0) {
+		*eof = 1;
+		return 0;
+	}
+
+	p += sprintf(p, "next_txfid=%d next_alloc=%d\n",
+		     local->next_txfid, local->next_alloc);
+	for (i = 0; i < PRISM2_TXFID_COUNT; i++)
+		p += sprintf(p, "FID: tx=%04X intransmit=%04X\n",
+			     local->txfid[i], local->intransmitfid[i]);
+	p += sprintf(p, "FW TX rate control: %d\n", local->fw_tx_rate_control);
+	p += sprintf(p, "beacon_int=%d\n", local->beacon_int);
+	p += sprintf(p, "dtim_period=%d\n", local->dtim_period);
+	p += sprintf(p, "wds_max_connections=%d\n",
+		     local->wds_max_connections);
+	p += sprintf(p, "dev_enabled=%d\n", local->dev_enabled);
+	p += sprintf(p, "sw_tick_stuck=%d\n", local->sw_tick_stuck);
+	if (local->crypt && local->crypt->ops)
+		p += sprintf(p, "crypt=%s\n", local->crypt->ops->name);
+	p += sprintf(p, "pri_only=%d\n", local->pri_only);
+
+	return (p - page);
+}
+#endif /* PRISM2_NO_PROCFS_DEBUG */
+
+
+static int prism2_stats_proc_read(char *page, char **start, off_t off,
+				  int count, int *eof, void *data)
+{
+	char *p = page;
+	local_info_t *local = (local_info_t *) data;
+	struct comm_tallies_sums *sums = (struct comm_tallies_sums *)
+		&local->comm_tallies;
+
+	if (off != 0) {
+		*eof = 1;
+		return 0;
+	}
+
+	p += sprintf(p, "TxUnicastFrames=%u\n", sums->tx_unicast_frames);
+	p += sprintf(p, "TxMulticastframes=%u\n", sums->tx_multicast_frames);
+	p += sprintf(p, "TxFragments=%u\n", sums->tx_fragments);
+	p += sprintf(p, "TxUnicastOctets=%u\n", sums->tx_unicast_octets);
+	p += sprintf(p, "TxMulticastOctets=%u\n", sums->tx_multicast_octets);
+	p += sprintf(p, "TxDeferredTransmissions=%u\n",
+		     sums->tx_deferred_transmissions);
+	p += sprintf(p, "TxSingleRetryFrames=%u\n",
+		     sums->tx_single_retry_frames);
+	p += sprintf(p, "TxMultipleRetryFrames=%u\n",
+		     sums->tx_multiple_retry_frames);
+	p += sprintf(p, "TxRetryLimitExceeded=%u\n",
+		     sums->tx_retry_limit_exceeded);
+	p += sprintf(p, "TxDiscards=%u\n", sums->tx_discards);
+	p += sprintf(p, "RxUnicastFrames=%u\n", sums->rx_unicast_frames);
+	p += sprintf(p, "RxMulticastFrames=%u\n", sums->rx_multicast_frames);
+	p += sprintf(p, "RxFragments=%u\n", sums->rx_fragments);
+	p += sprintf(p, "RxUnicastOctets=%u\n", sums->rx_unicast_octets);
+	p += sprintf(p, "RxMulticastOctets=%u\n", sums->rx_multicast_octets);
+	p += sprintf(p, "RxFCSErrors=%u\n", sums->rx_fcs_errors);
+	p += sprintf(p, "RxDiscardsNoBuffer=%u\n",
+		     sums->rx_discards_no_buffer);
+	p += sprintf(p, "TxDiscardsWrongSA=%u\n", sums->tx_discards_wrong_sa);
+	p += sprintf(p, "RxDiscardsWEPUndecryptable=%u\n",
+		     sums->rx_discards_wep_undecryptable);
+	p += sprintf(p, "RxMessageInMsgFragments=%u\n",
+		     sums->rx_message_in_msg_fragments);
+	p += sprintf(p, "RxMessageInBadMsgFragments=%u\n",
+		     sums->rx_message_in_bad_msg_fragments);
+	/* FIX: this may grow too long for one page(?) */
+
+	return (p - page);
+}
+
+
+static int prism2_wds_proc_read(char *page, char **start, off_t off,
+				int count, int *eof, void *data)
+{
+	char *p = page;
+	local_info_t *local = (local_info_t *) data;
+	struct list_head *ptr;
+	struct hostap_interface *iface;
+
+	if (off > PROC_LIMIT) {
+		*eof = 1;
+		return 0;
+	}
+
+	read_lock_bh(&local->iface_lock);
+	list_for_each(ptr, &local->hostap_interfaces) {
+		iface = list_entry(ptr, struct hostap_interface, list);
+		if (iface->type != HOSTAP_INTERFACE_WDS)
+			continue;
+		p += sprintf(p, "%s\t" MACSTR "\n",
+			     iface->dev->name,
+			     MAC2STR(iface->u.wds.remote_addr));
+		if ((p - page) > PROC_LIMIT) {
+			printk(KERN_DEBUG "%s: wds proc did not fit\n",
+			       local->dev->name);
+			break;
+		}
+	}
+	read_unlock_bh(&local->iface_lock);
+
+	if ((p - page) <= off) {
+		*eof = 1;
+		return 0;
+	}
+
+	*start = page + off;
+
+	return (p - page - off);
+}
+
+
+static int prism2_pda_proc_read(char *page, char **start, off_t off,
+				int count, int *eof, void *data)
+{
+	local_info_t *local = (local_info_t *) data;
+
+	if (local->pda == NULL || off >= PRISM2_PDA_SIZE) {
+		*eof = 1;
+		return 0;
+	}
+
+	if (off + count > PRISM2_PDA_SIZE)
+		count = PRISM2_PDA_SIZE - off;
+
+	memcpy(page, local->pda + off, count);
+	return count;
+}
+
+
+#ifdef PRISM2_IO_DEBUG
+static int prism2_io_debug_proc_read(char *page, char **start, off_t off,
+				     int count, int *eof, void *data)
+{
+	local_info_t *local = (local_info_t *) data;
+	int head = local->io_debug_head;
+	int start_bytes, left, copy, copied;
+
+	if (off + count > PRISM2_IO_DEBUG_SIZE * 4) {
+		*eof = 1;
+		if (off >= PRISM2_IO_DEBUG_SIZE * 4)
+			return 0;
+		count = PRISM2_IO_DEBUG_SIZE * 4 - off;
+	}
+
+	copied = 0;
+	start_bytes = (PRISM2_IO_DEBUG_SIZE - head) * 4;
+	left = count;
+
+	if (off < start_bytes) {
+		copy = start_bytes - off;
+		if (copy > count)
+			copy = count;
+		memcpy(page, ((u8 *) &local->io_debug[head]) + off, copy);
+		left -= copy;
+		if (left > 0)
+			memcpy(&page[copy], local->io_debug, left);
+	} else {
+		memcpy(page, ((u8 *) local->io_debug) + (off - start_bytes),
+		       left);
+	}
+
+	*start = page;
+
+	return count;
+}
+#endif /* PRISM2_IO_DEBUG */
+
+
+#ifndef PRISM2_NO_STATION_MODES
+static int prism2_scan_results_proc_read(char *page, char **start, off_t off,
+					 int count, int *eof, void *data)
+{
+	char *p = page;
+	local_info_t *local = (local_info_t *) data;
+	int entries, entry, i, len, total = 0, hostscan;
+	struct hfa384x_scan_result *scanres;
+	struct hfa384x_hostscan_result *hscanres;
+	u8 *pos;
+
+	p += sprintf(p, "CHID ANL SL BcnInt Capab Rate BSSID ATIM SupRates "
+		     "SSID\n");
+
+	spin_lock_bh(&local->lock);
+	hostscan = local->last_scan_type == PRISM2_HOSTSCAN;
+	entries = hostscan ? local->last_hostscan_results_count :
+		local->last_scan_results_count;
+	for (entry = 0; entry < entries; entry++) {
+		hscanres = &local->last_hostscan_results[entry];
+		scanres = &local->last_scan_results[entry];
+
+		if (total + (p - page) <= off) {
+			total += p - page;
+			p = page;
+		}
+		if (total + (p - page) > off + count)
+			break;
+		if ((p - page) > (PAGE_SIZE - 200))
+			break;
+
+		if (hostscan) {
+			p += sprintf(p, "%d %d %d %d 0x%02x %d " MACSTR " %d ",
+				     le16_to_cpu(hscanres->chid),
+				     (s16) le16_to_cpu(hscanres->anl),
+				     (s16) le16_to_cpu(hscanres->sl),
+				     le16_to_cpu(hscanres->beacon_interval),
+				     le16_to_cpu(hscanres->capability),
+				     le16_to_cpu(hscanres->rate),
+				     MAC2STR(hscanres->bssid),
+				     le16_to_cpu(hscanres->atim));
+		} else {
+			p += sprintf(p, "%d %d %d %d 0x%02x %d " MACSTR
+				     " N/A ",
+				     le16_to_cpu(scanres->chid),
+				     (s16) le16_to_cpu(scanres->anl),
+				     (s16) le16_to_cpu(scanres->sl),
+				     le16_to_cpu(scanres->beacon_interval),
+				     le16_to_cpu(scanres->capability),
+				     le16_to_cpu(scanres->rate),
+				     MAC2STR(scanres->bssid));
+		}
+
+		pos = hostscan ? hscanres->sup_rates : scanres->sup_rates;
+		for (i = 0; i < sizeof(hscanres->sup_rates); i++) {
+			if (pos[i] == 0)
+				break;
+			p += sprintf(p, "<%02x>", pos[i]);
+		}
+		p += sprintf(p, " ");
+
+		pos = hostscan ? hscanres->ssid : scanres->ssid;
+		len = le16_to_cpu(hostscan ? hscanres->ssid_len :
+				  scanres->ssid_len);
+		if (len > 32)
+			len = 32;
+		for (i = 0; i < len; i++) {
+			unsigned char c = pos[i];
+			if (c >= 32 && c < 127)
+				p += sprintf(p, "%c", c);
+			else
+				p += sprintf(p, "<%02x>", c);
+		}
+		p += sprintf(p, "\n");
+	}
+	spin_unlock_bh(&local->lock);
+
+	total += (p - page);
+	if (total >= off + count)
+		*eof = 1;
+
+	if (total < off) {
+		*eof = 1;
+		return 0;
+	}
+
+	len = total - off;
+	if (len > (p - page))
+		len = p - page;
+	*start = p - len;
+	if (len > count)
+		len = count;
+
+	return len;
+}
+#endif /* PRISM2_NO_STATION_MODES */
+
+
+void hostap_init_proc(local_info_t *local)
+{
+	local->proc = NULL;
+
+	if (hostap_proc == NULL) {
+		printk(KERN_WARNING "%s: hostap proc directory not created\n",
+		       local->dev->name);
+		return;
+	}
+
+	local->proc = proc_mkdir(local->dev->name, hostap_proc);
+	if (local->proc == NULL) {
+		printk(KERN_INFO "/proc/net/hostap/%s creation failed\n",
+		       local->dev->name);
+		return;
+	}
+
+#ifndef PRISM2_NO_PROCFS_DEBUG
+	create_proc_read_entry("debug", 0, local->proc,
+			       prism2_debug_proc_read, local);
+#endif /* PRISM2_NO_PROCFS_DEBUG */
+	create_proc_read_entry("stats", 0, local->proc,
+			       prism2_stats_proc_read, local);
+	create_proc_read_entry("wds", 0, local->proc,
+			       prism2_wds_proc_read, local);
+	create_proc_read_entry("pda", 0, local->proc,
+			       prism2_pda_proc_read, local);
+#ifdef PRISM2_IO_DEBUG
+	create_proc_read_entry("io_debug", 0, local->proc,
+			       prism2_io_debug_proc_read, local);
+#endif /* PRISM2_IO_DEBUG */
+#ifndef PRISM2_NO_STATION_MODES
+	create_proc_read_entry("scan_results", 0, local->proc,
+			       prism2_scan_results_proc_read, local);
+#endif /* PRISM2_NO_STATION_MODES */
+}
+
+
+void hostap_remove_proc(local_info_t *local)
+{
+	if (local->proc != NULL) {
+#ifndef PRISM2_NO_STATION_MODES
+		remove_proc_entry("scan_results", local->proc);
+#endif /* PRISM2_NO_STATION_MODES */
+#ifdef PRISM2_IO_DEBUG
+		remove_proc_entry("io_debug", local->proc);
+#endif /* PRISM2_IO_DEBUG */
+		remove_proc_entry("pda", local->proc);
+		remove_proc_entry("wds", local->proc);
+		remove_proc_entry("stats", local->proc);
+#ifndef PRISM2_NO_PROCFS_DEBUG
+		remove_proc_entry("debug", local->proc);
+#endif /* PRISM2_NO_PROCFS_DEBUG */
+		if (local->dev != NULL && local->dev->name != NULL &&
+		    hostap_proc != NULL)
+			remove_proc_entry(local->dev->name, hostap_proc);
+	}
+}
+
+
+EXPORT_SYMBOL(hostap_init_proc);
+EXPORT_SYMBOL(hostap_remove_proc);
diff -Nur linux-orig/drivers/net/wireless/hostap_wext.h linux/drivers/net/wireless/hostap_wext.h
--- linux-orig/drivers/net/wireless/hostap_wext.h	1970-01-01 03:00:00.000000000 +0300
+++ linux/drivers/net/wireless/hostap_wext.h	2004-02-16 10:28:42.000000000 +0300
@@ -0,0 +1,77 @@
+#ifndef HOSTAP_WEXT_H
+#define HOSTAP_WEXT_H
+
+/* Linux Wireless Extensions compatibility code */
+
+#if defined(CONFIG_NET_RADIO) || defined(CONFIG_NET_PCMCIA_RADIO)
+#include <linux/wireless.h>
+#if WIRELESS_EXT > 12
+#include <net/iw_handler.h>
+#endif /* WIRELESS_EXT > 12 */
+#if WIRELESS_EXT < 9
+#warning Linux wireless extensions versions older than 9 are not supported
+/* Compile limited version without wireless ext support */
+#undef WIRELESS_EXT
+#endif /* WIRELESS_EXT < 9 */
+#endif /* CONFIG_NET_RADIO || CONFIG_NET_PCMCIA_RADIO */
+
+
+/* if wireless ext is not supported */
+#ifndef IW_MODE_ADHOC
+#define IW_MODE_ADHOC 1
+#endif
+#ifndef IW_MODE_INFRA
+#define IW_MODE_INFRA 2
+#endif
+#ifndef IW_MODE_MASTER
+#define IW_MODE_MASTER 3
+#endif
+#ifndef IW_MODE_REPEAT
+#define IW_MODE_REPEAT 4
+#endif
+#ifndef IW_MODE_SECOND
+#define IW_MODE_SECOND 5
+#endif
+#ifndef IW_MODE_MONITOR
+#define IW_MODE_MONITOR 6
+#endif
+
+
+
+#ifdef WIRELESS_EXT
+/* Conversion to new driver API by Jean II */
+
+#if WIRELESS_EXT <= 12
+/* Wireless extensions backward compatibility */
+
+/* Dummy prototype, as we don't really need it */
+struct iw_request_info;
+#endif /* WIRELESS_EXT <= 12 */
+
+
+#if WIRELESS_EXT >= 15
+/* Wireless ext ver15 allows verification of iwpriv support and sub-ioctls can
+ * be included even if not especially configured. */
+#ifndef PRISM2_USE_WE_SUB_IOCTLS
+#define PRISM2_USE_WE_SUB_IOCTLS
+#endif /* PRISM2_USE_WE_SUB_IOCTLS */
+
+/* Assume that hosts using new wireless ext also have new wireless tools
+ * (ver >= 25) */
+#ifndef PRISM2_USE_WE_TYPE_ADDR
+#define PRISM2_USE_WE_TYPE_ADDR
+#endif /* PRISM2_USE_WE_TYPE_ADDR */
+#endif /* WIRELESS_EXT >= 15 */
+
+
+#ifdef PRISM2_USE_WE_TYPE_ADDR
+/* Added in WIRELESS_EXT 15, but can be used with older versions assuming
+ * iwpriv ver >= 25 */
+#ifndef IW_PRIV_TYPE_ADDR
+#define IW_PRIV_TYPE_ADDR 0x6000
+#endif /* IW_PRIV_TYPE_ADDR */
+#endif /* PRISM2_USE_WE_TYPE_ADDR */
+
+#endif /* WIRELESS_EXT */
+
+#endif /* HOSTAP_WEXT_H */
diff -Nur linux-orig/drivers/net/wireless/hostap_wlan.h linux/drivers/net/wireless/hostap_wlan.h
--- linux-orig/drivers/net/wireless/hostap_wlan.h	1970-01-01 03:00:00.000000000 +0300
+++ linux/drivers/net/wireless/hostap_wlan.h	2004-02-16 10:36:04.000000000 +0300
@@ -0,0 +1,1018 @@
+#ifndef HOSTAP_WLAN_H
+#define HOSTAP_WLAN_H
+
+#include "hostap_config.h"
+#ifdef __KERNEL__
+#include "hostap_compat.h"
+#endif
+#include "hostap_crypt.h"
+#include "hostap_common.h"
+
+#define MAX_PARM_DEVICES 8
+#define PARM_MIN_MAX "1-" __MODULE_STRING(MAX_PARM_DEVICES)
+#define DEF_INTS -1, -1, -1, -1, -1, -1, -1
+#define GET_INT_PARM(var,idx) var[var[idx] < 0 ? 0 : idx]
+
+
+/* Specific skb->protocol value that indicates that the packet already contains
+ * txdesc header.
+ * FIX: This might need own value that would be allocated especially for Prism2
+ * txdesc; ETH_P_CONTROL is commented as "Card specific control frames".
+ * However, these skb's should have only minimal path in the kernel side since
+ * prism2_send_mgmt() sends these with dev_queue_xmit() to prism2_tx(). */
+#define ETH_P_HOSTAP ETH_P_CONTROL
+
+#ifndef ARPHRD_IEEE80211
+#define ARPHRD_IEEE80211 801
+#endif
+#ifndef ARPHRD_IEEE80211_PRISM
+#define ARPHRD_IEEE80211_PRISM 802
+#endif
+
+/* ARPHRD_IEEE80211_PRISM uses a bloated version of Prism2 RX frame header
+ * (from linux-wlan-ng) */
+struct linux_wlan_ng_val {
+	u32 did;
+	u16 status, len;
+	u32 data;
+} __attribute__ ((packed));
+
+struct linux_wlan_ng_prism_hdr {
+	u32 msgcode, msglen;
+	char devname[16];
+	struct linux_wlan_ng_val hosttime, mactime, channel, rssi, sq, signal,
+		noise, rate, istx, frmlen;
+} __attribute__ ((packed));
+
+struct linux_wlan_ng_cap_hdr {
+	u32 version;
+	u32 length;
+	u64 mactime;
+	u64 hosttime;
+	u32 phytype;
+	u32 channel;
+	u32 datarate;
+	u32 antenna;
+	u32 priority;
+	u32 ssi_type;
+	s32 ssi_signal;
+	s32 ssi_noise;
+	u32 preamble;
+	u32 encoding;
+} __attribute__ ((packed));
+
+#define LWNG_CAP_DID_BASE   (4 | (1 << 6)) /* section 4, group 1 */
+#define LWNG_CAPHDR_VERSION 0x80211001
+
+struct hfa384x_rx_frame {
+	/* HFA384X RX frame descriptor */
+	u16 status; /* HFA384X_RX_STATUS_ flags */
+	u32 time; /* timestamp, 1 microsecond resolution */
+	u8 silence; /* 27 .. 154; seems to be 0 */
+	u8 signal; /* 27 .. 154 */
+	u8 rate; /* 10, 20, 55, or 110 */
+	u8 rxflow;
+	u32 reserved;
+
+	/* 802.11 */
+	u16 frame_control;
+	u16 duration_id;
+	u8 addr1[6];
+	u8 addr2[6];
+	u8 addr3[6];
+	u16 seq_ctrl;
+	u8 addr4[6];
+	u16 data_len;
+
+	/* 802.3 */
+	u8 dst_addr[6];
+	u8 src_addr[6];
+	u16 len;
+
+	/* followed by frame data; max 2304 bytes */
+} __attribute__ ((packed));
+
+
+struct hfa384x_tx_frame {
+	/* HFA384X TX frame descriptor */
+	u16 status; /* HFA384X_TX_STATUS_ flags */
+	u16 reserved1;
+	u16 reserved2;
+	u32 sw_support;
+	u8 retry_count; /* not yet implemented */
+	u8 tx_rate; /* Host AP only; 0 = firmware, or 10, 20, 55, 110 */
+	u16 tx_control; /* HFA384X_TX_CTRL_ flags */
+
+	/* 802.11 */
+	u16 frame_control; /* parts not used */
+	u16 duration_id;
+	u8 addr1[6];
+	u8 addr2[6]; /* filled by firmware */
+	u8 addr3[6];
+	u16 seq_ctrl; /* filled by firmware */
+	u8 addr4[6];
+	u16 data_len;
+
+	/* 802.3 */
+	u8 dst_addr[6];
+	u8 src_addr[6];
+	u16 len;
+
+	/* followed by frame data; max 2304 bytes */
+} __attribute__ ((packed));
+
+
+struct hfa384x_rid_hdr
+{
+	u16 len;
+	u16 rid;
+} __attribute__ ((packed));
+
+
+/* Macro for converting signal levels (range 27 .. 154) to wireless ext
+ * dBm value with some accuracy */
+#define HFA384X_LEVEL_TO_dBm(v) 0x100 + (v) * 100 / 255 - 100
+
+/* Macro for converting signal/silence levels (RSSI) from RX descriptor to
+ * dBm */
+#define HFA384X_RSSI_LEVEL_TO_dBm(v) ((v) - 100)
+
+struct hfa384x_scan_request {
+	u16 channel_list;
+	u16 txrate; /* HFA384X_RATES_* */
+} __attribute__ ((packed));
+
+struct hfa384x_hostscan_request {
+	u16 channel_list;
+	u16 txrate;
+	u16 target_ssid_len;
+	u8 target_ssid[32];
+} __attribute__ ((packed));
+
+struct hfa384x_join_request {
+	u8 bssid[6];
+	u16 channel;
+} __attribute__ ((packed));
+
+struct hfa384x_info_frame {
+	u16 len;
+	u16 type;
+} __attribute__ ((packed));
+
+struct hfa384x_comm_tallies {
+	u16 tx_unicast_frames;
+	u16 tx_multicast_frames;
+	u16 tx_fragments;
+	u16 tx_unicast_octets;
+	u16 tx_multicast_octets;
+	u16 tx_deferred_transmissions;
+	u16 tx_single_retry_frames;
+	u16 tx_multiple_retry_frames;
+	u16 tx_retry_limit_exceeded;
+	u16 tx_discards;
+	u16 rx_unicast_frames;
+	u16 rx_multicast_frames;
+	u16 rx_fragments;
+	u16 rx_unicast_octets;
+	u16 rx_multicast_octets;
+	u16 rx_fcs_errors;
+	u16 rx_discards_no_buffer;
+	u16 tx_discards_wrong_sa;
+	u16 rx_discards_wep_undecryptable;
+	u16 rx_message_in_msg_fragments;
+	u16 rx_message_in_bad_msg_fragments;
+} __attribute__ ((packed));
+
+struct hfa384x_comm_tallies32 {
+	u32 tx_unicast_frames;
+	u32 tx_multicast_frames;
+	u32 tx_fragments;
+	u32 tx_unicast_octets;
+	u32 tx_multicast_octets;
+	u32 tx_deferred_transmissions;
+	u32 tx_single_retry_frames;
+	u32 tx_multiple_retry_frames;
+	u32 tx_retry_limit_exceeded;
+	u32 tx_discards;
+	u32 rx_unicast_frames;
+	u32 rx_multicast_frames;
+	u32 rx_fragments;
+	u32 rx_unicast_octets;
+	u32 rx_multicast_octets;
+	u32 rx_fcs_errors;
+	u32 rx_discards_no_buffer;
+	u32 tx_discards_wrong_sa;
+	u32 rx_discards_wep_undecryptable;
+	u32 rx_message_in_msg_fragments;
+	u32 rx_message_in_bad_msg_fragments;
+} __attribute__ ((packed));
+
+struct hfa384x_scan_result_hdr {
+	u16 reserved;
+	u16 scan_reason;
+#define HFA384X_SCAN_IN_PROGRESS 0 /* no results available yet */
+#define HFA384X_SCAN_HOST_INITIATED 1
+#define HFA384X_SCAN_FIRMWARE_INITIATED 2
+#define HFA384X_SCAN_INQUIRY_FROM_HOST 3
+} __attribute__ ((packed));
+
+#define HFA384X_SCAN_MAX_RESULTS 32
+
+struct hfa384x_scan_result {
+	u16 chid;
+	u16 anl;
+	u16 sl;
+	u8 bssid[6];
+	u16 beacon_interval;
+	u16 capability;
+	u16 ssid_len;
+	u8 ssid[32];
+	u8 sup_rates[10];
+	u16 rate;
+} __attribute__ ((packed));
+
+struct hfa384x_hostscan_result {
+	u16 chid;
+	u16 anl;
+	u16 sl;
+	u8 bssid[6];
+	u16 beacon_interval;
+	u16 capability;
+	u16 ssid_len;
+	u8 ssid[32];
+	u8 sup_rates[10];
+	u16 rate;
+	u16 atim;
+} __attribute__ ((packed));
+
+struct comm_tallies_sums {
+	unsigned int tx_unicast_frames;
+	unsigned int tx_multicast_frames;
+	unsigned int tx_fragments;
+	unsigned int tx_unicast_octets;
+	unsigned int tx_multicast_octets;
+	unsigned int tx_deferred_transmissions;
+	unsigned int tx_single_retry_frames;
+	unsigned int tx_multiple_retry_frames;
+	unsigned int tx_retry_limit_exceeded;
+	unsigned int tx_discards;
+	unsigned int rx_unicast_frames;
+	unsigned int rx_multicast_frames;
+	unsigned int rx_fragments;
+	unsigned int rx_unicast_octets;
+	unsigned int rx_multicast_octets;
+	unsigned int rx_fcs_errors;
+	unsigned int rx_discards_no_buffer;
+	unsigned int tx_discards_wrong_sa;
+	unsigned int rx_discards_wep_undecryptable;
+	unsigned int rx_message_in_msg_fragments;
+	unsigned int rx_message_in_bad_msg_fragments;
+};
+
+
+struct hfa384x_regs {
+	u16 cmd;
+	u16 evstat;
+	u16 offset0;
+	u16 offset1;
+	u16 swsupport0;
+};
+
+
+#if defined(PRISM2_PCCARD) || defined(PRISM2_PLX)
+/* I/O ports for HFA384X Controller access */
+#define HFA384X_CMD_OFF 0x00
+#define HFA384X_PARAM0_OFF 0x02
+#define HFA384X_PARAM1_OFF 0x04
+#define HFA384X_PARAM2_OFF 0x06
+#define HFA384X_STATUS_OFF 0x08
+#define HFA384X_RESP0_OFF 0x0A
+#define HFA384X_RESP1_OFF 0x0C
+#define HFA384X_RESP2_OFF 0x0E
+#define HFA384X_INFOFID_OFF 0x10
+#define HFA384X_CONTROL_OFF 0x14
+#define HFA384X_SELECT0_OFF 0x18
+#define HFA384X_SELECT1_OFF 0x1A
+#define HFA384X_OFFSET0_OFF 0x1C
+#define HFA384X_OFFSET1_OFF 0x1E
+#define HFA384X_RXFID_OFF 0x20
+#define HFA384X_ALLOCFID_OFF 0x22
+#define HFA384X_TXCOMPLFID_OFF 0x24
+#define HFA384X_SWSUPPORT0_OFF 0x28
+#define HFA384X_SWSUPPORT1_OFF 0x2A
+#define HFA384X_SWSUPPORT2_OFF 0x2C
+#define HFA384X_EVSTAT_OFF 0x30
+#define HFA384X_INTEN_OFF 0x32
+#define HFA384X_EVACK_OFF 0x34
+#define HFA384X_DATA0_OFF 0x36
+#define HFA384X_DATA1_OFF 0x38
+#define HFA384X_AUXPAGE_OFF 0x3A
+#define HFA384X_AUXOFFSET_OFF 0x3C
+#define HFA384X_AUXDATA_OFF 0x3E
+#endif /* PRISM2_PCCARD || PRISM2_PLX */
+
+#ifdef PRISM2_PCI
+/* Memory addresses for ISL3874 controller access */
+#define HFA384X_CMD_OFF 0x00
+#define HFA384X_PARAM0_OFF 0x04
+#define HFA384X_PARAM1_OFF 0x08
+#define HFA384X_PARAM2_OFF 0x0C
+#define HFA384X_STATUS_OFF 0x10
+#define HFA384X_RESP0_OFF 0x14
+#define HFA384X_RESP1_OFF 0x18
+#define HFA384X_RESP2_OFF 0x1C
+#define HFA384X_INFOFID_OFF 0x20
+#define HFA384X_CONTROL_OFF 0x28
+#define HFA384X_SELECT0_OFF 0x30
+#define HFA384X_SELECT1_OFF 0x34
+#define HFA384X_OFFSET0_OFF 0x38
+#define HFA384X_OFFSET1_OFF 0x3C
+#define HFA384X_RXFID_OFF 0x40
+#define HFA384X_ALLOCFID_OFF 0x44
+#define HFA384X_TXCOMPLFID_OFF 0x48
+#define HFA384X_PCICOR_OFF 0x4C
+#define HFA384X_SWSUPPORT0_OFF 0x50
+#define HFA384X_SWSUPPORT1_OFF 0x54
+#define HFA384X_SWSUPPORT2_OFF 0x58
+#define HFA384X_PCIHCR_OFF 0x5C
+#define HFA384X_EVSTAT_OFF 0x60
+#define HFA384X_INTEN_OFF 0x64
+#define HFA384X_EVACK_OFF 0x68
+#define HFA384X_DATA0_OFF 0x6C
+#define HFA384X_DATA1_OFF 0x70
+#define HFA384X_AUXPAGE_OFF 0x74
+#define HFA384X_AUXOFFSET_OFF 0x78
+#define HFA384X_AUXDATA_OFF 0x7C
+#define HFA384X_PCI_M0_ADDRH_OFF 0x80
+#define HFA384X_PCI_M0_ADDRL_OFF 0x84
+#define HFA384X_PCI_M0_LEN_OFF 0x88
+#define HFA384X_PCI_M0_CTL_OFF 0x8C
+#define HFA384X_PCI_STATUS_OFF 0x98
+#define HFA384X_PCI_M1_ADDRH_OFF 0xA0
+#define HFA384X_PCI_M1_ADDRL_OFF 0xA4
+#define HFA384X_PCI_M1_LEN_OFF 0xA8
+#define HFA384X_PCI_M1_CTL_OFF 0xAC
+
+/* PCI bus master control bits (these are undocumented; based on guessing and
+ * experimenting..) */
+#define HFA384X_PCI_CTL_FROM_BAP (BIT(5) | BIT(1) | BIT(0))
+#define HFA384X_PCI_CTL_TO_BAP (BIT(5) | BIT(0))
+
+#endif /* PRISM2_PCI */
+
+
+/* Command codes for CMD reg. */
+#define HFA384X_CMDCODE_INIT 0x00
+#define HFA384X_CMDCODE_ENABLE 0x01
+#define HFA384X_CMDCODE_DISABLE 0x02
+#define HFA384X_CMDCODE_ALLOC 0x0A
+#define HFA384X_CMDCODE_TRANSMIT 0x0B
+#define HFA384X_CMDCODE_INQUIRE 0x11
+#define HFA384X_CMDCODE_ACCESS 0x21
+#define HFA384X_CMDCODE_ACCESS_WRITE (0x21 | BIT(8))
+#define HFA384X_CMDCODE_DOWNLOAD 0x22
+#define HFA384X_CMDCODE_READMIF 0x30
+#define HFA384X_CMDCODE_WRITEMIF 0x31
+#define HFA384X_CMDCODE_TEST 0x38
+
+#define HFA384X_CMDCODE_MASK 0x3F
+
+/* Test mode operations */
+#define HFA384X_TEST_CHANGE_CHANNEL 0x08
+#define HFA384X_TEST_MONITOR 0x0B
+#define HFA384X_TEST_STOP 0x0F
+#define HFA384X_TEST_CFG_BITS 0x15
+#define HFA384X_TEST_CFG_BIT_ALC BIT(3)
+
+#define HFA384X_CMD_BUSY BIT(15)
+
+#define HFA384X_CMD_TX_RECLAIM BIT(8)
+
+#define HFA384X_OFFSET_ERR BIT(14)
+#define HFA384X_OFFSET_BUSY BIT(15)
+
+
+/* ProgMode for download command */
+#define HFA384X_PROGMODE_DISABLE 0
+#define HFA384X_PROGMODE_ENABLE_VOLATILE 1
+#define HFA384X_PROGMODE_ENABLE_NON_VOLATILE 2
+#define HFA384X_PROGMODE_PROGRAM_NON_VOLATILE 3
+
+#define HFA384X_AUX_MAGIC0 0xfe01
+#define HFA384X_AUX_MAGIC1 0xdc23
+#define HFA384X_AUX_MAGIC2 0xba45
+
+#define HFA384X_AUX_PORT_DISABLED 0
+#define HFA384X_AUX_PORT_DISABLE BIT(14)
+#define HFA384X_AUX_PORT_ENABLE BIT(15)
+#define HFA384X_AUX_PORT_ENABLED (BIT(14) | BIT(15))
+#define HFA384X_AUX_PORT_MASK (BIT(14) | BIT(15))
+
+#define PRISM2_PDA_SIZE 1024
+
+
+/* Events; EvStat, Interrupt mask (IntEn), and acknowledge bits (EvAck) */
+#define HFA384X_EV_TICK BIT(15)
+#define HFA384X_EV_WTERR BIT(14)
+#define HFA384X_EV_INFDROP BIT(13)
+#ifdef PRISM2_PCI
+#define HFA384X_EV_PCI_M1 BIT(9)
+#define HFA384X_EV_PCI_M0 BIT(8)
+#endif /* PRISM2_PCI */
+#define HFA384X_EV_INFO BIT(7)
+#define HFA384X_EV_DTIM BIT(5)
+#define HFA384X_EV_CMD BIT(4)
+#define HFA384X_EV_ALLOC BIT(3)
+#define HFA384X_EV_TXEXC BIT(2)
+#define HFA384X_EV_TX BIT(1)
+#define HFA384X_EV_RX BIT(0)
+
+
+/* HFA384X Information frames */
+#define HFA384X_INFO_HANDOVERADDR 0xF000 /* AP f/w ? */
+#define HFA384X_INFO_HANDOVERDEAUTHADDR 0xF001 /* AP f/w 1.3.7 */
+#define HFA384X_INFO_COMMTALLIES 0xF100
+#define HFA384X_INFO_SCANRESULTS 0xF101
+#define HFA384X_INFO_CHANNELINFORESULTS 0xF102 /* AP f/w only */
+#define HFA384X_INFO_HOSTSCANRESULTS 0xF103
+#define HFA384X_INFO_LINKSTATUS 0xF200
+#define HFA384X_INFO_ASSOCSTATUS 0xF201 /* ? */
+#define HFA384X_INFO_AUTHREQ 0xF202 /* ? */
+#define HFA384X_INFO_PSUSERCNT 0xF203 /* ? */
+#define HFA384X_INFO_KEYIDCHANGED 0xF204 /* ? */
+
+enum { HFA384X_LINKSTATUS_CONNECTED = 1,
+       HFA384X_LINKSTATUS_DISCONNECTED = 2,
+       HFA384X_LINKSTATUS_AP_CHANGE = 3,
+       HFA384X_LINKSTATUS_AP_OUT_OF_RANGE = 4,
+       HFA384X_LINKSTATUS_AP_IN_RANGE = 5,
+       HFA384X_LINKSTATUS_ASSOC_FAILED = 6 };
+
+enum { HFA384X_PORTTYPE_BSS = 1, HFA384X_PORTTYPE_WDS = 2,
+       HFA384X_PORTTYPE_PSEUDO_IBSS = 3, HFA384X_PORTTYPE_IBSS = 0,
+       HFA384X_PORTTYPE_HOSTAP = 6 };
+
+#define HFA384X_RATES_1MBPS BIT(0)
+#define HFA384X_RATES_2MBPS BIT(1)
+#define HFA384X_RATES_5MBPS BIT(2)
+#define HFA384X_RATES_11MBPS BIT(3)
+
+#define HFA384X_ROAMING_FIRMWARE 1
+#define HFA384X_ROAMING_HOST 2
+#define HFA384X_ROAMING_DISABLED 3
+
+#define HFA384X_WEPFLAGS_PRIVACYINVOKED BIT(0)
+#define HFA384X_WEPFLAGS_EXCLUDEUNENCRYPTED BIT(1)
+#define HFA384X_WEPFLAGS_HOSTENCRYPT BIT(4)
+#define HFA384X_WEPFLAGS_HOSTDECRYPT BIT(7)
+
+#define HFA384X_RX_STATUS_MSGTYPE (BIT(15) | BIT(14) | BIT(13))
+#define HFA384X_RX_STATUS_PCF BIT(12)
+#define HFA384X_RX_STATUS_MACPORT (BIT(10) | BIT(9) | BIT(8))
+#define HFA384X_RX_STATUS_UNDECR BIT(1)
+#define HFA384X_RX_STATUS_FCSERR BIT(0)
+
+#define HFA384X_RX_STATUS_GET_MSGTYPE(s) \
+(((s) & HFA384X_RX_STATUS_MSGTYPE) >> 13)
+#define HFA384X_RX_STATUS_GET_MACPORT(s) \
+(((s) & HFA384X_RX_STATUS_MACPORT) >> 8)
+
+enum { HFA384X_RX_MSGTYPE_NORMAL = 0, HFA384X_RX_MSGTYPE_RFC1042 = 1,
+       HFA384X_RX_MSGTYPE_BRIDGETUNNEL = 2, HFA384X_RX_MSGTYPE_MGMT = 4 };
+
+
+#define HFA384X_TX_CTRL_ALT_RTRY BIT(5)
+#define HFA384X_TX_CTRL_802_11 BIT(3)
+#define HFA384X_TX_CTRL_802_3 0
+#define HFA384X_TX_CTRL_TX_EX BIT(2)
+#define HFA384X_TX_CTRL_TX_OK BIT(1)
+
+#define HFA384X_TX_STATUS_RETRYERR BIT(0)
+#define HFA384X_TX_STATUS_AGEDERR BIT(1)
+#define HFA384X_TX_STATUS_DISCON BIT(2)
+#define HFA384X_TX_STATUS_FORMERR BIT(3)
+
+/* HFA3861/3863 (BBP) Control Registers */
+#define HFA386X_CR_TX_CONFIGURE 0x12
+#define HFA386X_CR_RX_CONFIGURE 0x14
+#define HFA386X_CR_A_D_TEST_MODES2 0x1A
+#define HFA386X_CR_MANUAL_TX_POWER 0x3E
+
+
+#ifdef __KERNEL__
+
+#define PRISM2_TXFID_COUNT 8
+#define PRISM2_DATA_MAXLEN 2304
+#define PRISM2_TXFID_LEN (PRISM2_DATA_MAXLEN + sizeof(struct hfa384x_tx_frame))
+#define PRISM2_TXFID_EMPTY 0xffff
+#define PRISM2_TXFID_RESERVED 0xfffe
+#define PRISM2_DUMMY_FID 0xffff
+#define MAX_SSID_LEN 32
+#define MAX_NAME_LEN 32 /* this is assumed to be equal to MAX_SSID_LEN */
+
+#define PRISM2_DUMP_RX_HDR BIT(0)
+#define PRISM2_DUMP_TX_HDR BIT(1)
+#define PRISM2_DUMP_TXEXC_HDR BIT(2)
+
+struct hostap_tx_callback_info {
+	u16 idx;
+	void (*func)(struct sk_buff *, int ok, void *);
+	void *data;
+	struct hostap_tx_callback_info *next;
+};
+
+
+/* IEEE 802.11 requires that STA supports concurrent reception of at least
+ * three fragmented frames. This define can be increased to support more
+ * concurrent frames, but it should be noted that each entry can consume about
+ * 2 kB of RAM and increasing cache size will slow down frame reassembly. */
+#define PRISM2_FRAG_CACHE_LEN 4
+
+struct prism2_frag_entry {
+	unsigned long first_frag_time;
+	unsigned int seq;
+	unsigned int last_frag;
+	struct sk_buff *skb;
+	u8 src_addr[ETH_ALEN];
+	u8 dst_addr[ETH_ALEN];
+};
+
+
+struct prism2_crypt_data {
+	struct list_head list; /* delayed deletion list */
+	struct hostap_crypto_ops *ops;
+	void *priv;
+	atomic_t refcnt;
+};
+
+struct hostap_cmd_queue {
+	struct list_head list;
+	wait_queue_head_t compl;
+	volatile enum { CMD_SLEEP, CMD_CALLBACK, CMD_COMPLETED } type;
+	void (*callback)(struct net_device *dev, void *context, u16 resp0,
+			 u16 res);
+	void *context;
+	u16 cmd, param0, param1;
+	u16 resp0, res;
+	volatile int issued, issuing;
+
+	atomic_t usecnt;
+	int del_req;
+};
+
+/* options for hw_shutdown */
+#define HOSTAP_HW_NO_DISABLE BIT(0)
+#define HOSTAP_HW_ENABLE_CMDCOMPL BIT(1)
+
+typedef struct local_info local_info_t;
+
+struct prism2_helper_functions {
+	/* these functions are defined in hardware model specific files
+	 * (hostap_{cs,plx,pci}.c */
+	int (*card_present)(local_info_t *local);
+	void (*cor_sreset)(local_info_t *local);
+	int (*dev_open)(local_info_t *local);
+	int (*dev_close)(local_info_t *local);
+	void (*genesis_reset)(local_info_t *local, int hcr);
+
+	/* the following functions are from hostap_hw.c, but they may have some
+	 * hardware model specific code */
+
+	/* FIX: low-level commands like cmd might disappear at some point to
+	 * make it easier to change them if needed (e.g., cmd would be replaced
+	 * with write_mif/read_mif/testcmd/inquire); at least get_rid and
+	 * set_rid might move to hostap_{cs,plx,pci}.c */
+	int (*cmd)(struct net_device *dev, u16 cmd, u16 param0, u16 *param1,
+		   u16 *resp0);
+	void (*read_regs)(struct net_device *dev, struct hfa384x_regs *regs);
+	int (*get_rid)(struct net_device *dev, u16 rid, void *buf, int len,
+		       int exact_len);
+	int (*set_rid)(struct net_device *dev, u16 rid, void *buf, int len);
+	int (*hw_enable)(struct net_device *dev, int initial);
+	int (*hw_config)(struct net_device *dev, int initial);
+	void (*hw_reset)(struct net_device *dev);
+	void (*hw_shutdown)(struct net_device *dev, int no_disable);
+	int (*reset_port)(struct net_device *dev);
+	int (*tx)(struct sk_buff *skb, struct net_device *dev);
+	void (*schedule_reset)(local_info_t *local);
+#ifdef PRISM2_DOWNLOAD_SUPPORT
+	int (*download)(local_info_t *local,
+			struct prism2_download_param *param);
+#endif /* PRISM2_DOWNLOAD_SUPPORT */
+	int (*tx_80211)(struct sk_buff *skb, struct net_device *dev);
+};
+
+
+struct prism2_download_data {
+	u32 dl_cmd;
+	u32 start_addr;
+	u32 num_areas;
+	struct prism2_download_data_area {
+		u32 addr; /* wlan card address */
+		u32 len;
+		u8 *data; /* allocated data */
+	} data[0];
+};
+
+
+/* Per radio private Host AP data - shared by all net devices interfaces used
+ * by each radio (wlan#, wlan#ap, wlan#sta, WDS).
+ * ((struct hostap_interface *) dev->priv)->local points to this structure. */
+struct local_info {
+	struct module *hw_module;
+	int card_idx;
+	int dev_enabled;
+	struct net_device *dev; /* main radio device */
+	struct list_head hostap_interfaces; /* Host AP interface list (contains
+					     * struct hostap_interface entries)
+					     */
+	rwlock_t iface_lock; /* hostap_interfaces read lock; use write lock
+			      * when removing entries from the list.
+			      * TX and RX paths can use read lock. */
+	spinlock_t cmdlock, baplock, lock;
+	struct semaphore rid_bap_sem;
+	u16 infofid; /* MAC buffer id for info frame */
+	/* txfid, intransmitfid, next_txtid, and next_alloc are protected by
+	 * txfidlock */
+	spinlock_t txfidlock;
+	int txfid_len; /* length of allocated TX buffers */
+	u16 txfid[PRISM2_TXFID_COUNT]; /* buffer IDs for TX frames */
+	/* buffer IDs for intransmit frames or PRISM2_TXFID_EMPTY if
+	 * corresponding txfid is free for next TX frame */
+	u16 intransmitfid[PRISM2_TXFID_COUNT];
+	int next_txfid; /* index to the next txfid to be checked for
+			 * availability */
+	int next_alloc; /* index to the next intransmitfid to be checked for
+			 * allocation events */
+
+	/* bitfield for atomic bitops */
+#define HOSTAP_BITS_TRANSMIT 0
+#define HOSTAP_BITS_BAP_TASKLET 1
+#define HOSTAP_BITS_BAP_TASKLET2 2
+	long bits;
+
+	struct ap_data *ap;
+
+	char essid[MAX_SSID_LEN + 1];
+	char name[MAX_NAME_LEN + 1];
+	int name_set;
+	u16 channel_mask;
+	struct comm_tallies_sums comm_tallies;
+	struct net_device_stats stats;
+	struct proc_dir_entry *proc;
+	int iw_mode; /* operating mode (IW_MODE_*) */
+	int pseudo_adhoc; /* 0: IW_MODE_ADHOC is real 802.11 compliant IBSS
+			   * 1: IW_MODE_ADHOC is "pseudo IBSS" */
+	char bssid[ETH_ALEN];
+	int channel;
+	int beacon_int;
+	int dtim_period;
+	int disable_on_close;
+	int mtu;
+	int frame_dump; /* dump RX/TX frame headers, PRISM2_DUMP_ flags */
+	int fw_tx_rate_control;
+	u16 tx_rate_control;
+	u16 basic_rates;
+	int hw_resetting;
+	int hw_ready;
+	int hw_reset_tries; /* how many times reset has been tried */
+	int hw_downloading;
+	int shutdown;
+	int pri_only;
+
+	enum {
+		PRISM2_TXPOWER_AUTO = 0, PRISM2_TXPOWER_OFF,
+		PRISM2_TXPOWER_FIXED, PRISM2_TXPOWER_UNKNOWN
+	} txpower_type;
+	int txpower; /* if txpower_type == PRISM2_TXPOWER_FIXED */
+
+	/* command queue for hfa384x_cmd(); protected with cmdlock */
+	struct list_head cmd_queue;
+	/* max_len for cmd_queue; in addition, cmd_callback can use two
+	 * additional entries to prevent sleeping commands from stopping
+	 * transmits */
+#define HOSTAP_CMD_QUEUE_MAX_LEN 16
+	int cmd_queue_len; /* number of entries in cmd_queue */
+
+	/* if card timeout is detected in interrupt context, reset_queue is
+	 * used to schedule card reseting to be done in user context */
+	HOSTAP_QUEUE reset_queue;
+
+	/* For scheduling a change of the promiscuous mode RID */
+	int is_promisc;
+	HOSTAP_QUEUE set_multicast_list_queue;
+
+	int wds_max_connections;
+	int wds_connections;
+#define HOSTAP_WDS_BROADCAST_RA BIT(0)
+#define HOSTAP_WDS_AP_CLIENT BIT(1)
+#define HOSTAP_WDS_STANDARD_FRAME BIT(2)
+	u32 wds_type;
+	u16 tx_control; /* flags to be used in TX description */
+	int manual_retry_count; /* -1 = use f/w default; otherwise retry count
+				 * to be used with all frames */
+
+#ifdef WIRELESS_EXT
+	struct iw_statistics wstats;
+#if WIRELESS_EXT > 13
+	unsigned long scan_timestamp; /* Time started to scan */
+#endif /* WIRELESS_EXT > 13 */
+#endif /* WIRELESS_EXT */
+	enum {
+		PRISM2_MONITOR_80211 = 0, PRISM2_MONITOR_PRISM = 1,
+		PRISM2_MONITOR_CAPHDR = 2
+	} monitor_type;
+	int (*saved_eth_header_parse)(struct sk_buff *skb,
+				      unsigned char *haddr);
+	int monitor_allow_fcserr;
+
+	int hostapd; /* whether user space daemon, hostapd, is used for AP
+		      * management */
+	struct net_device *apdev;
+	struct net_device_stats apdevstats;
+
+	char assoc_ap_addr[ETH_ALEN];
+	struct net_device *stadev;
+	struct net_device_stats stadevstats;
+
+	struct prism2_crypt_data *crypt;
+	struct timer_list crypt_deinit_timer;
+	struct list_head crypt_deinit_list;
+
+#define WEP_KEYS 4
+#define WEP_KEY_LEN 13
+	int open_wep; /* allow unencrypted frames */
+	int host_encrypt;
+	int host_decrypt;
+	int fw_encrypt_ok; /* whether firmware-based WEP encrypt is working
+			    * in Host AP mode (STA f/w 1.4.9 or newer) */
+	int bcrx_sta_key; /* use individual keys to override default keys even
+			   * with RX of broad/multicast frames */
+
+	struct prism2_frag_entry frag_cache[PRISM2_FRAG_CACHE_LEN];
+	unsigned int frag_next_idx;
+
+	int ieee_802_1x; /* is IEEE 802.1X used */
+
+	int antsel_tx, antsel_rx;
+	int rts_threshold; /* dot11RTSThreshold */
+	int fragm_threshold; /* dot11FragmentationThreshold */
+	int auth_algs; /* PRISM2_AUTH_ flags */
+
+	int enh_sec; /* cnfEnhSecurity options (broadcast SSID hide/ignore) */
+	int tallies32; /* 32-bit tallies in use */
+
+	struct prism2_helper_functions *func;
+
+	int bus_master_threshold_tx;
+	int bus_master_threshold_rx;
+	u8 *bus_m1_buf;
+
+	u8 *pda;
+	int fw_ap;
+#define PRISM2_FW_VER(major, minor, variant) \
+(((major) << 16) | ((minor) << 8) | variant)
+	u32 sta_fw_ver;
+
+	/* Tasklets for handling hardware IRQ related operations outside hw IRQ
+	 * handler */
+	HOSTAP_TASKLET bap_tasklet;
+
+	HOSTAP_TASKLET info_tasklet;
+	struct sk_buff_head info_list; /* info frames as skb's for
+					* info_tasklet */
+
+	struct hostap_tx_callback_info *tx_callback; /* registered TX callbacks
+						      */
+
+	HOSTAP_TASKLET rx_tasklet;
+	struct sk_buff_head rx_list;
+
+	HOSTAP_TASKLET sta_tx_exc_tasklet;
+	struct sk_buff_head sta_tx_exc_list;
+
+	int host_roaming;
+	unsigned long last_join_time; /* time of last JoinRequest */
+	struct hfa384x_scan_result *last_scan_results;
+	int last_scan_results_count;
+	struct hfa384x_hostscan_result *last_hostscan_results;
+	int last_hostscan_results_count;
+	enum { PRISM2_SCAN, PRISM2_HOSTSCAN } last_scan_type;
+	HOSTAP_QUEUE info_queue;
+	long pending_info; /* bit field of pending info_queue items */
+#define PRISM2_INFO_PENDING_LINKSTATUS 0
+#define PRISM2_INFO_PENDING_SCANRESULTS 1
+	int prev_link_status; /* previous received LinkStatus info */
+	u8 preferred_ap[6]; /* use this AP if possible */
+
+#ifdef PRISM2_CALLBACK
+	void *callback_data; /* Can be used in callbacks; e.g., allocate
+			      * on enable event and free on disable event.
+			      * Host AP driver code does not touch this. */
+#endif /* PRISM2_CALLBACK */
+
+	wait_queue_head_t hostscan_wq;
+
+	/* Passive scan in Host AP mode */
+	struct timer_list passive_scan_timer;
+	int passive_scan_interval; /* in seconds, 0 = disabled */
+	int passive_scan_channel;
+	enum { PASSIVE_SCAN_WAIT, PASSIVE_SCAN_LISTEN } passive_scan_state;
+
+	struct timer_list tick_timer;
+	unsigned long last_tick_timer;
+	unsigned int sw_tick_stuck;
+
+#ifdef PRISM2_DOWNLOAD_SUPPORT
+	/* Persistent volatile download data */
+	struct prism2_download_data *dl_pri;
+	struct prism2_download_data *dl_sec;
+#endif /* PRISM2_DOWNLOAD_SUPPORT */
+
+#ifdef PRISM2_IO_DEBUG
+#define PRISM2_IO_DEBUG_SIZE 10000
+	u32 io_debug[PRISM2_IO_DEBUG_SIZE];
+	int io_debug_head;
+	int io_debug_enabled;
+#endif /* PRISM2_IO_DEBUG */
+
+	/* struct local_info is used also in hostap.o that does not define
+	 * any PRISM2_{PCCARD,PLX,PCI}. Make sure that the hardware version
+	 * specific fields are in the end of the struct (these could also be
+	 * moved to void *priv or something like that). */
+#ifdef PRISM2_PCCARD
+	dev_node_t node;
+	dev_link_t *link;
+#endif /* PRISM2_PCCARD */
+
+#ifdef PRISM2_PLX
+	unsigned long attr_mem;
+	unsigned int cor_offset;
+#endif /* PRISM2_PLX */
+
+#ifdef PRISM2_PCI
+#ifdef PRISM2_BUS_MASTER
+	/* bus master for BAP0 (TX) */
+	int bus_m0_tx_idx;
+	u8 *bus_m0_buf;
+
+	/* bus master for BAP1 (RX) */
+	struct sk_buff *rx_skb;
+#endif /* PRISM2_BUS_MASTER */
+#ifdef CONFIG_PM
+	u32 pci_save_state[16];
+#endif /* CONFIG_PM */
+#endif /* PRISM2_PCI */
+
+	/* NOTE! Do not add common entries here after hardware version
+	 * specific blocks. */
+};
+
+
+/* Per interface private Host AP data
+ * Allocated for each net device that Host AP uses (wlan#, wlan#ap, wlan#sta,
+ * WDS) and dev->priv points to this structure. */
+struct hostap_interface {
+	struct list_head list; /* list entry in Host AP interface list */
+	struct net_device *dev; /* pointer to this device */
+	struct local_info *local; /* pointer to shared private data */
+	struct net_device_stats stats;
+#if WIRELESS_EXT > 15
+	/* Note: this data area must be at a fixed offset from dev->priv.
+	 * Unfortunately, this model does not fit the current Host AP netdev
+	 * data structure because this should really be in local_into_t that is
+	 * shared by all virtual interfaces. Currently, only the main data
+	 * device (wlan#) is used for iwspy entries. */
+	struct iw_spy_data spy_data; /* iwspy support */
+#endif /* WIRELESS_EXT > 15 */
+
+	enum {
+		HOSTAP_INTERFACE_MAIN,
+		HOSTAP_INTERFACE_AP,
+		HOSTAP_INTERFACE_STA,
+		HOSTAP_INTERFACE_WDS,
+	} type;
+
+	union {
+		struct hostap_interface_wds {
+			u8 remote_addr[ETH_ALEN];
+		} wds;
+	} u;
+
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,4,0))
+	/* struct net_device did not allocate buffer for device name in
+	 * Linux 2.2, so reserve space for it here to provide backwards
+	 * compatibility. */
+	char name[IFNAMSIZ];
+#endif
+};
+
+
+#ifndef PRISM2_NO_DEBUG
+
+#define DEBUG_FID BIT(0)
+#define DEBUG_PS BIT(1)
+#define DEBUG_FLOW BIT(2)
+#define DEBUG_AP BIT(3)
+#define DEBUG_HW BIT(4)
+#define DEBUG_EXTRA BIT(5)
+#define DEBUG_EXTRA2 BIT(6)
+#define DEBUG_PS2 BIT(7)
+#define DEBUG_MASK (DEBUG_PS | DEBUG_AP | DEBUG_HW | DEBUG_EXTRA)
+#define PDEBUG(n, args...) \
+do { if ((n) & DEBUG_MASK) printk(KERN_DEBUG args); } while (0)
+#define PDEBUG2(n, args...) \
+do { if ((n) & DEBUG_MASK) printk(args); } while (0)
+
+#else /* PRISM2_NO_DEBUG */
+
+#define PDEBUG(n, args...)
+#define PDEBUG2(n, args...)
+
+#endif /* PRISM2_NO_DEBUG */
+
+enum { BAP0 = 0, BAP1 = 1 };
+
+#define PRISM2_IO_DEBUG_CMD_INB 0
+#define PRISM2_IO_DEBUG_CMD_INW 1
+#define PRISM2_IO_DEBUG_CMD_INSW 2
+#define PRISM2_IO_DEBUG_CMD_OUTB 3
+#define PRISM2_IO_DEBUG_CMD_OUTW 4
+#define PRISM2_IO_DEBUG_CMD_OUTSW 5
+#define PRISM2_IO_DEBUG_CMD_ERROR 6
+#define PRISM2_IO_DEBUG_CMD_INTERRUPT 7
+
+#ifdef PRISM2_IO_DEBUG
+
+#define PRISM2_IO_DEBUG_ENTRY(cmd, reg, value) \
+(((cmd) << 24) | ((reg) << 16) | value)
+
+static inline void prism2_io_debug_add(struct net_device *dev, int cmd,
+				       int reg, int value)
+{
+	local_info_t *local = dev->priv;
+
+	if (!local->io_debug_enabled)
+		return;
+
+	local->io_debug[local->io_debug_head] =	jiffies & 0xffffffff;
+	if (++local->io_debug_head >= PRISM2_IO_DEBUG_SIZE)
+		local->io_debug_head = 0;
+	local->io_debug[local->io_debug_head] =
+		PRISM2_IO_DEBUG_ENTRY(cmd, reg, value);
+	if (++local->io_debug_head >= PRISM2_IO_DEBUG_SIZE)
+		local->io_debug_head = 0;
+}
+
+
+static inline void prism2_io_debug_error(struct net_device *dev, int err)
+{
+	local_info_t *local = dev->priv;
+	unsigned long flags;
+
+	if (!local->io_debug_enabled)
+		return;
+
+	spin_lock_irqsave(&local->lock, flags);
+	prism2_io_debug_add(dev, PRISM2_IO_DEBUG_CMD_ERROR, 0, err);
+	if (local->io_debug_enabled == 1) {
+		local->io_debug_enabled = 0;
+		printk(KERN_DEBUG "%s: I/O debug stopped\n", dev->name);
+	}
+	spin_unlock_irqrestore(&local->lock, flags);
+}
+
+#else /* PRISM2_IO_DEBUG */
+
+static inline void prism2_io_debug_add(struct net_device *dev, int cmd,
+				       int reg, int value)
+{
+}
+
+static inline void prism2_io_debug_error(struct net_device *dev, int err)
+{
+}
+
+#endif /* PRISM2_IO_DEBUG */
+
+
+#ifdef PRISM2_CALLBACK
+enum {
+	/* Called when card is enabled */
+	PRISM2_CALLBACK_ENABLE,
+
+	/* Called when card is disabled */
+	PRISM2_CALLBACK_DISABLE,
+
+	/* Called when RX/TX starts/ends */
+	PRISM2_CALLBACK_RX_START, PRISM2_CALLBACK_RX_END,
+	PRISM2_CALLBACK_TX_START, PRISM2_CALLBACK_TX_END
+};
+void prism2_callback(local_info_t *local, int event);
+#else /* PRISM2_CALLBACK */
+#define prism2_callback(d, e) do { } while (0)
+#endif /* PRISM2_CALLBACK */
+
+#endif /* __KERNEL__ */
+
+#endif /* HOSTAP_WLAN_H */
diff -Nur linux-orig/drivers/net/wireless/ieee802_11.h linux/drivers/net/wireless/ieee802_11.h
--- linux-orig/drivers/net/wireless/ieee802_11.h	2004-02-16 09:32:01.000000000 +0300
+++ linux/drivers/net/wireless/ieee802_11.h	2003-05-12 10:22:27.000000000 +0400
@@ -2,9 +2,15 @@
 #define _IEEE802_11_H
 
 #define IEEE802_11_DATA_LEN		2304
-/* Actually, the standard seems to be inconsistent about what the
-   maximum frame size really is.  Section 6.2.1.1.2 says 2304 octets,
-   but the figure in Section 7.1.2 says 2312 octects. */
+/* Maximum size for the MA-UNITDATA primitive, 802.11 standard section
+   6.2.1.1.2.
+
+   The figure in section 7.1.2 suggests a body size of up to 2312
+   bytes is allowed, which is a bit confusing, I suspect this
+   represents the 2304 bytes of real data, plus a possible 8 bytes of
+   WEP IV and ICV. (this interpretation suggested by Ramiro Barreiro) */
+
+
 #define IEEE802_11_HLEN			30
 #define IEEE802_11_FRAME_LEN		(IEEE802_11_DATA_LEN + IEEE802_11_HLEN)
 
@@ -16,7 +22,6 @@
 	u8 addr3[ETH_ALEN];
 	u16 seq_ctl;
 	u8 addr4[ETH_ALEN];
-	u16 data_len;
 } __attribute__ ((packed));
 
 /* Frame control field constants */
diff -Nur linux-orig/drivers/net/wireless/Makefile linux/drivers/net/wireless/Makefile
--- linux-orig/drivers/net/wireless/Makefile	2004-02-16 09:32:01.000000000 +0300
+++ linux/drivers/net/wireless/Makefile	2004-02-05 11:45:33.000000000 +0300
@@ -12,7 +12,7 @@
 obj-		:=
 
 # Things that need to export symbols
-export-objs	:= airo.o orinoco.o hermes.o
+export-objs	:= airo.o orinoco.o hermes.o hostap.o
 
 obj-$(CONFIG_HERMES)		+= orinoco.o hermes.o
 obj-$(CONFIG_PCMCIA_HERMES)	+= orinoco_cs.o spectrum_cs.o
@@ -22,4 +22,9 @@
 obj-$(CONFIG_AIRO)		+= airo.o
 obj-$(CONFIG_AIRO_CS)		+= airo_cs.o airo.o
 
+obj-$(CONFIG_HOSTAP)		+= hostap.o hostap_crypt_wep.o
+obj-$(CONFIG_HOSTAP_CS)		+= hostap_cs.o
+obj-$(CONFIG_HOSTAP_PLX)	+= hostap_plx.o
+obj-$(CONFIG_HOSTAP_PCI)	+= hostap_pci.o
+
 include $(TOPDIR)/Rules.make
diff -Nur linux-orig/drivers/net/wireless/orinoco.c linux/drivers/net/wireless/orinoco.c
--- linux-orig/drivers/net/wireless/orinoco.c	2004-02-16 09:32:01.000000000 +0300
+++ linux/drivers/net/wireless/orinoco.c	2004-02-16 09:30:01.000000000 +0300
@@ -1,4 +1,4 @@
-/* orinoco.c 0.12	- (formerly known as dldwd_cs.c and orinoco_cs.c)
+/* orinoco.c 0.13e	- (formerly known as dldwd_cs.c and orinoco_cs.c)
  *
  * A driver for Hermes or Prism 2 chipset based PCMCIA wireless
  * adaptors, with Lucent/Agere, Intersil or Symbol firmware.
@@ -117,7 +117,7 @@
  *	o Init of priv->tx_rate_ctrl in firmware specific section.
  *	o Prism2/Symbol rate, upto should be 0xF and not 0x15. Doh !
  *	o Spectrum card always need cor_reset (for every reset)
- *	o Fix cor_reset to not loose bit 7 in the register
+ *	o Fix cor_reset to not lose bit 7 in the register
  *	o flush_stale_links to remove zombie Pcmcia instances
  *	o Ack previous hermes event before reset
  *		Me (with my little hands)
@@ -240,7 +240,7 @@
  *	  was never very useful.
  *	o Make Rx errors less noisy.
  *
- * v0.10 -> v0.11 - 5 Apr Mar 2002 - David Gibson
+ * v0.10 -> v0.11 - 5 Apr 2002 - David Gibson
  *	o Laid the groundwork in hermes.[ch] for devices which map
  *	  into PCI memory space rather than IO space.
  *	o Fixed bug in multicast handling (cleared multicast list when
@@ -279,7 +279,7 @@
  *	o Fixed multiple bad kfree() bugs introduced by the
  *	  alloc_orinocodev() changes.
  *
- * v0.11b -> v0.12 - ???? - David Gibson
+ * v0.11b -> v0.12 - 19 Jun 2002 - David Gibson
  *	o Support changing the MAC address.
  *	o Correct display of Intersil firmware revision numbers.
  *	o Entirely revised locking scheme.  Should be both simpler and
@@ -289,73 +289,181 @@
  *	  which are used as the dev->open, dev->stop, priv->reset
  *	  callbacks if none are specified when alloc_orinocodev() is
  *	  called.
- *	o Removed orinoco_plx_interupt() and orinoco_pci_interrupt().
+ *	o Removed orinoco_plx_interrupt() and orinoco_pci_interrupt().
  *	  They didn't do anything.
  *
+ * v0.12 -> v0.12a - 4 Jul 2002 - David Gibson
+ *	o Some rearrangement of code.
+ *	o Numerous fixups to locking and rest handling, particularly
+ *	  for PCMCIA.
+ *	o This allows open and stop net_device methods to be in
+ *	  orinoco.c now, rather than in the init modules.
+ *	o In orinoco_cs.c link->priv now points to the struct
+ *	  net_device not to the struct orinoco_private.
+ *	o Added a check for undersized SNAP frames, which could cause
+ *	  crashes.
+ *
+ * v0.12a -> v0.12b - 11 Jul 2002 - David Gibson
+ *	o Fix hw->num_init testing code, so num_init is actually
+ *	  incremented.
+ *	o Fix very stupid bug in orinoco_cs which broke compile with
+ *	  CONFIG_SMP.
+ *	o Squashed a warning.
+ *
+ * v0.12b -> v0.12c - 26 Jul 2002 - David Gibson
+ *	o Change to C9X style designated initializers.
+ *	o Add support for 3Com AirConnect PCI.
+ *	o No longer ignore the hard_reset argument to
+ *	  alloc_orinocodev().  Oops.
+ *
+ * v0.12c -> v0.13beta1 - 13 Sep 2002 - David Gibson
+ *	o Revert the broken 0.12* locking scheme and go to a new yet
+ *	  simpler scheme.
+ *	o Do firmware resets only in orinoco_init() and when waking
+ *	  the card from hard sleep.
+ *
+ * v0.13beta1 -> v0.13 - 27 Sep 2002 - David Gibson
+ *	o Re-introduced full resets (via schedule_task()) on Tx
+ *	  timeout.
+ *
+ * v0.13 -> v0.13a - 30 Sep 2002 - David Gibson
+ *	o Minor cleanups to info frame handling.  Add basic support
+ *	  for linkstatus info frames.
+ *	o Include required kernel headers in orinoco.h, to avoid
+ *	  compile problems.
+ *
+ * v0.13a -> v0.13b - 10 Feb 2003 - David Gibson
+ *	o Implemented hard reset for Airport cards
+ *	o Experimental suspend/resume implementation for orinoco_pci
+ *	o Abolished /proc debugging support, replaced with a debugging
+ *	  iwpriv.  Now it's ugly and simple instead of ugly and complex.
+ *	o Bugfix in hermes.c if the firmware returned a record length
+ *	  of 0, we could go clobbering memory.
+ *	o Bugfix in orinoco_stop() - it used to fail if hw_unavailable
+ *	  was set, which was usually true on PCMCIA hot removes.
+ * 	o Track LINKSTATUS messages, silently drop Tx packets before
+ * 	  we are connected (avoids cofusing the firmware), and only
+ * 	  give LINKSTATUS printk()s if the status has changed.
+ *
+ * v0.13b -> v0.13c - 11 Mar 2003 - David Gibson
+ *	o Cleanup: use dev instead of priv in various places.
+ *	o Bug fix: Don't ReleaseConfiguration on RESET_PHYSICAL event
+ *	  if we're in the middle of a (driver initiated) hard reset.
+ *	o Bug fix: ETH_ZLEN is supposed to include the header
+ *	  (Dionysus Blazakis & Manish Karir)
+ *	o Convert to using workqueues instead of taskqueues (and
+ *	  backwards compatibility macros for pre 2.5.41 kernels).
+ *	o Drop redundant (I think...) MOD_{INC,DEC}_USE_COUNT in
+ *	  airport.c
+ *	o New orinoco_tmd.c init module from Joerg Dorchain for
+ *	  TMD7160 based PCI to PCMCIA bridges (similar to
+ *	  orinoco_plx.c).
+ *
+ * v0.13c -> v0.13d - 22 Apr 2003 - David Gibson
+ *	o Make hw_unavailable a counter, rather than just a flag, this
+ *	  is necessary to avoid some races (such as a card being
+ *	  removed in the middle of orinoco_reset().
+ *	o Restore Release/RequestConfiguration in the PCMCIA event handler
+ *	  when dealing with a driver initiated hard reset.  This is
+ *	  necessary to prevent hangs due to a spurious interrupt while
+ *	  the reset is in progress.
+ *	o Clear the 802.11 header when transmitting, even though we
+ *	  don't use it.  This fixes a long standing bug on some
+ *	  firmwares, which seem to get confused if that isn't done.
+ *	o Be less eager to de-encapsulate SNAP frames, only do so if
+ *	  the OUI is 00:00:00 or 00:00:f8, leave others alone.  The old
+ *	  behaviour broke CDP (Cisco Discovery Protocol).
+ *	o Use dev instead of priv for free_irq() as well as
+ *	  request_irq() (oops).
+ *	o Attempt to reset rather than giving up if we get too many
+ *	  IRQs.
+ *	o Changed semantics of __orinoco_down() so it can be called
+ *	  safely with hw_unavailable set.  It also now clears the
+ *	  linkstatus (since we're going to have to reassociate).
+ *
+ * v0.13d -> v0.13e - 12 May 2003 - David Gibson
+ *	o Support for post-2.5.68 return values from irq handler.
+ *	o Fixed bug where underlength packets would be double counted
+ *	  in the rx_dropped statistics.
+ *	o Provided a module parameter to suppress linkstatus messages.
+ *
  * TODO
- *	o New wireless extensions API (patch forthcoming from Moustafa
- *	  Youssef).
+ *	o New wireless extensions API (patch from Moustafa
+ *	  Youssef, updated by Jim Carter and Pavel Roskin).
  *	o Handle de-encapsulation within network layer, provide 802.11
  *	  headers (patch from Thomas 'Dent' Mirlacher)
+ *	o RF monitor mode support
  *	o Fix possible races in SPY handling.
  *	o Disconnect wireless extensions from fundamental configuration.
  *	o (maybe) Software WEP support (patch from Stano Meduna).
+ *	o (maybe) Use multiple Tx buffers - driver handling queue
+ *	  rather than firmware. */
+
+/* Locking and synchronization:
+ *
+ * The basic principle is that everything is serialized through a
+ * single spinlock, priv->lock.  The lock is used in user, bh and irq
+ * context, so when taken outside hardirq context it should always be
+ * taken with interrupts disabled.  The lock protects both the
+ * hardware and the struct orinoco_private.
  *
- *	o Convert /proc debugging stuff to seqfile
- *	o Use multiple Tx buffers */
-/* Notes on locking:
- *
- * The basic principle is that everything except a reset is serialized
- * through a single spinlock, priv->lock.  Another flag,
- * priv->resetting indicates whether a reset is in progress.  The lock
- * must be taken, with interrupts disabled, for all access to the
- * orinoco_private structure and all access to the hardware.  When the
- * lock is taken, the priv->resetting flag must also be checked (with
- * the lock held).  If a reset is in progress the routine must drop
- * the lock and bail out somehow or other.  For the interrupt handler
- * that means dropping the interrupt.  For the Tx path, this is a
- * can't happen, since the reset routine stops the queue.  For
- * userspace entry points, that means waiting on a wait queue to be
- * woken once the reset is complete. */
+ * Another flag, priv->hw_unavailable indicates that the hardware is
+ * unavailable for an extended period of time (e.g. suspended, or in
+ * the middle of a hard reset).  This flag is protected by the
+ * spinlock.  All code which touches the hardware should check the
+ * flag after taking the lock, and if it is set, give up on whatever
+ * they are doing and drop the lock again.  The orinoco_lock()
+ * function handles this (it unlocks and returns -EBUSY if
+ * hw_unavailable is non-zero). */
 
 #include <linux/config.h>
 
 #include <linux/module.h>
 #include <linux/kernel.h>
 #include <linux/init.h>
-#include <linux/sched.h>
 #include <linux/ptrace.h>
 #include <linux/slab.h>
 #include <linux/string.h>
 #include <linux/timer.h>
 #include <linux/ioport.h>
-#include <asm/uaccess.h>
-#include <asm/io.h>
-#include <asm/system.h>
-#include <linux/proc_fs.h>
 #include <linux/netdevice.h>
 #include <linux/if_arp.h>
 #include <linux/etherdevice.h>
 #include <linux/wireless.h>
 
+#include <asm/uaccess.h>
+#include <asm/io.h>
+#include <asm/system.h>
+
 #include "hermes.h"
 #include "hermes_rid.h"
 #include "orinoco.h"
 #include "ieee802_11.h"
 
-/* Definitions for compatibility with Linux older than 2.4.10 */
-#undef min
-#undef max
-#define min(x,y) (((x)<(y)) ? (x) : (y))
-#define max(x,y) (((x)>(y)) ? (y) : (x))
-
-#ifndef min_t
-#define min_t(type,x,y) \
-	({ type __x = (x), __y = (y); __x < __y ? __x: __y; })
-#define max_t(type,x,y) \
-	({ type __x = (x), __y = (y); __x > __y ? __x: __y; })
+/********************************************************************/
+/* Module information                                               */
+/********************************************************************/
+
+MODULE_AUTHOR("David Gibson <hermes@gibson.dropbear.id.au>");
+MODULE_DESCRIPTION("Driver for Lucent Orinoco, Prism II based and similar wireless cards");
+#ifdef MODULE_LICENSE
+MODULE_LICENSE("Dual MPL/GPL");
+#endif
+
+/* Level of debugging. Used in the macros in orinoco.h */
+#ifdef ORINOCO_DEBUG
+int orinoco_debug = ORINOCO_DEBUG;
+MODULE_PARM(orinoco_debug, "i");
+EXPORT_SYMBOL(orinoco_debug);
 #endif
 
+static int suppress_linkstatus; /* = 0 */
+MODULE_PARM(suppress_linkstatus, "i");
+
+/********************************************************************/
+/* Compile time configuration and compatibility stuff               */
+/********************************************************************/
+
 /* Wireless extensions backwards compatibility */
 #ifndef SIOCIWFIRSTPRIV
 #define SIOCIWFIRSTPRIV		SIOCDEVPRIVATE
@@ -368,19 +476,9 @@
 #define SPY_NUMBER(priv)	0
 #endif /* WIRELESS_SPY */
 
-static char version[] __initdata = "orinoco.c 0.12 (David Gibson <hermes@gibson.dropbear.id.au> and others)";
-MODULE_AUTHOR("David Gibson <hermes@gibson.dropbear.id.au>");
-MODULE_DESCRIPTION("Driver for Lucent Orinoco, Prism II based and similar wireless cards");
-#ifdef MODULE_LICENSE
-MODULE_LICENSE("Dual MPL/GPL");
-#endif
-
-/* Level of debugging. Used in the macros in orinoco.h */
-#ifdef ORINOCO_DEBUG
-int orinoco_debug = ORINOCO_DEBUG;
-MODULE_PARM(orinoco_debug, "i");
-EXPORT_SYMBOL(orinoco_debug);
-#endif
+/********************************************************************/
+/* Internal constants                                               */
+/********************************************************************/
 
 #define ORINOCO_MIN_MTU		256
 #define ORINOCO_MAX_MTU		(IEEE802_11_DATA_LEN - ENCAPS_OVERHEAD)
@@ -389,15 +487,17 @@
 #define USER_BAP		0
 #define IRQ_BAP			1
 #define MAX_IRQLOOPS_PER_IRQ	10
-#define MAX_IRQLOOPS_PER_JIFFY	(20000/HZ)	/* Based on a guestimate of how many events the
-						   device can legitimately generate */
+#define MAX_IRQLOOPS_PER_JIFFY	(20000/HZ) /* Based on a guestimate of
+					    * how many events the
+					    * device could
+					    * legitimately generate */
 #define SMALL_KEY_SIZE		5
 #define LARGE_KEY_SIZE		13
 #define TX_NICBUF_SIZE_BUG	1585		/* Bug in Symbol firmware */
 
 #define DUMMY_FID		0xFFFF
 
-#define RUP_EVEN(a) ( (a) % 2 ? (a) + 1 : (a) )
+#define RUP_EVEN(a) (((a) + 1) & (~1))
 
 /*#define MAX_MULTICAST(priv)	(priv->firmware_type == FIRMWARE_TYPE_AGERE ? \
   HERMES_MAX_MULTICAST : 0)*/
@@ -416,7 +516,7 @@
 
 /* This tables gives the actual meanings of the bitrate IDs returned by the firmware. */
 struct {
-	int bitrate; /* in 100s of kilbits */
+	int bitrate; /* in 100s of kilobits */
 	int automatic;
 	u16 agere_txratectrl;
 	u16 intersil_txratectrl;
@@ -426,12 +526,16 @@
 	{10,  1,  1,  1},
 	{20,  0,  2,  2},
 	{20,  1,  6,  3},
-	{55, 0,  4,  4},
-	{55, 1,  7,  7},
+	{55,  0,  4,  4},
+	{55,  1,  7,  7},
 	{110, 0,  5,  8},
 };
 #define BITRATE_TABLE_SIZE (sizeof(bitrate_table) / sizeof(bitrate_table[0]))
 
+/********************************************************************/
+/* Data types                                                       */
+/********************************************************************/
+
 struct header_struct {
 	/* 802.3 */
 	u8 dest[ETH_ALEN];
@@ -451,9 +555,9 @@
 
 #define ENCAPS_OVERHEAD		(sizeof(encaps_hdr) + 2)
 
-/*
- * Function prototypes
- */
+/********************************************************************/
+/* Function prototypes                                              */
+/********************************************************************/
 
 static void orinoco_stat_gather(struct net_device *dev,
 				struct sk_buff *skb,
@@ -464,6 +568,8 @@
 
 /* Hardware control routines */
 
+static int __orinoco_program_rids(struct net_device *dev);
+
 static int __orinoco_hw_set_bitrate(struct orinoco_private *priv);
 static int __orinoco_hw_setup_wep(struct orinoco_private *priv);
 static int orinoco_hw_get_bssid(struct orinoco_private *priv, char buf[ETH_ALEN]);
@@ -475,288 +581,189 @@
 static void __orinoco_set_multicast_list(struct net_device *dev);
 
 /* Interrupt handling routines */
-static void __orinoco_ev_tick(struct orinoco_private *priv, hermes_t *hw);
-static void __orinoco_ev_wterr(struct orinoco_private *priv, hermes_t *hw);
-static void __orinoco_ev_infdrop(struct orinoco_private *priv, hermes_t *hw);
-static void __orinoco_ev_info(struct orinoco_private *priv, hermes_t *hw);
-static void __orinoco_ev_rx(struct orinoco_private *priv, hermes_t *hw);
-static void __orinoco_ev_txexc(struct orinoco_private *priv, hermes_t *hw);
-static void __orinoco_ev_tx(struct orinoco_private *priv, hermes_t *hw);
-static void __orinoco_ev_alloc(struct orinoco_private *priv, hermes_t *hw);
-
-static int orinoco_ioctl_getiwrange(struct net_device *dev, struct iw_point *rrq);
-static int orinoco_ioctl_setiwencode(struct net_device *dev, struct iw_point *erq);
-static int orinoco_ioctl_getiwencode(struct net_device *dev, struct iw_point *erq);
-static int orinoco_ioctl_setessid(struct net_device *dev, struct iw_point *erq);
-static int orinoco_ioctl_getessid(struct net_device *dev, struct iw_point *erq);
-static int orinoco_ioctl_setnick(struct net_device *dev, struct iw_point *nrq);
-static int orinoco_ioctl_getnick(struct net_device *dev, struct iw_point *nrq);
-static int orinoco_ioctl_setfreq(struct net_device *dev, struct iw_freq *frq);
-static int orinoco_ioctl_getsens(struct net_device *dev, struct iw_param *srq);
-static int orinoco_ioctl_setsens(struct net_device *dev, struct iw_param *srq);
-static int orinoco_ioctl_setrts(struct net_device *dev, struct iw_param *rrq);
-static int orinoco_ioctl_setfrag(struct net_device *dev, struct iw_param *frq);
-static int orinoco_ioctl_getfrag(struct net_device *dev, struct iw_param *frq);
-static int orinoco_ioctl_setrate(struct net_device *dev, struct iw_param *frq);
-static int orinoco_ioctl_getrate(struct net_device *dev, struct iw_param *frq);
-static int orinoco_ioctl_setpower(struct net_device *dev, struct iw_param *prq);
-static int orinoco_ioctl_getpower(struct net_device *dev, struct iw_param *prq);
-static int orinoco_ioctl_setport3(struct net_device *dev, struct iwreq *wrq);
-static int orinoco_ioctl_getport3(struct net_device *dev, struct iwreq *wrq);
-
-/* /proc debugging stuff */
-static int orinoco_proc_init(void);
-static void orinoco_proc_cleanup(void);
+static void __orinoco_ev_tick(struct net_device *dev, hermes_t *hw);
+static void __orinoco_ev_wterr(struct net_device *dev, hermes_t *hw);
+static void __orinoco_ev_infdrop(struct net_device *dev, hermes_t *hw);
+static void __orinoco_ev_info(struct net_device *dev, hermes_t *hw);
+static void __orinoco_ev_rx(struct net_device *dev, hermes_t *hw);
+static void __orinoco_ev_txexc(struct net_device *dev, hermes_t *hw);
+static void __orinoco_ev_tx(struct net_device *dev, hermes_t *hw);
+static void __orinoco_ev_alloc(struct net_device *dev, hermes_t *hw);
 
-/*
- * Inline functions
- */
-/* These functions *must* be inline or they will break horribly on
-   SPARC, due to its weird semantics for save/restore flags. extern
-   inline should prevent the code from linking if they are not
-   inlined. */
-extern inline int
-orinoco_lock(struct orinoco_private *priv, unsigned long *flags)
-{
-	spin_lock_irqsave(&priv->lock, *flags);
-	if (priv->resetting) {
-		spin_unlock_irqrestore(&priv->lock, *flags);
-		return -EBUSY;
-	}
-	return 0;
-}
+/* ioctl() routines */
+static int orinoco_debug_dump_recs(struct net_device *dev);
 
-extern inline void
-orinoco_unlock(struct orinoco_private *priv, unsigned long *flags)
-{
-	spin_unlock_irqrestore(&priv->lock, *flags);
-}
+/********************************************************************/
+/* Function prototypes                                              */
+/********************************************************************/
 
-/* Lock the driver, including waiting for any resets to complete.  May
-   only be called from user context. Returns 0 if successfully locked,
-   and an errno otherwise (which means we got a signal while
-   waiting). */
-static inline int
-orinoco_lock_user(struct orinoco_private *priv)
+int __orinoco_up(struct net_device *dev)
 {
-	wait_queue_t wait;
-	int ret = 0;
-	
-	if (in_interrupt()) {
-		BUG();
-		return -EBUSY;
+	struct orinoco_private *priv = dev->priv;
+	struct hermes *hw = &priv->hw;
+	int err;
+
+	err = __orinoco_program_rids(dev);
+	if (err) {
+		printk(KERN_ERR "%s: Error %d configuring card\n",
+		       dev->name, err);
+		return err;
 	}
-		       
-	init_waitqueue_entry(&wait, current);
-	add_wait_queue(&priv->reset_queue, &wait);
-	set_current_state(TASK_INTERRUPTIBLE);
 
-	spin_lock_irq(&priv->lock);
-	while (priv->resetting) {
-		spin_unlock_irq(&priv->lock);
-		if (! signal_pending(current))
-			schedule();
-		else {
-			ret = -ERESTARTSYS;
-			break;
-		}
-		spin_lock_irq(&priv->lock);
+	/* Fire things up again */
+	hermes_set_irqmask(hw, ORINOCO_INTEN);
+	err = hermes_enable_port(hw, 0);
+	if (err) {
+		printk(KERN_ERR "%s: Error %d enabling MAC port\n",
+		       dev->name, err);
+		return err;
 	}
 
-	set_current_state(TASK_RUNNING);
-	remove_wait_queue(&priv->reset_queue, &wait);
-	return ret;
-}
+	netif_start_queue(dev);
 
-static inline void
-orinoco_unlock_user(struct orinoco_private *priv)
-{
-	spin_unlock_irq(&priv->lock);
+	return 0;
 }
 
-int orinoco_commence_reset(struct orinoco_private *priv)
+int __orinoco_down(struct net_device *dev)
 {
-	struct net_device *dev = priv->ndev;
+	struct orinoco_private *priv = dev->priv;
 	struct hermes *hw = &priv->hw;
 	int err;
 
-	err = orinoco_lock_user(priv);
-	if (err)
-		return err;
-
-	priv->resetting = 1;
 	netif_stop_queue(dev);
-	hermes_set_irqmask(hw, 0);
-	spin_unlock_irq(&priv->lock);
+
+	if (! priv->hw_unavailable) {
+		if (! priv->broken_disableport) {
+			err = hermes_disable_port(hw, 0);
+			if (err) {
+				/* Some firmwares (e.g. Intersil 1.3.x) seem
+				 * to have problems disabling the port, oh
+				 * well, too bad. */
+				printk(KERN_WARNING "%s: Error %d disabling MAC port\n",
+				       dev->name, err);
+				priv->broken_disableport = 1;
+			}
+		}
+		hermes_set_irqmask(hw, 0);
+		hermes_write_regn(hw, EVACK, 0xffff);
+	}
+	
+	/* firmware will have to reassociate */
+	priv->last_linkstatus = 0xffff;
+	priv->connected = 0;
 
 	return 0;
 }
 
-static int orinoco_default_open(struct net_device *dev)
+int orinoco_reinit_firmware(struct net_device *dev)
 {
-	struct orinoco_private *priv = (struct orinoco_private *) dev->priv;
+	struct orinoco_private *priv = dev->priv;
+	struct hermes *hw = &priv->hw;
 	int err;
 
-	err = orinoco_commence_reset(priv);
+	err = hermes_init(hw);
 	if (err)
 		return err;
 
-	netif_device_attach(dev);
-
-	err = __orinoco_startup(priv);
-	if (err)
-		printk(KERN_ERR "%s: orinoco_reset failed in orinoco_default_open()",
+	err = hermes_allocate(hw, priv->nicbuf_size, &priv->txfid);
+	if (err == -EIO) {
+		/* Try workaround for old Symbol firmware bug */
+		printk(KERN_WARNING "%s: firmware ALLOC bug detected "
+		       "(old Symbol firmware?). Trying to work around... ",
 		       dev->name);
-	else
-		netif_start_queue(dev);
+		
+		priv->nicbuf_size = TX_NICBUF_SIZE_BUG;
+		err = hermes_allocate(hw, priv->nicbuf_size, &priv->txfid);
+		if (err)
+			printk("failed!\n");
+		else
+			printk("ok.\n");
+	}
 
 	return err;
 }
 
-static int orinoco_default_stop(struct net_device *dev)
-{
-	struct orinoco_private *priv = (struct orinoco_private *) dev->priv;
-	netif_stop_queue(dev);
-	orinoco_shutdown(priv);
-	return 0;
-}
-
-static void orinoco_default_reset(struct orinoco_private *priv)
+static int orinoco_open(struct net_device *dev)
 {
-	struct net_device *dev = priv->ndev;
+	struct orinoco_private *priv = dev->priv;
+	unsigned long flags;
 	int err;
 
-	err = orinoco_commence_reset(priv);
-	if (err) {
-		printk(KERN_ERR "%s: signal in orinoco_default_reset? (%d)\n",
-		       dev->name, err);
-		return;
-	}
-
-	/* Hard reset goes here */
+	err = orinoco_lock(priv, &flags);
+	if (err)
+		return err;
 
-	err = __orinoco_startup(priv);
-	if (err) {
-		printk(KERN_ERR "%s: Error resetting device\n", dev->name);
-		dev->stop(dev);
-		return;
-	}
+	err = __orinoco_up(dev);
 
-	dev->trans_start = jiffies;
-	netif_wake_queue(dev);
-}
+	if (! err)
+		priv->open = 1;
 
-static inline void
-set_port_type(struct orinoco_private *priv)
-{
-	switch (priv->iw_mode) {
-	case IW_MODE_INFRA:
-		priv->port_type = 1;
-		priv->allow_ibss = 0;
-		break;
-	case IW_MODE_ADHOC:
-		if (priv->prefer_port3) {
-			priv->port_type = 3;
-			priv->allow_ibss = 0;
-		} else {
-			priv->port_type = priv->ibss_port;
-			priv->allow_ibss = 1;
-		}
-		break;
-	default:
-		printk(KERN_ERR "%s: Invalid priv->iw_mode in set_port_type()\n",
-		       priv->ndev->name);
-	}
-}
+	orinoco_unlock(priv, &flags);
 
-static inline int
-is_snap(struct header_struct *hdr)
-{
-	return (hdr->dsap == 0xAA) && (hdr->ssap == 0xAA) && (hdr->ctrl == 0x3);
+	return err;
 }
 
-static void
-orinoco_set_multicast_list(struct net_device *dev)
+int orinoco_stop(struct net_device *dev)
 {
 	struct orinoco_private *priv = dev->priv;
-	unsigned long flags;
-
-	if (orinoco_lock(priv, &flags) != 0) {
-		printk(KERN_DEBUG "%s: orinoco_set_multicast_list() "
-		       "called while reset in progress\n", dev->name);
-		return;
-	}
-
-	__orinoco_set_multicast_list(dev);
-	orinoco_unlock(priv, &flags);
-}
-
-/*
- * Hardware control routines
- */
-
-void
-orinoco_shutdown(struct orinoco_private *priv)
-{
 	int err = 0;
-	unsigned long flags;
 
-	if (orinoco_lock(priv, &flags) != 0) {
-		printk("%s: orinoco_shutdown() called during reset\n", priv->ndev->name);
-		BUG();
-		return;
-	}
+	/* We mustn't use orinoco_lock() here, because we need to be
+	   able to close the interface even if hw_unavailable is set
+	   (e.g. as we're released after a PC Card removal) */
+	spin_lock_irq(&priv->lock);
 
-	hermes_set_irqmask(&priv->hw, 0);
+	priv->open = 0;
 
-	err = hermes_init(&priv->hw);
-	if (err && err != -ENODEV) /* If the card is gone, we don't care about shutting it down */
-		printk(KERN_ERR "%s: Error %d shutting down Hermes chipset\n",
-		       priv->ndev->name, err);
+	err = __orinoco_down(dev);
 
-	orinoco_unlock(priv, &flags);
+	spin_unlock_irq(&priv->lock);
+
+	return err;
 }
 
-/* Must be called by a reset procedure, with priv->resetting = 1 */
-int __orinoco_startup(struct orinoco_private *priv)
+static int __orinoco_program_rids(struct net_device *dev)
 {
-	struct net_device *dev = priv->ndev;
+	struct orinoco_private *priv = dev->priv;
 	hermes_t *hw = &priv->hw;
-	int err = 0;
+	int err;
 	struct hermes_idstring idbuf;
 
-	err = hermes_init(hw);
-	if (err)
-		goto fail;
-
 	/* Set the MAC address */
 	err = hermes_write_ltv(hw, USER_BAP, HERMES_RID_CNFOWNMACADDR,
 			       HERMES_BYTES_TO_RECLEN(ETH_ALEN), dev->dev_addr);
-	if (err)
-		goto fail;
-
-	err = hermes_allocate(hw, priv->nicbuf_size, &priv->txfid);
-	if (err == -EIO) {
-		/* Try workaround for old Symbol firmware bug */
-		priv->nicbuf_size = TX_NICBUF_SIZE_BUG;
-		err = hermes_allocate(hw, priv->nicbuf_size, &priv->txfid);
-		if (err)
-			goto fail;
+	if (err) {
+		printk(KERN_ERR "%s: Error %d setting MAC address\n", dev->name, err);
+		return err;
 	}
 
-	/* Now set up all the parameters on the card */
-	
 	/* Set up the link mode */
-	
 	err = hermes_write_wordrec(hw, USER_BAP, HERMES_RID_CNFPORTTYPE, priv->port_type);
-	if (err)
-		goto fail;
+	if (err) {
+		printk(KERN_ERR "%s: Error %d setting port type\n", dev->name, err);
+		return err;
+	}
+	/* Set the channel/frequency */
+	if (priv->channel == 0) {
+		printk(KERN_DEBUG "%s: Channel is 0 in __orinoco_program_rids()\n", dev->name);
+		if (priv->createibss)
+			priv->channel = 10;
+	}
+	err = hermes_write_wordrec(hw, USER_BAP, HERMES_RID_CNFOWNCHANNEL, priv->channel);
+	if (err) {
+		printk(KERN_ERR "%s: Error %d setting channel\n", dev->name, err);
+		return err;
+	}
+
 	if (priv->has_ibss) {
 		err = hermes_write_wordrec(hw, USER_BAP, HERMES_RID_CNFCREATEIBSS,
-					   priv->allow_ibss);
-		if (err)
-			goto fail;
-		if((strlen(priv->desired_essid) == 0) && (priv->allow_ibss)
+					   priv->createibss);
+		if (err) {
+			printk(KERN_ERR "%s: Error %d setting CREATEIBSS\n", dev->name, err);
+			return err;
+		}
+
+		if ((strlen(priv->desired_essid) == 0) && (priv->createibss)
 		   && (!priv->has_ibss_any)) {
 			printk(KERN_WARNING "%s: This firmware requires an \
 ESSID in IBSS-Ad-Hoc mode.\n", dev->name);
@@ -773,13 +780,17 @@
 	err = hermes_write_ltv(hw, USER_BAP, HERMES_RID_CNFOWNSSID,
 			       HERMES_BYTES_TO_RECLEN(strlen(priv->desired_essid)+2),
 			       &idbuf);
-	if (err)
-		goto fail;
+	if (err) {
+		printk(KERN_ERR "%s: Error %d setting OWNSSID\n", dev->name, err);
+		return err;
+	}
 	err = hermes_write_ltv(hw, USER_BAP, HERMES_RID_CNFDESIREDSSID,
 			       HERMES_BYTES_TO_RECLEN(strlen(priv->desired_essid)+2),
 			       &idbuf);
-	if (err)
-		goto fail;
+	if (err) {
+		printk(KERN_ERR "%s: Error %d setting DESIREDSSID\n", dev->name, err);
+		return err;
+	}
 
 	/* Set the station name */
 	idbuf.len = cpu_to_le16(strlen(priv->nick));
@@ -787,26 +798,29 @@
 	err = hermes_write_ltv(hw, USER_BAP, HERMES_RID_CNFOWNNAME,
 			       HERMES_BYTES_TO_RECLEN(strlen(priv->nick)+2),
 			       &idbuf);
-	if (err)
-		goto fail;
-
-	/* Set the channel/frequency */
-	err = hermes_write_wordrec(hw, USER_BAP, HERMES_RID_CNFOWNCHANNEL, priv->channel);
-	if (err)
-		goto fail;
+	if (err) {
+		printk(KERN_ERR "%s: Error %d setting nickname\n", dev->name, err);
+		return err;
+	}
 
 	/* Set AP density */
 	if (priv->has_sensitivity) {
 		err = hermes_write_wordrec(hw, USER_BAP, HERMES_RID_CNFSYSTEMSCALE,
 					   priv->ap_density);
-		if (err)
+		if (err) {
+			printk(KERN_WARNING "%s: Error %d setting SYSTEMSCALE.  "
+			       "Disabling sensitivity control\n", dev->name, err);
+
 			priv->has_sensitivity = 0;
+		}
 	}
 
 	/* Set RTS threshold */
 	err = hermes_write_wordrec(hw, USER_BAP, HERMES_RID_CNFRTSTHRESHOLD, priv->rts_thresh);
-	if (err)
-		goto fail;
+	if (err) {
+		printk(KERN_ERR "%s: Error %d setting RTS threshold\n", dev->name, err);
+		return err;
+	}
 
 	/* Set fragmentation threshold or MWO robustness */
 	if (priv->has_mwo)
@@ -817,92 +831,263 @@
 		err = hermes_write_wordrec(hw, USER_BAP,
 					   HERMES_RID_CNFFRAGMENTATIONTHRESHOLD,
 					   priv->frag_thresh);
-	if (err)
-		goto fail;
+	if (err) {
+		printk(KERN_ERR "%s: Error %d setting framentation\n", dev->name, err);
+		return err;
+	}
 
 	/* Set bitrate */
 	err = __orinoco_hw_set_bitrate(priv);
-	if (err)
-		goto fail;
+	if (err) {
+		printk(KERN_ERR "%s: Error %d setting bitrate\n", dev->name, err);
+		return err;
+	}
 
 	/* Set power management */
 	if (priv->has_pm) {
 		err = hermes_write_wordrec(hw, USER_BAP, HERMES_RID_CNFPMENABLED,
 					   priv->pm_on);
-		if (err)
-			goto fail;
+		if (err) {
+			printk(KERN_ERR "%s: Error %d setting up PM\n",
+			       dev->name, err);
+			return err;
+		}
+
 		err = hermes_write_wordrec(hw, USER_BAP,
 					   HERMES_RID_CNFMULTICASTRECEIVE,
 					   priv->pm_mcast);
-		if (err)
-			goto fail;
+		if (err) {
+			printk(KERN_ERR "%s: Error %d setting up PM\n",
+			       dev->name, err);
+			return err;
+		}
 		err = hermes_write_wordrec(hw, USER_BAP,
 					   HERMES_RID_CNFMAXSLEEPDURATION,
 					   priv->pm_period);
-		if (err)
-			goto fail;
+		if (err) {
+			printk(KERN_ERR "%s: Error %d setting up PM\n",
+			       dev->name, err);
+			return err;
+		}
 		err = hermes_write_wordrec(hw, USER_BAP,
 					   HERMES_RID_CNFPMHOLDOVERDURATION,
 					   priv->pm_timeout);
-		if (err)
-			goto fail;
+		if (err) {
+			printk(KERN_ERR "%s: Error %d setting up PM\n",
+			       dev->name, err);
+			return err;
+		}
+	}
+
+	/* Set preamble - only for Symbol so far... */
+	if (priv->has_preamble) {
+		err = hermes_write_wordrec(hw, USER_BAP,
+					   HERMES_RID_CNFPREAMBLE_SYMBOL,
+					   priv->preamble);
+		if (err) {
+			printk(KERN_ERR "%s: Error %d setting preamble\n",
+			       dev->name, err);
+			return err;
+		}
+	}
+
+	/* Set up encryption */
+	if (priv->has_wep) {
+		err = __orinoco_hw_setup_wep(priv);
+		if (err) {
+			printk(KERN_ERR "%s: Error %d activating WEP\n",
+			       dev->name, err);
+			return err;
+		}
+	}
+
+	/* Set promiscuity / multicast*/
+	priv->promiscuous = 0;
+	priv->mc_count = 0;
+	__orinoco_set_multicast_list(dev); /* FIXME: what about the xmit_lock */
+
+	return 0;
+}
+
+/* xyzzy */
+static int orinoco_reconfigure(struct net_device *dev)
+{
+	struct orinoco_private *priv = dev->priv;
+	struct hermes *hw = &priv->hw;
+	unsigned long flags;
+	int err = 0;
+
+	if (priv->broken_disableport) {
+		schedule_work(&priv->reset_work);
+		return 0;
+	}
+
+	err = orinoco_lock(priv, &flags);
+	if (err)
+		return err;
+
+		
+	err = hermes_disable_port(hw, 0);
+	if (err) {
+		printk(KERN_WARNING "%s: Unable to disable port while reconfiguring card\n",
+		       dev->name);
+		priv->broken_disableport = 1;
+		goto out;
+	}
+
+	err = __orinoco_program_rids(dev);
+	if (err) {
+		printk(KERN_WARNING "%s: Unable to reconfigure card\n",
+		       dev->name);
+		goto out;
+	}
+
+	err = hermes_enable_port(hw, 0);
+	if (err) {
+		printk(KERN_WARNING "%s: Unable to enable port while reconfiguring card\n",
+		       dev->name);
+		goto out;
+	}
+
+ out:
+	if (err) {
+		printk(KERN_WARNING "%s: Resetting instead...\n", dev->name);
+		schedule_work(&priv->reset_work);
+		err = 0;
+	}
+
+	orinoco_unlock(priv, &flags);
+	return err;
+
+}
+
+/* This must be called from user context, without locks held - use
+ * schedule_work() */
+static void orinoco_reset(struct net_device *dev)
+{
+	struct orinoco_private *priv = dev->priv;
+	struct hermes *hw = &priv->hw;
+	int err;
+	unsigned long flags;
+
+	err = orinoco_lock(priv, &flags);
+	if (err)
+		/* When the hardware becomes available again, whatever
+		 * detects that is responsible for re-initializing
+		 * it. So no need for anything further*/
+		return;
+
+	netif_stop_queue(dev);
+
+	/* Shut off interrupts.  Depending on what state the hardware
+	 * is in, this might not work, but we'll try anyway */
+	hermes_set_irqmask(hw, 0);
+	hermes_write_regn(hw, EVACK, 0xffff);
+
+	priv->hw_unavailable++;
+	priv->last_linkstatus = 0xffff; /* firmware will have to reassociate */
+	priv->connected = 0;
+
+	orinoco_unlock(priv, &flags);
+
+	if (priv->hard_reset)
+		err = (*priv->hard_reset)(priv);
+	if (err) {
+		printk(KERN_ERR "%s: orinoco_reset: Error %d performing hard reset\n",
+		       dev->name, err);
+		/* FIXME: shutdown of some sort */
+		return;
 	}
 
-	/* Set preamble - only for Symbol so far... */
-	if (priv->has_preamble) {
-		err = hermes_write_wordrec(hw, USER_BAP,
-					   HERMES_RID_CNFPREAMBLE_SYMBOL,
-					   priv->preamble);
-		if (err) {
-			printk(KERN_WARNING "%s: Can't set preamble!\n", dev->name);
-			goto fail;
-		}
+	err = orinoco_reinit_firmware(dev);
+	if (err) {
+		printk(KERN_ERR "%s: orinoco_reset: Error %d re-initializing firmware\n",
+		       dev->name, err);
+		return;
 	}
 
-	/* Set up encryption */
-	if (priv->has_wep) {
-		err = __orinoco_hw_setup_wep(priv);
+	spin_lock_irq(&priv->lock); /* This has to be called from user context */
+
+	priv->hw_unavailable--;
+
+	/* priv->open or priv->hw_unavailable might have changed while
+	 * we dropped the lock */
+	if (priv->open && (! priv->hw_unavailable)) {
+		err = __orinoco_up(dev);
 		if (err) {
-			printk(KERN_ERR "%s: Error %d activating WEP.\n",
+			printk(KERN_ERR "%s: orinoco_reset: Error %d reenabling card\n",
 			       dev->name, err);
-			goto fail;
-		}
+		} else
+			dev->trans_start = jiffies;
 	}
 
-	/* Set promiscuity / multicast*/
-	priv->promiscuous = 0;
-	priv->mc_count = 0;
-	spin_lock_bh(&dev->xmit_lock);
-	__orinoco_set_multicast_list(dev);
-	spin_unlock_bh(&dev->xmit_lock);
+	spin_unlock_irq(&priv->lock);
 
-	/* Fire things up again */
-	spin_lock_irq(&priv->lock);
+	return;
+}
 
-	priv->resetting = 0;
-	hermes_set_irqmask(hw, HERMES_EV_RX | HERMES_EV_ALLOC |
-			   HERMES_EV_TX | HERMES_EV_TXEXC |
-			   HERMES_EV_WTERR | HERMES_EV_INFO |
-			   HERMES_EV_INFDROP);
-	netif_wake_queue(dev);
-	wake_up_all(&priv->reset_queue);
-	
-	err = hermes_enable_port(hw, 0);
-	
-	orinoco_unlock_user(priv);
+/********************************************************************/
+/* Internal helper functions                                        */
+/********************************************************************/
 
-	
-	return err;
+static inline void
+set_port_type(struct orinoco_private *priv)
+{
+	switch (priv->iw_mode) {
+	case IW_MODE_INFRA:
+		priv->port_type = 1;
+		priv->createibss = 0;
+		break;
+	case IW_MODE_ADHOC:
+		if (priv->prefer_port3) {
+			priv->port_type = 3;
+			priv->createibss = 0;
+		} else {
+			priv->port_type = priv->ibss_port;
+			priv->createibss = 1;
+		}
+		break;
+	default:
+		printk(KERN_ERR "%s: Invalid priv->iw_mode in set_port_type()\n",
+		       priv->ndev->name);
+	}
+}
 
- fail:
-	spin_lock_irq(&priv->lock);
-	priv->resetting = 0;
-	wake_up_all(&priv->reset_queue);
-	orinoco_unlock_user(priv);
+/* Does the frame have a SNAP header indicating it should be
+ * de-encapsulated to Ethernet-II? */
+static inline int
+is_ethersnap(struct header_struct *hdr)
+{
+	/* We de-encapsulate all packets which, a) have SNAP headers
+	 * (i.e. SSAP=DSAP=0xaa and CTRL=0x3 in the 802.2 LLC header
+	 * and where b) the OUI of the SNAP header is 00:00:00 or
+	 * 00:00:f8 - we need both because different APs appear to use
+	 * different OUIs for some reason */
+	return (memcmp(&hdr->dsap, &encaps_hdr, 5) == 0)
+		&& ( (hdr->oui[2] == 0x00) || (hdr->oui[2] == 0xf8) );
+}
 
-	return err;
+static void
+orinoco_set_multicast_list(struct net_device *dev)
+{
+	struct orinoco_private *priv = dev->priv;
+	unsigned long flags;
+
+	if (orinoco_lock(priv, &flags) != 0) {
+		printk(KERN_DEBUG "%s: orinoco_set_multicast_list() "
+		       "called when hw_unavailable\n", dev->name);
+		return;
+	}
+
+	__orinoco_set_multicast_list(dev);
+	orinoco_unlock(priv, &flags);
 }
 
+/********************************************************************/
+/* Hardware control functions                                       */
+/********************************************************************/
+
+
 static int __orinoco_hw_set_bitrate(struct orinoco_private *priv)
 {
 	hermes_t *hw = &priv->hw;
@@ -1037,33 +1222,36 @@
 	return 0;
 }
 
-static int orinoco_hw_get_bssid(struct orinoco_private *priv, char buf[ETH_ALEN])
+static int orinoco_hw_get_bssid(struct orinoco_private *priv,
+				char buf[ETH_ALEN])
 {
 	hermes_t *hw = &priv->hw;
 	int err = 0;
+	unsigned long flags;
 
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 
 	err = hermes_read_ltv(hw, USER_BAP, HERMES_RID_CURRENTBSSID,
 			      ETH_ALEN, NULL, buf);
 
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	return err;
 }
 
 static int orinoco_hw_get_essid(struct orinoco_private *priv, int *active,
-			      char buf[IW_ESSID_MAX_SIZE+1])
+				char buf[IW_ESSID_MAX_SIZE+1])
 {
 	hermes_t *hw = &priv->hw;
 	int err = 0;
 	struct hermes_idstring essidbuf;
 	char *p = (char *)(&essidbuf.val);
 	int len;
+	unsigned long flags;
 
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 
@@ -1102,7 +1290,7 @@
 	buf[len] = '\0';
 
  fail_unlock:
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	return err;       
 }
@@ -1114,8 +1302,9 @@
 	int err = 0;
 	u16 channel;
 	long freq = 0;
+	unsigned long flags;
 
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 	
@@ -1130,9 +1319,8 @@
 	}
 
 	if ( (channel < 1) || (channel > NUM_CHANNELS) ) {
-		struct net_device *dev = priv->ndev;
-
-		printk(KERN_WARNING "%s: Channel out of range (%d)!\n", dev->name, channel);
+		printk(KERN_WARNING "%s: Channel out of range (%d)!\n",
+		       priv->ndev->name, channel);
 		err = -EBUSY;
 		goto out;
 
@@ -1140,15 +1328,15 @@
 	freq = channel_frequency[channel-1] * 100000;
 
  out:
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	if (err > 0)
 		err = -EBUSY;
 	return err ? err : freq;
 }
 
-static int orinoco_hw_get_bitratelist(struct orinoco_private *priv, int *numrates,
-				    s32 *rates, int max)
+static int orinoco_hw_get_bitratelist(struct orinoco_private *priv,
+				      int *numrates, s32 *rates, int max)
 {
 	hermes_t *hw = &priv->hw;
 	struct hermes_idstring list;
@@ -1156,14 +1344,15 @@
 	int err = 0;
 	int num;
 	int i;
+	unsigned long flags;
 
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 
 	err = hermes_read_ltv(hw, USER_BAP, HERMES_RID_SUPPORTEDDATARATES,
 			      sizeof(list), NULL, &list);
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	if (err)
 		return err;
@@ -1180,9 +1369,6 @@
 }
 
 #if 0
-#ifndef ORINOCO_DEBUG
-static inline void show_rx_frame(struct orinoco_rxframe_hdr *frame) {}
-#else
 static void show_rx_frame(struct orinoco_rxframe_hdr *frame)
 {
 	printk(KERN_DEBUG "RX descriptor:\n");
@@ -1239,17 +1425,16 @@
 	       frame->p8022.oui[0], frame->p8022.oui[1], frame->p8022.oui[2]);
 	printk(KERN_DEBUG "  ethertype  = 0x%04x\n", frame->ethertype);
 }
-#endif
-#endif
+#endif /* 0 */
 
 /*
  * Interrupt handler
  */
-void orinoco_interrupt(int irq, void *dev_id, struct pt_regs *regs)
+irqreturn_t orinoco_interrupt(int irq, void *dev_id, struct pt_regs *regs)
 {
-	struct orinoco_private *priv = (struct orinoco_private *) dev_id;
+	struct net_device *dev = (struct net_device *)dev_id;
+	struct orinoco_private *priv = dev->priv;
 	hermes_t *hw = &priv->hw;
-	struct net_device *dev = priv->ndev;
 	int count = MAX_IRQLOOPS_PER_IRQ;
 	u16 evstat, events;
 	/* These are used to detect a runaway interrupt situation */
@@ -1260,28 +1445,29 @@
 	unsigned long flags;
 
 	if (orinoco_lock(priv, &flags) != 0) {
-		/* If we're in the middle of a reset, drop the interrupt */
-		return;
+		/* If hw is unavailable - we don't know if the irq was
+		 * for us or not */
+		return IRQ_HANDLED;
 	}
 
 	evstat = hermes_read_regn(hw, EVSTAT);
 	events = evstat & hw->inten;
+	if (! events) {
+		orinoco_unlock(priv, &flags);
+		return IRQ_NONE;
+	}
 	
-/*  	if (! events) { */
-/*  		printk(KERN_WARNING "%s: Null event\n", dev->name); */
-/*  	} */
-
 	if (jiffies != last_irq_jiffy)
 		loops_this_jiffy = 0;
 	last_irq_jiffy = jiffies;
 
 	while (events && count--) {
 		if (++loops_this_jiffy > MAX_IRQLOOPS_PER_JIFFY) {
-			printk(KERN_CRIT "%s: IRQ handler is looping too \
-much! Shutting down.\n",
-			       dev->name);
-			/* Perform an emergency shutdown */
+			printk(KERN_WARNING "%s: IRQ handler is looping too "
+			       "much! Resetting.\n", dev->name);
+			/* Disable interrupts for now */
 			hermes_set_irqmask(hw, 0);
+			schedule_work(&priv->reset_work);
 			break;
 		}
 
@@ -1292,21 +1478,21 @@
 		}
 
 		if (events & HERMES_EV_TICK)
-			__orinoco_ev_tick(priv, hw);
+			__orinoco_ev_tick(dev, hw);
 		if (events & HERMES_EV_WTERR)
-			__orinoco_ev_wterr(priv, hw);
+			__orinoco_ev_wterr(dev, hw);
 		if (events & HERMES_EV_INFDROP)
-			__orinoco_ev_infdrop(priv, hw);
+			__orinoco_ev_infdrop(dev, hw);
 		if (events & HERMES_EV_INFO)
-			__orinoco_ev_info(priv, hw);
+			__orinoco_ev_info(dev, hw);
 		if (events & HERMES_EV_RX)
-			__orinoco_ev_rx(priv, hw);
+			__orinoco_ev_rx(dev, hw);
 		if (events & HERMES_EV_TXEXC)
-			__orinoco_ev_txexc(priv, hw);
+			__orinoco_ev_txexc(dev, hw);
 		if (events & HERMES_EV_TX)
-			__orinoco_ev_tx(priv, hw);
+			__orinoco_ev_tx(dev, hw);
 		if (events & HERMES_EV_ALLOC)
-			__orinoco_ev_alloc(priv, hw);
+			__orinoco_ev_alloc(dev, hw);
 		
 		hermes_write_regn(hw, EVACK, events);
 
@@ -1315,34 +1501,73 @@
 	};
 
 	orinoco_unlock(priv, &flags);
+	return IRQ_HANDLED;
 }
 
-static void __orinoco_ev_tick(struct orinoco_private *priv, hermes_t *hw)
+static void __orinoco_ev_tick(struct net_device *dev, hermes_t *hw)
 {
-	printk(KERN_DEBUG "%s: TICK\n", priv->ndev->name);
+	printk(KERN_DEBUG "%s: TICK\n", dev->name);
 }
 
-static void __orinoco_ev_wterr(struct orinoco_private *priv, hermes_t *hw)
+static void __orinoco_ev_wterr(struct net_device *dev, hermes_t *hw)
 {
 	/* This seems to happen a fair bit under load, but ignoring it
 	   seems to work fine...*/
 	printk(KERN_DEBUG "%s: MAC controller error (WTERR). Ignoring.\n",
-	       priv->ndev->name);
+	       dev->name);
+}
+
+static void __orinoco_ev_infdrop(struct net_device *dev, hermes_t *hw)
+{
+	printk(KERN_WARNING "%s: Information frame lost.\n", dev->name);
 }
 
-static void __orinoco_ev_infdrop(struct orinoco_private *priv, hermes_t *hw)
+static void print_linkstatus(struct net_device *dev, u16 status)
 {
-	printk(KERN_WARNING "%s: Information frame lost.\n", priv->ndev->name);
+	char * s;
+
+	if (suppress_linkstatus)
+		return;
+
+	switch (status) {
+	case HERMES_LINKSTATUS_NOT_CONNECTED:
+		s = "Not Connected";
+		break;
+	case HERMES_LINKSTATUS_CONNECTED:
+		s = "Connected";
+		break;
+	case HERMES_LINKSTATUS_DISCONNECTED:
+		s = "Disconnected";
+		break;
+	case HERMES_LINKSTATUS_AP_CHANGE:
+		s = "AP Changed";
+		break;
+	case HERMES_LINKSTATUS_AP_OUT_OF_RANGE:
+		s = "AP Out of Range";
+		break;
+	case HERMES_LINKSTATUS_AP_IN_RANGE:
+		s = "AP In Range";
+		break;
+	case HERMES_LINKSTATUS_ASSOC_FAILED:
+		s = "Association Failed";
+		break;
+	default:
+		s = "UNKNOWN";
+	}
+	
+	printk(KERN_INFO "%s: New link status: %s (%04x)\n",
+	       dev->name, s, status);
 }
 
-static void __orinoco_ev_info(struct orinoco_private *priv, hermes_t *hw)
+static void __orinoco_ev_info(struct net_device *dev, hermes_t *hw)
 {
-	struct net_device *dev = priv->ndev;
+	struct orinoco_private *priv = dev->priv;
 	u16 infofid;
 	struct {
 		u16 len;
 		u16 type;
 	} __attribute__ ((packed)) info;
+	int len, type;
 	int err;
 
 	/* This is an answer to an INQUIRE command that we did earlier,
@@ -1360,25 +1585,29 @@
 		return;
 	}
 	
-	switch (le16_to_cpu(info.type)) {
+	len = HERMES_RECLEN_TO_BYTES(le16_to_cpu(info.len));
+	type = le16_to_cpu(info.type);
+
+	switch (type) {
 	case HERMES_INQ_TALLIES: {
 		struct hermes_tallies_frame tallies;
 		struct iw_statistics *wstats = &priv->wstats;
-		int len = le16_to_cpu(info.len) - 1;
 		
-		if (len > (sizeof(tallies) / 2)) {
-			DEBUG(1, "%s: tallies frame too long.\n", dev->name);
-			len = sizeof(tallies) / 2;
+		if (len > sizeof(tallies)) {
+			printk(KERN_WARNING "%s: Tallies frame too long (%d bytes)\n",
+			       dev->name, len);
+			len = sizeof(tallies);
 		}
 		
 		/* Read directly the data (no seek) */
-		hermes_read_words(hw, HERMES_DATA1, (void *) &tallies, len);
+		hermes_read_words(hw, HERMES_DATA1, (void *) &tallies,
+				  len / 2); /* FIXME: blech! */
 		
 		/* Increment our various counters */
 		/* wstats->discard.nwid - no wrong BSSID stuff */
 		wstats->discard.code +=
 			le16_to_cpu(tallies.RxWEPUndecryptable);
-		if (len == (sizeof(tallies) / 2))  
+		if (len == sizeof(tallies))  
 			wstats->discard.code +=
 				le16_to_cpu(tallies.RxDiscards_WEPICVError) +
 				le16_to_cpu(tallies.RxDiscards_WEPExcluded);
@@ -1393,17 +1622,47 @@
 #endif /* WIRELESS_EXT > 11 */
 	}
 	break;
+	case HERMES_INQ_LINKSTATUS: {
+		struct hermes_linkstatus linkstatus;
+		u16 newstatus;
+		
+		if (len != sizeof(linkstatus)) {
+			printk(KERN_WARNING "%s: Unexpected size for linkstatus frame (%d bytes)\n",
+			       dev->name, len);
+			break;
+		}
+
+		hermes_read_words(hw, HERMES_DATA1, (void *) &linkstatus,
+				  len / 2);
+		newstatus = le16_to_cpu(linkstatus.linkstatus);
+
+		if ( (newstatus == HERMES_LINKSTATUS_CONNECTED)
+		     || (newstatus == HERMES_LINKSTATUS_AP_CHANGE)
+		     || (newstatus == HERMES_LINKSTATUS_AP_IN_RANGE) )
+			priv->connected = 1;
+		else if ( (newstatus == HERMES_LINKSTATUS_NOT_CONNECTED)
+			  || (newstatus == HERMES_LINKSTATUS_DISCONNECTED)
+			  || (newstatus == HERMES_LINKSTATUS_AP_OUT_OF_RANGE)
+			  || (newstatus == HERMES_LINKSTATUS_ASSOC_FAILED) )
+			priv->connected = 0;
+
+		if (newstatus != priv->last_linkstatus)
+			print_linkstatus(dev, newstatus);
+
+		priv->last_linkstatus = newstatus;
+	}
+	break;
 	default:
-		DEBUG(1, "%s: Unknown information frame received (type %04x).\n",
-		      priv->ndev->name, le16_to_cpu(info.type));
+		printk(KERN_DEBUG "%s: Unknown information frame received (type %04x).\n",
+		      dev->name, type);
 		/* We don't actually do anything about it */
 		break;
 	}
 }
 
-static void __orinoco_ev_rx(struct orinoco_private *priv, hermes_t *hw)
+static void __orinoco_ev_rx(struct net_device *dev, hermes_t *hw)
 {
-	struct net_device *dev = priv->ndev;
+	struct orinoco_private *priv = dev->priv;
 	struct net_device_stats *stats = &priv->stats;
 	struct iw_statistics *wstats = &priv->wstats;
 	struct sk_buff *skb = NULL;
@@ -1414,6 +1673,7 @@
 	struct header_struct hdr;
 	struct ethhdr *eh;
 	int err;
+	struct ieee802_11_hdr hdr80211;
 
 	rxfid = hermes_read_regn(hw, RXFID);
 
@@ -1430,6 +1690,8 @@
 	
 	if (status & HERMES_RXSTAT_ERR) {
 		if (status & HERMES_RXSTAT_UNDECRYPTABLE) {
+			if (dev->type != ARPHRD_ETHER)
+				goto sniffing;
 			wstats->discard.code++;
 			DEBUG(1, "%s: Undecryptable frame on Rx. Frame dropped.\n",
 			       dev->name);
@@ -1440,7 +1702,7 @@
 		stats->rx_errors++;
 		goto drop;
 	}
-
+sniffing:
 	/* For now we ignore the 802.11 header completely, assuming
            that the card's firmware has handled anything vital */
 
@@ -1456,12 +1718,11 @@
 	length = ntohs(hdr.len);
 	
 	/* Sanity checks */
-	if (length < 8) { /* does the frame have space for a full LLC+SNAP header? */
+	if (length < 3) { /* No for even an 802.2 LLC header */
 		/* At least on Symbol firmware with PCF we get quite a
                    lot of these legitimately - Poll frames with no
                    data. */
-		DEBUG(1, "%s: Undersized frame received (%d bytes)\n",
-		       dev->name, length);
+		stats->rx_dropped++;
 		goto drop;
 	}
 	if (length > IEEE802_11_DATA_LEN) {
@@ -1471,86 +1732,122 @@
 		stats->rx_errors++;
 		goto drop;
 	}
+	/* Now handle frame based on port# */
+	switch (HERMES_RXSTAT_GET_MACPORT(status)) {
+	case 0:
+		/* We need space for the packet data itself, plus an
+		 * ethernet header, plus 2 bytes so we can align the
+		 * IP header on a 32bit boundary, plus 1 byte so we
+		 * can read in odd length packets from the card, which
+		 * has an IO granularity of 16 bits */
+		skb = dev_alloc_skb(length+ETH_HLEN+2+1);
+		if (!skb) {
+			printk(KERN_WARNING "%s: Can't allocate skb for Rx\n",
+			       dev->name);
+			goto drop;
+		}
 
-	/* We need space for the packet data itself, plus an ethernet
-	   header, plus 2 bytes so we can align the IP header on a
-	   32bit boundary, plus 1 byte so we can read in odd length
-	   packets from the card, which has an IO granularity of 16
-	   bits */  
-	skb = dev_alloc_skb(length+ETH_HLEN+2+1);
-	if (!skb) {
-		printk(KERN_WARNING "%s: Can't allocate skb for Rx\n",
-		       dev->name);
-		stats->rx_dropped++;
-		goto drop;
-	}
-
-	skb_reserve(skb, 2); /* This way the IP header is aligned */
+		skb_reserve(skb, 2); /* This way the IP header is aligned */
 
-	/* Handle decapsulation
-	 * In most cases, the firmware tell us about SNAP frames.
-	 * For some reason, the SNAP frames sent by LinkSys APs
-	 * are not properly recognised by most firmwares.
-	 * So, check ourselves */
-	if(((status & HERMES_RXSTAT_MSGTYPE) == HERMES_RXSTAT_1042) ||
-	   ((status & HERMES_RXSTAT_MSGTYPE) == HERMES_RXSTAT_TUNNEL) ||
-	   is_snap(&hdr)) {
-		/* These indicate a SNAP within 802.2 LLC within
-		   802.11 frame which we'll need to de-encapsulate to
-		   the original EthernetII frame. */
+		/* Handle decapsulation In most cases, the firmware
+		 * tell us about SNAP frames.  For some reason, the
+		 * SNAP frames sent by LinkSys APs are not properly
+		 * recognised by most firmwares.  So, check ourselves
+		 * */
+		if (((status & HERMES_RXSTAT_MSGTYPE) == HERMES_RXSTAT_1042) ||
+		    ((status & HERMES_RXSTAT_MSGTYPE) == HERMES_RXSTAT_TUNNEL) ||
+		    is_ethersnap(&hdr)) {
+			/* These indicate a SNAP within 802.2 LLC
+			 * within 802.11 frame which we'll need to
+			 * de-encapsulate to the original EthernetII
+			 * frame. */
+
+			if (length < ENCAPS_OVERHEAD) { /* No room for full LLC+SNAP */
+				stats->rx_length_errors++;
+				goto drop;
+			}
+			
+			/* Remove SNAP header, reconstruct EthernetII frame */
+			data_len = length - ENCAPS_OVERHEAD;
+			data_off = HERMES_802_3_OFFSET + sizeof(hdr);
+			
+			eh = (struct ethhdr *)skb_put(skb, ETH_HLEN);
+			
+			memcpy(eh, &hdr, 2 * ETH_ALEN);
+			eh->h_proto = hdr.ethertype;
+		} else {
+			/* All other cases indicate a genuine 802.3 frame.  No
+			   decapsulation needed.  We just throw the whole
+			   thing in, and hope the protocol layer can deal with
+			   it as 802.3 */
+			data_len = length;
+			data_off = HERMES_802_3_OFFSET;
+			/* FIXME: we re-read from the card data we already read here */
+		}
+		
+		p = skb_put(skb, data_len);
+		err = hermes_bap_pread(hw, IRQ_BAP, p, RUP_EVEN(data_len),
+				       rxfid, data_off);
+		if (err) {
+			printk(KERN_ERR "%s: error %d reading frame. "
+			       "Frame dropped.\n", dev->name, err);
+			stats->rx_errors++;
+			goto drop;
+		}
+		
+		dev->last_rx = jiffies;
+		skb->dev = dev;
+		skb->protocol = eth_type_trans(skb, dev);
+		skb->ip_summed = CHECKSUM_NONE;
+		
+		/* Process the wireless stats if needed */
+		orinoco_stat_gather(dev, skb, &desc);
+		
+		/* Pass the packet to the networking stack */
+		netif_rx(skb);
+		stats->rx_packets++;
+		stats->rx_bytes += length;
+		
+		return;
+		
+	case 7:
+		if (status & HERMES_RXSTAT_BADCRC) {
+                        printk(KERN_DEBUG "%s: Received monitor frame: "
+			       "BADCRC set\n", dev->name);
+			goto drop;
+		}
 
-		/* Remove SNAP header, reconstruct EthernetII frame */
-		data_len = length - ENCAPS_OVERHEAD;
-		data_off = HERMES_802_3_OFFSET + sizeof(hdr);
+		err = hermes_bap_pread(hw, IRQ_BAP, &hdr80211,
+				       sizeof(hdr80211), 
+				       rxfid, HERMES_RX_80211HDR_OFF);
 
-		eh = (struct ethhdr *)skb_put(skb, ETH_HLEN);
+		if (err) {
+			printk(KERN_ERR "%s: error %d reading monitor frame. "
+			       "Frame dropped.\n", dev->name, err);
+			stats->rx_errors++;
+			goto drop;
+		}
 
-		memcpy(eh, &hdr, 2 * ETH_ALEN);
-		eh->h_proto = hdr.ethertype;
-	} else {
-		/* All other cases indicate a genuine 802.3 frame.  No
-		   decapsulation needed.  We just throw the whole
-		   thing in, and hope the protocol layer can deal with
-		   it as 802.3 */
-		data_len = length;
-		data_off = HERMES_802_3_OFFSET;
-		/* FIXME: we re-read from the card data we already read here */
-	}
+		orinoco_int_rxmonitor(dev, rxfid, length,
+				      &desc, &hdr80211);
+                break;
 
-	p = skb_put(skb, data_len);
-	err = hermes_bap_pread(hw, IRQ_BAP, p, RUP_EVEN(data_len),
-			       rxfid, data_off);
-	if (err) {
-		printk(KERN_ERR "%s: error %d reading frame. "
-		       "Frame dropped.\n", dev->name, err);
-		stats->rx_errors++;
-		goto drop;
+	default:
+		printk("Received frame on unsupported port=%d\n",
+		       HERMES_RXSTAT_GET_MACPORT(status));
+		break;
 	}
-
-	dev->last_rx = jiffies;
-	skb->dev = dev;
-	skb->protocol = eth_type_trans(skb, dev);
-	skb->ip_summed = CHECKSUM_NONE;
-	
-	/* Process the wireless stats if needed */
-	orinoco_stat_gather(dev, skb, &desc);
-
-	/* Pass the packet to the networking stack */
-	netif_rx(skb);
-	stats->rx_packets++;
-	stats->rx_bytes += length;
-
-	return;
-
  drop:	
+	stats->rx_dropped++;
+
 	if (skb)
 		dev_kfree_skb_irq(skb);
 	return;
 }
 
-static void __orinoco_ev_txexc(struct orinoco_private *priv, hermes_t *hw)
+static void __orinoco_ev_txexc(struct net_device *dev, hermes_t *hw)
 {
-	struct net_device *dev = priv->ndev;
+	struct orinoco_private *priv = dev->priv;
 	struct net_device_stats *stats = &priv->stats;
 	u16 fid = hermes_read_regn(hw, TXCOMPLFID);
 	struct hermes_tx_descriptor desc;
@@ -1574,8 +1871,9 @@
 	hermes_write_regn(hw, TXCOMPLFID, DUMMY_FID);
 }
 
-static void __orinoco_ev_tx(struct orinoco_private *priv, hermes_t *hw)
+static void __orinoco_ev_tx(struct net_device *dev, hermes_t *hw)
 {
+	struct orinoco_private *priv = dev->priv;
 	struct net_device_stats *stats = &priv->stats;
 
 	stats->tx_packets++;
@@ -1583,9 +1881,10 @@
 	hermes_write_regn(hw, TXCOMPLFID, DUMMY_FID);
 }
 
-static void __orinoco_ev_alloc(struct orinoco_private *priv, hermes_t *hw)
+static void __orinoco_ev_alloc(struct net_device *dev, hermes_t *hw)
 {
-	struct net_device *dev = priv->ndev;
+	struct orinoco_private *priv = dev->priv;
+
 	u16 fid = hermes_read_regn(hw, ALLOCFID);
 
 	if (fid != priv->txfid) {
@@ -1655,7 +1954,6 @@
 	priv->has_ibss_any = 0;
 	priv->has_wep = 0;
 	priv->has_big_wep = 0;
-	priv->broken_cor_reset = 0;
 
 	/* Determine capabilities from the firmware version */
 	switch (priv->firmware_type) {
@@ -1677,8 +1975,6 @@
 		priv->has_pm = (firmver >= 0x40020); /* Don't work in 7.52 ? */
 		priv->ibss_port = 1;
 
-		/* FIXME: Which firmware really do have a broken reset */
-		priv->broken_cor_reset = (firmver < 0x60000);
 		/* Tested with Agere firmware :
 		 *	1.16 ; 4.08 ; 4.52 ; 6.04 ; 6.16 ; 7.28 => Jean II
 		 * Tested CableTron firmware : 4.32 => Anton */
@@ -1767,19 +2063,17 @@
 	struct hermes_idstring nickbuf;
 	u16 reclen;
 	int len;
-	unsigned long flags;
 
-	if (orinoco_lock(priv, &flags) != 0) {
-		BUG();
-		return -EBUSY;
-	}
+	TRACE_ENTER(dev->name);
 
+	/* No need to lock, the hw_unavailable flag is already set in
+	 * alloc_orinocodev() */
 	priv->nicbuf_size = IEEE802_11_FRAME_LEN + ETH_HLEN;
 
 	/* Initialize the firmware */
 	err = hermes_init(hw);
 	if (err != 0) {
-		printk(KERN_ERR "%s: failed to reset hardware (err = %d)\n",
+		printk(KERN_ERR "%s: failed to initialize firmware (err = %d)\n",
 		       dev->name, err);
 		goto out;
 	}
@@ -1908,18 +2202,42 @@
 	priv->wep_on = 0;
 	priv->tx_key = 0;
 
+	err = hermes_allocate(hw, priv->nicbuf_size, &priv->txfid);
+	if (err == -EIO) {
+		/* Try workaround for old Symbol firmware bug */
+		printk(KERN_WARNING "%s: firmware ALLOC bug detected "
+		       "(old Symbol firmware?). Trying to work around... ",
+		       dev->name);
+		
+		priv->nicbuf_size = TX_NICBUF_SIZE_BUG;
+		err = hermes_allocate(hw, priv->nicbuf_size, &priv->txfid);
+		if (err)
+			printk("failed!\n");
+		else
+			printk("ok.\n");
+	}
+	if (err) {
+		printk("%s: Error %d allocating Tx buffer\n", dev->name, err);
+		goto out;
+	}
+
+	/* Make the hardware available, as long as it hasn't been
+	 * removed elsewhere (e.g. by PCMCIA hot unplug) */
+	spin_lock_irq(&priv->lock);
+	priv->hw_unavailable--;
+	spin_unlock_irq(&priv->lock);
+
 	printk(KERN_DEBUG "%s: ready\n", dev->name);
 
  out:
-	orinoco_unlock(priv, &flags);
-
+	TRACE_EXIT(dev->name);
 	return err;
 }
 
 struct net_device_stats *
 orinoco_get_stats(struct net_device *dev)
 {
-	struct orinoco_private *priv = (struct orinoco_private *)dev->priv;
+	struct orinoco_private *priv = dev->priv;
 	
 	return &priv->stats;
 }
@@ -1927,17 +2245,22 @@
 struct iw_statistics *
 orinoco_get_wireless_stats(struct net_device *dev)
 {
-	struct orinoco_private *priv = (struct orinoco_private *)dev->priv;
+	struct orinoco_private *priv = dev->priv;
 	hermes_t *hw = &priv->hw;
 	struct iw_statistics *wstats = &priv->wstats;
 	int err = 0;
+	unsigned long flags;
 
-	if (! netif_device_present(dev))
-		return NULL; /* FIXME: We may be able to do better than this */
+	if (! netif_device_present(dev)) {
+		printk(KERN_WARNING "%s: get_wireless_stats() called while device not present\n",
+		       dev->name);
+		return NULL; /* FIXME: Can we do better than this? */
+	}
 
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
-		return NULL; /* FIXME: We may be able to do better than this */
+		return NULL; /* FIXME: Erg, we've been signalled, how
+			      * do we propagate this back up? */
 
 	if (priv->iw_mode == IW_MODE_ADHOC) {
 		memset(&wstats->qual, 0, sizeof(wstats->qual));
@@ -1966,11 +2289,11 @@
 	/* We can't really wait for the tallies inquiry command to
 	 * complete, so we just use the previous results and trigger
 	 * a new tallies inquiry command for next time - Jean II */
-	/* FIXME: Hmm.. seems a bit ugly, I wonder if there's a way to
-	   do better - dgibson */
+	/* FIXME: We're in user context (I think?), so we should just
+           wait for the tallies to come through */
 	err = hermes_inquire(hw, HERMES_INQ_TALLIES);
                
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	if (err)
 		return NULL;
@@ -2032,29 +2355,44 @@
 	struct hermes_tx_descriptor desc;
 	unsigned long flags;
 
+	TRACE_ENTER(dev->name);
+
 	if (! netif_running(dev)) {
 		printk(KERN_ERR "%s: Tx on stopped device!\n",
 		       dev->name);
+		TRACE_EXIT(dev->name);
 		return 1;
-
 	}
 	
 	if (netif_queue_stopped(dev)) {
-		printk(KERN_ERR "%s: Tx while transmitter busy!\n", 
+		printk(KERN_DEBUG "%s: Tx while transmitter busy!\n", 
 		       dev->name);
+		TRACE_EXIT(dev->name);
 		return 1;
 	}
 	
 	if (orinoco_lock(priv, &flags) != 0) {
-		/* We should never be resetting here, because reset
-		 * should stop the queue */
-		BUG();
+		printk(KERN_ERR "%s: orinoco_xmit() called while hw_unavailable\n",
+		       dev->name);
+		TRACE_EXIT(dev->name);
+/*  		BUG(); */
 		return 1;
 	}
 
+	if (! priv->connected) {
+		/* Oops, the firmware hasn't established a connection,
+                   silently drop the packet (this seems to be the
+                   safest approach). */
+		stats->tx_errors++;
+		orinoco_unlock(priv, &flags);
+		dev_kfree_skb(skb);
+		TRACE_EXIT(dev->name);
+		return 0;
+	}
+
 	/* Length of the packet body */
 	/* FIXME: what if the skb is smaller than this? */
-	len = max_t(int,skb->len - ETH_HLEN, ETH_ZLEN);
+	len = max_t(int,skb->len - ETH_HLEN, ETH_ZLEN - ETH_HLEN);
 
 	eh = (struct ethhdr *)skb->data;
 
@@ -2068,6 +2406,12 @@
 		goto fail;
 	}
 
+	/* Clear the 802.11 header and data length fields - some
+	 * firmwares (e.g. Lucent/Agere 8.xx) appear to get confused
+	 * if this isn't done. */
+	hermes_clear_words(hw, HERMES_DATA0,
+			   HERMES_802_3_OFFSET - HERMES_802_11_OFFSET);
+
 	/* Encapsulate Ethernet-II frames */
 	if (ntohs(eh->h_proto) > 1500) { /* Ethernet-II frame */
 		struct header_struct hdr;
@@ -2125,8 +2469,11 @@
 
 	dev_kfree_skb(skb);
 
+	TRACE_EXIT(dev->name);
+
 	return 0;
  fail:
+	TRACE_EXIT(dev->name);
 
 	orinoco_unlock(priv, &flags);
 	return err;
@@ -2139,14 +2486,14 @@
 	struct net_device_stats *stats = &priv->stats;
 	struct hermes *hw = &priv->hw;
 
-	printk(KERN_WARNING "%s: Tx timeout! Scheduling reset. "
+	printk(KERN_WARNING "%s: Tx timeout! "
 	       "ALLOCFID=%04x, TXCOMPLFID=%04x, EVSTAT=%04x\n",
 	       dev->name, hermes_read_regn(hw, ALLOCFID),
 	       hermes_read_regn(hw, TXCOMPLFID), hermes_read_regn(hw, EVSTAT));
 
 	stats->tx_errors++;
 
-	schedule_task(&priv->reset_task);
+	schedule_work(&priv->reset_work);
 }
 
 static int
@@ -2166,6 +2513,7 @@
 	return 0;
 }
 
+/* FIXME: return int? */
 static void
 __orinoco_set_multicast_list(struct net_device *dev)
 {
@@ -2174,17 +2522,6 @@
 	int err = 0;
 	int promisc, mc_count;
 
-	/* We'll wait until it's ready. Anyway, the network doesn't call us
-	 * here until we are open - Jean II */
-	/* FIXME: do we need this test at all? */
-	if (! netif_device_present(dev)) {
-		printk(KERN_WARNING "%s: __orinoco_set_multicast_list() called while device "
-		       "not present.\n", dev->name);
-		return;
-	}
-
-	TRACE_ENTER(dev->name);
-
 	/* The Hermes doesn't seem to have an allmulti mode, so we go
 	 * into promiscuous mode and let the upper levels deal. */
 	if ( (dev->flags & IFF_PROMISC) || (dev->flags & IFF_ALLMULTI) ||
@@ -2242,8 +2579,6 @@
 		dev->flags |= IFF_PROMISC;
 	else
 		dev->flags &= ~IFF_PROMISC;
-
-	TRACE_EXIT(dev->name);
 }
 
 /********************************************************************/
@@ -2258,6 +2593,7 @@
 	struct iw_range range;
 	int numrates;
 	int i, k;
+	unsigned long flags;
 
 	TRACE_ENTER(dev->name);
 
@@ -2267,12 +2603,12 @@
 
 	rrq->length = sizeof(range);
 
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 
 	mode = priv->iw_mode;
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	memset(&range, 0, sizeof(range));
 
@@ -2327,7 +2663,7 @@
 	}
 
 	err = orinoco_hw_get_bitratelist(priv, &numrates,
-				       range.bitrate, IW_MAX_BITRATES);
+					 range.bitrate, IW_MAX_BITRATES);
 	if (err)
 		return err;
 	range.num_bitrates = numrates;
@@ -2345,7 +2681,7 @@
 	range.min_frag = 256;
 	range.max_frag = 2346;
 
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 	if (priv->has_wep) {
@@ -2362,7 +2698,7 @@
 		range.num_encoding_sizes = 0;
 		range.max_encoding_tokens = 0;
 	}
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 		
 	range.min_pmp = 0;
 	range.max_pmp = 65535000;
@@ -2404,6 +2740,7 @@
 	u16 xlen = 0;
 	int err = 0;
 	char keybuf[ORINOCO_MAX_KEY_SIZE];
+	unsigned long flags;
 	
 	if (erq->pointer) {
 		/* We actually have a key to set */
@@ -2414,7 +2751,7 @@
 			return -EFAULT;
 	}
 	
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 	
@@ -2483,7 +2820,7 @@
 
 	
  out:
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	return err;
 }
@@ -2495,8 +2832,9 @@
 	u16 xlen = 0;
 	char keybuf[ORINOCO_MAX_KEY_SIZE];
 	int err;
+	unsigned long flags;
 	
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 
@@ -2524,7 +2862,7 @@
 		memcpy(keybuf, priv->keys[index].data, ORINOCO_MAX_KEY_SIZE);
 	}
 	
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	if (erq->pointer) {
 		if (copy_to_user(erq->pointer, keybuf, xlen))
@@ -2539,6 +2877,7 @@
 	struct orinoco_private *priv = dev->priv;
 	char essidbuf[IW_ESSID_MAX_SIZE+1];
 	int err;
+	unsigned long flags;
 
 	/* Note : ESSID is ignored in Ad-Hoc demo mode, but we can set it
 	 * anyway... - Jean II */
@@ -2555,13 +2894,13 @@
 		essidbuf[erq->length] = '\0';
 	}
 
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 
 	memcpy(priv->desired_essid, essidbuf, sizeof(priv->desired_essid));
 
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	return 0;
 }
@@ -2572,6 +2911,7 @@
 	char essidbuf[IW_ESSID_MAX_SIZE+1];
 	int active;
 	int err = 0;
+	unsigned long flags;
 
 	TRACE_ENTER(dev->name);
 
@@ -2580,17 +2920,17 @@
 		if (err)
 			return err;
 	} else {
-		err = orinoco_lock_user(priv);
+		err = orinoco_lock(priv, &flags);
 		if (err)
 			return err;
 		memcpy(essidbuf, priv->desired_essid, sizeof(essidbuf));
-		orinoco_unlock_user(priv);
+		orinoco_unlock(priv, &flags);
 	}
 
 	erq->flags = 1;
 	erq->length = strlen(essidbuf) + 1;
 	if (erq->pointer)
-		if ( copy_to_user(erq->pointer, essidbuf, erq->length) )
+		if (copy_to_user(erq->pointer, essidbuf, erq->length))
 			return -EFAULT;
 
 	TRACE_EXIT(dev->name);
@@ -2603,6 +2943,7 @@
 	struct orinoco_private *priv = dev->priv;
 	char nickbuf[IW_ESSID_MAX_SIZE+1];
 	int err;
+	unsigned long flags;
 
 	if (nrq->length > IW_ESSID_MAX_SIZE)
 		return -E2BIG;
@@ -2614,13 +2955,13 @@
 
 	nickbuf[nrq->length] = '\0';
 	
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 
 	memcpy(priv->nick, nickbuf, sizeof(priv->nick));
 
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	return 0;
 }
@@ -2630,13 +2971,14 @@
 	struct orinoco_private *priv = dev->priv;
 	char nickbuf[IW_ESSID_MAX_SIZE+1];
 	int err;
+	unsigned long flags;
 
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 
 	memcpy(nickbuf, priv->nick, IW_ESSID_MAX_SIZE+1);
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	nrq->length = strlen(nickbuf)+1;
 
@@ -2651,6 +2993,7 @@
 	struct orinoco_private *priv = dev->priv;
 	int chan = -1;
 	int err;
+	unsigned long flags;
 
 	/* We can only use this in Ad-Hoc demo mode to set the operating
 	 * frequency, or in IBSS mode to set the frequency where the IBSS
@@ -2678,11 +3021,11 @@
 	     ! (priv->channel_mask & (1 << (chan-1)) ) )
 		return -EINVAL;
 
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 	priv->channel = chan;
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	return 0;
 }
@@ -2693,15 +3036,16 @@
 	hermes_t *hw = &priv->hw;
 	u16 val;
 	int err;
+	unsigned long flags;
 
 	if (!priv->has_sensitivity)
 		return -EOPNOTSUPP;
 
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 	err = hermes_read_wordrec(hw, USER_BAP, HERMES_RID_CNFSYSTEMSCALE, &val);
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	if (err)
 		return err;
@@ -2717,6 +3061,7 @@
 	struct orinoco_private *priv = dev->priv;
 	int val = srq->value;
 	int err;
+	unsigned long flags;
 
 	if (!priv->has_sensitivity)
 		return -EOPNOTSUPP;
@@ -2724,11 +3069,11 @@
 	if ((val < 1) || (val > 3))
 		return -EINVAL;
 	
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 	priv->ap_density = val;
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	return 0;
 }
@@ -2738,6 +3083,7 @@
 	struct orinoco_private *priv = dev->priv;
 	int val = rrq->value;
 	int err;
+	unsigned long flags;
 
 	if (rrq->disabled)
 		val = 2347;
@@ -2745,12 +3091,12 @@
 	if ( (val < 0) || (val > 2347) )
 		return -EINVAL;
 
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 
 	priv->rts_thresh = val;
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	return 0;
 }
@@ -2759,8 +3105,9 @@
 {
 	struct orinoco_private *priv = dev->priv;
 	int err = 0;
+	unsigned long flags;
 
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 
@@ -2784,7 +3131,7 @@
 		}
 	}
 
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	return err;
 }
@@ -2795,8 +3142,9 @@
 	hermes_t *hw = &priv->hw;
 	int err = 0;
 	u16 val;
+	unsigned long flags;
 
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 	
@@ -2821,7 +3169,7 @@
 		frq->fixed = 1;
 	}
 
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 	
 	return err;
 }
@@ -2833,6 +3181,7 @@
 	int ratemode = -1;
 	int bitrate; /* 100s of kilobits */
 	int i;
+	unsigned long flags;
 	
 	/* As the user space doesn't know our highest rate, it uses -1
 	 * to ask us to set the highest rate.  Test it using "iwconfig
@@ -2859,11 +3208,11 @@
 	if (ratemode == -1)
 		return -EINVAL;
 
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 	priv->bitratemode = ratemode;
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	return err;
 }
@@ -2876,14 +3225,15 @@
 	int ratemode;
 	int i;
 	u16 val;
+	unsigned long flags;
 
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 
 	ratemode = priv->bitratemode;
 
-	if ( (ratemode < 0) || (ratemode > BITRATE_TABLE_SIZE) )
+	if ( (ratemode < 0) || (ratemode >= BITRATE_TABLE_SIZE) )
 		BUG();
 
 	rrq->value = bitrate_table[ratemode].bitrate * 100000;
@@ -2909,7 +3259,7 @@
 				rrq->value = 5500000;
 			else
 				rrq->value = val * 1000000;
-                        break;
+			break;
 		case FIRMWARE_TYPE_INTERSIL: /* Intersil style rate */
 		case FIRMWARE_TYPE_SYMBOL: /* Symbol style rate */
 			for (i = 0; i < BITRATE_TABLE_SIZE; i++)
@@ -2929,7 +3279,7 @@
 	}
 
  out:
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	return err;
 }
@@ -2938,8 +3288,9 @@
 {
 	struct orinoco_private *priv = dev->priv;
 	int err = 0;
+	unsigned long flags;
 
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 
@@ -2981,7 +3332,7 @@
 	}
 
  out:
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	return err;
 }
@@ -2992,8 +3343,9 @@
 	hermes_t *hw = &priv->hw;
 	int err = 0;
 	u16 enable, period, timeout, mcast;
+	unsigned long flags;
 
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 	
@@ -3029,7 +3381,7 @@
 		prq->flags |= IW_POWER_UNICAST_R;
 
  out:
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	return err;
 }
@@ -3041,8 +3393,9 @@
 	hermes_t *hw = &priv->hw;
 	int err = 0;
 	u16 short_limit, long_limit, lifetime;
+	unsigned long flags;
 
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 	
@@ -3081,7 +3434,7 @@
 	}
 
  out:
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	return err;
 }
@@ -3092,8 +3445,9 @@
 	struct orinoco_private *priv = dev->priv;
 	int val = *( (int *) wrq->u.name );
 	int err;
+	unsigned long flags;
 
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 
@@ -3102,7 +3456,7 @@
 	/* Actually update the mode we are using */
 	set_port_type(priv);
 
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 	return 0;
 }
 
@@ -3111,13 +3465,14 @@
 	struct orinoco_private *priv = dev->priv;
 	int *val = (int *)wrq->u.name;
 	int err;
+	unsigned long flags;
 
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 
 	*val = priv->ibss_port;
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	return 0;
 }
@@ -3127,8 +3482,9 @@
 	struct orinoco_private *priv = dev->priv;
 	int val = *( (int *) wrq->u.name );
 	int err = 0;
+	unsigned long flags;
 
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 
@@ -3158,7 +3514,7 @@
 		/* Actually update the mode we are using */
 		set_port_type(priv);
 
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	return err;
 }
@@ -3168,13 +3524,14 @@
 	struct orinoco_private *priv = dev->priv;
 	int *val = (int *)wrq->u.name;
 	int err;
+	unsigned long flags;
 
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 
 	*val = priv->prefer_port3;
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	return 0;
 }
@@ -3188,6 +3545,7 @@
 	int number = srq->length;
 	int i;
 	int err = 0;
+	unsigned long flags;
 
 	/* Check the number of addresses */
 	if (number > IW_MAX_SPY)
@@ -3201,7 +3559,7 @@
 	}
 
 	/* Make sure nobody mess with the structure while we do */
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 
@@ -3222,7 +3580,7 @@
 	}
 
 	/* Now, let the others play */
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	return err;
 }
@@ -3235,8 +3593,9 @@
 	int number;
 	int i;
 	int err;
+	unsigned long flags;
 
-	err = orinoco_lock_user(priv);
+	err = orinoco_lock(priv, &flags);
 	if (err)
 		return err;
 
@@ -3258,7 +3617,7 @@
 			priv->spy_stat[i].updated = 0;
 	}
 
-	orinoco_unlock_user(priv);
+	orinoco_unlock(priv, &flags);
 
 	/* Push stuff to user space */
 	srq->length = number;
@@ -3272,6 +3631,159 @@
 	return 0;
 }
 
+static int orinoco_wlansniff(struct net_device *dev, struct iwreq *wrq)
+{
+	struct orinoco_private *priv = dev->priv;
+	hermes_t *hw = &priv->hw;
+	int err = 0;
+	u16 word;
+	int *parms = (int *) wrq->u.name;
+	int enable = parms[0] > 0;
+	unsigned long flags;
+
+	err = orinoco_lock(priv, &flags);
+	if (err)
+		return err;
+
+	switch (enable) {
+	case 0:
+		/* Confirm that we're in monitor mode */
+		if (dev->type == ARPHRD_ETHER)
+			err = -EFAULT;
+
+		/* Disable monitor mode */
+		word =	HERMES_CMD_MONITOR | (HERMES_MONITOR_DISABLE << 8);
+		err = hermes_docmd_wait(hw, word, 0, NULL);
+		if (err)
+			break;
+
+		/* Disable port 0 */
+		err = hermes_disable_port(hw, 0);
+		if (err)
+			break;
+
+		/* Clear the driver state */
+		dev->type = ARPHRD_ETHER;
+
+		/* Restore the wepflags */   /*Orinoco doesn't like this*/
+#if 0
+		err = hermes_write_wordrec(hw, USER_BAP,
+					   HERMES_RID_CNFWEPFLAGS_INTERSIL, 
+					   priv->presniff_wepflags);
+		if (err)
+			break;
+#endif /* 0 */
+
+		/* Set the port to its prior type and enable (if necessary) */
+		if (priv->presniff_port_type != 0) {
+			word = priv->presniff_port_type;
+			err = hermes_write_wordrec(hw, USER_BAP, 
+						   HERMES_RID_CNFPORTTYPE,
+						   word);
+			if (err)
+				break;
+			
+			/* Enable the port */
+			err = hermes_enable_port(hw, 0);
+			if (err)
+				break;
+		}
+
+		break;
+
+	case 1:
+		/* Re-initialize the card before changing channel as advised at
+		 * http://lists.samba.org/pipermail/wireless/2002-June/004491.html
+		 * by Ian Goldberg.  Implementation by Pat Swieskowski.
+		 */
+/*  		__orinoco_down(dev); */
+		hermes_set_irqmask(hw, 0);
+		hermes_init(hw);
+/*  		__orinoco_up(dev); */
+		hermes_set_irqmask(hw, ORINOCO_INTEN);
+		/* Disable the port (if enabled), only check Port 0 */
+		if (hw->port_enabled[0]) {
+			/* Save macport 0 state */
+			err = hermes_read_wordrec(hw, USER_BAP,
+						  HERMES_RID_CNFPORTTYPE,
+						  &(priv->presniff_port_type));
+			if (err)
+				break;
+		    
+			/* Save the wepflags state */
+			err = hermes_read_wordrec(hw, USER_BAP,
+						  HERMES_RID_CNFWEPFLAGS_INTERSIL,
+						  &(priv->presniff_wepflags));
+			if (err)
+				break;
+			err = hermes_disable_port(hw, 0);
+			if (err)
+				break;
+		} else {
+			priv->presniff_port_type = 0;
+		}
+
+		/* Set the channel we wish to sniff  */
+		if ((parms[1] > 0) && (parms[1] < 15)) {
+			word = parms[1];
+			err = hermes_write_wordrec(hw, USER_BAP, 
+						   HERMES_RID_CNFOWNCHANNEL,
+						   word);
+		} else {
+			err = -EFAULT;
+		}
+
+		if (err)
+			break;
+
+		/* Set the port type to pIbss */
+		word = HFA384x_PORTTYPE_IBSS;
+		err = hermes_write_wordrec(hw, USER_BAP, 
+					   HERMES_RID_CNFPORTTYPE, word);
+		if (err)
+			break;
+
+#if 0
+		if ( (msg->keepwepflags.status == P80211ENUM_msgitem_status_data_ok) && 
+		     (msg->keepwepflags.data != 1)) {
+			/* Set the wepflags for no decryption */
+			/* Orinoco doesn't like this */
+			word = HFA384x_WEPFLAGS_DISABLE_TXCRYPT | 
+				HFA384x_WEPFLAGS_DISABLE_RXCRYPT;
+			err = hermes_write_wordrec(hw, USER_BAP, 
+						   HERMES_RID_CNFWEPFLAGS_INTERSIL,
+						   word); /*won't work with the bits above */
+		}
+		if (err)
+			break;
+#endif /* 0 */
+		/* Enable the port */
+		err = hermes_enable_port(hw, 0);
+		if (err)
+			break;
+
+		/* Enable monitor mode */
+		word =	HERMES_CMD_MONITOR | (HERMES_MONITOR_ENABLE << 8);
+		err = hermes_docmd_wait(hw, word, 0, NULL);
+		if (err)
+			break;
+
+		/* Set the driver state */
+		/* Do we want the prism2 header? */
+		if (parms[0] == 1)
+			dev->type = ARPHRD_IEEE80211_PRISM;
+		else 
+			dev->type = ARPHRD_IEEE80211;
+		break;
+	default:
+		BUG();
+		break;
+	}
+
+	orinoco_unlock(priv, &flags);
+	return err;
+}
+
 static int
 orinoco_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
 {
@@ -3280,13 +3792,16 @@
 	int err = 0;
 	int tmp;
 	int changed = 0;
+	unsigned long flags;
+
+	TRACE_ENTER(dev->name);
 
 	/* In theory, we could allow most of the the SET stuff to be
-	 * done In practice, the laps of time at startup when the card
-	 * is not ready is very short, so why bother...  Note that
-	 * netif_device_present is different from up/down (ifconfig),
-	 * when the device is not yet up, it is usually already
-	 * ready...  Jean II */
+	 * done. In practice, the lapse of time at startup when the
+	 * card is not ready is very short, so why bother...  Note
+	 * that netif_device_present is different from up/down
+	 * (ifconfig), when the device is not yet up, it is usually
+	 * already ready...  Jean II */
 	if (! netif_device_present(dev))
 		return -ENODEV;
 
@@ -3305,7 +3820,7 @@
 		break;
 
 	case SIOCSIWMODE:
-		err = orinoco_lock_user(priv);
+		err = orinoco_lock(priv, &flags);
 		if (err)
 			return err;
 		switch (wrq->u.mode) {
@@ -3328,15 +3843,15 @@
 			break;
 		}
 		set_port_type(priv);
-		orinoco_unlock_user(priv);
+		orinoco_unlock(priv, &flags);
 		break;
 
 	case SIOCGIWMODE:
-		err = orinoco_lock_user(priv);
+		err = orinoco_lock(priv, &flags);
 		if (err)
 			return err;
 		wrq->u.mode = priv->iw_mode;
-		orinoco_unlock_user(priv);
+		orinoco_unlock(priv, &flags);
 		break;
 
 	case SIOCSIWENCODE:
@@ -3500,7 +4015,11 @@
 				  0, "set_ibssport" },
 				{ SIOCIWFIRSTPRIV + 0x7, 0,
 				  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1,
-				  "get_ibssport" }
+				  "get_ibssport" },
+				{ SIOCIWFIRSTPRIV + 0x8,
+				  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 2,
+				  0, "monitor" },
+				{ SIOCIWLASTPRIV, 0, 0, "dump_recs" },
 			};
 
 			err = verify_area(VERIFY_WRITE, wrq->u.data.pointer, sizeof(privtab));
@@ -3520,9 +4039,9 @@
 			break;
 		}
 		
-		printk(KERN_DEBUG "%s: Forcing reset!\n", dev->name);
+		printk(KERN_DEBUG "%s: Force scheduling reset!\n", dev->name);
 
-		priv->reset(priv);
+		schedule_work(&priv->reset_work);
 		break;
 
 	case SIOCIWFIRSTPRIV + 0x2: /* set_port3 */
@@ -3554,14 +4073,14 @@
 		if(priv->has_preamble) {
 			int val = *( (int *) wrq->u.name );
 
-			err = orinoco_lock_user(priv);
+			err = orinoco_lock(priv, &flags);
 			if (err)
 				return err;
 			if (val)
 				priv->preamble = 1;
 			else
 				priv->preamble = 0;
-			orinoco_unlock_user(priv);
+			orinoco_unlock(priv, &flags);
 			changed = 1;
 		} else
 			err = -EOPNOTSUPP;
@@ -3571,11 +4090,11 @@
 		if(priv->has_preamble) {
 			int *val = (int *)wrq->u.name;
 
-			err = orinoco_lock_user(priv);
+			err = orinoco_lock(priv, &flags);
 			if (err)
 				return err;
 			*val = priv->preamble;
-			orinoco_unlock_user(priv);
+			orinoco_unlock(priv, &flags);
 		} else
 			err = -EOPNOTSUPP;
 		break;
@@ -3594,91 +4113,35 @@
 		err = orinoco_ioctl_getibssport(dev, wrq);
 		break;
 
+	case SIOCIWFIRSTPRIV + 0x8: /* set sniff (monitor) mode */ 
+		DEBUG(1, "%s: SIOCIWFIRSTPRIV + 0x8 (monitor)\n",
+		      dev->name);
+		if (! capable(CAP_NET_ADMIN)) {
+			err = -EPERM;
+			break;
+		}
+		err = orinoco_wlansniff(dev, wrq);
+		break;
+
+	case SIOCIWLASTPRIV:
+		err = orinoco_debug_dump_recs(dev);
+		if (err)
+			printk(KERN_ERR "%s: Unable to dump records (%d)\n",
+			       dev->name, err);
+		break;
+
 
 	default:
 		err = -EOPNOTSUPP;
 	}
 	
 	if (! err && changed && netif_running(dev)) {
-		priv->reset(priv);
+		err = orinoco_reconfigure(dev);
 	}		
 
-	return err;
-}
-
-/********************************************************************/
-/* procfs stuff                                                     */
-/********************************************************************/
-
-static struct proc_dir_entry *dir_base = NULL;
-
-#define PROC_LTV_SIZE		128
-
-/*
- * This function updates the total amount of data printed so far. It then
- * determines if the amount of data printed into a buffer  has reached the
- * offset requested. If it hasn't, then the buffer is shifted over so that
- * the next bit of data can be printed over the old bit. If the total
- * amount printed so far exceeds the total amount requested, then this
- * function returns 1, otherwise 0.
- */
-static int 
-shift_buffer(char *buffer, int requested_offset, int requested_len,
-	     int *total, int *slop, char **buf)
-{
-	int printed;
-	
-	printed = *buf - buffer;
-	if (*total + printed <= requested_offset) {
-		*total += printed;
-		*buf = buffer;
-	}
-	else {
-		if (*total < requested_offset) {
-			*slop = requested_offset - *total;
-		}
-		*total = requested_offset + printed - *slop;
-	}
-	if (*total > requested_offset + requested_len) {
-		return 1;
-	}
-	else {
-		return 0;
-	}
-}
-
-/*
- * This function calculates the actual start of the requested data
- * in the buffer. It also calculates actual length of data returned,
- * which could be less that the amount of data requested.
- */
-#define PROC_BUFFER_SIZE 4096
-#define PROC_SAFE_SIZE 3072
+	TRACE_EXIT(dev->name);
 
-static int
-calc_start_len(char *buffer, char **start, int requested_offset,
-	       int requested_len, int total, char *buf)
-{
-	int return_len, buffer_len;
-	
-	buffer_len = buf - buffer;
-	if (buffer_len >= PROC_BUFFER_SIZE - 1) {
-		printk(KERN_ERR "calc_start_len: exceeded /proc buffer size\n");
-	}
-	
-	/*
-	 * There may be bytes before and after the
-	 * chunk that was actually requested.
-	 */
-	return_len = total - requested_offset;
-	if (return_len < 0) {
-		return_len = 0;
-	}
-	*start = buf - return_len;
-	if (return_len > requested_len) {
-		return_len = requested_len;
-	}
-	return return_len;
+	return err;
 }
 
 struct {
@@ -3690,140 +4153,135 @@
 #define DISPLAY_STRING	2
 #define DISPLAY_XSTRING	3
 } record_table[] = {
-#define PROC_REC(name,type) { HERMES_RID_##name, #name, DISPLAY_##type }
-	PROC_REC(CNFPORTTYPE,WORDS),
-	PROC_REC(CNFOWNMACADDR,BYTES),
-	PROC_REC(CNFDESIREDSSID,STRING),
-	PROC_REC(CNFOWNCHANNEL,WORDS),
-	PROC_REC(CNFOWNSSID,STRING),
-	PROC_REC(CNFOWNATIMWINDOW,WORDS),
-	PROC_REC(CNFSYSTEMSCALE,WORDS),
-	PROC_REC(CNFMAXDATALEN,WORDS),
-	PROC_REC(CNFPMENABLED,WORDS),
-	PROC_REC(CNFPMEPS,WORDS),
-	PROC_REC(CNFMULTICASTRECEIVE,WORDS),
-	PROC_REC(CNFMAXSLEEPDURATION,WORDS),
-	PROC_REC(CNFPMHOLDOVERDURATION,WORDS),
-	PROC_REC(CNFOWNNAME,STRING),
-	PROC_REC(CNFOWNDTIMPERIOD,WORDS),
-	PROC_REC(CNFMULTICASTPMBUFFERING,WORDS),
-	PROC_REC(CNFWEPENABLED_AGERE,WORDS),
-	PROC_REC(CNFMANDATORYBSSID_SYMBOL,WORDS),
-	PROC_REC(CNFWEPDEFAULTKEYID,WORDS),
-	PROC_REC(CNFDEFAULTKEY0,BYTES),
-	PROC_REC(CNFDEFAULTKEY1,BYTES),
-	PROC_REC(CNFMWOROBUST_AGERE,WORDS),
-	PROC_REC(CNFDEFAULTKEY2,BYTES),
-	PROC_REC(CNFDEFAULTKEY3,BYTES),
-	PROC_REC(CNFWEPFLAGS_INTERSIL,WORDS),
-	PROC_REC(CNFWEPKEYMAPPINGTABLE,WORDS),
-	PROC_REC(CNFAUTHENTICATION,WORDS),
-	PROC_REC(CNFMAXASSOCSTA,WORDS),
-	PROC_REC(CNFKEYLENGTH_SYMBOL,WORDS),
-	PROC_REC(CNFTXCONTROL,WORDS),
-	PROC_REC(CNFROAMINGMODE,WORDS),
-	PROC_REC(CNFHOSTAUTHENTICATION,WORDS),
-	PROC_REC(CNFRCVCRCERROR,WORDS),
-	PROC_REC(CNFMMLIFE,WORDS),
-	PROC_REC(CNFALTRETRYCOUNT,WORDS),
-	PROC_REC(CNFBEACONINT,WORDS),
-	PROC_REC(CNFAPPCFINFO,WORDS),
-	PROC_REC(CNFSTAPCFINFO,WORDS),
-	PROC_REC(CNFPRIORITYQUSAGE,WORDS),
-	PROC_REC(CNFTIMCTRL,WORDS),
-	PROC_REC(CNFTHIRTY2TALLY,WORDS),
-	PROC_REC(CNFENHSECURITY,WORDS),
-	PROC_REC(CNFGROUPADDRESSES,BYTES),
-	PROC_REC(CNFCREATEIBSS,WORDS),
-	PROC_REC(CNFFRAGMENTATIONTHRESHOLD,WORDS),
-	PROC_REC(CNFRTSTHRESHOLD,WORDS),
-	PROC_REC(CNFTXRATECONTROL,WORDS),
-	PROC_REC(CNFPROMISCUOUSMODE,WORDS),
-	PROC_REC(CNFBASICRATES_SYMBOL,WORDS),
-	PROC_REC(CNFPREAMBLE_SYMBOL,WORDS),
-	PROC_REC(CNFSHORTPREAMBLE,WORDS),
-	PROC_REC(CNFWEPKEYS_AGERE,BYTES),
-	PROC_REC(CNFEXCLUDELONGPREAMBLE,WORDS),
-	PROC_REC(CNFTXKEY_AGERE,WORDS),
-	PROC_REC(CNFAUTHENTICATIONRSPTO,WORDS),
-	PROC_REC(CNFBASICRATES,WORDS),
-	PROC_REC(CNFSUPPORTEDRATES,WORDS),
-	PROC_REC(CNFTICKTIME,WORDS),
-	PROC_REC(CNFSCANREQUEST,WORDS),
-	PROC_REC(CNFJOINREQUEST,WORDS),
-	PROC_REC(CNFAUTHENTICATESTATION,WORDS),
-	PROC_REC(CNFCHANNELINFOREQUEST,WORDS),
-	PROC_REC(MAXLOADTIME,WORDS),
-	PROC_REC(DOWNLOADBUFFER,WORDS),
-	PROC_REC(PRIID,WORDS),
-	PROC_REC(PRISUPRANGE,WORDS),
-	PROC_REC(CFIACTRANGES,WORDS),
-	PROC_REC(NICSERNUM,WORDS),
-	PROC_REC(NICID,WORDS),
-	PROC_REC(MFISUPRANGE,WORDS),
-	PROC_REC(CFISUPRANGE,WORDS),
-	PROC_REC(CHANNELLIST,WORDS),
-	PROC_REC(REGULATORYDOMAINS,WORDS),
-	PROC_REC(TEMPTYPE,WORDS),
-/*  	PROC_REC(CIS,BYTES), */
-	PROC_REC(STAID,WORDS),
-	PROC_REC(CURRENTSSID,STRING),
-	PROC_REC(CURRENTBSSID,BYTES),
-	PROC_REC(COMMSQUALITY,WORDS),
-	PROC_REC(CURRENTTXRATE,WORDS),
-	PROC_REC(CURRENTBEACONINTERVAL,WORDS),
-	PROC_REC(CURRENTSCALETHRESHOLDS,WORDS),
-	PROC_REC(PROTOCOLRSPTIME,WORDS),
-	PROC_REC(SHORTRETRYLIMIT,WORDS),
-	PROC_REC(LONGRETRYLIMIT,WORDS),
-	PROC_REC(MAXTRANSMITLIFETIME,WORDS),
-	PROC_REC(MAXRECEIVELIFETIME,WORDS),
-	PROC_REC(CFPOLLABLE,WORDS),
-	PROC_REC(AUTHENTICATIONALGORITHMS,WORDS),
-	PROC_REC(PRIVACYOPTIONIMPLEMENTED,WORDS),
-	PROC_REC(OWNMACADDR,BYTES),
-	PROC_REC(SCANRESULTSTABLE,WORDS),
-	PROC_REC(PHYTYPE,WORDS),
-	PROC_REC(CURRENTCHANNEL,WORDS),
-	PROC_REC(CURRENTPOWERSTATE,WORDS),
-	PROC_REC(CCAMODE,WORDS),
-	PROC_REC(SUPPORTEDDATARATES,WORDS),
-	PROC_REC(BUILDSEQ,BYTES),
-	PROC_REC(FWID,XSTRING)
-#undef PROC_REC
+#define DEBUG_REC(name,type) { HERMES_RID_##name, #name, DISPLAY_##type }
+	DEBUG_REC(CNFPORTTYPE,WORDS),
+	DEBUG_REC(CNFOWNMACADDR,BYTES),
+	DEBUG_REC(CNFDESIREDSSID,STRING),
+	DEBUG_REC(CNFOWNCHANNEL,WORDS),
+	DEBUG_REC(CNFOWNSSID,STRING),
+	DEBUG_REC(CNFOWNATIMWINDOW,WORDS),
+	DEBUG_REC(CNFSYSTEMSCALE,WORDS),
+	DEBUG_REC(CNFMAXDATALEN,WORDS),
+	DEBUG_REC(CNFPMENABLED,WORDS),
+	DEBUG_REC(CNFPMEPS,WORDS),
+	DEBUG_REC(CNFMULTICASTRECEIVE,WORDS),
+	DEBUG_REC(CNFMAXSLEEPDURATION,WORDS),
+	DEBUG_REC(CNFPMHOLDOVERDURATION,WORDS),
+	DEBUG_REC(CNFOWNNAME,STRING),
+	DEBUG_REC(CNFOWNDTIMPERIOD,WORDS),
+	DEBUG_REC(CNFMULTICASTPMBUFFERING,WORDS),
+	DEBUG_REC(CNFWEPENABLED_AGERE,WORDS),
+	DEBUG_REC(CNFMANDATORYBSSID_SYMBOL,WORDS),
+	DEBUG_REC(CNFWEPDEFAULTKEYID,WORDS),
+	DEBUG_REC(CNFDEFAULTKEY0,BYTES),
+	DEBUG_REC(CNFDEFAULTKEY1,BYTES),
+	DEBUG_REC(CNFMWOROBUST_AGERE,WORDS),
+	DEBUG_REC(CNFDEFAULTKEY2,BYTES),
+	DEBUG_REC(CNFDEFAULTKEY3,BYTES),
+	DEBUG_REC(CNFWEPFLAGS_INTERSIL,WORDS),
+	DEBUG_REC(CNFWEPKEYMAPPINGTABLE,WORDS),
+	DEBUG_REC(CNFAUTHENTICATION,WORDS),
+	DEBUG_REC(CNFMAXASSOCSTA,WORDS),
+	DEBUG_REC(CNFKEYLENGTH_SYMBOL,WORDS),
+	DEBUG_REC(CNFTXCONTROL,WORDS),
+	DEBUG_REC(CNFROAMINGMODE,WORDS),
+	DEBUG_REC(CNFHOSTAUTHENTICATION,WORDS),
+	DEBUG_REC(CNFRCVCRCERROR,WORDS),
+	DEBUG_REC(CNFMMLIFE,WORDS),
+	DEBUG_REC(CNFALTRETRYCOUNT,WORDS),
+	DEBUG_REC(CNFBEACONINT,WORDS),
+	DEBUG_REC(CNFAPPCFINFO,WORDS),
+	DEBUG_REC(CNFSTAPCFINFO,WORDS),
+	DEBUG_REC(CNFPRIORITYQUSAGE,WORDS),
+	DEBUG_REC(CNFTIMCTRL,WORDS),
+	DEBUG_REC(CNFTHIRTY2TALLY,WORDS),
+	DEBUG_REC(CNFENHSECURITY,WORDS),
+	DEBUG_REC(CNFGROUPADDRESSES,BYTES),
+	DEBUG_REC(CNFCREATEIBSS,WORDS),
+	DEBUG_REC(CNFFRAGMENTATIONTHRESHOLD,WORDS),
+	DEBUG_REC(CNFRTSTHRESHOLD,WORDS),
+	DEBUG_REC(CNFTXRATECONTROL,WORDS),
+	DEBUG_REC(CNFPROMISCUOUSMODE,WORDS),
+	DEBUG_REC(CNFBASICRATES_SYMBOL,WORDS),
+	DEBUG_REC(CNFPREAMBLE_SYMBOL,WORDS),
+	DEBUG_REC(CNFSHORTPREAMBLE,WORDS),
+	DEBUG_REC(CNFWEPKEYS_AGERE,BYTES),
+	DEBUG_REC(CNFEXCLUDELONGPREAMBLE,WORDS),
+	DEBUG_REC(CNFTXKEY_AGERE,WORDS),
+	DEBUG_REC(CNFAUTHENTICATIONRSPTO,WORDS),
+	DEBUG_REC(CNFBASICRATES,WORDS),
+	DEBUG_REC(CNFSUPPORTEDRATES,WORDS),
+	DEBUG_REC(CNFTICKTIME,WORDS),
+	DEBUG_REC(CNFSCANREQUEST,WORDS),
+	DEBUG_REC(CNFJOINREQUEST,WORDS),
+	DEBUG_REC(CNFAUTHENTICATESTATION,WORDS),
+	DEBUG_REC(CNFCHANNELINFOREQUEST,WORDS),
+	DEBUG_REC(MAXLOADTIME,WORDS),
+	DEBUG_REC(DOWNLOADBUFFER,WORDS),
+	DEBUG_REC(PRIID,WORDS),
+	DEBUG_REC(PRISUPRANGE,WORDS),
+	DEBUG_REC(CFIACTRANGES,WORDS),
+	DEBUG_REC(NICSERNUM,XSTRING),
+	DEBUG_REC(NICID,WORDS),
+	DEBUG_REC(MFISUPRANGE,WORDS),
+	DEBUG_REC(CFISUPRANGE,WORDS),
+	DEBUG_REC(CHANNELLIST,WORDS),
+	DEBUG_REC(REGULATORYDOMAINS,WORDS),
+	DEBUG_REC(TEMPTYPE,WORDS),
+/*  	DEBUG_REC(CIS,BYTES), */
+	DEBUG_REC(STAID,WORDS),
+	DEBUG_REC(CURRENTSSID,STRING),
+	DEBUG_REC(CURRENTBSSID,BYTES),
+	DEBUG_REC(COMMSQUALITY,WORDS),
+	DEBUG_REC(CURRENTTXRATE,WORDS),
+	DEBUG_REC(CURRENTBEACONINTERVAL,WORDS),
+	DEBUG_REC(CURRENTSCALETHRESHOLDS,WORDS),
+	DEBUG_REC(PROTOCOLRSPTIME,WORDS),
+	DEBUG_REC(SHORTRETRYLIMIT,WORDS),
+	DEBUG_REC(LONGRETRYLIMIT,WORDS),
+	DEBUG_REC(MAXTRANSMITLIFETIME,WORDS),
+	DEBUG_REC(MAXRECEIVELIFETIME,WORDS),
+	DEBUG_REC(CFPOLLABLE,WORDS),
+	DEBUG_REC(AUTHENTICATIONALGORITHMS,WORDS),
+	DEBUG_REC(PRIVACYOPTIONIMPLEMENTED,WORDS),
+	DEBUG_REC(OWNMACADDR,BYTES),
+	DEBUG_REC(SCANRESULTSTABLE,WORDS),
+	DEBUG_REC(PHYTYPE,WORDS),
+	DEBUG_REC(CURRENTCHANNEL,WORDS),
+	DEBUG_REC(CURRENTPOWERSTATE,WORDS),
+	DEBUG_REC(CCAMODE,WORDS),
+	DEBUG_REC(SUPPORTEDDATARATES,WORDS),
+	DEBUG_REC(BUILDSEQ,BYTES),
+	DEBUG_REC(FWID,XSTRING)
+#undef DEBUG_REC
 };
-#define NUM_RIDS ( sizeof(record_table) / sizeof(record_table[0]) )
 
-static int
-orinoco_proc_get_hermes_recs(char *page, char **start, off_t requested_offset,
-			   int requested_len, int *eof, void *data)
+#define DEBUG_LTV_SIZE		128
+
+static int orinoco_debug_dump_recs(struct net_device *dev)
 {
-	struct orinoco_private *priv = (struct orinoco_private *)data;
-	struct net_device *dev = priv->ndev;
+	struct orinoco_private *priv = dev->priv;
 	hermes_t *hw = &priv->hw;
-	char *buf = page;
-	int total = 0, slop = 0;
 	u8 *val8;
 	u16 *val16;
 	int i,j;
 	u16 length;
 	int err;
 
-	if (! netif_device_present(dev))
-		return -ENODEV;
-
-	val8 = kmalloc(PROC_LTV_SIZE + 2, GFP_KERNEL);
+	/* I'm not sure: we might have a lock here, so we'd better go
+           atomic, just in case. */
+	val8 = kmalloc(DEBUG_LTV_SIZE + 2, GFP_ATOMIC);
 	if (! val8)
 		return -ENOMEM;
 	val16 = (u16 *)val8;
 
-	for (i = 0; i < NUM_RIDS; i++) {
+	for (i = 0; i < ARRAY_SIZE(record_table); i++) {
 		u16 rid = record_table[i].rid;
 		int len;
 
-		memset(val8, 0, PROC_LTV_SIZE + 2);
+		memset(val8, 0, DEBUG_LTV_SIZE + 2);
 
-		err = hermes_read_ltv(hw, USER_BAP, rid, PROC_LTV_SIZE,
+		err = hermes_read_ltv(hw, USER_BAP, rid, DEBUG_LTV_SIZE,
 				      &length, val8);
 		if (err) {
 			DEBUG(0, "Error %d reading RID 0x%04x\n", err, rid);
@@ -3833,195 +4291,42 @@
 		if (length == 0)
 			continue;
 
-		buf += sprintf(buf, "%-15s (0x%04x): length=%d (%d bytes)\tvalue=", record_table[i].name,
-			       rid, length, (length-1)*2);
-		len = min(((int)length-1)*2, PROC_LTV_SIZE);
+		printk(KERN_DEBUG "%-15s (0x%04x): length=%d (%d bytes)\tvalue=",
+		       record_table[i].name,
+		       rid, length, (length-1)*2);
+		len = min(((int)length-1)*2, DEBUG_LTV_SIZE);
 
 		switch (record_table[i].displaytype) {
 		case DISPLAY_WORDS:
-			for (j = 0; j < len / 2; j++) {
-				buf += sprintf(buf, "%04X-", le16_to_cpu(val16[j]));
-			}
-			buf--;
+			for (j = 0; j < len / 2; j++)
+				printk("%04X-", le16_to_cpu(val16[j]));
 			break;
 
 		case DISPLAY_BYTES:
 		default:
-			for (j = 0; j < len; j++) {
-				buf += sprintf(buf, "%02X:", val8[j]);
-			}
-			buf--;
+			for (j = 0; j < len; j++)
+				printk("%02X:", val8[j]);
 			break;
 
 		case DISPLAY_STRING:
 			len = min(len, le16_to_cpu(val16[0])+2);
 			val8[len] = '\0';
-			buf += sprintf(buf, "\"%s\"", (char *)&val16[1]);
+			printk("\"%s\"", (char *)&val16[1]);
 			break;
 
 		case DISPLAY_XSTRING:
-			buf += sprintf(buf, "'%s'", (char *)val8);
+			printk("'%s'", (char *)val8);
 		}
 
-		buf += sprintf(buf, "\n");
-
-		if (shift_buffer(page, requested_offset, requested_len,
-				 &total, &slop, &buf))
-			break;
-
-		if ( (buf - page) > PROC_SAFE_SIZE )
-			break;
+		printk("\n");
 	}
 
 	kfree(val8);
 
-	return calc_start_len(page, start, requested_offset, requested_len,
-			      total, buf);
-}
-
-#ifdef HERMES_DEBUG_BUFFER
-static int
-orinoco_proc_get_hermes_buf(char *page, char **start, off_t requested_offset,
-			    int requested_len, int *eof, void *data)
-{
-	struct orinoco_private *priv = (struct orinoco_private *)data;
-	hermes_t *hw = &priv->hw;
-	char *buf = page;
-	int total = 0, slop = 0;
-	int i;
-
-	for (i = 0; i < min_t(int,hw->dbufp, HERMES_DEBUG_BUFSIZE); i++) {
-		memcpy(buf, &hw->dbuf[i], sizeof(hw->dbuf[i]));
-		buf += sizeof(hw->dbuf[i]);
-
-		if (shift_buffer(page, requested_offset, requested_len,
-				 &total, &slop, &buf))
-			break;
-
-		if ( (buf - page) > PROC_SAFE_SIZE )
-			break;
-	}
-
-	return calc_start_len(page, start, requested_offset, requested_len,
-			      total, buf);
-}
-
-static int
-orinoco_proc_get_hermes_prof(char *page, char **start, off_t requested_offset,
-			    int requested_len, int *eof, void *data)
-{
-	struct orinoco_private *priv = (struct orinoco_private *)data;
-	hermes_t *hw = &priv->hw;
-	char *buf = page;
-	int total = 0, slop = 0;
-	int i;
-
-	for (i = 0; i < (HERMES_BAP_BUSY_TIMEOUT+1); i++) {
-		memcpy(buf, &hw->profile[i], sizeof(hw->profile[i]));
-		buf += sizeof(hw->profile[i]);
-
-		if (shift_buffer(page, requested_offset, requested_len,
-				 &total, &slop, &buf))
-			break;
-
-		if ( (buf - page) > PROC_SAFE_SIZE )
-			break;
-	}
-
-	return calc_start_len(page, start, requested_offset, requested_len,
-			      total, buf);
-}
-#endif /* HERMES_DEBUG_BUFFER */
-
-/* initialise the /proc subsystem for the hermes driver, creating the
- * separate entries */
-static int
-orinoco_proc_init(void)
-{
-	int err = 0;
-
-	/* create the directory for it to sit in */
-	dir_base = create_proc_entry("hermes", S_IFDIR, &proc_root);
-	if (dir_base == NULL) {
-		printk(KERN_ERR "Unable to initialise /proc/hermes.\n");
-		orinoco_proc_cleanup();
-		err = -ENOMEM;
-	}
-
-	return err;
-}
-
-int
-orinoco_proc_dev_init(struct net_device *dev)
-{
-	struct orinoco_private *priv = dev->priv;
-	struct proc_dir_entry *e;
-
-	priv->dir_dev = NULL;
-
-	/* create the directory for it to sit in */
-	priv->dir_dev = create_proc_entry(dev->name, S_IFDIR | S_IRUGO | S_IXUGO,
-					  dir_base);
-	if (! priv->dir_dev) {
-		printk(KERN_ERR "Unable to initialize /proc/hermes/%s\n",  dev->name);
-		goto fail;
-	}
-
-	e = create_proc_read_entry("recs", S_IFREG | S_IRUGO,
-			       priv->dir_dev, orinoco_proc_get_hermes_recs, priv);
-	if (! e) {
-		printk(KERN_ERR "Unable to initialize /proc/hermes/%s/recs\n",  dev->name);
-		goto fail;
-	}
-
-#ifdef HERMES_DEBUG_BUFFER
-	e = create_proc_read_entry("buf", S_IFREG | S_IRUGO,
-					       priv->dir_dev, orinoco_proc_get_hermes_buf, priv);
-	if (! e) {
-		printk(KERN_ERR "Unable to intialize /proc/hermes/%s/buf\n", dev->name);
-		goto fail;
-	}
-
-	e = create_proc_read_entry("prof", S_IFREG | S_IRUGO,
-					       priv->dir_dev, orinoco_proc_get_hermes_prof, priv);
-	if (! e) {
-		printk(KERN_ERR "Unable to intialize /proc/hermes/%s/prof\n", dev->name);
-		goto fail;
-	}
-#endif /* HERMES_DEBUG_BUFFER */
-
 	return 0;
- fail:
-	orinoco_proc_dev_cleanup(dev);
-	return -ENOMEM;
-}
-
-void
-orinoco_proc_dev_cleanup(struct net_device *dev)
-{
-	struct orinoco_private *priv = dev->priv;
-
-	if (priv->dir_dev) {
-		remove_proc_entry("prof", priv->dir_dev);
-		remove_proc_entry("buf", priv->dir_dev);
-		remove_proc_entry("recs", priv->dir_dev);
-		remove_proc_entry(dev->name, dir_base);
-		priv->dir_dev = NULL;
-	}
-}
-
-static void
-orinoco_proc_cleanup(void)
-{
-	if (dir_base) {
-		remove_proc_entry("hermes", &proc_root);
-		dir_base = NULL;
-	}
 }
 
-struct net_device *alloc_orinocodev(int sizeof_card, int (*open)(struct net_device *),
-				    int (*stop)(struct net_device *),
-				    void (*reset)(struct orinoco_private *))
+struct net_device *alloc_orinocodev(int sizeof_card, int (*hard_reset)(struct orinoco_private *))
 {
 	struct net_device *dev;
 	struct orinoco_private *priv;
@@ -4044,50 +4349,237 @@
 	dev->do_ioctl = orinoco_ioctl;
 	dev->change_mtu = orinoco_change_mtu;
 	dev->set_multicast_list = orinoco_set_multicast_list;
+	/* we use the default eth_mac_addr for setting the MAC addr */
 
 	/* Set up default callbacks */
-	dev->open = orinoco_default_open;
-	dev->stop = orinoco_default_stop;
-	priv->reset = orinoco_default_reset;
-
-	/* But allow the caller to override */
-	if (open)
-		dev->open = open;
-	if (stop)
-		dev->stop = stop;
-	if (reset)
-		priv->reset = reset;
+	dev->open = orinoco_open;
+	dev->stop = orinoco_stop;
+	priv->hard_reset = hard_reset;
 
 	spin_lock_init(&priv->lock);
-	priv->resetting = 0;
-	init_waitqueue_head(&priv->reset_queue);
-	INIT_TQUEUE(&priv->reset_task, (void (*)(void *))priv->reset, priv);
+	priv->open = 0;
+	priv->hw_unavailable = 1; /* orinoco_init() must clear this
+				   * before anything else touches the
+				   * hardware */
+	INIT_WORK(&priv->reset_work, (void (*)(void *))orinoco_reset, dev);
+
+	priv->last_linkstatus = 0xffff;
+	priv->connected = 0;
 
 	return dev;
 
 }
 
+/*----------------------------------------------------------------
+* orinoco_int_rxmonitor
+*
+* Handles monitor frames.  Note that this function allocates space for
+* the FCS and sets it to 0xffffffff.  The hfa384x doesn't give us the
+* FCS value but the higher layers expect it.  0xffffffff is used as a
+* flag to indicate the FCS is bogus.
+*
+* Arguments:
+*	dev		wlan device structure
+*	rxfid		received FID
+*	rxdesc		rx descriptor read from card in int_rx
+*
+* Side effects:
+*	Allocates an skb and passes it up via the PF_PACKET interface.
+* Call context:
+*	interrupt
+----------------------------------------------------------------*/
+void orinoco_int_rxmonitor(struct net_device *dev, u16 rxfid,
+			   int len, struct hermes_rx_descriptor *rxdesc,
+			   struct ieee802_11_hdr *hdr)
+{
+	struct orinoco_private *priv = dev->priv;
+	hermes_t *hw = &priv->hw;
+	u32 hdrlen = 0;
+	u32 datalen = 0;
+	u32 skblen = 0;
+	p80211msg_lnxind_wlansniffrm_t *msg;
+	struct net_device_stats *stats = &priv->stats;
+	u8 *datap;
+	u16 fc;
+	struct sk_buff *skb;
+
+	/* Don't forget the status, time, and data_len fields are in
+	 * little-endian order */
+	/* Figure out how big the frame is */
+	fc = le16_to_cpu(hdr->frame_ctl);
+	switch (fc & IEEE802_11_FCTL_FTYPE) {
+	case IEEE802_11_FTYPE_DATA:
+		if ((fc & IEEE802_11_FCTL_TODS)
+		    && (fc & IEEE802_11_FCTL_FROMDS))
+			hdrlen = WLAN_HDR_A4_LEN;
+		else
+			hdrlen = WLAN_HDR_A3_LEN;
+		datalen = len;
+		break;
+	case IEEE802_11_FTYPE_MGMT:
+		hdrlen = WLAN_HDR_A3_LEN;
+		datalen = len;
+		break;
+	case IEEE802_11_FTYPE_CTL:
+		switch (fc & IEEE802_11_FCTL_STYPE) {
+		case IEEE802_11_STYPE_PSPOLL:
+		case IEEE802_11_STYPE_RTS:
+		case IEEE802_11_STYPE_CFEND:
+		case IEEE802_11_STYPE_CFENDACK:
+			hdrlen = 16;
+			break;
+		case IEEE802_11_STYPE_CTS:
+		case IEEE802_11_STYPE_ACK:
+			hdrlen = 10;
+			break;
+		}
+		datalen = 0;
+		break;
+	default:
+		printk("unknown frm: fc=0x%04x\n", fc);
+		return;
+	}
+
+	/* Allocate an ind message+framesize skb */
+	skblen = sizeof(p80211msg_lnxind_wlansniffrm_t) + 
+		hdrlen + datalen;
+	
+	/* sanity check the length */
+	if ( skblen > 
+		( (sizeof(p80211msg_lnxind_wlansniffrm_t) + 
+		   WLAN_HDR_A4_LEN + WLAN_DATA_MAXLEN + WLAN_CRC_LEN) ) ) {
+		printk("overlen frm: len=%d\n", 
+		       skblen - sizeof(p80211msg_lnxind_wlansniffrm_t));
+	}
+
+	if ( (skb = dev_alloc_skb(skblen)) == NULL ) {
+		printk("alloc_skb failed trying to allocate %d bytes\n", skblen);
+		return;
+	}
+
+	/* only prepend the prism header if in the right mode */
+	if (dev->type != ARPHRD_IEEE80211_PRISM) {
+		skb_put(skb, skblen - sizeof(p80211msg_lnxind_wlansniffrm_t));
+		datap = skb->data;
+	} else {
+		skb_put(skb, skblen);
+		datap = skb->data + sizeof(p80211msg_lnxind_wlansniffrm_t);
+		msg = (p80211msg_lnxind_wlansniffrm_t*)skb->data;
+
+		/* Initialize the message members */
+		msg->msgcode = DIDmsg_lnxind_wlansniffrm;
+		msg->msglen = sizeof(p80211msg_lnxind_wlansniffrm_t);
+		strcpy(msg->devname, dev->name);
+	  
+		msg->hosttime.did = DIDmsg_lnxind_wlansniffrm_hosttime;
+		msg->hosttime.status = 0;
+		msg->hosttime.len = 4;
+		msg->hosttime.data = jiffies;
+	  
+		msg->mactime.did = DIDmsg_lnxind_wlansniffrm_mactime;
+		msg->mactime.status = 0;
+		msg->mactime.len = 4;
+		msg->mactime.data = rxdesc->time;
+	  
+		msg->channel.did = DIDmsg_lnxind_wlansniffrm_channel;
+		msg->channel.status = P80211ENUM_msgitem_status_no_value;
+		msg->channel.len = 4;
+		msg->channel.data = 0;
+
+		msg->rssi.did = DIDmsg_lnxind_wlansniffrm_rssi;
+		msg->rssi.status = P80211ENUM_msgitem_status_no_value;
+		msg->rssi.len = 4;
+		msg->rssi.data = 0;
+	  
+		msg->sq.did = DIDmsg_lnxind_wlansniffrm_sq;
+		msg->sq.status = P80211ENUM_msgitem_status_no_value;
+		msg->sq.len = 4;
+		msg->sq.data = 0;
+	  
+		msg->signal.did = DIDmsg_lnxind_wlansniffrm_signal;
+		msg->signal.status = 0;
+		msg->signal.len = 4;
+		msg->signal.data = rxdesc->signal;
+	  
+		msg->noise.did = DIDmsg_lnxind_wlansniffrm_noise;
+		msg->noise.status = 0;
+		msg->noise.len = 4;
+		msg->noise.data = rxdesc->silence;
+
+		msg->rate.did = DIDmsg_lnxind_wlansniffrm_rate;
+		msg->rate.status = 0;
+		msg->rate.len = 4;
+		msg->rate.data = rxdesc->rate / 5; /* set to 802.11 units */
+  
+		msg->istx.did = DIDmsg_lnxind_wlansniffrm_istx;
+		msg->istx.status = 0;
+		msg->istx.len = 4;
+		msg->istx.data = 0;
+	  
+		msg->frmlen.did = DIDmsg_lnxind_wlansniffrm_frmlen;
+		msg->frmlen.status = 0;
+		msg->frmlen.len = 4;
+		msg->frmlen.data = hdrlen + datalen;
+	}
+
+	/* Copy the 802.11 header to the skb (ctl frames may be less
+	 * than a full header) */
+	memcpy(datap, &(hdr->frame_ctl), hdrlen);
+
+	/* If any, copy the data from the card to the skb */
+	if (datalen > 0) {
+		hermes_bap_pread(hw, IRQ_BAP, datap + hdrlen, (datalen+1)&~1,
+				 rxfid, HERMES_RX_DATA_OFF);
+
+		/* check for unencrypted stuff if WEP bit set. */
+		if (datap[1] & 0x40) /* wep set */
+			if ((datap[hdrlen] == 0xaa)
+			    && (datap[hdrlen+1] == 0xaa))
+				datap[1] &= 0xbf; /* clear wep; it's the 802.2 header! */
+	}
+
+	/* pass it up via the PF_PACKET interface */
+	skb->dev = dev;
+	skb->dev->last_rx = jiffies;
+
+	skb->mac.raw = skb->data ;
+	skb->ip_summed = CHECKSUM_NONE;
+	skb->pkt_type = PACKET_OTHERHOST;
+	skb->protocol = htons(ETH_P_80211_RAW);  /* XXX ETH_P_802_2? */
+	
+	stats->rx_packets++;
+	stats->rx_bytes += skb->len;
+
+	netif_rx(skb);
+
+	return;
+}
+
 /********************************************************************/
-/* module bookkeeping                                               */
+/* Module initialization                                            */
 /********************************************************************/
 
 EXPORT_SYMBOL(alloc_orinocodev);
-EXPORT_SYMBOL(orinoco_shutdown);
-EXPORT_SYMBOL(__orinoco_startup);
-EXPORT_SYMBOL(orinoco_proc_dev_init);
-EXPORT_SYMBOL(orinoco_proc_dev_cleanup);
+
+EXPORT_SYMBOL(__orinoco_up);
+EXPORT_SYMBOL(__orinoco_down);
+EXPORT_SYMBOL(orinoco_stop);
+EXPORT_SYMBOL(orinoco_reinit_firmware);
+
 EXPORT_SYMBOL(orinoco_interrupt);
-EXPORT_SYMBOL(orinoco_commence_reset);
+
+/* Can't be declared "const" or the whole __initdata section will
+ * become const */
+static char version[] __initdata = "orinoco.c 0.13e (David Gibson <hermes@gibson.dropbear.id.au> and others)";
 
 static int __init init_orinoco(void)
 {
 	printk(KERN_DEBUG "%s\n", version);
-	return orinoco_proc_init();
+	return 0;
 }
 
 static void __exit exit_orinoco(void)
 {
-	orinoco_proc_cleanup();
 }
 
 module_init(init_orinoco);
diff -Nur linux-orig/drivers/net/wireless/orinoco_cs.c linux/drivers/net/wireless/orinoco_cs.c
--- linux-orig/drivers/net/wireless/orinoco_cs.c	2004-02-16 09:32:01.000000000 +0300
+++ linux/drivers/net/wireless/orinoco_cs.c	2003-05-12 10:22:27.000000000 +0400
@@ -1,4 +1,4 @@
-/* orinoco_cs.c 0.12	- (formerly known as dldwd_cs.c)
+/* orinoco_cs.c 0.13e	- (formerly known as dldwd_cs.c)
  *
  * A driver for "Hermes" chipset based PCMCIA wireless adaptors, such
  * as the Lucent WavelanIEEE/Orinoco cards and their OEM (Cabletron/
@@ -22,12 +22,7 @@
 #include <linux/ptrace.h>
 #include <linux/slab.h>
 #include <linux/string.h>
-#include <linux/timer.h>
 #include <linux/ioport.h>
-#include <asm/uaccess.h>
-#include <asm/io.h>
-#include <asm/system.h>
-#include <linux/proc_fs.h>
 #include <linux/netdevice.h>
 #include <linux/if_arp.h>
 #include <linux/etherdevice.h>
@@ -39,14 +34,16 @@
 #include <pcmcia/cistpl.h>
 #include <pcmcia/cisreg.h>
 #include <pcmcia/ds.h>
-#include <pcmcia/bus_ops.h>
 
-#include "hermes.h"
-#include "orinoco.h"
+#include <asm/uaccess.h>
+#include <asm/io.h>
+#include <asm/system.h>
 
-/*====================================================================*/
+#include "orinoco.h"
 
-static char version[] __initdata = "orinoco_cs.c 0.12 (David Gibson <hermes@gibson.dropbear.id.au> and others)";
+/********************************************************************/
+/* Module stuff							    */
+/********************************************************************/
 
 MODULE_AUTHOR("David Gibson <hermes@gibson.dropbear.id.au>");
 MODULE_DESCRIPTION("Driver for PCMCIA Lucent Orinoco, Prism II based and similar wireless cards");
@@ -54,225 +51,134 @@
 MODULE_LICENSE("Dual MPL/GPL");
 #endif
 
-/* Parameters that can be set with 'insmod' */
+/* Module parameters */
 
 /* The old way: bit map of interrupts to choose from */
 /* This means pick from 15, 14, 12, 11, 10, 9, 7, 5, 4, and 3 */
 static uint irq_mask = 0xdeb8;
 /* Newer, simpler way of listing specific interrupts */
 static int irq_list[4] = { -1 };
-/* Do a Pcmcia soft reset (may help some cards) */
-static int reset_cor = -1;
+
 /* Some D-Link cards have buggy CIS. They do work at 5v properly, but
  * don't have any CIS entry for it. This workaround it... */
 static int ignore_cis_vcc; /* = 0 */
 
 MODULE_PARM(irq_mask, "i");
 MODULE_PARM(irq_list, "1-4i");
-MODULE_PARM(reset_cor, "i");
 MODULE_PARM(ignore_cis_vcc, "i");
 
-/* Pcmcia specific structure */
+/********************************************************************/
+/* Magic constants						    */
+/********************************************************************/
+
+/*
+ * The dev_info variable is the "key" that is used to match up this
+ * device driver with appropriate cards, through the card
+ * configuration database.
+ */
+static dev_info_t dev_info = "orinoco_cs";
+
+/********************************************************************/
+/* Data structures						    */
+/********************************************************************/
+
+/* PCMCIA specific device information (goes in the card field of
+ * struct orinoco_private */
 struct orinoco_pccard {
 	dev_link_t link;
 	dev_node_t node;
+
+	/* Used to handle hard reset */
+	/* yuck, we need this hack to work around the insanity of the
+         * PCMCIA layer */
+	unsigned long hard_reset_in_progress; 
 };
 
 /*
- * Function prototypes
+ * A linked list of "instances" of the device.  Each actual PCMCIA
+ * card corresponds to one device instance, and is described by one
+ * dev_link_t structure (defined in ds.h).
  */
+static dev_link_t *dev_list; /* = NULL */
+
+/********************************************************************/
+/* Function prototypes						    */
+/********************************************************************/
 
-/* struct net_device methods */
-static int orinoco_cs_open(struct net_device *dev);
-static int orinoco_cs_stop(struct net_device *dev);
+/* device methods */
+static int orinoco_cs_hard_reset(struct orinoco_private *priv);
 
 /* PCMCIA gumpf */
 static void orinoco_cs_config(dev_link_t * link);
 static void orinoco_cs_release(u_long arg);
 static int orinoco_cs_event(event_t event, int priority,
-		       event_callback_args_t * args);
+			    event_callback_args_t * args);
 
 static dev_link_t *orinoco_cs_attach(void);
 static void orinoco_cs_detach(dev_link_t *);
 
-/*
-   The dev_info variable is the "key" that is used to match up this
-   device driver with appropriate cards, through the card configuration
-   database.
-*/
-static dev_info_t dev_info = "orinoco_cs";
-
-/*
-   A linked list of "instances" of the dummy device.  Each actual
-   PCMCIA card corresponds to one device instance, and is described
-   by one dev_link_t structure (defined in ds.h).
-
-   You may not want to use a linked list for this -- for example, the
-   memory card driver uses an array of dev_link_t pointers, where minor
-   device numbers are used to derive the corresponding array index.
-*/
-
-static dev_link_t *dev_list; /* = NULL */
-
-/*====================================================================*/
-
-static void
-cs_error(client_handle_t handle, int func, int ret)
-{
-	error_info_t err = { func, ret };
-	CardServices(ReportError, handle, &err);
-}
+/********************************************************************/
+/* Device methods     						    */
+/********************************************************************/
 
 static int
-orinoco_cs_open(struct net_device *dev)
+orinoco_cs_hard_reset(struct orinoco_private *priv)
 {
-	struct orinoco_private *priv = (struct orinoco_private *)dev->priv;
-	struct orinoco_pccard* card = (struct orinoco_pccard *)priv->card;
+	struct orinoco_pccard *card = priv->card;
 	dev_link_t *link = &card->link;
 	int err;
-	
-	/* hard reset here */
-	link->open++;
-	netif_device_attach(dev);
-	
-	err = __orinoco_startup(priv);
-	if (err)
-		orinoco_cs_stop(dev);
-	else
-		netif_start_queue(dev);
 
-	return err;
-}
+	/* We need atomic ops here, because we're not holding the lock */
+	set_bit(0, &card->hard_reset_in_progress);
 
-static int
-orinoco_cs_stop(struct net_device *dev)
-{
-	struct orinoco_private *priv = (struct orinoco_private *)dev->priv;
-	struct orinoco_pccard* card = (struct orinoco_pccard *)priv->card;
-	dev_link_t *link = &card->link;
+	err = CardServices(ResetCard, link->handle, NULL);
+	if (err)
+		return err;
 
-	netif_stop_queue(dev);
+	clear_bit(0, &card->hard_reset_in_progress);
 
-	if (link->state & DEV_PRESENT)
-		orinoco_shutdown(priv);
-	
-	link->open--;
-
-	if (link->state & DEV_STALE_CONFIG)
-		mod_timer(&link->release, jiffies + HZ/20);
-	
 	return 0;
 }
 
-#if 0
-/*
- * Do a soft reset of the Pcmcia card using the Configuration Option Register
- * Can't do any harm, and actually may do some good on some cards...
- * In fact, this seem necessary for Spectrum cards...
- */
-static int
-orinoco_cs_cor_reset(struct orinoco_private *priv)
-{
-	struct orinoco_pccard *card = (struct orinoco_pccard *)priv->card;
-	dev_link_t *link = &card->link;
-	conf_reg_t reg;
-	u_int default_cor; 
-
-	TRACE_ENTER(priv->ndev->name);
-
-	/* Doing it if hardware is gone is guaranteed crash */
-	if(! (link->state & DEV_CONFIG) )
-		return -ENODEV;
-
-	/* Save original COR value */
-	reg.Function = 0;
-	reg.Action = CS_READ;
-	reg.Offset = CISREG_COR;
-	reg.Value = 0;
-	CardServices(AccessConfigurationRegister, link->handle, &reg);
-	default_cor = reg.Value;
-
-	/* Soft-Reset card */
-	reg.Action = CS_WRITE;
-	reg.Offset = CISREG_COR;
-	reg.Value = (default_cor | COR_SOFT_RESET);
-	CardServices(AccessConfigurationRegister, link->handle, &reg);
-
-	/* Wait until the card has acknowledged our reset */
-	/* FIXME: mdelay() is deprecated -dgibson */
-	mdelay(1);
-
-#if 0 /* This seems to help on Symbol cards, but we're not sure why,
-       and we don't know what it will do to other cards */
-	reg.Action = CS_READ;
-	reg.Offset = CISREG_CCSR;
-	CardServices(AccessConfigurationRegister, link->handle, &reg);
-
-	/* Write 7 (RUN) to CCSR, but preserve the original bit 4 */
-	reg.Action = CS_WRITE;
-	reg.Offset = CISREG_CCSR;
-	reg.Value = 7 | (reg.Value & 0x10);
-	CardServices(AccessConfigurationRegister, link->handle, &reg);
-	mdelay(1);
-#endif
-
-	/* Restore original COR configuration index */
-	reg.Action = CS_WRITE;
-	reg.Offset = CISREG_COR;
-	reg.Value = (default_cor & ~COR_SOFT_RESET);
-	CardServices(AccessConfigurationRegister, link->handle, &reg);
-
-	/* Wait until the card has finished restarting */
-	/* FIXME: mdelay() is deprecated -dgibson */
-	mdelay(1);
-
-	TRACE_EXIT(priv->ndev->name);
-
-	return 0;
-}
-#endif
+/********************************************************************/
+/* PCMCIA stuff     						    */
+/********************************************************************/
 
+/* In 2.5 (as of 2.5.69 at least) there is a cs_error exported which
+ * does this, but it's not in 2.4 so we do our own for now. */
 static void
-orinoco_cs_reset(struct orinoco_private *priv)
+orinoco_cs_error(client_handle_t handle, int func, int ret)
 {
-	struct net_device *dev = priv->ndev;
-	struct orinoco_pccard *card = (struct orinoco_pccard *)priv->card;
-	dev_link_t *link = &card->link;
-	int err;
-
-	err = CardServices(ResetCard, link->handle, NULL);
-	if (err) {
-		printk(KERN_WARNING "%s: ResetCard returned %d.  Not sure what to do.\n",
-		       dev->name, err);
-	}
-
-	/* Does Reset card wait for the reset to fully complete? */
-	return;
+	error_info_t err = { func, ret };
+	CardServices(ReportError, handle, &err);
 }
 
+
 /* Remove zombie instances (card removed, detach pending) */
 static void
 flush_stale_links(void)
 {
 	dev_link_t *link, *next;
 
+	TRACE_ENTER("");
+
 	for (link = dev_list; link; link = next) {
 		next = link->next;
-		if (link->state & DEV_STALE_LINK)
+		if (link->state & DEV_STALE_LINK) {
 			orinoco_cs_detach(link);
+		}
 	}
+	TRACE_EXIT("");
 }
 
-/*======================================================================
-  orinoco_cs_attach() creates an "instance" of the driver, allocating
-  local data structures for one device.  The device is registered
-  with Card Services.
-  
-  The dev_link structure is initialized, but we don't actually
-  configure the card at this point -- we wait until we receive a
-  card insertion event.
-  ======================================================================*/
-
+/*
+ * This creates an "instance" of the driver, allocating local data
+ * structures for one device.  The device is registered with Card
+ * Services.
+ * 
+ * The dev_link structure is initialized, but we don't actually
+ * configure the card at this point -- we wait until we receive a card
+ * insertion event.  */
 static dev_link_t *
 orinoco_cs_attach(void)
 {
@@ -286,8 +192,7 @@
 	/* A bit of cleanup */
 	flush_stale_links();
 
-	dev = alloc_orinocodev(sizeof(*card), orinoco_cs_open, orinoco_cs_stop,
-			       orinoco_cs_reset);
+	dev = alloc_orinocodev(sizeof(*card), orinoco_cs_hard_reset);
 	if (! dev)
 		return NULL;
 	priv = dev->priv;
@@ -295,9 +200,10 @@
 
 	/* Link both structures together */
 	link = &card->link;
-	link->priv = priv;
+	link->priv = dev;
 
 	/* Initialize the dev_link_t structure */
+	init_timer(&link->release);
 	link->release.function = &orinoco_cs_release;
 	link->release.data = (u_long) link;
 
@@ -320,8 +226,10 @@
 	link->conf.IntType = INT_MEMORY_AND_IO;
 
 	/* Register with Card Services */
+	/* FIXME: need a lock? */
 	link->next = dev_list;
 	dev_list = link;
+
 	client_reg.dev_info = &dev_info;
 	client_reg.Attributes = INFO_IO_CLIENT | INFO_CARD_SHARE;
 	client_reg.EventMask =
@@ -329,11 +237,12 @@
 		CS_EVENT_RESET_PHYSICAL | CS_EVENT_CARD_RESET |
 		CS_EVENT_PM_SUSPEND | CS_EVENT_PM_RESUME;
 	client_reg.event_handler = &orinoco_cs_event;
-	client_reg.Version = 0x0210;
+	client_reg.Version = 0x0210; /* FIXME: what does this mean? */
 	client_reg.event_callback_args.client_data = link;
+
 	ret = CardServices(RegisterClient, &link->handle, &client_reg);
 	if (ret != CS_SUCCESS) {
-		cs_error(link->handle, RegisterClient, ret);
+		orinoco_cs_error(link->handle, RegisterClient, ret);
 		orinoco_cs_detach(link);
 		return NULL;
 	}
@@ -351,25 +260,23 @@
 orinoco_cs_detach(dev_link_t * link)
 {
 	dev_link_t **linkp;
-	struct orinoco_private *priv = link->priv;
-	struct net_device *dev = priv->ndev;
+	struct net_device *dev = link->priv;
 
 	/* Locate device structure */
 	for (linkp = &dev_list; *linkp; linkp = &(*linkp)->next)
 		if (*linkp == link)
 			break;
-	if (*linkp == NULL)
+	if (*linkp == NULL) {
+		BUG();
 		return;
+	}
 
-	/*
-	   If the device is currently configured and active, we won't
-	   actually delete it yet.  Instead, it is marked so that when
-	   the release() function is called, that will trigger a proper
-	   detach().
-	 */
 	if (link->state & DEV_CONFIG) {
-		link->state |= DEV_STALE_LINK;
-		return;
+		orinoco_cs_release((u_long)link);
+		if (link->state & DEV_CONFIG) {
+			link->state |= DEV_STALE_LINK;
+			return;
+		}
 	}
 
 	/* Break the link with Card Services */
@@ -378,48 +285,47 @@
 
 	/* Unlink device structure, and free it */
 	*linkp = link->next;
+	DEBUG(0, "orinoco_cs: detach: link=%p link->dev=%p\n", link, link->dev);
 	if (link->dev) {
+		DEBUG(0, "orinoco_cs: About to unregister net device %p\n",
+		      dev);
 		unregister_netdev(dev);
 	}
-
 	kfree(dev);
-}	/* orinoco_cs_detach */
+}				/* orinoco_cs_detach */
 
-/*======================================================================
-  orinoco_cs_config() is scheduled to run after a CARD_INSERTION event
-  is received, to configure the PCMCIA socket, and to make the
-  device available to the system.
-  ======================================================================*/
+/*
+ * orinoco_cs_config() is scheduled to run after a CARD_INSERTION
+ * event is received, to configure the PCMCIA socket, and to make the
+ * device available to the system.
+ */
 
 #define CS_CHECK(fn, args...) \
-while ((last_ret=CardServices(last_fn=(fn),args))!=0) goto cs_failed
+	while ((last_ret=CardServices(last_fn=(fn),args))!=0) goto cs_failed
 
 #define CFG_CHECK(fn, args...) \
-if (CardServices(fn, args) != 0) goto next_entry
+	if (CardServices(fn, args) != 0) goto next_entry
 
 static void
-orinoco_cs_config(dev_link_t * link)
+orinoco_cs_config(dev_link_t *link)
 {
+	struct net_device *dev = link->priv;
 	client_handle_t handle = link->handle;
-	struct orinoco_private *priv = link->priv;
-	struct orinoco_pccard *card = (struct orinoco_pccard *)priv->card;
+	struct orinoco_private *priv = dev->priv;
+	struct orinoco_pccard *card = priv->card;
 	hermes_t *hw = &priv->hw;
-	struct net_device *ndev = priv->ndev;
-	tuple_t tuple;
-	cisparse_t parse;
 	int last_fn, last_ret;
 	u_char buf[64];
 	config_info_t conf;
-	cistpl_cftable_entry_t dflt = { 0 };
 	cisinfo_t info;
-
-	TRACE_ENTER("orinoco");
+	tuple_t tuple;
+	cisparse_t parse;
 
 	CS_CHECK(ValidateCIS, handle, &info);
 
 	/*
-	   This reads the card's CONFIG tuple to find its configuration
-	   registers.
+	 * This reads the card's CONFIG tuple to find its
+	 * configuration registers.
 	 */
 	tuple.DesiredTuple = CISTPL_CONFIG;
 	tuple.Attributes = 0;
@@ -440,21 +346,25 @@
 	link->conf.Vcc = conf.Vcc;
 
 	/*
-	   In this loop, we scan the CIS for configuration table entries,
-	   each of which describes a valid card configuration, including
-	   voltage, IO window, memory window, and interrupt settings.
-
-	   We make no assumptions about the card to be configured: we use
-	   just the information available in the CIS.  In an ideal world,
-	   this would work for any PCMCIA card, but it requires a complete
-	   and accurate CIS.  In practice, a driver usually "knows" most of
-	   these things without consulting the CIS, and most client drivers
-	   will only use the CIS to fill in implementation-defined details.
+	 * In this loop, we scan the CIS for configuration table
+	 * entries, each of which describes a valid card
+	 * configuration, including voltage, IO window, memory window,
+	 * and interrupt settings.
+	 *
+	 * We make no assumptions about the card to be configured: we
+	 * use just the information available in the CIS.  In an ideal
+	 * world, this would work for any PCMCIA card, but it requires
+	 * a complete and accurate CIS.  In practice, a driver usually
+	 * "knows" most of these things without consulting the CIS,
+	 * and most client drivers will only use the CIS to fill in
+	 * implementation-defined details.
 	 */
 	tuple.DesiredTuple = CISTPL_CFTABLE_ENTRY;
 	CS_CHECK(GetFirstTuple, handle, &tuple);
 	while (1) {
 		cistpl_cftable_entry_t *cfg = &(parse.cftable_entry);
+		cistpl_cftable_entry_t dflt = { .index = 0 };
+
 		CFG_CHECK(GetTupleData, handle, &tuple);
 		CFG_CHECK(ParseTuple, handle, &tuple, &parse);
 
@@ -471,7 +381,7 @@
 		}
 
 		/* Use power settings for Vcc and Vpp if present */
-		/*  Note that the CIS values need to be rescaled */
+		/* Note that the CIS values need to be rescaled */
 		if (cfg->vcc.present & (1 << CISTPL_POWER_VNOM)) {
 			if (conf.Vcc != cfg->vcc.param[CISTPL_POWER_VNOM] / 10000) {
 				DEBUG(2, "orinoco_cs_config: Vcc mismatch (conf.Vcc = %d, CIS = %d)\n",  conf.Vcc, cfg->vcc.param[CISTPL_POWER_VNOM] / 10000);
@@ -541,9 +451,9 @@
 	}
 
 	/*
-	   Allocate an interrupt line.  Note that this does not assign a
-	   handler to the interrupt, unless the 'Handler' member of the
-	   irq structure is initialized.
+	 * Allocate an interrupt line.  Note that this does not assign
+	 * a handler to the interrupt, unless the 'Handler' member of
+	 * the irq structure is initialized.
 	 */
 	if (link->conf.Attributes & CONF_ENABLE_IRQ) {
 		int i;
@@ -557,39 +467,49 @@
 				link->irq.IRQInfo2 |= 1 << irq_list[i];
 		
   		link->irq.Handler = orinoco_interrupt; 
-  		link->irq.Instance = priv; 
+  		link->irq.Instance = dev; 
 		
 		CS_CHECK(RequestIRQ, link->handle, &link->irq);
 	}
 
 	/* We initialize the hermes structure before completing PCMCIA
-	   configuration just in case the interrupt handler gets
-	   called. */
+	 * configuration just in case the interrupt handler gets
+	 * called. */
 	hermes_struct_init(hw, link->io.BasePort1,
 				HERMES_IO, HERMES_16BIT_REGSPACING);
 
 	/*
-	   This actually configures the PCMCIA socket -- setting up
-	   the I/O windows and the interrupt mapping, and putting the
-	   card and host interface into "Memory and IO" mode.
+	 * This actually configures the PCMCIA socket -- setting up
+	 * the I/O windows and the interrupt mapping, and putting the
+	 * card and host interface into "Memory and IO" mode.
 	 */
 	CS_CHECK(RequestConfiguration, link->handle, &link->conf);
 
-	ndev->base_addr = link->io.BasePort1;
-	ndev->irq = link->irq.AssignedIRQ;
+	/* Ok, we have the configuration, prepare to register the netdev */
+	dev->base_addr = link->io.BasePort1;
+	dev->irq = link->irq.AssignedIRQ;
+	SET_MODULE_OWNER(dev);
+	card->node.major = card->node.minor = 0;
 
 	/* register_netdev will give us an ethX name */
-	ndev->name[0] = '\0';
+	dev->name[0] = '\0';
 	/* Tell the stack we exist */
-	if (register_netdev(ndev) != 0) {
+	if (register_netdev(dev) != 0) {
 		printk(KERN_ERR "orinoco_cs: register_netdev() failed\n");
 		goto failed;
 	}
-	strcpy(card->node.dev_name, ndev->name);
+
+	/* At this point, the dev_node_t structure(s) needs to be
+	 * initialized and arranged in a linked list at link->dev. */
+	strcpy(card->node.dev_name, dev->name);
+	link->dev = &card->node; /* link->dev being non-NULL is also
+                                    used to indicate that the
+                                    net_device has been registered */
+	link->state &= ~DEV_CONFIG_PENDING;
 
 	/* Finally, report what we've done */
 	printk(KERN_DEBUG "%s: index 0x%02x: Vcc %d.%d",
-	       ndev->name, link->conf.ConfigIndex,
+	       dev->name, link->conf.ConfigIndex,
 	       link->conf.Vcc / 10, link->conf.Vcc % 10);
 	if (link->conf.Vpp1)
 		printk(", Vpp %d.%d", link->conf.Vpp1 / 10,
@@ -604,38 +524,13 @@
 		       link->io.BasePort2 + link->io.NumPorts2 - 1);
 	printk("\n");
 
-	/* And give us the proc nodes for debugging */
-	if (orinoco_proc_dev_init(priv->ndev) != 0) {
-		printk(KERN_ERR "orinoco_cs: Failed to create /proc node for %s\n",
-		       ndev->name);
-		goto failed;
-	}
-	
-	/* Note to myself : this replace MOD_INC_USE_COUNT/MOD_DEC_USE_COUNT */
-	SET_MODULE_OWNER(ndev);
-	
-	/* Let reset_cor parameter override determine_firmware()'s guess */
-	if (reset_cor != -1)
-		priv->broken_cor_reset = ! reset_cor;
-
-	/*
-	   At this point, the dev_node_t structure(s) need to be
-	   initialized and arranged in a linked list at link->dev.
-	 */
-	card->node.major = card->node.minor = 0;
-	link->dev = &card->node;
-	link->state &= ~DEV_CONFIG_PENDING;
-
-	TRACE_EXIT("orinoco");
-
 	return;
 
  cs_failed:
-	cs_error(link->handle, last_fn, last_ret);
+	orinoco_cs_error(link->handle, last_fn, last_ret);
+
  failed:
 	orinoco_cs_release((u_long) link);
-
-	TRACE_EXIT("orinoco");
 }				/* orinoco_cs_config */
 
 /*
@@ -647,20 +542,15 @@
 orinoco_cs_release(u_long arg)
 {
 	dev_link_t *link = (dev_link_t *) arg;
-	struct orinoco_private *priv = link->priv;
-
-	/*
-	   If the device is currently in use, we won't release until it
-	   is actually closed, because until then, we can't be sure that
-	   no one will try to access the device or its data structures.
-	 */
-	if (link->open) {
-		link->state |= DEV_STALE_CONFIG;
-		return;
-	}
-
-	/* Unregister proc entry */
-	orinoco_proc_dev_cleanup(priv->ndev);
+	struct net_device *dev = link->priv;
+	struct orinoco_private *priv = dev->priv;
+	unsigned long flags;
+
+	/* We're committed to taking the device away now, so mark the
+	 * hardware as unavailable */
+	spin_lock_irqsave(&priv->lock, flags);
+	priv->hw_unavailable++;
+	spin_unlock_irqrestore(&priv->lock, flags);
 
 	/* Don't bother checking to see if these succeed or not */
 	CardServices(ReleaseConfiguration, link->handle);
@@ -680,73 +570,107 @@
 		       event_callback_args_t * args)
 {
 	dev_link_t *link = args->client_data;
-	struct orinoco_private *priv = (struct orinoco_private *)link->priv;
-	struct net_device *dev = priv->ndev;
-	int err;
+	struct net_device *dev = link->priv;
+	struct orinoco_private *priv = dev->priv;
+	struct orinoco_pccard *card = priv->card;
+	int err = 0;
+	unsigned long flags;
 
 	switch (event) {
 	case CS_EVENT_CARD_REMOVAL:
 		link->state &= ~DEV_PRESENT;
 		if (link->state & DEV_CONFIG) {
-			netif_stop_queue(dev);
+			orinoco_lock(priv, &flags);
+
 			netif_device_detach(dev);
-			mod_timer(&link->release, jiffies + HZ / 20);
+			priv->hw_unavailable++;
+
+			orinoco_unlock(priv, &flags);
 		}
 		break;
+
 	case CS_EVENT_CARD_INSERTION:
 		link->state |= DEV_PRESENT | DEV_CONFIG_PENDING;
 		orinoco_cs_config(link);
 		break;
-	case CS_EVENT_PM_SUSPEND:
 
+	case CS_EVENT_PM_SUSPEND:
 		link->state |= DEV_SUSPEND;
 		/* Fall through... */
 	case CS_EVENT_RESET_PHYSICAL:
-		orinoco_shutdown(priv);
 		/* Mark the device as stopped, to block IO until later */
-
 		if (link->state & DEV_CONFIG) {
-			if (link->open) {
-				err = orinoco_commence_reset(priv);
-				if (err) {
-					printk("%s: signalled during reset?\n", dev->name);
-					return err;
-				}
+			/* This is probably racy, but I can't think of
+                           a better way, short of rewriting the PCMCIA
+                           layer to not suck :-( */
+			if (! test_bit(0, &card->hard_reset_in_progress)) {
+				spin_lock_irqsave(&priv->lock, flags);
+
+				err = __orinoco_down(dev);
+				if (err)
+					printk(KERN_WARNING "%s: %s: Error %d downing interface\n",
+					       dev->name,
+					       event == CS_EVENT_PM_SUSPEND ? "SUSPEND" : "RESET_PHYSICAL",
+					       err);
+				
 				netif_device_detach(dev);
+				priv->hw_unavailable++;
+
+				spin_unlock_irqrestore(&priv->lock, flags);
 			}
+
 			CardServices(ReleaseConfiguration, link->handle);
 		}
 		break;
+
 	case CS_EVENT_PM_RESUME:
 		link->state &= ~DEV_SUSPEND;
 		/* Fall through... */
 	case CS_EVENT_CARD_RESET:
 		if (link->state & DEV_CONFIG) {
+			/* FIXME: should we double check that this is
+			 * the same card as we had before */
 			CardServices(RequestConfiguration, link->handle,
 				     &link->conf);
-			if (link->open) {
-				netif_device_attach(dev);
-				err = __orinoco_startup(priv);
+
+			if (! test_bit(0, &card->hard_reset_in_progress)) {
+				err = orinoco_reinit_firmware(dev);
 				if (err) {
-					printk(KERN_ERR "%s: Error resetting device on PCMCIA event\n",
-					       dev->name);
-					orinoco_cs_stop(dev);
-					return err;
-				} else {
-					netif_start_queue(dev);
+					printk(KERN_ERR "%s: Error %d re-initializing firmware\n",
+					       dev->name, err);
+					break;
 				}
+				
+				spin_lock_irqsave(&priv->lock, flags);
+				
+				netif_device_attach(dev);
+				priv->hw_unavailable--;
+				
+				if (priv->open && ! priv->hw_unavailable) {
+					err = __orinoco_up(dev);
+					if (err)
+						printk(KERN_ERR "%s: Error %d restarting card\n",
+						       dev->name, err);
+					
+				}
+
+				spin_unlock_irqrestore(&priv->lock, flags);
 			}
 		}
-		/*
-		   In a normal driver, additional code may go here to restore
-		   the device state and restart IO. 
-		 */
 		break;
 	}
 
-	return 0;
+	return err;
 }				/* orinoco_cs_event */
 
+/********************************************************************/
+/* Module initialization					    */
+/********************************************************************/
+
+/* Can't be declared "const" or the whole __initdata section will
+ * become const */
+static char version[] __initdata = "orinoco_cs.c 0.13e (David Gibson <hermes@gibson.dropbear.id.au> and others)";
+
 static int __init
 init_orinoco_cs(void)
 {
@@ -771,8 +695,9 @@
 {
 	unregister_pccard_driver(&dev_info);
 
+	if (dev_list)
+		DEBUG(0, "orinoco_cs: Removing leftover devices.\n");
 	while (dev_list != NULL) {
-		del_timer(&dev_list->release);
 		if (dev_list->state & DEV_CONFIG)
 			orinoco_cs_release((u_long) dev_list);
 		orinoco_cs_detach(dev_list);
@@ -781,3 +706,4 @@
 
 module_init(init_orinoco_cs);
 module_exit(exit_orinoco_cs);
+
diff -Nur linux-orig/drivers/net/wireless/orinoco.h linux/drivers/net/wireless/orinoco.h
--- linux-orig/drivers/net/wireless/orinoco.h	2004-02-16 09:32:01.000000000 +0300
+++ linux/drivers/net/wireless/orinoco.h	2004-02-16 10:36:00.000000000 +0300
@@ -7,9 +7,46 @@
 #ifndef _ORINOCO_H
 #define _ORINOCO_H
 
+#include <linux/types.h>
+#include <linux/spinlock.h>
+#include <linux/netdevice.h>
+#include <linux/wireless.h>
+#include <linux/version.h>
+#include "hermes.h"
+
+/* Workqueue / task queue backwards compatibility stuff */
+
+#if LINUX_VERSION_CODE > KERNEL_VERSION(2,5,41)
+#include <linux/workqueue.h>
+#else
+#include <linux/tqueue.h>
+#define work_struct tq_struct
+#define INIT_WORK INIT_TQUEUE
+#define schedule_work schedule_task
+#endif
+
+/* Interrupt handler backwards compatibility stuff */
+#ifndef IRQ_NONE
+
+#define IRQ_NONE
+#define IRQ_HANDLED
+typedef void irqreturn_t;
+
+#endif
+
 /* To enable debug messages */
 //#define ORINOCO_DEBUG		3
 
+#define ETH_P_80211_RAW        (ETH_P_ECONET + 1)
+
+#ifndef ARPHRD_IEEE80211
+#define ARPHRD_IEEE80211 801     /* kernel 2.4.6 */
+#endif
+
+#ifndef ARPHRD_IEEE80211_PRISM  /* kernel 2.4.18 */
+#define ARPHRD_IEEE80211_PRISM 802
+#endif
+
 #if (! defined (WIRELESS_EXT)) || (WIRELESS_EXT < 10)
 #error "orinoco driver requires Wireless extensions v10 or later."
 #endif /* (! defined (WIRELESS_EXT)) || (WIRELESS_EXT < 10) */
@@ -23,15 +60,85 @@
 	char data[ORINOCO_MAX_KEY_SIZE];
 } __attribute__ ((packed));
 
+#define ORINOCO_INTEN	 	( HERMES_EV_RX | HERMES_EV_ALLOC | HERMES_EV_TX | \
+				HERMES_EV_TXEXC | HERMES_EV_WTERR | HERMES_EV_INFO | \
+				HERMES_EV_INFDROP )
+
+
+#define WLAN_DEVNAMELEN_MAX 16
+
+/* message data item for INT, BOUNDEDINT, ENUMINT */
+typedef struct p80211item_uint32 {
+	u32 did;
+	u16 status;
+	u16 len;
+	u32 data;
+} __attribute__ ((packed)) p80211item_uint32_t;
+
+#define DIDmsg_lnxind_wlansniffrm		0x0041
+#define DIDmsg_lnxind_wlansniffrm_hosttime	0x1041
+#define DIDmsg_lnxind_wlansniffrm_mactime	0x2041
+#define DIDmsg_lnxind_wlansniffrm_channel	0x3041
+#define DIDmsg_lnxind_wlansniffrm_rssi		0x4041
+#define DIDmsg_lnxind_wlansniffrm_sq		0x5041
+#define DIDmsg_lnxind_wlansniffrm_signal	0x6041
+#define DIDmsg_lnxind_wlansniffrm_noise		0x7041
+#define DIDmsg_lnxind_wlansniffrm_rate		0x8041
+#define DIDmsg_lnxind_wlansniffrm_istx		0x9041
+#define DIDmsg_lnxind_wlansniffrm_frmlen	0xA041
+
+typedef struct p80211msg_lnxind_wlansniffrm {
+	u32 msgcode;
+	u32 msglen;
+	u8 devname[WLAN_DEVNAMELEN_MAX];
+	p80211item_uint32_t hosttime;
+	p80211item_uint32_t mactime;
+	p80211item_uint32_t channel;
+	p80211item_uint32_t rssi;
+	p80211item_uint32_t sq;
+	p80211item_uint32_t signal;
+	p80211item_uint32_t noise;
+	p80211item_uint32_t rate;
+	p80211item_uint32_t istx;
+	p80211item_uint32_t frmlen;
+} __attribute__ ((packed)) p80211msg_lnxind_wlansniffrm_t;
+
+#define P80211ENUM_msgitem_status_data_ok		0
+#define P80211ENUM_msgitem_status_no_value		1
+#define P80211ENUM_msgitem_status_invalid_itemname	2
+#define P80211ENUM_msgitem_status_invalid_itemdata	3
+#define P80211ENUM_msgitem_status_missing_itemdata	4
+#define P80211ENUM_msgitem_status_incomplete_itemdata	5
+#define P80211ENUM_msgitem_status_invalid_msg_did	6
+#define P80211ENUM_msgitem_status_invalid_mib_did	7
+#define P80211ENUM_msgitem_status_missing_conv_func	8
+#define P80211ENUM_msgitem_status_string_too_long	9
+#define P80211ENUM_msgitem_status_data_out_of_range	10
+#define P80211ENUM_msgitem_status_string_too_short	11
+#define P80211ENUM_msgitem_status_missing_valid_func	12
+#define P80211ENUM_msgitem_status_unknown		13
+#define P80211ENUM_msgitem_status_invalid_did		14
+#define P80211ENUM_msgitem_status_missing_print_func	15
+
+/*--- Sizes -----------------------------------------------*/
+#define WLAN_CRC_LEN			4
+#define WLAN_HDR_A3_LEN			24
+#define WLAN_HDR_A4_LEN			30
+#define WLAN_DATA_MAXLEN		2312
+
 struct orinoco_private {
-	void *card;	/* Pointer to card dependant structure */
-	void (*reset)(struct orinoco_private *);
+	void *card;	/* Pointer to card dependent structure */
+	int (*hard_reset)(struct orinoco_private *);
 
 	/* Synchronisation stuff */
 	spinlock_t lock;
-	int resetting;
-	wait_queue_head_t reset_queue;
-	struct tq_struct reset_task;
+	int hw_unavailable;
+	struct work_struct reset_work;
+
+	/* driver state */
+	int open;
+	u16 last_linkstatus;
+	int connected;
 
 	/* Net device stuff */
 	struct net_device *ndev;
@@ -42,6 +149,7 @@
 	hermes_t hw;
 	u16 txfid;
 
+
 	/* Capabilities of the hardware/firmware */
 	int firmware_type;
 #define FIRMWARE_TYPE_AGERE 1
@@ -54,8 +162,8 @@
 	int has_preamble;
 	int has_sensitivity;
 	int nicbuf_size;
-	int broken_cor_reset;
 	u16 channel_mask;
+	int broken_disableport;
 
 	/* Configuration paramaters */
 	u32 iw_mode;
@@ -77,11 +185,11 @@
 #endif
 
 	/* Configuration dependent variables */
-	int port_type, allow_ibss;
+	int port_type, createibss;
 	int promiscuous, mc_count;
 
-	/* /proc based debugging stuff */
-	struct proc_dir_entry *dir_dev;
+	u16 presniff_port_type;
+	u16 presniff_wepflags;
 };
 
 #ifdef ORINOCO_DEBUG
@@ -94,14 +202,39 @@
 #define TRACE_ENTER(devname) DEBUG(2, "%s: -> " __FUNCTION__ "()\n", devname);
 #define TRACE_EXIT(devname)  DEBUG(2, "%s: <- " __FUNCTION__ "()\n", devname);
 
-struct net_device *alloc_orinocodev(int sizeof_card, int (*open)(struct net_device *),
-				    int (*stop)(struct net_device *),
-				    void (*reset)(struct orinoco_private *));
-int orinoco_commence_reset(struct orinoco_private *priv);
-int __orinoco_startup(struct orinoco_private *priv);
-extern void orinoco_shutdown(struct orinoco_private *dev);
-extern int orinoco_proc_dev_init(struct net_device *dev);
-extern void orinoco_proc_dev_cleanup(struct net_device *dev);
-extern void orinoco_interrupt(int irq, void * dev_id, struct pt_regs *regs);
+extern struct net_device *alloc_orinocodev(int sizeof_card,
+					   int (*hard_reset)(struct orinoco_private *));
+extern int __orinoco_up(struct net_device *dev);
+extern int __orinoco_down(struct net_device *dev);
+extern int orinoco_stop(struct net_device *dev);
+extern int orinoco_reinit_firmware(struct net_device *dev);
+extern irqreturn_t orinoco_interrupt(int irq, void * dev_id, struct pt_regs *regs);
+
+/********************************************************************/
+/* Locking and synchronization functions                            */
+/********************************************************************/
+
+/* These functions *must* be inline or they will break horribly on
+ * SPARC, due to its weird semantics for save/restore flags. extern
+ * inline should prevent the kernel from linking or module from
+ * loading if they are not inlined. */
+extern inline int orinoco_lock(struct orinoco_private *priv,
+			       unsigned long *flags)
+{
+	spin_lock_irqsave(&priv->lock, *flags);
+	if (priv->hw_unavailable) {
+		printk(KERN_DEBUG "orinoco_lock() called with hw_unavailable (dev=%p)\n",
+		       priv->ndev);
+		spin_unlock_irqrestore(&priv->lock, *flags);
+		return -EBUSY;
+	}
+	return 0;
+}
+
+extern inline void orinoco_unlock(struct orinoco_private *priv,
+				  unsigned long *flags)
+{
+	spin_unlock_irqrestore(&priv->lock, *flags);
+}
 
 #endif /* _ORINOCO_H */
diff -Nur linux-orig/drivers/net/wireless/orinoco_plx.c linux/drivers/net/wireless/orinoco_plx.c
--- linux-orig/drivers/net/wireless/orinoco_plx.c	2004-02-16 09:32:01.000000000 +0300
+++ linux/drivers/net/wireless/orinoco_plx.c	2003-05-12 10:22:27.000000000 +0400
@@ -1,4 +1,4 @@
-/* orinoco_plx.c 0.09b
+/* orinoco_plx.c 0.13e
  * 
  * Driver for Prism II devices which would usually be driven by orinoco_cs,
  * but are connected to the PCI bus by a PLX9052. 
@@ -119,7 +119,6 @@
 #include <asm/uaccess.h>
 #include <asm/io.h>
 #include <asm/system.h>
-#include <linux/proc_fs.h>
 #include <linux/netdevice.h>
 #include <linux/if_arp.h>
 #include <linux/etherdevice.h>
@@ -129,25 +128,12 @@
 #include <linux/wireless.h>
 #include <linux/fcntl.h>
 
-#include <pcmcia/version.h>
-#include <pcmcia/cs_types.h>
-#include <pcmcia/cs.h>
-#include <pcmcia/cistpl.h>
 #include <pcmcia/cisreg.h>
-#include <pcmcia/ds.h>
-#include <pcmcia/bus_ops.h>
 
 #include "hermes.h"
 #include "orinoco.h"
 
-static char version[] __initdata = "orinoco_plx.c 0.09b (Daniel Barlow <dan@telent.net>)";
-MODULE_AUTHOR("Daniel Barlow <dan@telent.net>");
-MODULE_DESCRIPTION("Driver for wireless LAN cards using the PLX9052 PCI bridge");
-#ifdef MODULE_LICENSE
-MODULE_LICENSE("Dual MPL/GPL");
-#endif
-
-static dev_info_t dev_info = "orinoco_plx";
+static char dev_info[] = "orinoco_plx";
 
 #define COR_OFFSET    (0x3e0 / 2)	/* COR attribute offset of Prism2 PC card */
 #define COR_VALUE     (COR_LEVEL_REQ | COR_FUNC_ENA) /* Enable PC card with interrupt in level trigger */
@@ -155,37 +141,6 @@
 #define PLX_INTCSR       0x4c /* Interrupt Control and Status Register */
 #define PLX_INTCSR_INTEN (1<<6) /* Interrupt Enable bit */
 
-static int orinoco_plx_open(struct net_device *dev)
-{
-	struct orinoco_private *priv = (struct orinoco_private *) dev->priv;
-	int err;
-
-	netif_device_attach(dev);
-
-	err = orinoco_reset(priv);
-	if (err)
-		printk(KERN_ERR "%s: orinoco_reset failed in orinoco_plx_open()",
-		       dev->name);
-	else
-		netif_start_queue(dev);
-
-	return err;
-}
-
-static int orinoco_plx_stop(struct net_device *dev)
-{
-	struct orinoco_private *priv = (struct orinoco_private *) dev->priv;
-	netif_stop_queue(dev);
-	orinoco_shutdown(priv);
-	return 0;
-}
-
-static void
-orinoco_plx_interrupt(int irq, void *dev_id, struct pt_regs *regs)
-{
-	orinoco_interrupt(irq, (struct orinoco_private *)dev_id, regs);
-}
-
 static const u16 cis_magic[] = {
 	0x0001, 0x0003, 0x0000, 0x0000, 0x00ff, 0x0017, 0x0004, 0x0067
 };
@@ -200,11 +155,8 @@
 	unsigned long pccard_ioaddr = 0;
 	unsigned long pccard_iolen = 0;
 	struct net_device *dev = NULL;
-	int netdev_registered = 0;
 	int i;
 
-	TRACE_ENTER("orinoco_plx");
-
 	err = pci_enable_device(pdev);
 	if (err)
 		return -EIO;
@@ -247,7 +199,7 @@
 	addr = pci_resource_start(pdev, 1);
 	reg = 0;
 	reg = inl(addr+PLX_INTCSR);
-	if(reg & PLX_INTCSR_INTEN)
+	if (reg & PLX_INTCSR_INTEN)
 		printk(KERN_DEBUG "orinoco_plx: "
 		       "Local Interrupt already enabled\n");
 	else {
@@ -272,32 +224,25 @@
 		goto fail;
 	}
 
-	priv = kmalloc(sizeof(*priv), GFP_KERNEL);
-	if (! priv) {
+	dev = alloc_orinocodev(0, NULL);
+	if (! dev) {
 		err = -ENOMEM;
 		goto fail;
 	}
-	memset(priv, 0, sizeof(*priv));
 
-	dev = &priv->ndev;
-
-	err = orinoco_setup(priv);
-	if (err)
-		goto fail;
+	priv = dev->priv;
 	dev->base_addr = pccard_ioaddr;
-	dev->open = orinoco_plx_open;
-	dev->stop = orinoco_plx_stop;
-	priv->card_reset_handler = NULL; /* We have no reset handler */
 	SET_MODULE_OWNER(dev);
 
 	printk(KERN_DEBUG
 	       "Detected Orinoco/Prism2 PLX device at %s irq:%d, io addr:0x%lx\n",
 	       pdev->slot_name, pdev->irq, pccard_ioaddr);
 
-	hermes_struct_init(&(priv->hw), dev->base_addr);
-	pci_set_drvdata(pdev, priv);
+	hermes_struct_init(&(priv->hw), dev->base_addr,
+			HERMES_IO, HERMES_16BIT_REGSPACING);
+	pci_set_drvdata(pdev, dev);
 
-	err = request_irq(pdev->irq, orinoco_plx_interrupt, SA_SHIRQ, dev->name, priv);
+	err = request_irq(pdev->irq, orinoco_interrupt, SA_SHIRQ, dev->name, dev);
 	if (err) {
 		printk(KERN_ERR "orinoco_plx: Error allocating IRQ %d.\n", pdev->irq);
 		err = -EBUSY;
@@ -308,29 +253,17 @@
 	err = register_netdev(dev);
 	if (err)
 		goto fail;
-	netdev_registered = 1;
-
-	err = orinoco_proc_dev_init(priv);
-	if (err)
-		goto fail;
-
-	TRACE_EXIT("orinoco_plx");
 
 	return 0;		/* succeeded */
 
  fail:	
 	printk(KERN_DEBUG "orinoco_plx: init_one(), FAIL!\n");
 
-	if (priv) {
-		orinoco_proc_dev_cleanup(priv);
-
-		if (netdev_registered)
-			unregister_netdev(dev);
-		
+	if (dev) {
 		if (dev->irq)
-			free_irq(dev->irq, priv);
+			free_irq(dev->irq, dev);
 		
-		kfree(priv);
+		kfree(dev);
 	}
 
 	if (pccard_ioaddr)
@@ -341,43 +274,35 @@
 
 	pci_disable_device(pdev);
 
-	TRACE_EXIT("orinoco_plx");
-	
 	return err;
 }
 
 static void __devexit orinoco_plx_remove_one(struct pci_dev *pdev)
 {
-	struct orinoco_private *priv = pci_get_drvdata(pdev);
-	struct net_device *dev = &priv->ndev;
-
-	TRACE_ENTER("orinoco_plx");
+	struct net_device *dev = pci_get_drvdata(pdev);
 
-	if (!priv)
+	if (! dev)
 		BUG();
 
-	orinoco_proc_dev_cleanup(priv);
-
 	unregister_netdev(dev);
 		
 	if (dev->irq)
-		free_irq(dev->irq, priv);
+		free_irq(dev->irq, dev);
 		
-	kfree(priv);
+	pci_set_drvdata(pdev, NULL);
+
+	kfree(dev);
 
 	release_region(pci_resource_start(pdev, 3), pci_resource_len(pdev, 3));
 
 	pci_disable_device(pdev);
-
-	TRACE_EXIT("orinoco_plx");
 }
 
 
 static struct pci_device_id orinoco_plx_pci_id_table[] __devinitdata = {
+	{0x111a, 0x1023, PCI_ANY_ID, PCI_ANY_ID,},	/* Siemens SpeedStream SS1023 */
 	{0x1385, 0x4100, PCI_ANY_ID, PCI_ANY_ID,},	/* Netgear MA301 */
-#if 0
-	{0x15e8, 0x0130, PCI_ANY_ID, PCI_ANY_ID,},	/* Correga */
-#endif
+	{0x15e8, 0x0130, PCI_ANY_ID, PCI_ANY_ID,},	/* Correga  - does this work? */
 	{0x1638, 0x1100, PCI_ANY_ID, PCI_ANY_ID,},	/* SMC EZConnect SMC2602W,
 							   Eumitcom PCI WL11000,
 							   Addtron AWA-100*/
@@ -385,20 +310,31 @@
 	{0x16ab, 0x1101, PCI_ANY_ID, PCI_ANY_ID,},	/* Reported working, but unknown */
 	{0x16ab, 0x1102, PCI_ANY_ID, PCI_ANY_ID,},	/* Linksys WDT11 */
 	{0x16ec, 0x3685, PCI_ANY_ID, PCI_ANY_ID,},	/* USR 2415 */
+	{0xec80, 0xec00, PCI_ANY_ID, PCI_ANY_ID,},	/* Belkin F5D6000 tested by
+							   Brendan W. McAdams <rit@jacked-in.org> */
+	{0x10b7, 0x7770, PCI_ANY_ID, PCI_ANY_ID,},	/* 3Com AirConnect PCI tested by
+							   Damien Persohn <damien@persohn.net> */
 	{0,},
 };
 
 MODULE_DEVICE_TABLE(pci, orinoco_plx_pci_id_table);
 
 static struct pci_driver orinoco_plx_driver = {
-	name:"orinoco_plx",
-	id_table:orinoco_plx_pci_id_table,
-	probe:orinoco_plx_init_one,
-	remove:__devexit_p(orinoco_plx_remove_one),
-	suspend:0,
-	resume:0
+	.name		= "orinoco_plx",
+	.id_table	= orinoco_plx_pci_id_table,
+	.probe		= orinoco_plx_init_one,
+	.remove		= __devexit_p(orinoco_plx_remove_one),
+	.suspend	= 0,
+	.resume		= 0,
 };
 
+static char version[] __initdata = "orinoco_plx.c 0.13e (Daniel Barlow <dan@telent.net>, David Gibson <hermes@gibson.dropbear.id.au>)";
+MODULE_AUTHOR("Daniel Barlow <dan@telent.net>");
+MODULE_DESCRIPTION("Driver for wireless LAN cards using the PLX9052 PCI bridge");
+#ifdef MODULE_LICENSE
+MODULE_LICENSE("Dual MPL/GPL");
+#endif
+
 static int __init orinoco_plx_init(void)
 {
 	printk(KERN_DEBUG "%s\n", version);
diff -Nur linux-orig/drivers/net/wireless/orinoco_tmd.c linux/drivers/net/wireless/orinoco_tmd.c
--- linux-orig/drivers/net/wireless/orinoco_tmd.c	1970-01-01 03:00:00.000000000 +0300
+++ linux/drivers/net/wireless/orinoco_tmd.c	2003-05-12 10:22:27.000000000 +0400
@@ -0,0 +1,238 @@
+/* orinoco_tmd.c 0.01
+ * 
+ * Driver for Prism II devices which would usually be driven by orinoco_cs,
+ * but are connected to the PCI bus by a TMD7160. 
+ *
+ * Copyright (C) 2003 Joerg Dorchain <joerg@dorchain.net>
+ * based heavily upon orinoco_plx.c Copyright (C) 2001 Daniel Barlow <dan@telent.net>
+ *
+ * The contents of this file are subject to the Mozilla Public License
+ * Version 1.1 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License
+ * at http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS"
+ * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
+ * the License for the specific language governing rights and
+ * limitations under the License.
+ *
+ * Alternatively, the contents of this file may be used under the
+ * terms of the GNU General Public License version 2 (the "GPL"), in
+ * which case the provisions of the GPL are applicable instead of the
+ * above.  If you wish to allow the use of your version of this file
+ * only under the terms of the GPL and not to allow others to use your
+ * version of this file under the MPL, indicate your decision by
+ * deleting the provisions above and replace them with the notice and
+ * other provisions required by the GPL.  If you do not delete the
+ * provisions above, a recipient may use your version of this file
+ * under either the MPL or the GPL.
+
+ * Caution: this is experimental and probably buggy.  For success and
+ * failure reports for different cards and adaptors, see
+ * orinoco_tmd_pci_id_table near the end of the file.  If you have a
+ * card we don't have the PCI id for, and looks like it should work,
+ * drop me mail with the id and "it works"/"it doesn't work".
+ *
+ * Note: if everything gets detected fine but it doesn't actually send
+ * or receive packets, your first port of call should probably be to   
+ * try newer firmware in the card.  Especially if you're doing Ad-Hoc
+ * modes
+ *
+ * The actual driving is done by orinoco.c, this is just resource
+ * allocation stuff.
+ *
+ * This driver is modeled after the orinoco_plx driver. The main
+ * difference is that the TMD chip has only IO port ranges and no
+ * memory space, i.e.  no access to the CIS. Compared to the PLX chip,
+ * the io range functionalities are exchanged.
+ *
+ * Pheecom sells cards with the TMD chip as "ASIC version"
+ */
+
+#include <linux/config.h>
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/sched.h>
+#include <linux/ptrace.h>
+#include <linux/slab.h>
+#include <linux/string.h>
+#include <linux/timer.h>
+#include <linux/ioport.h>
+#include <asm/uaccess.h>
+#include <asm/io.h>
+#include <asm/system.h>
+#include <linux/netdevice.h>
+#include <linux/if_arp.h>
+#include <linux/etherdevice.h>
+#include <linux/wireless.h>
+#include <linux/list.h>
+#include <linux/pci.h>
+#include <linux/wireless.h>
+#include <linux/fcntl.h>
+
+#include <pcmcia/cisreg.h>
+
+#include "hermes.h"
+#include "orinoco.h"
+
+static char dev_info[] = "orinoco_tmd";
+
+#define COR_VALUE     (COR_LEVEL_REQ | COR_FUNC_ENA | COR_FUNC_ENA) /* Enable PC card with level triggered irqs and irq requests */
+
+
+static int orinoco_tmd_init_one(struct pci_dev *pdev,
+				const struct pci_device_id *ent)
+{
+	int err = 0;
+	u32 reg, addr;
+	struct orinoco_private *priv = NULL;
+	unsigned long pccard_ioaddr = 0;
+	unsigned long pccard_iolen = 0;
+	struct net_device *dev = NULL;
+
+	err = pci_enable_device(pdev);
+	if (err)
+		return -EIO;
+
+	printk(KERN_DEBUG "TMD setup\n");
+	pccard_ioaddr = pci_resource_start(pdev, 2);
+	pccard_iolen = pci_resource_len(pdev, 2);
+	if (! request_region(pccard_ioaddr, pccard_iolen, dev_info)) {
+		printk(KERN_ERR "orinoco_tmd: I/O resource at 0x%lx len 0x%lx busy\n",
+			pccard_ioaddr, pccard_iolen);
+		pccard_ioaddr = 0;
+		err = -EBUSY;
+		goto fail;
+	}
+	addr = pci_resource_start(pdev, 1);
+	outb(COR_VALUE, addr);
+	mdelay(1);
+	reg = inb(addr);
+	if (reg != COR_VALUE) {
+		printk(KERN_ERR "orinoco_tmd: Error setting TMD COR values %x should be %x\n", reg, COR_VALUE);
+		err = -EIO;
+		goto fail;
+	}
+
+	dev = alloc_orinocodev(0, NULL);
+	if (! dev) {
+		err = -ENOMEM;
+		goto fail;
+	}
+
+	priv = dev->priv;
+	dev->base_addr = pccard_ioaddr;
+	SET_MODULE_OWNER(dev);
+
+	printk(KERN_DEBUG
+	       "Detected Orinoco/Prism2 TMD device at %s irq:%d, io addr:0x%lx\n",
+	       pdev->slot_name, pdev->irq, pccard_ioaddr);
+
+	hermes_struct_init(&(priv->hw), dev->base_addr,
+			HERMES_IO, HERMES_16BIT_REGSPACING);
+	pci_set_drvdata(pdev, dev);
+
+	err = request_irq(pdev->irq, orinoco_interrupt, SA_SHIRQ, dev->name,
+			  dev);
+	if (err) {
+		printk(KERN_ERR "orinoco_tmd: Error allocating IRQ %d.\n",
+		       pdev->irq);
+		err = -EBUSY;
+		goto fail;
+	}
+	dev->irq = pdev->irq;
+
+	err = register_netdev(dev);
+	if (err)
+		goto fail;
+
+	return 0;		/* succeeded */
+
+ fail:	
+	printk(KERN_DEBUG "orinoco_tmd: init_one(), FAIL!\n");
+
+	if (dev) {
+		if (dev->irq)
+			free_irq(dev->irq, dev);
+		
+		kfree(dev);
+	}
+
+	if (pccard_ioaddr)
+		release_region(pccard_ioaddr, pccard_iolen);
+
+	pci_disable_device(pdev);
+
+	return err;
+}
+
+static void __devexit orinoco_tmd_remove_one(struct pci_dev *pdev)
+{
+	struct net_device *dev = pci_get_drvdata(pdev);
+
+	if (! dev)
+		BUG();
+
+	unregister_netdev(dev);
+		
+	if (dev->irq)
+		free_irq(dev->irq, dev);
+		
+	pci_set_drvdata(pdev, NULL);
+
+	kfree(dev);
+
+	release_region(pci_resource_start(pdev, 2), pci_resource_len(pdev, 2));
+
+	pci_disable_device(pdev);
+}
+
+
+static struct pci_device_id orinoco_tmd_pci_id_table[] __devinitdata = {
+	{0x15e8, 0x0131, PCI_ANY_ID, PCI_ANY_ID,},      /* NDC and OEMs, e.g. pheecom */
+	{0,},
+};
+
+MODULE_DEVICE_TABLE(pci, orinoco_tmd_pci_id_table);
+
+static struct pci_driver orinoco_tmd_driver = {
+	.name		= "orinoco_tmd",
+	.id_table	= orinoco_tmd_pci_id_table,
+	.probe		= orinoco_tmd_init_one,
+	.remove		= __devexit_p(orinoco_tmd_remove_one),
+	.suspend	= 0,
+	.resume		= 0,
+};
+
+static char version[] __initdata = "orinoco_tmd.c 0.01 (Joerg Dorchain <joerg@dorchain.net>)";
+MODULE_AUTHOR("Joerg Dorchain <joerg@dorchain.net>");
+MODULE_DESCRIPTION("Driver for wireless LAN cards using the TMD7160 PCI bridge");
+#ifdef MODULE_LICENSE
+MODULE_LICENSE("Dual MPL/GPL");
+#endif
+
+static int __init orinoco_tmd_init(void)
+{
+	printk(KERN_DEBUG "%s\n", version);
+	return pci_module_init(&orinoco_tmd_driver);
+}
+
+extern void __exit orinoco_tmd_exit(void)
+{
+	pci_unregister_driver(&orinoco_tmd_driver);
+	current->state = TASK_UNINTERRUPTIBLE;
+	schedule_timeout(HZ);
+}
+
+module_init(orinoco_tmd_init);
+module_exit(orinoco_tmd_exit);
+
+/*
+ * Local variables:
+ *  c-indent-level: 8
+ *  c-basic-offset: 8
+ *  tab-width: 8
+ * End:
+ */
diff -Nur linux-orig/drivers/net/wireless/spectrum_cs.c linux/drivers/net/wireless/spectrum_cs.c
--- linux-orig/drivers/net/wireless/spectrum_cs.c	2004-02-16 09:32:01.000000000 +0300
+++ linux/drivers/net/wireless/spectrum_cs.c	2003-07-09 20:24:37.000000000 +0400
@@ -1,71 +1,19 @@
 /*
  * spectrum_cs.c
  *
- * Copyright (C) 2002 Pavel Roskin, AT&T Labs <proski@gnu.org>
+ * Copyright (C) 2002-2003 Pavel Roskin <proski@gnu.org>
  * Portions based on orinoco_cs.c, Copyright (C) David Gibson,
  *      Linuxcare Australia <hermes@gibson.dropbear.id.au>
  * Portions based on Spectrum24tDnld.c, Copyright (C)
  *       Symbol Technologies.
  *
- * This is a Linux driver for wireless cards that use Prism 2 chipset
- * and have no firmware in the non-volatile memory.  Such cards require
- * firmware download every time they are powered up.
- *
- * Currently supported cards are CompactFlash wireless cards by Symbol
- * (Spectrum24 High Rate) and Socket Communications (Low Power Wireless
- * LAN CF Card).
- *
- * The firmware downloader is a complete rewrite of the code from
- * Spectrum24/IEEE Software for Linux by Symbol Technologies, licensed
- * under GNU GPL.  The firmware also was taken from that project.
- * The project's homepage is http://sourceforge.net/projects/spectrum24/
- *
- * The bulk of the code was taken from Orinoco driver by David Gibson.
- * It implements PCMCIA interface and wireless extensions.  The homepage
- * of the orinoco driver is http://www.ozlabs.org/people/dgibson/dldwd/
- *
- * This driver compiles to a kernel module called "spectrum_cs".  It also
- * uses modules "hermes" and "orinoco" from the Orinoco driver for
- * low-level operations.  It is possible to compile this driver as part
- * of the kernel.
- *
- *
- * Theory of operation.
- *
- * There are two firmware images.  One is primary firmware, the other
- * is secondary firmware.  Both images have the same structure - they
- * begin with a text header followed by data blocks (see structure
- * dblock) and Plug Data references (see structure pdr).  In the case
- * of primary firmware, we are only interested in data blocks.  Each
- * block is separately written to the adapter memory at the address
- * specified in the header of the block.
- *
- * The main role of the primary firmware is to read the data from EEPROM
- * (non-volatile memory) of the adapter, which contains data specific to
- * this adapter, such as MAC address, MKK call sign, serial number and
- * country code.  This data is called Plug Data Area (PDA).  It consists
- * of Plug Data Items (PDI), each with an ID describing its meaning
- * (see structure pdi).
- *
- * The secondary firmware is what normally runs on the card.  But unlike
- * the primary firmware, it needs to be patched (plugged) by the data
- * from the PDA.  Each Plug Data Reference has an ID and an address in
- * the adapter memory where the data should be written.  The data from
- * each PDI is written to the address in the adapter pointed to by the
- * PDR with the same ID.
- *
- * In order to make it safe to patch the adapter memory, the card is put
- * to the idle state.  This is done using Host Configuration Register
- * (HCR), which is available in the PCMCIA attribute space.  HCR is
- * specific to HFA3842 MAC chip.  Cards using an older HFA3841 chip
- * always have non-volatile firmware and should be supported by
- * orinoco_cs.
+ * Copyright notice & release notes in file orinoco.c
  */
 
 #include <linux/config.h>
 #ifdef  __IN_PCMCIA_PACKAGE__
 #include <pcmcia/k_compat.h>
-#endif				/* __IN_PCMCIA_PACKAGE__ */
+#endif /* __IN_PCMCIA_PACKAGE__ */
 
 #include <linux/module.h>
 #include <linux/kernel.h>
@@ -74,12 +22,7 @@
 #include <linux/ptrace.h>
 #include <linux/slab.h>
 #include <linux/string.h>
-#include <linux/timer.h>
 #include <linux/ioport.h>
-#include <asm/uaccess.h>
-#include <asm/io.h>
-#include <asm/system.h>
-#include <linux/proc_fs.h>
 #include <linux/netdevice.h>
 #include <linux/if_arp.h>
 #include <linux/etherdevice.h>
@@ -91,15 +34,90 @@
 #include <pcmcia/cistpl.h>
 #include <pcmcia/cisreg.h>
 #include <pcmcia/ds.h>
-#include <pcmcia/bus_ops.h>
 
-#include "hermes.h"
+#include <asm/uaccess.h>
+#include <asm/io.h>
+#include <asm/system.h>
+
 #include "orinoco.h"
-#include "spectrum_fw.h"
 
-/***************************************
- *** Firmware downloader starts here ***
- ***************************************/
+/********************************************************************/
+/* Module stuff							    */
+/********************************************************************/
+
+MODULE_AUTHOR("Pavel Roskin <proski@gnu.org>");
+MODULE_DESCRIPTION("Driver for Symbol Spectrum24 cards with firmware downloader");
+#ifdef MODULE_LICENSE
+MODULE_LICENSE("Dual MPL/GPL");
+#endif
+
+/* Module parameters */
+
+/* The old way: bit map of interrupts to choose from */
+/* This means pick from 15, 14, 12, 11, 10, 9, 7, 5, 4, and 3 */
+static uint irq_mask = 0xdeb8;
+/* Newer, simpler way of listing specific interrupts */
+static int irq_list[4] = { -1 };
+
+/* Some D-Link cards have buggy CIS. They do work at 5v properly, but
+ * don't have any CIS entry for it. This workaround it... */
+static int ignore_cis_vcc; /* = 0 */
+
+MODULE_PARM(irq_mask, "i");
+MODULE_PARM(irq_list, "1-4i");
+MODULE_PARM(ignore_cis_vcc, "i");
+
+/********************************************************************/
+/* Magic constants						    */
+/********************************************************************/
+
+/*
+ * The dev_info variable is the "key" that is used to match up this
+ * device driver with appropriate cards, through the card
+ * configuration database.
+ */
+static dev_info_t dev_info = "spectrum_cs";
+
+/********************************************************************/
+/* Data structures						    */
+/********************************************************************/
+
+/* PCMCIA specific device information (goes in the card field of
+ * struct orinoco_private */
+struct orinoco_pccard {
+	dev_link_t link;
+	dev_node_t node;
+};
+
+/*
+ * A linked list of "instances" of the device.  Each actual PCMCIA
+ * card corresponds to one device instance, and is described by one
+ * dev_link_t structure (defined in ds.h).
+ */
+static dev_link_t *dev_list; /* = NULL */
+
+/********************************************************************/
+/* Function prototypes						    */
+/********************************************************************/
+
+/* device methods */
+static int spectrum_cs_hard_reset(struct orinoco_private *priv);
+
+/* PCMCIA gumpf */
+static void spectrum_cs_config(dev_link_t * link);
+static void spectrum_cs_release(u_long arg);
+static int spectrum_cs_event(event_t event, int priority,
+			    event_callback_args_t * args);
+
+static dev_link_t *spectrum_cs_attach(void);
+static void spectrum_cs_detach(dev_link_t *);
+
+/********************************************************************/
+/* Firmware downloader						    */
+/********************************************************************/
+
+/* Header with the firmware */
+#include "spectrum_fw.h"
 
 /* Position of PDA in the adapter memory */
 #define EEPROM_ADDR        0x3000
@@ -223,7 +241,7 @@
 
 /* Set address of the auxiliary port */
 static inline void
-spectrum_aux_setaddr(hermes_t * hw, u32 addr)
+spectrum_aux_setaddr(hermes_t *hw, u32 addr)
 {
 	hermes_write_reg(hw, HERMES_AUXPAGE, (u16) (addr >> 7));
 	hermes_write_reg(hw, HERMES_AUXOFFSET, (u16) (addr & 0x7F));
@@ -232,7 +250,7 @@
 
 /* Open access to the auxiliary port */
 static int
-spectrum_aux_open(hermes_t * hw)
+spectrum_aux_open(hermes_t *hw)
 {
 	int i;
 
@@ -257,24 +275,19 @@
 
 
 #define CS_CHECK(fn, args...) \
-while ((last_ret=CardServices(last_fn=(fn),args))!=0) goto cs_failed
+	while ((last_ret=CardServices(last_fn=(fn),args))!=0) goto cs_failed
 
 #define CFG_CHECK(fn, args...) \
-if (CardServices(fn, args) != 0) goto next_entry
+	if (CardServices(fn, args) != 0) goto next_entry
 
-static void
-cs_error(client_handle_t handle, int func, int ret)
-{
-	error_info_t err = { func, ret };
-	CardServices(ReportError, handle, &err);
-}
+static void spectrum_cs_error(client_handle_t handle, int func, int ret);
 
 /*
  * Reset the card using configuration registers COR and CCSR.
  * If IDLE is 1, stop the firmware, so that it can be safely rewritten.
  */
 static int
-spectrum_reset(dev_link_t * link, int idle)
+spectrum_reset(dev_link_t *link, int idle)
 {
 	int last_ret, last_fn;
 	conf_reg_t reg;
@@ -322,7 +335,7 @@
 	return 0;
 
       cs_failed:
-	cs_error(link->handle, last_fn, last_ret);
+	spectrum_cs_error(link->handle, last_fn, last_ret);
 	return -ENODEV;
 }
 
@@ -357,7 +370,7 @@
 
 /* Process one Plug Data Item - find corresponding PDR and plug it */
 static int
-spectrum_plug_pdi(hermes_t * hw, struct pdr *first_pdr, struct pdi *pdi)
+spectrum_plug_pdi(hermes_t *hw, struct pdr *first_pdr, struct pdi *pdi)
 {
 	struct pdr *pdr;
 
@@ -383,7 +396,7 @@
 
 /* Read PDA from the adapter */
 static int
-spectrum_read_pda(hermes_t * hw, u16 * pda, int pda_len)
+spectrum_read_pda(hermes_t *hw, u16 *pda, int pda_len)
 {
 	int ret;
 	int pda_size;
@@ -413,8 +426,8 @@
 
 /* Parse PDA and write the records into the adapter */
 static int
-spectrum_apply_pda(hermes_t * hw, const struct dblock *first_block,
-		   u16 * pda)
+spectrum_apply_pda(hermes_t *hw, const struct dblock *first_block,
+		   u16 *pda)
 {
 	int ret;
 	struct pdi *pdi;
@@ -443,7 +456,7 @@
 
 /* Load firmware blocks into the adapter */
 static int
-spectrum_load_blocks(hermes_t * hw, const struct dblock *first_block)
+spectrum_load_blocks(hermes_t *hw, const struct dblock *first_block)
 {
 	const struct dblock *blk;
 	u32 blkaddr;
@@ -472,7 +485,7 @@
  * care of the PDA - read it and then write it on top of the firmware.
  */
 static int
-spectrum_dl_image(hermes_t * hw, dev_link_t * link,
+spectrum_dl_image(hermes_t *hw, dev_link_t *link,
 		  const unsigned char *image)
 {
 	int ret;
@@ -519,7 +532,7 @@
 	/* Reset hermes chip and make sure it responds */
 	ret = hermes_init(hw);
 
-	/* hermes_init() should return 0 with the secondary firmware */
+	/* hermes_reset() should return 0 with the secondary firmware */
 	if (image != primsym && ret != 0)
 		return -ENODEV;
 
@@ -536,178 +549,94 @@
  * reset on the card, to make sure it's in a sane state.
  */
 static int
-spectrum_dl_firmware(hermes_t * hw, dev_link_t * link)
+spectrum_dl_firmware(hermes_t *hw, dev_link_t *link)
 {
 	int ret;
 
-	/* load primary firmware */
+	/* Load primary firmware */
 	ret = spectrum_dl_image(hw, link, primsym);
-	if (ret)
+	if (ret) {
+		printk(KERN_ERR "spectrum_cs: "
+		       "primary firmware download failed\n");
 		return ret;
+	}
 
-	/* load secondary firmware */
+	/* Load secondary firmware */
 	ret = spectrum_dl_image(hw, link, secsym);
 
+	if (ret) {
+		printk(KERN_ERR "spectrum_cs: "
+		       "secondary firmware download failed\n");
+	}
+
 	return ret;
 }
 
-/*************************************
- *** Firmware downloader ends here ***
- *************************************/
-
-/*====================================================================*/
-
-static char version[] __initdata = "spectrum_cs.c 0.3.4";
-
-MODULE_AUTHOR("Pavel Roskin <proski@gnu.org>");
-MODULE_DESCRIPTION
-    ("Driver for Symbol Spectrum24 cards with firmware downloader");
-#ifdef MODULE_LICENSE
-MODULE_LICENSE("Dual MPL/GPL");
-#endif
-
-/* Parameters that can be set with 'insmod' */
-
-/* The old way: bit map of interrupts to choose from */
-/* This means pick from 15, 14, 12, 11, 10, 9, 7, 5, 4, and 3 */
-static uint irq_mask = 0xdeb8;
-/* Newer, simpler way of listing specific interrupts */
-static int irq_list[4] = { -1 };
-
-MODULE_PARM(irq_mask, "i");
-MODULE_PARM(irq_list, "1-4i");
-
-/* Pcmcia specific structure */
-struct orinoco_pccard {
-	dev_link_t link;
-	dev_node_t node;
-};
-
-/*
- * Function prototypes
- */
-
-/* struct net_device methods */
-static int spectrum_cs_open(struct net_device *dev);
-static int spectrum_cs_stop(struct net_device *dev);
-
-/* PCMCIA gumpf */
-static void spectrum_cs_config(dev_link_t * link);
-static void spectrum_cs_release(u_long arg);
-static int spectrum_cs_event(event_t event, int priority,
-			     event_callback_args_t * args);
-
-static dev_link_t *spectrum_cs_attach(void);
-static void spectrum_cs_detach(dev_link_t *);
-
-/*
-   The dev_info variable is the "key" that is used to match up this
-   device driver with appropriate cards, through the card configuration
-   database.
-*/
-static dev_info_t dev_info = "spectrum_cs";
-
-/*
-   A linked list of "instances" of the dummy device.  Each actual
-   PCMCIA card corresponds to one device instance, and is described
-   by one dev_link_t structure (defined in ds.h).
-
-   You may not want to use a linked list for this -- for example, the
-   memory card driver uses an array of dev_link_t pointers, where minor
-   device numbers are used to derive the corresponding array index.
-*/
-
-static dev_link_t *dev_list;	/* = NULL */
-
-/*====================================================================*/
+/********************************************************************/
+/* Device methods     						    */
+/********************************************************************/
 
 static int
-spectrum_cs_open(struct net_device *dev)
+spectrum_cs_hard_reset(struct orinoco_private *priv)
 {
-	struct orinoco_private *priv =
-	    (struct orinoco_private *) dev->priv;
-	struct orinoco_pccard *card = (struct orinoco_pccard *) priv->card;
+	struct orinoco_pccard *card = priv->card;
 	dev_link_t *link = &card->link;
 	int err;
 
-	/* hard reset here */
-	link->open++;
-	netif_device_attach(dev);
-
-	err = __orinoco_startup(priv);
-	if (err)
-		spectrum_cs_stop(dev);
-	else
-		netif_start_queue(dev);
-
-	return err;
-}
-
-static int
-spectrum_cs_stop(struct net_device *dev)
-{
-	struct orinoco_private *priv =
-	    (struct orinoco_private *) dev->priv;
-	struct orinoco_pccard *card = (struct orinoco_pccard *) priv->card;
-	dev_link_t *link = &card->link;
-
-	netif_stop_queue(dev);
-
-	if (link->state & DEV_PRESENT)
-		orinoco_shutdown(priv);
-
-	link->open--;
-
-	if (link->state & DEV_STALE_CONFIG) {
-		del_timer(&link->release);
-		spectrum_cs_release((u_long) link);
+	if (!hermes_present(&priv->hw)) {
+		/* The firmware needs to be reloaded */
+		if (spectrum_dl_firmware(&priv->hw, &card->link) != 0) {
+			printk(KERN_ERR
+			       "spectrum_cs: firmware download failed\n");
+			err = -ENODEV;
+		}
+	} else {
+		/* Soft reset using COR and HCR */
+		spectrum_reset(link, 0);
 	}
 
 	return 0;
 }
 
+/********************************************************************/
+/* PCMCIA stuff     						    */
+/********************************************************************/
+
+/* In 2.5 (as of 2.5.69 at least) there is a cs_error exported which
+ * does this, but it's not in 2.4 so we do our own for now. */
 static void
-spectrum_cs_reset(struct orinoco_private *priv)
+spectrum_cs_error(client_handle_t handle, int func, int ret)
 {
-	struct net_device *dev = priv->ndev;
-	struct orinoco_pccard *card = (struct orinoco_pccard *) priv->card;
-	dev_link_t *link = &card->link;
-	int err;
-
-	err = CardServices(ResetCard, link->handle, NULL);
-	if (err) {
-		printk(KERN_WARNING
-		       "%s: ResetCard returned %d.  Not sure what to do.\n",
-		       dev->name, err);
-	}
-
-	/* Does Reset card wait for the reset to fully complete? */
-	return;
+	error_info_t err = { func, ret };
+	CardServices(ReportError, handle, &err);
 }
 
+
 /* Remove zombie instances (card removed, detach pending) */
 static void
 flush_stale_links(void)
 {
 	dev_link_t *link, *next;
 
+	TRACE_ENTER("");
+
 	for (link = dev_list; link; link = next) {
 		next = link->next;
-		if (link->state & DEV_STALE_LINK)
+		if (link->state & DEV_STALE_LINK) {
 			spectrum_cs_detach(link);
+		}
 	}
+	TRACE_EXIT("");
 }
 
-/*======================================================================
-  spectrum_cs_attach() creates an "instance" of the driver, allocating
-  local data structures for one device.  The device is registered
-  with Card Services.
-  
-  The dev_link structure is initialized, but we don't actually
-  configure the card at this point -- we wait until we receive a
-  card insertion event.
-  ======================================================================*/
-
+/*
+ * This creates an "instance" of the driver, allocating local data
+ * structures for one device.  The device is registered with Card
+ * Services.
+ * 
+ * The dev_link structure is initialized, but we don't actually
+ * configure the card at this point -- we wait until we receive a card
+ * insertion event.  */
 static dev_link_t *
 spectrum_cs_attach(void)
 {
@@ -721,19 +650,18 @@
 	/* A bit of cleanup */
 	flush_stale_links();
 
-	dev =
-	    alloc_orinocodev(sizeof(*card), spectrum_cs_open,
-			     spectrum_cs_stop, spectrum_cs_reset);
-	if (!dev)
+	dev = alloc_orinocodev(sizeof(*card), spectrum_cs_hard_reset);
+	if (! dev)
 		return NULL;
 	priv = dev->priv;
 	card = priv->card;
 
 	/* Link both structures together */
 	link = &card->link;
-	link->priv = priv;
+	link->priv = dev;
 
 	/* Initialize the dev_link_t structure */
+	init_timer(&link->release);
 	link->release.function = &spectrum_cs_release;
 	link->release.data = (u_long) link;
 
@@ -756,20 +684,23 @@
 	link->conf.IntType = INT_MEMORY_AND_IO;
 
 	/* Register with Card Services */
+	/* FIXME: need a lock? */
 	link->next = dev_list;
 	dev_list = link;
+
 	client_reg.dev_info = &dev_info;
 	client_reg.Attributes = INFO_IO_CLIENT | INFO_CARD_SHARE;
 	client_reg.EventMask =
-	    CS_EVENT_CARD_INSERTION | CS_EVENT_CARD_REMOVAL |
-	    CS_EVENT_RESET_PHYSICAL | CS_EVENT_CARD_RESET |
-	    CS_EVENT_PM_SUSPEND | CS_EVENT_PM_RESUME;
+		CS_EVENT_CARD_INSERTION | CS_EVENT_CARD_REMOVAL |
+		CS_EVENT_RESET_PHYSICAL | CS_EVENT_CARD_RESET |
+		CS_EVENT_PM_SUSPEND | CS_EVENT_PM_RESUME;
 	client_reg.event_handler = &spectrum_cs_event;
-	client_reg.Version = 0x0210;
+	client_reg.Version = 0x0210; /* FIXME: what does this mean? */
 	client_reg.event_callback_args.client_data = link;
+
 	ret = CardServices(RegisterClient, &link->handle, &client_reg);
 	if (ret != CS_SUCCESS) {
-		cs_error(link->handle, RegisterClient, ret);
+		spectrum_cs_error(link->handle, RegisterClient, ret);
 		spectrum_cs_detach(link);
 		return NULL;
 	}
@@ -787,25 +718,23 @@
 spectrum_cs_detach(dev_link_t * link)
 {
 	dev_link_t **linkp;
-	struct orinoco_private *priv = link->priv;
-	struct net_device *dev = priv->ndev;
+	struct net_device *dev = link->priv;
 
 	/* Locate device structure */
 	for (linkp = &dev_list; *linkp; linkp = &(*linkp)->next)
 		if (*linkp == link)
 			break;
-	if (*linkp == NULL)
+	if (*linkp == NULL) {
+		BUG();
 		return;
+	}
 
-	/*
-	   If the device is currently configured and active, we won't
-	   actually delete it yet.  Instead, it is marked so that when
-	   the release() function is called, that will trigger a proper
-	   detach().
-	 */
 	if (link->state & DEV_CONFIG) {
-		link->state |= DEV_STALE_LINK;
-		return;
+		spectrum_cs_release((u_long)link);
+		if (link->state & DEV_CONFIG) {
+			link->state |= DEV_STALE_LINK;
+			return;
+		}
 	}
 
 	/* Break the link with Card Services */
@@ -814,42 +743,41 @@
 
 	/* Unlink device structure, and free it */
 	*linkp = link->next;
+	DEBUG(0, "spectrum_cs: detach: link=%p link->dev=%p\n", link, link->dev);
 	if (link->dev) {
+		DEBUG(0, "spectrum_cs: About to unregister net device %p\n",
+		      dev);
 		unregister_netdev(dev);
 	}
-
 	kfree(dev);
 }				/* spectrum_cs_detach */
 
-/*======================================================================
-  spectrum_cs_config() is scheduled to run after a CARD_INSERTION event
-  is received, to configure the PCMCIA socket, and to make the
-  device available to the system.
-  ======================================================================*/
+/*
+ * spectrum_cs_config() is scheduled to run after a CARD_INSERTION
+ * event is received, to configure the PCMCIA socket, and to make the
+ * device available to the system.
+ */
 
 static void
-spectrum_cs_config(dev_link_t * link)
+spectrum_cs_config(dev_link_t *link)
 {
+	struct net_device *dev = link->priv;
 	client_handle_t handle = link->handle;
-	struct orinoco_private *priv = link->priv;
-	struct orinoco_pccard *card = (struct orinoco_pccard *) priv->card;
+	struct orinoco_private *priv = dev->priv;
+	struct orinoco_pccard *card = priv->card;
 	hermes_t *hw = &priv->hw;
-	struct net_device *ndev = priv->ndev;
-	tuple_t tuple;
-	cisparse_t parse;
 	int last_fn, last_ret;
 	u_char buf[64];
 	config_info_t conf;
-	cistpl_cftable_entry_t dflt = { 0 };
 	cisinfo_t info;
-
-	TRACE_ENTER("orinoco");
+	tuple_t tuple;
+	cisparse_t parse;
 
 	CS_CHECK(ValidateCIS, handle, &info);
 
 	/*
-	   This reads the card's CONFIG tuple to find its configuration
-	   registers.
+	 * This reads the card's CONFIG tuple to find its
+	 * configuration registers.
 	 */
 	tuple.DesiredTuple = CISTPL_CONFIG;
 	tuple.Attributes = 0;
@@ -870,21 +798,25 @@
 	link->conf.Vcc = conf.Vcc;
 
 	/*
-	   In this loop, we scan the CIS for configuration table entries,
-	   each of which describes a valid card configuration, including
-	   voltage, IO window, memory window, and interrupt settings.
-
-	   We make no assumptions about the card to be configured: we use
-	   just the information available in the CIS.  In an ideal world,
-	   this would work for any PCMCIA card, but it requires a complete
-	   and accurate CIS.  In practice, a driver usually "knows" most of
-	   these things without consulting the CIS, and most client drivers
-	   will only use the CIS to fill in implementation-defined details.
+	 * In this loop, we scan the CIS for configuration table
+	 * entries, each of which describes a valid card
+	 * configuration, including voltage, IO window, memory window,
+	 * and interrupt settings.
+	 *
+	 * We make no assumptions about the card to be configured: we
+	 * use just the information available in the CIS.  In an ideal
+	 * world, this would work for any PCMCIA card, but it requires
+	 * a complete and accurate CIS.  In practice, a driver usually
+	 * "knows" most of these things without consulting the CIS,
+	 * and most client drivers will only use the CIS to fill in
+	 * implementation-defined details.
 	 */
 	tuple.DesiredTuple = CISTPL_CFTABLE_ENTRY;
 	CS_CHECK(GetFirstTuple, handle, &tuple);
 	while (1) {
 		cistpl_cftable_entry_t *cfg = &(parse.cftable_entry);
+		cistpl_cftable_entry_t dflt = { .index = 0 };
+
 		CFG_CHECK(GetTupleData, handle, &tuple);
 		CFG_CHECK(ParseTuple, handle, &tuple, &parse);
 
@@ -901,24 +833,18 @@
 		}
 
 		/* Use power settings for Vcc and Vpp if present */
-		/*  Note that the CIS values need to be rescaled */
+		/* Note that the CIS values need to be rescaled */
 		if (cfg->vcc.present & (1 << CISTPL_POWER_VNOM)) {
-			if (conf.Vcc !=
-			    cfg->vcc.param[CISTPL_POWER_VNOM] / 10000) {
-				DEBUG(2,
-				      "spectrum_cs_config: Vcc mismatch (conf.Vcc = %d, CIS = %d)\n",
-				      conf.Vcc,
-				      cfg->vcc.param[CISTPL_POWER_VNOM] /
-				      10000);
+			if (conf.Vcc != cfg->vcc.param[CISTPL_POWER_VNOM] / 10000) {
+				DEBUG(2, "spectrum_cs_config: Vcc mismatch (conf.Vcc = %d, CIS = %d)\n",  conf.Vcc, cfg->vcc.param[CISTPL_POWER_VNOM] / 10000);
+				if (!ignore_cis_vcc)
+					goto next_entry;
 			}
 		} else if (dflt.vcc.present & (1 << CISTPL_POWER_VNOM)) {
-			if (conf.Vcc !=
-			    dflt.vcc.param[CISTPL_POWER_VNOM] / 10000) {
-				DEBUG(2,
-				      "spectrum_cs_config: Vcc mismatch (conf.Vcc = %d, CIS = %d)\n",
-				      conf.Vcc,
-				      dflt.vcc.param[CISTPL_POWER_VNOM] /
-				      10000);
+			if (conf.Vcc != dflt.vcc.param[CISTPL_POWER_VNOM] / 10000) {
+				DEBUG(2, "spectrum_cs_config: Vcc mismatch (conf.Vcc = %d, CIS = %d)\n",  conf.Vcc, dflt.vcc.param[CISTPL_POWER_VNOM] / 10000);
+				if(!ignore_cis_vcc)
+					goto next_entry;
 			}
 		}
 
@@ -928,7 +854,7 @@
 		else if (dflt.vpp1.present & (1 << CISTPL_POWER_VNOM))
 			link->conf.Vpp1 = link->conf.Vpp2 =
 			    dflt.vpp1.param[CISTPL_POWER_VNOM] / 10000;
-
+		
 		/* Do we need to allocate an interrupt? */
 		if (cfg->irq.IRQInfo1 || dflt.irq.IRQInfo1)
 			link->conf.Attributes |= CONF_ENABLE_IRQ;
@@ -964,66 +890,67 @@
 		/* If we got this far, we're cool! */
 
 		break;
-
-	      next_entry:
+		
+	next_entry:
 		if (link->io.NumPorts1)
 			CardServices(ReleaseIO, link->handle, &link->io);
 		last_ret = CardServices(GetNextTuple, handle, &tuple);
-		if (last_ret == CS_NO_MORE_ITEMS) {
-			printk(KERN_ERR
-			       "GetNextTuple().  No matching CIS configuration\n");
+		if (last_ret  == CS_NO_MORE_ITEMS) {
+			printk(KERN_ERR "GetNextTuple().  No matching CIS configuration, "
+			       "maybe you need the ignore_cis_vcc=1 parameter.\n");
 			goto cs_failed;
 		}
 	}
 
 	/*
-	   Allocate an interrupt line.  Note that this does not assign a
-	   handler to the interrupt, unless the 'Handler' member of the
-	   irq structure is initialized.
+	 * Allocate an interrupt line.  Note that this does not assign
+	 * a handler to the interrupt, unless the 'Handler' member of
+	 * the irq structure is initialized.
 	 */
 	if (link->conf.Attributes & CONF_ENABLE_IRQ) {
 		int i;
 
-		link->irq.Attributes =
-		    IRQ_TYPE_EXCLUSIVE | IRQ_HANDLE_PRESENT;
+		link->irq.Attributes = IRQ_TYPE_EXCLUSIVE | IRQ_HANDLE_PRESENT;
 		link->irq.IRQInfo1 = IRQ_INFO2_VALID | IRQ_LEVEL_ID;
 		if (irq_list[0] == -1)
 			link->irq.IRQInfo2 = irq_mask;
 		else
-			for (i = 0; i < 4; i++)
+			for (i=0; i<4; i++)
 				link->irq.IRQInfo2 |= 1 << irq_list[i];
-
-		link->irq.Handler = orinoco_interrupt;
-		link->irq.Instance = priv;
-
+		
+  		link->irq.Handler = orinoco_interrupt; 
+  		link->irq.Instance = dev; 
+		
 		CS_CHECK(RequestIRQ, link->handle, &link->irq);
 	}
 
 	/* We initialize the hermes structure before completing PCMCIA
-	   configuration just in case the interrupt handler gets
-	   called. */
-	hermes_struct_init(hw, link->io.BasePort1, HERMES_IO,
-			   HERMES_16BIT_REGSPACING);
+	 * configuration just in case the interrupt handler gets
+	 * called. */
+	hermes_struct_init(hw, link->io.BasePort1,
+				HERMES_IO, HERMES_16BIT_REGSPACING);
 
 	/*
-	   This actually configures the PCMCIA socket -- setting up
-	   the I/O windows and the interrupt mapping, and putting the
-	   card and host interface into "Memory and IO" mode.
+	 * This actually configures the PCMCIA socket -- setting up
+	 * the I/O windows and the interrupt mapping, and putting the
+	 * card and host interface into "Memory and IO" mode.
 	 */
 	CS_CHECK(RequestConfiguration, link->handle, &link->conf);
 
-	ndev->base_addr = link->io.BasePort1;
-	ndev->irq = link->irq.AssignedIRQ;
+	/* Ok, we have the configuration, prepare to register the netdev */
+	dev->base_addr = link->io.BasePort1;
+	dev->irq = link->irq.AssignedIRQ;
+	SET_MODULE_OWNER(dev);
+	card->node.major = card->node.minor = 0;
 
-	/*
-	   Sanity check to avoid downloading firmware into a wrong card.
-	   HFA3842 should have CCSR and 7 address lines.
-	 */
+	/* Sanity check to avoid downloading firmware into a wrong card.
+	 * HFA3842 should have CCSR and 7 address lines. */
 	if (link->io.IOAddrLines < 7) {
 		printk(KERN_ERR "spectrum_cs: expected at least 7 address "
 		       "lines, found just %d\n", link->io.IOAddrLines);
 		goto failed;
 	}
+
 	if (!(link->conf.Present | PRESENT_STATUS)) {
 		printk(KERN_ERR
 		       "spectrum_cs: Status register not found\n");
@@ -1031,23 +958,30 @@
 	}
 
 	/* Reset card and download firmware */
-	if (spectrum_dl_firmware(hw, link) != 0) {
+	if (spectrum_cs_hard_reset(priv) != 0) {
 		goto failed;
 	}
 
 	/* register_netdev will give us an ethX name */
-	ndev->name[0] = '\0';
+	dev->name[0] = '\0';
 	/* Tell the stack we exist */
-	if (register_netdev(ndev) != 0) {
+	if (register_netdev(dev) != 0) {
 		printk(KERN_ERR "spectrum_cs: register_netdev() failed\n");
 		goto failed;
 	}
-	strcpy(card->node.dev_name, ndev->name);
+
+	/* At this point, the dev_node_t structure(s) needs to be
+	 * initialized and arranged in a linked list at link->dev. */
+	strcpy(card->node.dev_name, dev->name);
+	link->dev = &card->node; /* link->dev being non-NULL is also
+                                    used to indicate that the
+                                    net_device has been registered */
+	link->state &= ~DEV_CONFIG_PENDING;
 
 	/* Finally, report what we've done */
-	printk(KERN_DEBUG "%s: index 0x%02x: Vcc %d.%d", ndev->name,
-	       link->conf.ConfigIndex, link->conf.Vcc / 10,
-	       link->conf.Vcc % 10);
+	printk(KERN_DEBUG "%s: index 0x%02x: Vcc %d.%d",
+	       dev->name, link->conf.ConfigIndex,
+	       link->conf.Vcc / 10, link->conf.Vcc % 10);
 	if (link->conf.Vpp1)
 		printk(", Vpp %d.%d", link->conf.Vpp1 / 10,
 		       link->conf.Vpp1 % 10);
@@ -1061,35 +995,13 @@
 		       link->io.BasePort2 + link->io.NumPorts2 - 1);
 	printk("\n");
 
-	/* And give us the proc nodes for debugging */
-	if (orinoco_proc_dev_init(priv->ndev) != 0) {
-		printk(KERN_ERR
-		       "spectrum_cs: Failed to create /proc node for %s\n",
-		       ndev->name);
-		goto failed;
-	}
-
-	/* Note to myself : this replace MOD_INC_USE_COUNT/MOD_DEC_USE_COUNT */
-	SET_MODULE_OWNER(ndev);
-
-	/*
-	   At this point, the dev_node_t structure(s) need to be
-	   initialized and arranged in a linked list at link->dev.
-	 */
-	card->node.major = card->node.minor = 0;
-	link->dev = &card->node;
-	link->state &= ~DEV_CONFIG_PENDING;
-
-	TRACE_EXIT("orinoco");
-
 	return;
 
-      cs_failed:
-	cs_error(link->handle, last_fn, last_ret);
-      failed:
-	spectrum_cs_release((u_long) link);
+ cs_failed:
+	spectrum_cs_error(link->handle, last_fn, last_ret);
 
-	TRACE_EXIT("orinoco");
+ failed:
+	spectrum_cs_release((u_long) link);
 }				/* spectrum_cs_config */
 
 /*
@@ -1101,20 +1013,15 @@
 spectrum_cs_release(u_long arg)
 {
 	dev_link_t *link = (dev_link_t *) arg;
-	struct orinoco_private *priv = link->priv;
-
-	/*
-	   If the device is currently in use, we won't release until it
-	   is actually closed, because until then, we can't be sure that
-	   no one will try to access the device or its data structures.
-	 */
-	if (link->open) {
-		link->state |= DEV_STALE_CONFIG;
-		return;
-	}
-
-	/* Unregister proc entry */
-	orinoco_proc_dev_cleanup(priv->ndev);
+	struct net_device *dev = link->priv;
+	struct orinoco_private *priv = dev->priv;
+	unsigned long flags;
+
+	/* We're committed to taking the device away now, so mark the
+	 * hardware as unavailable */
+	spin_lock_irqsave(&priv->lock, flags);
+	priv->hw_unavailable++;
+	spin_unlock_irqrestore(&priv->lock, flags);
 
 	/* Don't bother checking to see if these succeed or not */
 	CardServices(ReleaseConfiguration, link->handle);
@@ -1131,95 +1038,119 @@
  */
 static int
 spectrum_cs_event(event_t event, int priority,
-		  event_callback_args_t * args)
+		       event_callback_args_t * args)
 {
 	dev_link_t *link = args->client_data;
-	struct orinoco_private *priv =
-	    (struct orinoco_private *) link->priv;
-	struct net_device *dev = priv->ndev;
-	int err;
+	struct net_device *dev = link->priv;
+	struct orinoco_private *priv = dev->priv;
+	int err = 0;
+	unsigned long flags;
 
 	switch (event) {
 	case CS_EVENT_CARD_REMOVAL:
 		link->state &= ~DEV_PRESENT;
 		if (link->state & DEV_CONFIG) {
-			netif_stop_queue(dev);
+			orinoco_lock(priv, &flags);
+
 			netif_device_detach(dev);
-			mod_timer(&link->release, jiffies + HZ / 20);
+			priv->hw_unavailable++;
+
+			orinoco_unlock(priv, &flags);
 		}
 		break;
+
 	case CS_EVENT_CARD_INSERTION:
 		link->state |= DEV_PRESENT | DEV_CONFIG_PENDING;
 		spectrum_cs_config(link);
 		break;
-	case CS_EVENT_PM_SUSPEND:
 
+	case CS_EVENT_PM_SUSPEND:
 		link->state |= DEV_SUSPEND;
 		/* Fall through... */
 	case CS_EVENT_RESET_PHYSICAL:
-		orinoco_shutdown(priv);
 		/* Mark the device as stopped, to block IO until later */
-
 		if (link->state & DEV_CONFIG) {
-			if (link->open) {
-				err = orinoco_commence_reset(priv);
-				if (err) {
-					printk
-					    ("%s: signalled during reset?\n",
-					     dev->name);
-					return err;
-				}
-				netif_device_detach(dev);
-			}
-			CardServices(ReleaseConfiguration, link->handle);
+			spin_lock_irqsave(&priv->lock, flags);
+
+			err = __orinoco_down(dev);
+			if (err)
+				printk(KERN_WARNING "%s: %s: Error %d downing interface\n",
+				       dev->name,
+				       event == CS_EVENT_PM_SUSPEND ? "SUSPEND" : "RESET_PHYSICAL",
+				       err);
+
+			netif_device_detach(dev);
+			priv->hw_unavailable++;
+
+			spin_unlock_irqrestore(&priv->lock, flags);
 		}
+
+		CardServices(ReleaseConfiguration, link->handle);
 		break;
+
 	case CS_EVENT_PM_RESUME:
 		link->state &= ~DEV_SUSPEND;
 		/* Fall through... */
 	case CS_EVENT_CARD_RESET:
 		if (link->state & DEV_CONFIG) {
+			/* FIXME: should we double check that this is
+			 * the same card as we had before */
 			CardServices(RequestConfiguration, link->handle,
 				     &link->conf);
 
-			/* The firmware needs to be reloaded */
-			if (spectrum_dl_firmware(&priv->hw, link) != 0) {
+			/* Download firmware if needed */
+			err = spectrum_cs_hard_reset(priv);
+			if (err) {
 				printk(KERN_ERR
-				       "%s: firmware download failed\n",
-				       dev->name);
+				       "spectrum_cs: firmware download failed\n");
+				break;
 			}
 
-			if (link->open) {
-				netif_device_attach(dev);
-				err = __orinoco_startup(priv);
-				if (err) {
-					printk(KERN_ERR
-					       "%s: Error resetting device on PCMCIA event\n",
-					       dev->name);
-					spectrum_cs_stop(dev);
-					return err;
-				} else {
-					netif_start_queue(dev);
-				}
+			err = orinoco_reinit_firmware(dev);
+			if (err) {
+				printk(KERN_ERR "%s: Error %d re-initializing firmware\n",
+				       dev->name, err);
+				break;
 			}
+
+			spin_lock_irqsave(&priv->lock, flags);
+
+			netif_device_attach(dev);
+			priv->hw_unavailable--;
+
+			if (priv->open && ! priv->hw_unavailable) {
+				err = __orinoco_up(dev);
+				if (err)
+					printk(KERN_ERR "%s: Error %d restarting card\n",
+					       dev->name, err);
+				}
+
+			spin_unlock_irqrestore(&priv->lock, flags);
 		}
-		/*
-		   In a normal driver, additional code may go here to restore
-		   the device state and restart IO. 
-		 */
 		break;
 	}
 
-	return 0;
+	return err;
 }				/* spectrum_cs_event */
 
-static int __init
-init_spectrum_cs(void)
+/********************************************************************/
+/* Module initialization					    */
+/********************************************************************/
+
+/* Can't be declared "const" or the whole __initdata section will
+ * become const */
+static char version[] __initdata =
+    "spectrum_cs.c 0.4.2 (Pavel Roskin <proski@gnu.org> and others)";
+
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,5,70)
+
+/* Icky old style pcmcia registration */
+
+static int __init orinoco_pcmcia_register(void)
 {
 	servinfo_t serv;
 
-	printk(KERN_DEBUG "%s\n", version);
-
 	CardServices(GetCardServicesInfo, &serv);
 	if (serv.Revision != CS_RELEASE_CODE) {
 		printk(KERN_NOTICE "spectrum_cs: Card Services release "
@@ -1227,19 +1158,49 @@
 		return -1;
 	}
 
-	register_pccard_driver(&dev_info, &spectrum_cs_attach,
-			       &spectrum_cs_detach);
-
+	register_pccard_driver(&dev_info,
+			       spectrum_cs_attach, spectrum_cs_detach);
 	return 0;
 }
 
+
+static void __exit orinoco_pcmcia_unregister(void)
+{
+	unregister_pccard_driver(&dev_info);
+}
+
+#else
+
+static struct pcmcia_driver spectrum_cs_driver = {
+	.owner		= THIS_MODULE,
+	.drv		= {
+		.name	= "spectrum_cs",
+	},
+	.attach		= spectrum_cs_attach,
+	.detach		= spectrum_cs_detach,
+};
+
+#define orinoco_pcmcia_register() pcmcia_register_driver(&spectrum_cs_driver);
+#define orinoco_pcmcia_unregister() pcmcia_unregister_driver(&spectrum_cs_driver);
+
+#endif
+
+static int __init
+init_spectrum_cs(void)
+{
+	printk(KERN_DEBUG "%s\n", version);
+
+	return orinoco_pcmcia_register();
+}
+
 static void __exit
 exit_spectrum_cs(void)
 {
-	unregister_pccard_driver(&dev_info);
+	orinoco_pcmcia_unregister();
 
+	if (dev_list)
+		DEBUG(0, "spectrum_cs: Removing leftover devices.\n");
 	while (dev_list != NULL) {
-		del_timer(&dev_list->release);
 		if (dev_list->state & DEV_CONFIG)
 			spectrum_cs_release((u_long) dev_list);
 		spectrum_cs_detach(dev_list);
@@ -1248,3 +1209,4 @@
 
 module_init(init_spectrum_cs);
 module_exit(exit_spectrum_cs);
+
diff -Nur linux-orig/drivers/net/wireless/spectrum_fw.h linux/drivers/net/wireless/spectrum_fw.h
--- linux-orig/drivers/net/wireless/spectrum_fw.h	2004-02-16 09:32:01.000000000 +0300
+++ linux/drivers/net/wireless/spectrum_fw.h	2003-07-09 20:24:37.000000000 +0400
@@ -1,9 +1,9 @@
 unsigned char primsym[] = {
 0x46,0x49,0x4c,0x45,0x3a,0x20,0x45,0x50,0x52,0x49,0x4d,0x53,0x59,0x4d,0x2c,0x54,
-0x33,0x2e,0x31,0x30,0x2d,0x30,0x36,0x2c,0x46,0x33,0x2e,0x31,0x30,0x2d,0x30,0x36,
-0x2c,0x30,0x32,0x2f,0x32,0x31,0x2f,0x32,0x30,0x30,0x32,0x20,0x50,0x52,0x49,0x4d,
+0x33,0x2e,0x37,0x30,0x2d,0x32,0x37,0x2c,0x46,0x33,0x2e,0x37,0x30,0x2d,0x32,0x37,
+0x2c,0x31,0x32,0x2f,0x31,0x31,0x2f,0x32,0x30,0x30,0x32,0x20,0x50,0x52,0x49,0x4d,
 0x41,0x52,0x59,0x20,0x33,0x20,0x37,0x32,0x20,0x33,0x36,0x20,0x34,0x30,0x0a,0x1a,
-0xfe,0x17,0x7e,0x00,0x02,0x00,0xff,0xff,0x00,0x00,0x7e,0x00,0xfe,0x0f,0x00,0x64,
+0xfe,0x17,0x7e,0x00,0x02,0x00,0xff,0xff,0x00,0x00,0x7e,0x00,0xfc,0x0f,0x00,0x64,
 0x90,0xff,0x00,0xf7,0x20,0xfe,0x00,0x64,0x91,0xff,0x01,0xf7,0x20,0xfe,0x00,0x64,
 0x92,0xff,0x02,0xf7,0x20,0xfe,0x00,0x64,0x93,0xff,0x03,0xf7,0x20,0xfe,0x00,0x64,
 0x94,0xff,0x04,0xf7,0x20,0xfe,0x00,0x64,0x95,0xff,0x05,0xf7,0x20,0xfe,0x00,0x64,
@@ -30,9 +30,9 @@
 0x07,0x60,0x80,0xe7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
 0xff,0xff,0x80,0xe7,0xff,0xff,0xff,0xff,0x06,0xe3,0xff,0xff,0x98,0xff,0x30,0x44,
 0x00,0xa8,0xff,0xff,0x09,0x02,0x08,0x60,0x00,0x64,0xc8,0x81,0x3e,0x63,0x00,0x64,
-0x59,0xdb,0xfe,0x1f,0x04,0x60,0x41,0x76,0x00,0x60,0x3e,0x63,0xff,0x60,0xfe,0x61,
+0x59,0xdb,0xfe,0x1f,0x04,0x60,0x41,0x76,0x00,0x60,0x3c,0x63,0xff,0x60,0xfe,0x61,
 0xfc,0x60,0x00,0x66,0x09,0x60,0xc2,0x64,0x58,0xd0,0x59,0xd9,0xfd,0x1f,0x05,0x60,
-0x08,0x63,0x08,0x60,0xfe,0x61,0xfc,0x60,0x00,0x66,0x0a,0x60,0x02,0x64,0x58,0xd0,
+0x08,0x63,0x08,0x60,0xfe,0x61,0xfc,0x60,0x00,0x66,0x0a,0x60,0x00,0x64,0x58,0xd0,
 0x59,0xd9,0xfd,0x1f,0x58,0x4f,0x2e,0x00,0x58,0x4f,0x14,0x00,0x30,0x44,0x00,0xa8,
 0x00,0x64,0x03,0x03,0x0f,0xfb,0xd4,0xfe,0x00,0x00,0x63,0xff,0xff,0xff,0x65,0xff,
 0xff,0xff,0x58,0x4f,0x41,0x00,0x01,0x60,0x9c,0x78,0xff,0xff,0x98,0xff,0x00,0xe1,
@@ -40,7 +40,7 @@
 0x04,0x61,0x60,0x46,0xdc,0x84,0x00,0xfa,0xcd,0x81,0x01,0xfc,0xfa,0x02,0x00,0x64,
 0x00,0xfa,0x80,0x60,0x00,0x65,0xb7,0x83,0x01,0xfc,0x15,0xf5,0x3c,0x63,0x01,0xfc,
 0x2f,0x58,0xff,0xff,0x00,0x60,0x7e,0x63,0xfe,0x60,0x00,0x65,0x45,0x4b,0xdc,0x60,
-0xfe,0x61,0xfc,0x60,0x00,0x65,0x0f,0x60,0x0c,0x64,0x65,0x46,0x58,0xd0,0x2b,0x46,
+0xfe,0x61,0xfc,0x60,0x00,0x65,0x0f,0x60,0x0a,0x64,0x65,0x46,0x58,0xd0,0x2b,0x46,
 0x59,0xd8,0xfb,0x1f,0x7e,0x63,0x40,0xa1,0x40,0xa1,0x65,0x46,0x58,0xd0,0x2b,0x46,
 0x59,0xd8,0xfb,0x1f,0x7e,0x63,0x40,0xa1,0x40,0xa1,0x65,0x46,0x58,0xd0,0x2b,0x46,
 0x59,0xd8,0xfb,0x1f,0x2f,0x58,0xff,0xff,0x04,0xee,0x0d,0x60,0x26,0x63,0x0e,0x60,
@@ -90,10 +90,10 @@
 0xff,0xff,0x07,0x04,0x00,0xf2,0x04,0x63,0x00,0xa8,0x60,0x46,0xf5,0x02,0x42,0xfe,
 0x0e,0x00,0x61,0x44,0xc5,0x81,0x63,0x45,0xc5,0x81,0x60,0x45,0x00,0x64,0xd4,0x84,
 0x01,0xf2,0xf0,0x85,0xf0,0x80,0x65,0x44,0xf8,0x85,0xff,0xff,0x02,0xfe,0x2f,0x58,
-0xff,0xff,0x25,0x44,0x1a,0xf1,0x1b,0xf1,0xd0,0x80,0xd0,0x80,0x0e,0x04,0x08,0x06,
-0x1c,0xf1,0x1d,0xf1,0xd0,0x80,0xd0,0x80,0x08,0x04,0x02,0x06,0x48,0xfe,0x05,0x00,
+0xff,0xff,0x25,0x44,0x19,0xf1,0x1a,0xf1,0xd0,0x80,0xd0,0x80,0x0e,0x04,0x08,0x06,
+0x1b,0xf1,0x1c,0xf1,0xd0,0x80,0xd0,0x80,0x08,0x04,0x02,0x06,0x48,0xfe,0x05,0x00,
 0x25,0x46,0x01,0xf0,0x03,0x67,0xa0,0x85,0x94,0x80,0x2f,0x58,0xff,0xff,0x84,0xe2,
-0x04,0x60,0x00,0x71,0x8d,0xe2,0x1e,0xf3,0x14,0xf3,0x00,0xbd,0xcc,0x83,0x08,0x03,
+0x04,0x60,0x00,0x71,0x8d,0xe2,0x1d,0xf3,0x14,0xf3,0x00,0xbd,0xcc,0x83,0x08,0x03,
 0x14,0xfd,0x06,0x02,0x65,0x44,0x14,0xfb,0x89,0xff,0x80,0x60,0x00,0x75,0x88,0xff,
 0xa1,0xff,0xff,0xff,0xbc,0x3f,0x7f,0x67,0x01,0x61,0x23,0x58,0xff,0xff,0x0f,0xf3,
 0x10,0xf1,0x40,0x44,0x44,0x45,0x11,0xf1,0x12,0xf1,0x44,0x46,0x44,0x47,0x3f,0xb4,
@@ -163,16 +163,15 @@
 0xff,0xff,0xff,0x00,0xff,0x00,0xff,0x00,0x74,0x01,0xff,0x00,0x85,0x01,0xff,0x00,
 0x18,0x02,0xe8,0x01,0xd9,0x01,0xa7,0x01,0xd4,0x01,0xdc,0x01,0xc8,0x02,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,
-0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,
-0x00,0x00,0x13,0x03,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,
+0x13,0x03,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,
 0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,
 0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,
 0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,
-0xdc,0x02,0xdc,0x02,0x63,0x03,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,
+0xdc,0x02,0x63,0x03,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,
 0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,
-0xdc,0x02,0x37,0x04,0xd5,0x03,0xdc,0x02,0xda,0x03,0xdc,0x02,0xdc,0x02,0xdc,0x02,
+0x37,0x04,0xd5,0x03,0xdc,0x02,0xda,0x03,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,
 0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,0xdc,0x02,
-0xdc,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
@@ -180,122 +179,122 @@
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-0x00,0x00,0x00,0x00,0x7e,0x00,0x08,0x11,0x00,0xf8,0x7f,0x00,0xfe,0x07,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x7e,0x00,0x06,0x11,0x00,0xf8,0x7f,0x00,0xfe,0x07,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,
-0xff,0xff,0xff,0xff,0x00,0x00,0xc1,0xc0,0x81,0xc1,0x40,0x01,0x01,0xc3,0xc0,0x03,
-0x80,0x02,0x41,0xc2,0x01,0xc6,0xc0,0x06,0x80,0x07,0x41,0xc7,0x00,0x05,0xc1,0xc5,
-0x81,0xc4,0x40,0x04,0x01,0xcc,0xc0,0x0c,0x80,0x0d,0x41,0xcd,0x00,0x0f,0xc1,0xcf,
-0x81,0xce,0x40,0x0e,0x00,0x0a,0xc1,0xca,0x81,0xcb,0x40,0x0b,0x01,0xc9,0xc0,0x09,
-0x80,0x08,0x41,0xc8,0x01,0xd8,0xc0,0x18,0x80,0x19,0x41,0xd9,0x00,0x1b,0xc1,0xdb,
-0x81,0xda,0x40,0x1a,0x00,0x1e,0xc1,0xde,0x81,0xdf,0x40,0x1f,0x01,0xdd,0xc0,0x1d,
-0x80,0x1c,0x41,0xdc,0x00,0x14,0xc1,0xd4,0x81,0xd5,0x40,0x15,0x01,0xd7,0xc0,0x17,
-0x80,0x16,0x41,0xd6,0x01,0xd2,0xc0,0x12,0x80,0x13,0x41,0xd3,0x00,0x11,0xc1,0xd1,
-0x81,0xd0,0x40,0x10,0x01,0xf0,0xc0,0x30,0x80,0x31,0x41,0xf1,0x00,0x33,0xc1,0xf3,
-0x81,0xf2,0x40,0x32,0x00,0x36,0xc1,0xf6,0x81,0xf7,0x40,0x37,0x01,0xf5,0xc0,0x35,
-0x80,0x34,0x41,0xf4,0x00,0x3c,0xc1,0xfc,0x81,0xfd,0x40,0x3d,0x01,0xff,0xc0,0x3f,
-0x80,0x3e,0x41,0xfe,0x01,0xfa,0xc0,0x3a,0x80,0x3b,0x41,0xfb,0x00,0x39,0xc1,0xf9,
-0x81,0xf8,0x40,0x38,0x00,0x28,0xc1,0xe8,0x81,0xe9,0x40,0x29,0x01,0xeb,0xc0,0x2b,
-0x80,0x2a,0x41,0xea,0x01,0xee,0xc0,0x2e,0x80,0x2f,0x41,0xef,0x00,0x2d,0xc1,0xed,
-0x81,0xec,0x40,0x2c,0x01,0xe4,0xc0,0x24,0x80,0x25,0x41,0xe5,0x00,0x27,0xc1,0xe7,
-0x81,0xe6,0x40,0x26,0x00,0x22,0xc1,0xe2,0x81,0xe3,0x40,0x23,0x01,0xe1,0xc0,0x21,
-0x80,0x20,0x41,0xe0,0x01,0xa0,0xc0,0x60,0x80,0x61,0x41,0xa1,0x00,0x63,0xc1,0xa3,
-0x81,0xa2,0x40,0x62,0x00,0x66,0xc1,0xa6,0x81,0xa7,0x40,0x67,0x01,0xa5,0xc0,0x65,
-0x80,0x64,0x41,0xa4,0x00,0x6c,0xc1,0xac,0x81,0xad,0x40,0x6d,0x01,0xaf,0xc0,0x6f,
-0x80,0x6e,0x41,0xae,0x01,0xaa,0xc0,0x6a,0x80,0x6b,0x41,0xab,0x00,0x69,0xc1,0xa9,
-0x81,0xa8,0x40,0x68,0x00,0x78,0xc1,0xb8,0x81,0xb9,0x40,0x79,0x01,0xbb,0xc0,0x7b,
-0x80,0x7a,0x41,0xba,0x01,0xbe,0xc0,0x7e,0x80,0x7f,0x41,0xbf,0x00,0x7d,0xc1,0xbd,
-0x81,0xbc,0x40,0x7c,0x01,0xb4,0xc0,0x74,0x80,0x75,0x41,0xb5,0x00,0x77,0xc1,0xb7,
-0x81,0xb6,0x40,0x76,0x00,0x72,0xc1,0xb2,0x81,0xb3,0x40,0x73,0x01,0xb1,0xc0,0x71,
-0x80,0x70,0x41,0xb0,0x00,0x50,0xc1,0x90,0x81,0x91,0x40,0x51,0x01,0x93,0xc0,0x53,
-0x80,0x52,0x41,0x92,0x01,0x96,0xc0,0x56,0x80,0x57,0x41,0x97,0x00,0x55,0xc1,0x95,
-0x81,0x94,0x40,0x54,0x01,0x9c,0xc0,0x5c,0x80,0x5d,0x41,0x9d,0x00,0x5f,0xc1,0x9f,
-0x81,0x9e,0x40,0x5e,0x00,0x5a,0xc1,0x9a,0x81,0x9b,0x40,0x5b,0x01,0x99,0xc0,0x59,
-0x80,0x58,0x41,0x98,0x01,0x88,0xc0,0x48,0x80,0x49,0x41,0x89,0x00,0x4b,0xc1,0x8b,
-0x81,0x8a,0x40,0x4a,0x00,0x4e,0xc1,0x8e,0x81,0x8f,0x40,0x4f,0x01,0x8d,0xc0,0x4d,
-0x80,0x4c,0x41,0x8c,0x00,0x44,0xc1,0x84,0x81,0x85,0x40,0x45,0x01,0x87,0xc0,0x47,
-0x80,0x46,0x41,0x86,0x01,0x82,0xc0,0x42,0x80,0x43,0x41,0x83,0x00,0x41,0xc1,0x81,
-0x81,0x80,0x40,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,
+0xff,0xff,0x00,0x00,0xc1,0xc0,0x81,0xc1,0x40,0x01,0x01,0xc3,0xc0,0x03,0x80,0x02,
+0x41,0xc2,0x01,0xc6,0xc0,0x06,0x80,0x07,0x41,0xc7,0x00,0x05,0xc1,0xc5,0x81,0xc4,
+0x40,0x04,0x01,0xcc,0xc0,0x0c,0x80,0x0d,0x41,0xcd,0x00,0x0f,0xc1,0xcf,0x81,0xce,
+0x40,0x0e,0x00,0x0a,0xc1,0xca,0x81,0xcb,0x40,0x0b,0x01,0xc9,0xc0,0x09,0x80,0x08,
+0x41,0xc8,0x01,0xd8,0xc0,0x18,0x80,0x19,0x41,0xd9,0x00,0x1b,0xc1,0xdb,0x81,0xda,
+0x40,0x1a,0x00,0x1e,0xc1,0xde,0x81,0xdf,0x40,0x1f,0x01,0xdd,0xc0,0x1d,0x80,0x1c,
+0x41,0xdc,0x00,0x14,0xc1,0xd4,0x81,0xd5,0x40,0x15,0x01,0xd7,0xc0,0x17,0x80,0x16,
+0x41,0xd6,0x01,0xd2,0xc0,0x12,0x80,0x13,0x41,0xd3,0x00,0x11,0xc1,0xd1,0x81,0xd0,
+0x40,0x10,0x01,0xf0,0xc0,0x30,0x80,0x31,0x41,0xf1,0x00,0x33,0xc1,0xf3,0x81,0xf2,
+0x40,0x32,0x00,0x36,0xc1,0xf6,0x81,0xf7,0x40,0x37,0x01,0xf5,0xc0,0x35,0x80,0x34,
+0x41,0xf4,0x00,0x3c,0xc1,0xfc,0x81,0xfd,0x40,0x3d,0x01,0xff,0xc0,0x3f,0x80,0x3e,
+0x41,0xfe,0x01,0xfa,0xc0,0x3a,0x80,0x3b,0x41,0xfb,0x00,0x39,0xc1,0xf9,0x81,0xf8,
+0x40,0x38,0x00,0x28,0xc1,0xe8,0x81,0xe9,0x40,0x29,0x01,0xeb,0xc0,0x2b,0x80,0x2a,
+0x41,0xea,0x01,0xee,0xc0,0x2e,0x80,0x2f,0x41,0xef,0x00,0x2d,0xc1,0xed,0x81,0xec,
+0x40,0x2c,0x01,0xe4,0xc0,0x24,0x80,0x25,0x41,0xe5,0x00,0x27,0xc1,0xe7,0x81,0xe6,
+0x40,0x26,0x00,0x22,0xc1,0xe2,0x81,0xe3,0x40,0x23,0x01,0xe1,0xc0,0x21,0x80,0x20,
+0x41,0xe0,0x01,0xa0,0xc0,0x60,0x80,0x61,0x41,0xa1,0x00,0x63,0xc1,0xa3,0x81,0xa2,
+0x40,0x62,0x00,0x66,0xc1,0xa6,0x81,0xa7,0x40,0x67,0x01,0xa5,0xc0,0x65,0x80,0x64,
+0x41,0xa4,0x00,0x6c,0xc1,0xac,0x81,0xad,0x40,0x6d,0x01,0xaf,0xc0,0x6f,0x80,0x6e,
+0x41,0xae,0x01,0xaa,0xc0,0x6a,0x80,0x6b,0x41,0xab,0x00,0x69,0xc1,0xa9,0x81,0xa8,
+0x40,0x68,0x00,0x78,0xc1,0xb8,0x81,0xb9,0x40,0x79,0x01,0xbb,0xc0,0x7b,0x80,0x7a,
+0x41,0xba,0x01,0xbe,0xc0,0x7e,0x80,0x7f,0x41,0xbf,0x00,0x7d,0xc1,0xbd,0x81,0xbc,
+0x40,0x7c,0x01,0xb4,0xc0,0x74,0x80,0x75,0x41,0xb5,0x00,0x77,0xc1,0xb7,0x81,0xb6,
+0x40,0x76,0x00,0x72,0xc1,0xb2,0x81,0xb3,0x40,0x73,0x01,0xb1,0xc0,0x71,0x80,0x70,
+0x41,0xb0,0x00,0x50,0xc1,0x90,0x81,0x91,0x40,0x51,0x01,0x93,0xc0,0x53,0x80,0x52,
+0x41,0x92,0x01,0x96,0xc0,0x56,0x80,0x57,0x41,0x97,0x00,0x55,0xc1,0x95,0x81,0x94,
+0x40,0x54,0x01,0x9c,0xc0,0x5c,0x80,0x5d,0x41,0x9d,0x00,0x5f,0xc1,0x9f,0x81,0x9e,
+0x40,0x5e,0x00,0x5a,0xc1,0x9a,0x81,0x9b,0x40,0x5b,0x01,0x99,0xc0,0x59,0x80,0x58,
+0x41,0x98,0x01,0x88,0xc0,0x48,0x80,0x49,0x41,0x89,0x00,0x4b,0xc1,0x8b,0x81,0x8a,
+0x40,0x4a,0x00,0x4e,0xc1,0x8e,0x81,0x8f,0x40,0x4f,0x01,0x8d,0xc0,0x4d,0x80,0x4c,
+0x41,0x8c,0x00,0x44,0xc1,0x84,0x81,0x85,0x40,0x45,0x01,0x87,0xc0,0x47,0x80,0x46,
+0x41,0x86,0x01,0x82,0xc0,0x42,0x80,0x43,0x41,0x83,0x00,0x41,0xc1,0x81,0x81,0x80,
+0x40,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-0x63,0x03,0xff,0xff,0xbc,0x03,0x8b,0x03,0xdc,0x10,0x0e,0x00,0xfe,0xff,0xbc,0x03,
-0x8b,0x03,0xda,0x10,0x02,0x00,0x00,0xfd,0xbc,0x03,0x8b,0x03,0x8e,0x10,0x02,0x00,
-0x01,0xfd,0xbc,0x03,0x8b,0x03,0x90,0x10,0x06,0x00,0x02,0xfd,0xbc,0x03,0x8b,0x03,
-0xaa,0x10,0x08,0x00,0x03,0xfd,0xbc,0x03,0x8b,0x03,0xb2,0x10,0x0a,0x00,0x04,0xfd,
-0xbc,0x03,0x8b,0x03,0xc6,0x10,0x0a,0x00,0x05,0xfd,0xbc,0x03,0x8b,0x03,0xea,0x10,
-0x0c,0x00,0x06,0xfd,0xbc,0x03,0x8b,0x03,0xf8,0x10,0x0c,0x00,0x0a,0xfd,0xbc,0x03,
-0x8b,0x03,0x96,0x10,0x0c,0x00,0x0b,0xfd,0xbc,0x03,0x8b,0x03,0xa2,0x10,0x08,0x00,
-0x0c,0xfd,0xbc,0x03,0x8b,0x03,0xbc,0x10,0x0a,0x00,0x0d,0xfd,0xbc,0x03,0x8b,0x03,
-0xd0,0x10,0x0a,0x00,0xe0,0xfc,0x8f,0x03,0xa5,0x03,0x3c,0x00,0x02,0x00,0x09,0x00,
-0x06,0x00,0x74,0x01,0x0e,0x00,0x18,0x02,0x10,0x00,0xe8,0x01,0x12,0x00,0xd9,0x01,
-0x14,0x00,0xa7,0x01,0x16,0x00,0xd4,0x01,0x18,0x00,0xdc,0x01,0x1a,0x00,0xc8,0x02,
-0x0a,0x00,0x85,0x01,0x00,0x01,0x80,0x00,0x00,0x02,0x01,0x04,0x38,0x06,0x80,0x08,
-0x03,0x0a,0x04,0x0c,0x04,0x0e,0x00,0x10,0x00,0x12,0xc8,0x14,0x13,0x16,0x00,0x18,
-0x00,0x1a,0x00,0x1c,0x5c,0x1e,0xc1,0x20,0x1e,0x22,0x54,0x24,0x07,0x26,0x6a,0x28,
-0x12,0x2a,0x00,0x2c,0x00,0x2e,0x1c,0x30,0x20,0x32,0x82,0x34,0x08,0x36,0x7a,0x38,
-0xca,0x3a,0x24,0x3c,0xd6,0x3e,0x00,0x40,0x00,0x42,0x00,0x44,0x7f,0x46,0x8b,0x48,
-0x0f,0x4a,0x06,0x4c,0x0a,0x4e,0x0f,0x50,0x20,0x52,0x20,0x54,0x10,0x56,0x10,0x58,
-0x20,0x5a,0xee,0x5c,0x1a,0x5e,0x26,0x60,0x5b,0x62,0x00,0x04,0x00,0x2c,0x0c,0x2e,
-0x01,0x2c,0x10,0x2e,0x02,0x2c,0x14,0x2e,0x03,0x2c,0x18,0x2e,0x04,0x2c,0x1c,0x2e,
-0x05,0x2c,0x20,0x2e,0x06,0x2c,0x24,0x2e,0x07,0x2c,0x28,0x2e,0x08,0x2c,0x2e,0x2e,
-0x09,0x2c,0x34,0x2e,0x0a,0x2c,0x38,0x2e,0x0b,0x2c,0x3c,0x2e,0x0c,0x2c,0x3f,0x2e,
-0x0d,0x2c,0x43,0x2e,0x0e,0x2c,0x46,0x2e,0x0f,0x2c,0x48,0x2e,0x10,0x2c,0x4b,0x2e,
-0x11,0x2c,0x50,0x2e,0x12,0x2c,0x55,0x2e,0x13,0x2c,0x5a,0x2e,0x14,0x2c,0x63,0x2e,
-0x15,0x2c,0x6d,0x2e,0x16,0x2c,0x76,0x2e,0x17,0x2c,0x7f,0x2e,0x18,0x2c,0x7f,0x2e,
-0x19,0x2c,0x7f,0x2e,0x1a,0x2c,0x7f,0x2e,0x1b,0x2c,0x7f,0x2e,0x1c,0x2c,0x7f,0x2e,
-0x1d,0x2c,0x7f,0x2e,0x1e,0x2c,0x7f,0x2e,0x1f,0x2c,0x7f,0x2e,0xff,0xff,0x0e,0xf1,
-0x02,0x60,0x5f,0x64,0xc0,0x98,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0e,0xf1,
-0x02,0x60,0x2c,0x64,0xc0,0x98,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,
-0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,
-0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,
-0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x45,0xff,
-0x0e,0xf1,0x02,0x60,0x15,0x64,0xc0,0x98,0xff,0xff,0xff,0xff,0xff,0xff,0x07,0xf7,
-0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x47,0xff,
-0x0e,0xf1,0x02,0x60,0x15,0x64,0xc0,0x98,0xff,0xff,0xff,0xff,0xff,0xff,0x40,0xff,
-0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x41,0xff,
-0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x42,0xff,
-0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x43,0xff,
-0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x44,0xff,
-0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x45,0xff,
-0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0d,0xf7,
-0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0x0f,0x7e,0x00,
-0x0a,0x01,0xff,0xff,0x47,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0xff,0xff,0xff,0xff,0xb0,0xfe,0xb1,0xfe,0xb2,0xfe,0xb3,0xfe,0xff,0x00,0xff,0xff,
-0xff,0xff,0xff,0xff,0x0e,0xf1,0x03,0x60,0x0c,0x64,0xc0,0x98,0xff,0xff,0xff,0xff,
-0xff,0xff,0xff,0xff,0xb8,0xfe,0xb9,0xfe,0xba,0xfe,0xbb,0xfe,0xff,0x00,0xff,0xff,
-0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0xff,0xff,0x20,0x4e,0x60,0x00,0x00,0x00,0x00,0x40,0x39,0x39,0x53,0x41,0x30,0x31,
-0x30,0x30,0x30,0x30,0x30,0x30,0x00,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x17,0x00,
-0x02,0x00,0x02,0x00,0x01,0x00,0x00,0x00,0x03,0x00,0x01,0x00,0x01,0x00,0x01,0x00,
-0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x02,0x00,0x01,0x00,
-0x01,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,
-0x50,0x72,0x69,0x6d,0x61,0x72,0x79,0x20,0x46,0x27,0x73,0x20,0x20,0x00,0x46,0x33,
-0x2e,0x31,0x30,0x2d,0x30,0x36,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x32,0x2f,0x32,
-0x31,0x2f,0x32,0x30,0x30,0x32,0x00,0x00,0x00,0x00,0x01,0x80,0xff,0xff,0xff,0xff,
-0xdc,0x10,0x7e,0x00,0x0e,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x96,0x10,0x7e,0x00,
-0x0c,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x26,0x0e,0x7e,0x00,0x02,0x00,0x00,0x00,
-0x06,0x00,0x00,0x00,0xbc,0x10,0x7e,0x00,0x0a,0x00,0x00,0x00,0x07,0x00,0x00,0x00,
-0xd0,0x10,0x7e,0x00,0x0a,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0xa2,0x10,0x7e,0x00,
-0x08,0x00,0x00,0x00,0xfe,0x17,0x7e,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-0x00,0xf8,0x7f,0x00,0xfe,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7e,0x00,
-0x08,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x01,0x00,0x17,0x00,0x02,0x00,
-0x02,0x00,0x01,0x00,0x06,0x00,0x02,0x00,0x00,0x00,0x03,0x00,0x02,0x00,0x01,0x00,
-0x01,0x00,0x06,0x00,0x02,0x00,0x01,0x00,0x02,0x00,0x01,0x00,0x01,0x00,0x01,0x00,
-0x79,0x67,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0x03,
+0xff,0xff,0xbc,0x03,0x8b,0x03,0xda,0x10,0x0e,0x00,0xfe,0xff,0xbc,0x03,0x8b,0x03,
+0xd8,0x10,0x02,0x00,0x00,0xfd,0xbc,0x03,0x8b,0x03,0x8c,0x10,0x02,0x00,0x01,0xfd,
+0xbc,0x03,0x8b,0x03,0x8e,0x10,0x06,0x00,0x02,0xfd,0xbc,0x03,0x8b,0x03,0xa8,0x10,
+0x08,0x00,0x03,0xfd,0xbc,0x03,0x8b,0x03,0xb0,0x10,0x0a,0x00,0x04,0xfd,0xbc,0x03,
+0x8b,0x03,0xc4,0x10,0x0a,0x00,0x05,0xfd,0xbc,0x03,0x8b,0x03,0xe8,0x10,0x0c,0x00,
+0x06,0xfd,0xbc,0x03,0x8b,0x03,0xf6,0x10,0x0c,0x00,0x0a,0xfd,0xbc,0x03,0x8b,0x03,
+0x94,0x10,0x0c,0x00,0x0b,0xfd,0xbc,0x03,0x8b,0x03,0xa0,0x10,0x08,0x00,0x0c,0xfd,
+0xbc,0x03,0x8b,0x03,0xba,0x10,0x0a,0x00,0x0d,0xfd,0xbc,0x03,0x8b,0x03,0xce,0x10,
+0x0a,0x00,0xe0,0xfc,0x8f,0x03,0xa5,0x03,0x3a,0x00,0x02,0x00,0x09,0x00,0x06,0x00,
+0x74,0x01,0x0e,0x00,0x18,0x02,0x10,0x00,0xe8,0x01,0x12,0x00,0xd9,0x01,0x14,0x00,
+0xa7,0x01,0x16,0x00,0xd4,0x01,0x18,0x00,0xdc,0x01,0x1a,0x00,0xc8,0x02,0x0a,0x00,
+0x85,0x01,0x00,0x01,0x80,0x00,0x00,0x02,0x01,0x04,0x38,0x06,0x80,0x08,0x03,0x0a,
+0x04,0x0c,0x04,0x0e,0x00,0x10,0x00,0x12,0xc8,0x14,0x13,0x16,0x00,0x18,0x00,0x1a,
+0x00,0x1c,0x5c,0x1e,0xc1,0x20,0x1e,0x22,0x54,0x24,0x07,0x26,0x6a,0x28,0x12,0x2a,
+0x00,0x2c,0x00,0x2e,0x1c,0x30,0x20,0x32,0x82,0x34,0x08,0x36,0x7a,0x38,0xca,0x3a,
+0x24,0x3c,0xd6,0x3e,0x00,0x40,0x00,0x42,0x00,0x44,0x7f,0x46,0x8b,0x48,0x0f,0x4a,
+0x06,0x4c,0x0a,0x4e,0x0f,0x50,0x20,0x52,0x20,0x54,0x10,0x56,0x10,0x58,0x20,0x5a,
+0xee,0x5c,0x1a,0x5e,0x26,0x60,0x5b,0x62,0x00,0x04,0x00,0x2c,0x0c,0x2e,0x01,0x2c,
+0x10,0x2e,0x02,0x2c,0x14,0x2e,0x03,0x2c,0x18,0x2e,0x04,0x2c,0x1c,0x2e,0x05,0x2c,
+0x20,0x2e,0x06,0x2c,0x24,0x2e,0x07,0x2c,0x28,0x2e,0x08,0x2c,0x2e,0x2e,0x09,0x2c,
+0x34,0x2e,0x0a,0x2c,0x38,0x2e,0x0b,0x2c,0x3c,0x2e,0x0c,0x2c,0x3f,0x2e,0x0d,0x2c,
+0x43,0x2e,0x0e,0x2c,0x46,0x2e,0x0f,0x2c,0x48,0x2e,0x10,0x2c,0x4b,0x2e,0x11,0x2c,
+0x50,0x2e,0x12,0x2c,0x55,0x2e,0x13,0x2c,0x5a,0x2e,0x14,0x2c,0x63,0x2e,0x15,0x2c,
+0x6d,0x2e,0x16,0x2c,0x76,0x2e,0x17,0x2c,0x7f,0x2e,0x18,0x2c,0x7f,0x2e,0x19,0x2c,
+0x7f,0x2e,0x1a,0x2c,0x7f,0x2e,0x1b,0x2c,0x7f,0x2e,0x1c,0x2c,0x7f,0x2e,0x1d,0x2c,
+0x7f,0x2e,0x1e,0x2c,0x7f,0x2e,0x1f,0x2c,0x7f,0x2e,0xff,0xff,0x0e,0xf1,0x02,0x60,
+0x5f,0x64,0xc0,0x98,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0e,0xf1,0x02,0x60,
+0x2c,0x64,0xc0,0x98,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x45,0xff,0x0e,0xf1,
+0x02,0x60,0x15,0x64,0xc0,0x98,0xff,0xff,0xff,0xff,0xff,0xff,0x07,0xf7,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x47,0xff,0x0e,0xf1,
+0x02,0x60,0x15,0x64,0xc0,0x98,0xff,0xff,0xff,0xff,0xff,0xff,0x40,0xff,0xff,0x00,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x41,0xff,0xff,0x00,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x42,0xff,0xff,0x00,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x43,0xff,0xff,0x00,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x44,0xff,0xff,0x00,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x45,0xff,0xff,0x00,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0d,0xf7,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x0f,0x7e,0x00,0x0a,0x01,
+0xff,0xff,0x47,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xb0,0xfe,0xb1,0xfe,0xb2,0xfe,0xb3,0xfe,0xff,0x00,0xff,0xff,0xff,0xff,
+0xff,0xff,0x0e,0xf1,0x03,0x60,0x0c,0x64,0xc0,0x98,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xb8,0xfe,0xb9,0xfe,0xba,0xfe,0xbb,0xfe,0xff,0x00,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0x20,0x4e,0x60,0x00,0x00,0x00,0x00,0x40,0x39,0x39,0x53,0x41,0x30,0x31,0x30,0x30,
+0x30,0x30,0x30,0x30,0x00,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x17,0x00,0x02,0x00,
+0x02,0x00,0x01,0x00,0x00,0x00,0x03,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x00,0x00,
+0x01,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x02,0x00,0x01,0x00,0x01,0x00,
+0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x50,0x72,
+0x69,0x6d,0x61,0x72,0x79,0x20,0x46,0x27,0x73,0x20,0x20,0x00,0x46,0x33,0x2e,0x37,
+0x30,0x2d,0x32,0x37,0x00,0x00,0x00,0x00,0x00,0x00,0x31,0x32,0x2f,0x31,0x31,0x2f,
+0x32,0x30,0x30,0x32,0x00,0x00,0x00,0x00,0x01,0x80,0xff,0xff,0xff,0xff,0xda,0x10,
+0x7e,0x00,0x0e,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x94,0x10,0x7e,0x00,0x0c,0x00,
+0x00,0x00,0x05,0x00,0x00,0x00,0x24,0x0e,0x7e,0x00,0x02,0x00,0x00,0x00,0x06,0x00,
+0x00,0x00,0xba,0x10,0x7e,0x00,0x0a,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0xce,0x10,
+0x7e,0x00,0x0a,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0xa0,0x10,0x7e,0x00,0x08,0x00,
+0x00,0x00,0xfe,0x17,0x7e,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,
+0x7f,0x00,0xfe,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7e,0x00,0x06,0x11,
+0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x01,0x00,0x17,0x00,0x02,0x00,0x02,0x00,
+0x01,0x00,0x06,0x00,0x02,0x00,0x00,0x00,0x03,0x00,0x02,0x00,0x01,0x00,0x01,0x00,
+0x06,0x00,0x02,0x00,0x01,0x00,0x02,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x41,0x6d,
 };
 unsigned char secsym[] = {
 0x46,0x49,0x4c,0x45,0x3a,0x20,0x45,0x53,0x45,0x43,0x53,0x59,0x4d,0x2c,0x54,0x33,
-0x2e,0x31,0x30,0x2d,0x30,0x36,0x2c,0x46,0x33,0x2e,0x31,0x30,0x2d,0x30,0x36,0x2c,
-0x30,0x32,0x2f,0x32,0x31,0x2f,0x32,0x30,0x30,0x32,0x20,0x53,0x45,0x43,0x4f,0x4e,
-0x44,0x41,0x52,0x59,0x20,0x32,0x32,0x20,0x32,0x34,0x30,0x20,0x31,0x32,0x20,0x35,
-0x34,0x20,0x0a,0x1a,0xfe,0x17,0x7e,0x00,0xf2,0x0f,0xde,0xc0,0x92,0xd1,0x0a,0x60,
+0x2e,0x37,0x30,0x2d,0x32,0x37,0x2c,0x46,0x33,0x2e,0x37,0x30,0x2d,0x32,0x37,0x2c,
+0x31,0x32,0x2f,0x31,0x31,0x2f,0x32,0x30,0x30,0x32,0x20,0x53,0x45,0x43,0x4f,0x4e,
+0x44,0x41,0x52,0x59,0x20,0x32,0x33,0x20,0x32,0x34,0x30,0x20,0x31,0x32,0x20,0x35,
+0x34,0x20,0x0a,0x1a,0xfe,0x17,0x7e,0x00,0xf2,0x0f,0xde,0xc0,0x62,0xda,0x0a,0x60,
 0x04,0x63,0xa3,0xd3,0x06,0xa3,0xdc,0x80,0x00,0xa8,0x0b,0x03,0xfa,0x02,0xf6,0xa3,
-0x18,0x60,0x00,0x64,0xbd,0xdb,0x00,0x60,0x7e,0x64,0xbd,0xdb,0xd1,0x60,0x92,0x64,
+0x18,0x60,0x00,0x64,0xbd,0xdb,0x00,0x60,0x7e,0x64,0xbd,0xdb,0xda,0x60,0x62,0x64,
 0xa3,0xdb,0x0c,0x60,0x23,0x78,0xff,0xff,0x7f,0x60,0xc0,0x64,0x24,0x45,0xa4,0x80,
 0x7f,0x67,0x02,0x61,0x02,0x03,0x23,0x58,0xff,0xff,0x02,0x64,0x40,0x50,0x61,0xff,
 0xff,0xff,0x99,0xff,0x88,0xec,0x0e,0xe3,0x12,0xe3,0x1d,0xe3,0x22,0xe3,0x2a,0xe3,
@@ -310,623 +309,654 @@
 0xad,0x60,0x7d,0xe7,0x7d,0xe7,0x37,0x60,0x7d,0xe7,0x42,0x60,0x7d,0xe7,0x0e,0x60,
 0x7d,0xe7,0xc2,0x60,0x7d,0xe7,0x07,0x60,0x80,0xe7,0xff,0xff,0xff,0xff,0xff,0xff,
 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x80,0xe7,0xff,0xff,0xff,0xff,0x06,0xe3,
-0xff,0xff,0x98,0xff,0x74,0x60,0x4d,0x78,0xff,0xff,0x04,0xee,0xff,0xff,0xff,0xff,
+0xff,0xff,0x98,0xff,0x78,0x60,0xb5,0x78,0xff,0xff,0x04,0xee,0xff,0xff,0xff,0xff,
 0xff,0xff,0xff,0xff,0x00,0x69,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x01,0x16,
-0xfe,0x00,0x68,0x5e,0x00,0x7f,0x1f,0xfb,0x88,0xec,0x00,0xee,0xff,0xff,0xff,0xff,
+0xfe,0x00,0x68,0x5e,0x00,0x7f,0x1e,0xfb,0x88,0xec,0x00,0xee,0xff,0xff,0xff,0xff,
 0x04,0xee,0xff,0xff,0xff,0xff,0x00,0xee,0xb0,0xfe,0xb1,0xfe,0xb2,0xfe,0xb3,0xfe,
 0xb8,0xfe,0xb9,0xfe,0xba,0xfe,0x10,0x64,0x40,0x40,0x00,0x64,0x40,0x41,0x40,0x42,
-0x40,0x54,0x40,0x55,0x40,0x5e,0x40,0x5a,0x40,0x5b,0x1d,0x60,0xac,0x62,0xa2,0xd1,
-0x12,0x60,0x34,0x64,0xd0,0x80,0xff,0xff,0x20,0x02,0x1d,0x60,0xae,0x62,0xa2,0xd1,
-0x55,0x60,0xaa,0x64,0xd0,0x80,0xff,0xff,0x18,0x02,0x1e,0x60,0x70,0x62,0xa2,0xd3,
+0x40,0x54,0x40,0x55,0x40,0x5e,0x40,0x5a,0x40,0x5b,0x20,0x60,0x74,0x62,0xa2,0xd1,
+0x12,0x60,0x34,0x64,0xd0,0x80,0xff,0xff,0x20,0x02,0x20,0x60,0x76,0x62,0xa2,0xd1,
+0x55,0x60,0xaa,0x64,0xd0,0x80,0xff,0xff,0x18,0x02,0x21,0x60,0x38,0x62,0xa2,0xd3,
 0xff,0xff,0x01,0xa4,0xa2,0xdb,0x08,0x60,0x2e,0x64,0xa0,0xd3,0xff,0xff,0x00,0xa4,
-0xe1,0xa0,0x17,0x03,0xe0,0x85,0x15,0x07,0x1e,0x60,0x72,0x62,0xff,0xff,0xc6,0x82,
-0xa2,0xd3,0xff,0xff,0x01,0xa4,0xa2,0xdb,0x0c,0x00,0x1e,0x60,0x70,0x62,0x00,0x64,
-0xa2,0xdb,0x1e,0x60,0x72,0x63,0x00,0x64,0x20,0x61,0xbd,0xdb,0xff,0xa1,0xff,0xff,
-0xfc,0x02,0x01,0x60,0x8a,0x63,0x00,0x60,0x3e,0x61,0xfe,0x60,0x00,0x66,0x7f,0x60,
-0xfe,0x64,0x58,0xd0,0x59,0xd9,0xfd,0x1f,0x0f,0x60,0xee,0x63,0x0e,0x60,0x7e,0x61,
-0xfe,0x60,0x00,0x66,0x85,0x60,0x0a,0x64,0x58,0xd0,0x59,0xd9,0xfd,0x1f,0x4a,0x60,
-0xe4,0x63,0x1e,0x60,0xb0,0x61,0x00,0x64,0x59,0xdb,0xfe,0x1f,0x01,0x63,0x7f,0xfd,
+0xe1,0xa0,0x17,0x03,0xe0,0x85,0x15,0x07,0x21,0x60,0x3a,0x62,0xff,0xff,0xc6,0x82,
+0xa2,0xd3,0xff,0xff,0x01,0xa4,0xa2,0xdb,0x0c,0x00,0x21,0x60,0x38,0x62,0x00,0x64,
+0xa2,0xdb,0x21,0x60,0x3a,0x63,0x00,0x64,0x20,0x61,0xbd,0xdb,0xff,0xa1,0xff,0xff,
+0xfc,0x02,0x01,0x60,0x94,0x63,0x00,0x60,0x3c,0x61,0xfe,0x60,0x00,0x66,0x7f,0x60,
+0xfe,0x64,0x58,0xd0,0x59,0xd9,0xfd,0x1f,0x12,0x60,0xb6,0x63,0x0e,0x60,0x7e,0x61,
+0xfe,0x60,0x00,0x66,0x85,0x60,0x14,0x64,0x58,0xd0,0x59,0xd9,0xfd,0x1f,0x5f,0x60,
+0x78,0x63,0x21,0x60,0x78,0x61,0x00,0x64,0x59,0xdb,0xfe,0x1f,0x01,0x63,0x73,0xfd,
 0x00,0x60,0x2a,0x63,0x0c,0x60,0x40,0x61,0x0e,0x60,0x7e,0x64,0x58,0xd1,0x59,0xd9,
-0xfd,0x1f,0x16,0x60,0x16,0x61,0xa1,0xd3,0xff,0xff,0xe0,0x83,0xcb,0x83,0x59,0xd1,
+0xfd,0x1f,0x16,0x60,0x8e,0x61,0xa1,0xd3,0xff,0xff,0xe0,0x83,0xcb,0x83,0x59,0xd1,
 0x59,0xd3,0xa4,0xdb,0xfc,0x1f,0x00,0x60,0xfe,0x63,0xfe,0x60,0x00,0x65,0x45,0x4b,
-0xdb,0x60,0xfe,0x61,0xfe,0x60,0x00,0x65,0x81,0x60,0x8a,0x64,0x65,0x46,0x58,0xd0,
+0xdb,0x60,0xfe,0x61,0xfe,0x60,0x00,0x65,0x81,0x60,0x94,0x64,0x65,0x46,0x58,0xd0,
 0x2b,0x46,0x59,0xd8,0xfb,0x1f,0x01,0x60,0xbe,0x63,0xdd,0x60,0x4e,0x61,0x82,0x60,
-0xda,0x64,0x65,0x46,0x58,0xd0,0x2b,0x46,0x59,0xd8,0xfb,0x1f,0x00,0x60,0x0e,0x63,
-0xdf,0x60,0x1e,0x61,0x84,0x60,0xaa,0x64,0x65,0x46,0x58,0xd0,0x2b,0x46,0x59,0xd8,
-0xfb,0x1f,0x69,0x60,0x98,0x64,0x7f,0xa4,0xe0,0x87,0x00,0x7f,0x1a,0xfb,0x0d,0x60,
-0x22,0x62,0x08,0x60,0x00,0x65,0xa2,0xd3,0xff,0xff,0xd4,0x80,0xff,0xff,0x0b,0x06,
-0xe0,0x84,0xe0,0x84,0xe0,0x84,0xcc,0x84,0x1d,0xfb,0x65,0x44,0xe0,0x84,0xe0,0x84,
-0xe0,0x84,0x1c,0xfb,0x65,0x44,0x80,0xa4,0xe0,0x84,0xe0,0x84,0xe0,0x84,0xcc,0x84,
-0x1b,0xfb,0x1b,0xf1,0x1a,0xf3,0xff,0xff,0x9e,0xfb,0x7c,0x63,0x60,0x46,0x01,0xfc,
-0xdc,0x84,0xd0,0x80,0x00,0xfa,0xfa,0x04,0x9f,0xfb,0x1c,0xf3,0x60,0x46,0x00,0xa8,
-0x1d,0xf1,0x09,0x03,0x00,0xfa,0x01,0xfc,0x60,0x46,0x01,0xfc,0xdc,0x84,0xd0,0x80,
-0x00,0xfa,0xfa,0x04,0x9f,0xfb,0x00,0x64,0x00,0xfa,0x63,0x44,0x80,0x7f,0x01,0xfa,
-0x1b,0xf3,0x1a,0xf1,0xdc,0x84,0x50,0x93,0x33,0x44,0xfd,0xfb,0x00,0x60,0x7c,0x61,
-0x19,0x60,0x58,0x4f,0xaa,0x78,0xff,0xff,0x46,0x45,0x19,0x60,0x58,0x4f,0xcc,0x78,
-0xff,0xff,0x1e,0x60,0xbe,0x62,0x66,0x44,0xa2,0xdb,0x1f,0xf1,0x01,0x65,0x64,0x40,
-0x10,0x2a,0x07,0x00,0xeb,0x60,0x19,0xe2,0x01,0x60,0x76,0x63,0x20,0x64,0xc5,0xfb,
-0x07,0x00,0xeb,0x60,0x19,0xe2,0x00,0x65,0x01,0x60,0x18,0x63,0x14,0x64,0xc2,0xfb,
-0x17,0x60,0x52,0x62,0xa2,0xdd,0x17,0x60,0x9c,0x62,0x65,0x44,0xa2,0xdb,0x00,0x60,
-0x30,0xe2,0x00,0x60,0x50,0xe2,0x00,0x60,0x79,0xe2,0x01,0x60,0x90,0xe2,0x01,0x60,
-0xd0,0xe2,0x01,0x60,0xf9,0xe2,0xb4,0xf3,0xb5,0xf1,0x60,0x45,0xc4,0x84,0xc0,0x84,
-0x24,0xfb,0x01,0x60,0x30,0x64,0xc0,0x84,0x25,0xfb,0x60,0x45,0xa0,0xa4,0x29,0xfb,
-0x01,0x60,0x60,0x64,0xc0,0x84,0x2d,0xfb,0xa0,0xa4,0x31,0xfb,0x00,0x60,0xf8,0x64,
-0xc0,0x84,0x26,0xfb,0xa0,0xa4,0x2a,0xfb,0x01,0x60,0x10,0x64,0xc0,0x84,0x2e,0xfb,
-0xa0,0xa4,0x32,0xfb,0x00,0x60,0xd5,0x64,0xc0,0x84,0x27,0xfb,0xa0,0xa4,0x2b,0xfb,
-0x00,0x60,0xde,0x64,0xc0,0x84,0x2f,0xfb,0xa0,0xa4,0x33,0xfb,0x00,0x60,0xcb,0x64,
-0xc0,0x84,0x28,0xfb,0xa0,0xa4,0x2c,0xfb,0x00,0x60,0xcf,0x64,0xc0,0x84,0x30,0xfb,
-0xa0,0xa4,0x34,0xfb,0xb5,0xf3,0x24,0xf1,0xc4,0x84,0x35,0xfb,0xc0,0x84,0x37,0xfb,
-0x00,0x64,0x40,0x50,0x63,0xff,0x00,0x64,0x40,0x54,0x40,0x55,0x40,0x41,0x40,0x42,
-0x40,0x5e,0xd1,0xfe,0x82,0xff,0x92,0xff,0x98,0xff,0x00,0x64,0x40,0x52,0x17,0x60,
-0x58,0x65,0x1f,0xf3,0xa5,0xd1,0x60,0x40,0x10,0x2a,0xff,0xff,0x20,0x26,0x03,0x00,
-0x13,0x60,0xb6,0x62,0x02,0x00,0x14,0x60,0x98,0x62,0x64,0x44,0x3e,0x7f,0xa2,0xdb,
-0x1f,0xf3,0xff,0xff,0x17,0x60,0x7a,0x65,0xa5,0xd1,0x60,0x40,0x20,0x26,0x05,0x00,
-0x13,0x60,0xc4,0x62,0x64,0x44,0x4c,0x7f,0x04,0x00,0x14,0x60,0xa0,0x62,0x64,0x44,
-0x46,0x7f,0xa2,0xdb,0x00,0x64,0x40,0x41,0x40,0x46,0x40,0x47,0x00,0xe1,0x11,0x60,
-0x8e,0x63,0x0e,0x60,0xac,0x64,0xa0,0xdd,0x00,0x60,0x13,0x66,0x3c,0x64,0x01,0xfa,
-0x0a,0x64,0x20,0xfa,0x87,0xff,0x97,0xff,0x08,0x60,0x28,0x62,0x23,0x60,0x45,0x64,
-0xa2,0xdb,0x66,0xff,0xff,0xff,0x65,0xff,0xff,0xff,0x64,0xff,0xff,0xff,0x62,0xff,
-0xff,0xff,0x61,0xff,0xff,0xff,0x3c,0x60,0xc6,0x65,0x0c,0x64,0xa5,0xdb,0x0e,0x60,
-0x5a,0x64,0x97,0xfb,0xff,0xff,0x2d,0xff,0x08,0x60,0x00,0x64,0xc8,0x81,0x3e,0x63,
-0x00,0x64,0x59,0xdb,0xfe,0x1f,0x04,0x60,0x41,0x76,0x10,0x60,0x5f,0x78,0xff,0xff,
-0x10,0x75,0x01,0x60,0x03,0xe8,0x99,0xff,0x08,0x60,0x2a,0x62,0x04,0x60,0xff,0x64,
-0xa2,0xdb,0x04,0x60,0xff,0xe5,0xff,0xff,0xff,0xff,0x10,0x60,0xdc,0xe0,0xff,0xff,
-0xff,0xff,0x98,0xff,0x30,0x60,0x61,0x78,0xff,0xff,0xa1,0xff,0xff,0xff,0xfd,0x00,
-0x98,0xff,0x30,0x44,0x02,0xa8,0x00,0xe1,0x07,0x02,0x62,0xff,0x63,0xff,0x64,0xff,
-0x65,0xff,0x66,0xff,0xa1,0xff,0xff,0xff,0x82,0xff,0x91,0xff,0x99,0xff,0x88,0xff,
-0x6c,0x40,0x41,0xff,0xc4,0xe2,0x43,0xff,0x40,0x49,0x08,0xe1,0x10,0x60,0x81,0x78,
-0xff,0xff,0x98,0xff,0x30,0x44,0x02,0xa8,0x00,0xe1,0x02,0x02,0xa1,0xff,0xff,0xff,
-0x00,0x64,0xdc,0xfb,0x82,0xff,0x92,0xff,0x98,0xff,0x88,0xff,0x72,0x44,0x60,0x52,
-0x03,0x04,0x01,0x64,0x40,0x40,0x05,0x00,0xdc,0x80,0xff,0xff,0x02,0x02,0x01,0x64,
-0x40,0x40,0x48,0xe2,0xe2,0xf3,0xff,0xff,0x60,0x40,0x00,0x3a,0x09,0x00,0x67,0x60,
-0xfc,0x65,0xa5,0xd1,0xff,0xff,0x64,0x40,0x00,0x3a,0x02,0x00,0x64,0xe2,0x01,0x70,
-0x6d,0xe2,0xbc,0xff,0xb5,0xff,0xff,0x64,0x40,0x4b,0x00,0x64,0x40,0x4d,0x40,0x47,
-0xd7,0xfb,0x22,0xfb,0x00,0xe1,0x08,0x64,0x40,0x4c,0x26,0x44,0x02,0xb4,0x40,0x46,
-0x65,0xf3,0xff,0xff,0x60,0x40,0x04,0x26,0x02,0x00,0x00,0x3a,0x03,0x00,0x68,0xe2,
-0xc8,0xe2,0x68,0x00,0xb4,0xf1,0x02,0x64,0x64,0x56,0x60,0x54,0xcd,0xe2,0xc4,0xe2,
-0x6c,0x40,0x07,0x60,0x80,0xe8,0x44,0xe2,0x64,0xe2,0x46,0xff,0x47,0xff,0x67,0x60,
-0xd6,0x62,0x01,0x64,0xa2,0xdb,0x9c,0xfe,0xff,0xff,0x0b,0x04,0xcf,0xf3,0xff,0xff,
-0x00,0xa0,0xff,0xff,0x06,0x02,0x01,0x64,0x40,0xfb,0x26,0x44,0xfd,0xb4,0x40,0x46,
-0x05,0xff,0x27,0x44,0x06,0x22,0x06,0x00,0xf9,0xb4,0x40,0x47,0x02,0x64,0x21,0xfb,
-0xc0,0xfe,0x03,0x00,0x20,0x64,0x21,0xfb,0xc0,0xfe,0x99,0xff,0x3d,0x44,0xf7,0xb4,
-0x40,0x5d,0x98,0xff,0x99,0xff,0x3c,0x44,0x7f,0xb4,0x10,0xbc,0x40,0x5c,0x3e,0x44,
-0x7c,0xb4,0x08,0xbc,0x40,0x5e,0x98,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xe4,0x64,0x65,0x46,0x58,0xd0,0x2b,0x46,0x59,0xd8,0xfb,0x1f,0x00,0x60,0x0e,0x63,
+0xdf,0x60,0x1e,0x61,0x84,0x60,0xb4,0x64,0x65,0x46,0x58,0xd0,0x2b,0x46,0x59,0xd8,
+0xfb,0x1f,0x01,0x60,0x00,0x65,0x80,0x60,0xf4,0x64,0x7f,0xa4,0xe0,0x87,0x00,0x7f,
+0x02,0x24,0xc4,0x84,0x19,0xfb,0x0d,0x60,0x22,0x62,0x08,0x60,0x00,0x65,0xa2,0xd3,
+0xff,0xff,0xd4,0x80,0xff,0xff,0x0b,0x06,0xe0,0x84,0xe0,0x84,0xe0,0x84,0xcc,0x84,
+0x1c,0xfb,0x65,0x44,0xe0,0x84,0xe0,0x84,0xe0,0x84,0x1b,0xfb,0x65,0x44,0x80,0xa4,
+0xe0,0x84,0xe0,0x84,0xe0,0x84,0xcc,0x84,0x1a,0xfb,0x1a,0xf1,0x19,0xf3,0xff,0xff,
+0x94,0xfb,0x7c,0x63,0x60,0x46,0x01,0xfc,0xdc,0x84,0xd0,0x80,0x00,0xfa,0xfa,0x04,
+0x95,0xfb,0x1b,0xf3,0x60,0x46,0x00,0xa8,0x1c,0xf1,0x09,0x03,0x00,0xfa,0x01,0xfc,
+0x60,0x46,0x01,0xfc,0xdc,0x84,0xd0,0x80,0x00,0xfa,0xfa,0x04,0x95,0xfb,0x00,0x64,
+0x00,0xfa,0x63,0x44,0x80,0x7f,0x01,0xfa,0x1a,0xf3,0x19,0xf1,0xdc,0x84,0x50,0x93,
+0x33,0x44,0xfd,0xfb,0x00,0x60,0x7c,0x61,0x19,0x60,0x58,0x4f,0x39,0x78,0xff,0xff,
+0x46,0x45,0x19,0x60,0x58,0x4f,0x5b,0x78,0xff,0xff,0x21,0x60,0x86,0x62,0x66,0x44,
+0xa2,0xdb,0x1e,0xf1,0x01,0x65,0x64,0x40,0x10,0x2a,0x07,0x00,0xeb,0x60,0x19,0xe2,
+0x01,0x60,0x76,0x63,0x20,0x64,0xb8,0xfb,0x07,0x00,0xeb,0x60,0x19,0xe2,0x00,0x65,
+0x01,0x60,0x18,0x63,0x14,0x64,0xb5,0xfb,0x17,0x60,0xca,0x62,0xa2,0xdd,0x18,0x60,
+0x14,0x62,0x65,0x44,0xa2,0xdb,0x00,0x60,0x30,0xe2,0x00,0x60,0x50,0xe2,0x00,0x60,
+0x79,0xe2,0x01,0x60,0x90,0xe2,0x01,0x60,0xd0,0xe2,0x01,0x60,0xf9,0xe2,0xa7,0xf3,
+0xa8,0xf1,0x60,0x45,0xc4,0x84,0xc0,0x84,0x23,0xfb,0x01,0x60,0x30,0x64,0xc0,0x84,
+0xa8,0xf3,0x60,0x45,0xc4,0x84,0x24,0xfb,0x00,0x64,0x40,0x50,0x63,0xff,0x00,0x64,
+0x40,0x54,0x40,0x55,0x40,0x41,0x40,0x42,0x40,0x5e,0x40,0x52,0xd1,0xfe,0x82,0xff,
+0x92,0xff,0x98,0xff,0x17,0x60,0xd0,0x65,0x1e,0xf3,0xa5,0xd1,0x60,0x40,0x10,0x2a,
+0xff,0xff,0x20,0x26,0x03,0x00,0x14,0x60,0x2e,0x62,0x02,0x00,0x15,0x60,0x10,0x62,
+0x64,0x44,0x3e,0x7f,0xa2,0xdb,0x1e,0xf3,0xff,0xff,0x17,0x60,0xf2,0x65,0xa5,0xd1,
+0x60,0x40,0x20,0x26,0x05,0x00,0x14,0x60,0x3c,0x62,0x64,0x44,0x4c,0x7f,0x04,0x00,
+0x15,0x60,0x18,0x62,0x64,0x44,0x46,0x7f,0xa2,0xdb,0x00,0x64,0x40,0x41,0x40,0x46,
+0x40,0x47,0x00,0xe1,0x11,0x60,0x50,0x63,0x0e,0x60,0xac,0x64,0xa0,0xdd,0x00,0x60,
+0x13,0x66,0x3c,0x64,0x01,0xfa,0x0a,0x64,0x20,0xfa,0x87,0xff,0x97,0xff,0x08,0x60,
+0x28,0x62,0x23,0x60,0x45,0x64,0xa2,0xdb,0x66,0xff,0xff,0xff,0x65,0xff,0xff,0xff,
+0x64,0xff,0xff,0xff,0x62,0xff,0xff,0xff,0x61,0xff,0xff,0xff,0x3f,0x60,0x8e,0x65,
+0x0c,0x64,0xa5,0xdb,0x0e,0x60,0x2d,0x64,0x8d,0xfb,0xff,0xff,0x2d,0xff,0x08,0x60,
+0x00,0x64,0xc8,0x81,0x3e,0x63,0x00,0x64,0x59,0xdb,0xfe,0x1f,0x04,0x60,0x41,0x76,
+0x10,0x60,0x21,0x78,0xff,0xff,0x10,0x75,0x01,0x60,0x03,0xe8,0x99,0xff,0x08,0x60,
+0x2a,0x62,0x04,0x60,0xff,0x64,0xa2,0xdb,0x04,0x60,0xff,0xe5,0xff,0xff,0xff,0xff,
+0x10,0x60,0xdc,0xe0,0xff,0xff,0xff,0xff,0x98,0xff,0x30,0x60,0x09,0x78,0xff,0xff,
+0xa1,0xff,0xff,0xff,0xfd,0x00,0x98,0xff,0x30,0x44,0x02,0xa8,0x00,0xe1,0x07,0x02,
+0x62,0xff,0x63,0xff,0x64,0xff,0x65,0xff,0x66,0xff,0xa1,0xff,0xff,0xff,0x82,0xff,
+0x91,0xff,0x99,0xff,0x88,0xff,0x6c,0x40,0x41,0xff,0xc4,0xe2,0x43,0xff,0x40,0x49,
+0x08,0xe1,0x10,0x60,0x43,0x78,0xff,0xff,0x98,0xff,0x30,0x44,0x02,0xa8,0x00,0xe1,
+0x02,0x02,0xa1,0xff,0xff,0xff,0x00,0x64,0xcb,0xfb,0x82,0xff,0x92,0xff,0x98,0xff,
+0x88,0xff,0x72,0x44,0x60,0x52,0x03,0x04,0x01,0x64,0x40,0x40,0x05,0x00,0xdc,0x80,
+0xff,0xff,0x02,0x02,0x01,0x64,0x40,0x40,0x48,0xe2,0xd1,0xf3,0xff,0xff,0x60,0x40,
+0x00,0x3a,0x09,0x00,0x6a,0x60,0xdc,0x65,0xa5,0xd1,0xff,0xff,0x64,0x40,0x00,0x3a,
+0x02,0x00,0x64,0xe2,0x01,0x70,0x6d,0xe2,0xbc,0xff,0xb5,0xff,0xff,0x64,0x40,0x4b,
+0x00,0x64,0x40,0x4d,0x40,0x47,0xc6,0xfb,0x21,0xfb,0x00,0xe1,0x08,0x64,0x40,0x4c,
+0x26,0x44,0x02,0xb4,0x40,0x46,0x59,0xf3,0xff,0xff,0x60,0x40,0x04,0x26,0x02,0x00,
+0x00,0x3a,0x03,0x00,0x68,0xe2,0xc8,0xe2,0x68,0x00,0xa7,0xf1,0x02,0x64,0x64,0x56,
+0x60,0x54,0xcd,0xe2,0xc4,0xe2,0x6c,0x40,0x07,0x60,0x80,0xe8,0x44,0xe2,0x64,0xe2,
+0x46,0xff,0x47,0xff,0x6a,0x60,0xb2,0x62,0x01,0x64,0xa2,0xdb,0x9c,0xfe,0xff,0xff,
+0x0b,0x04,0xbf,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0x06,0x02,0x01,0x64,0x31,0xfb,
+0x26,0x44,0xfd,0xb4,0x40,0x46,0x05,0xff,0x27,0x44,0x06,0x22,0x06,0x00,0xf9,0xb4,
+0x40,0x47,0x02,0x64,0x20,0xfb,0xc0,0xfe,0x03,0x00,0x20,0x64,0x20,0xfb,0xc0,0xfe,
+0x99,0xff,0x3d,0x44,0xf7,0xb4,0x40,0x5d,0x98,0xff,0x99,0xff,0x3c,0x44,0x7f,0xb4,
+0x10,0xbc,0x40,0x5c,0x3e,0x44,0x7c,0xb4,0x08,0xbc,0x40,0x5e,0x98,0xff,0xff,0xff,
 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0xff,0xff,0x99,0xff,0x3d,0x44,0x10,0xbc,0x00,0x7f,0x40,0x5d,0x98,0xff,0xbc,0xff,
-0xff,0xff,0xb5,0xff,0xff,0xff,0x99,0xff,0x07,0x60,0x80,0xe9,0x98,0xff,0xff,0xff,
-0xff,0xff,0x80,0xe9,0xff,0xff,0xff,0xff,0xb7,0xff,0xb4,0xff,0x99,0xff,0x3e,0x44,
-0x02,0xbc,0x00,0x7f,0x40,0x5e,0x98,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x46,0xff,0x47,0xff,0x0e,0x60,0xac,0x64,0xa0,0xd7,0xff,0xff,0xff,0xff,0x98,0xff,
-0x30,0x44,0x02,0xa8,0x00,0xe1,0x0f,0x03,0x83,0xff,0x8d,0xff,0x00,0x64,0x40,0x40,
-0x40,0x44,0x40,0x43,0x40,0x42,0x40,0x41,0x1a,0x60,0xd4,0x64,0x40,0x4e,0x3c,0x60,
-0x8a,0x64,0x40,0x4d,0xe3,0xe1,0x19,0x60,0x5e,0x78,0xff,0xff,0x98,0xff,0x30,0x44,
-0x02,0xa8,0x00,0xe1,0x02,0x02,0xa1,0xff,0xff,0xff,0x84,0xff,0x88,0xff,0x98,0xff,
-0x99,0xff,0xf2,0xe6,0xda,0xe6,0x98,0xff,0x1b,0x60,0x28,0x64,0x40,0x40,0xa8,0xf3,
-0x80,0xfb,0x0a,0x64,0x40,0x4b,0x1e,0x60,0xb8,0x65,0xb8,0xf3,0xff,0xff,0xa5,0xdb,
-0x01,0x64,0x8c,0xfb,0x00,0x64,0x8e,0xfb,0x8d,0xfb,0x40,0x5c,0x1b,0x60,0x28,0x78,
-0xff,0xff,0x98,0xff,0x88,0xe2,0x30,0x44,0x00,0xe1,0x02,0xa8,0x85,0xff,0x02,0x02,
-0xa1,0xff,0xff,0xff,0x88,0xff,0x99,0xff,0x00,0x60,0x00,0xeb,0xff,0xff,0xff,0xff,
-0x00,0x60,0x00,0xea,0xff,0xff,0xff,0xff,0x4f,0x60,0xf3,0xea,0x4f,0x60,0x36,0xeb,
-0x43,0x60,0x40,0xea,0x43,0x60,0xe4,0xeb,0x44,0x60,0x52,0xea,0x44,0x60,0x34,0xeb,
-0x45,0x60,0x7d,0xea,0x45,0x60,0x58,0xeb,0x47,0x60,0x8b,0xea,0x47,0x60,0xd0,0xeb,
-0x48,0x60,0x47,0xea,0x48,0x60,0xc3,0xeb,0x49,0x60,0xa0,0xea,0x49,0x60,0xfd,0xeb,
-0x4a,0x60,0xb2,0xea,0x4a,0x60,0x34,0xeb,0x4b,0x60,0xc1,0xea,0x4b,0x60,0x58,0xeb,
-0x4c,0x60,0xd7,0xea,0x4c,0x60,0xc0,0xeb,0x4d,0x60,0xeb,0xea,0x4d,0x60,0xd0,0xeb,
-0x4e,0x60,0xa0,0xea,0x4e,0x60,0x91,0xeb,0x40,0x60,0xf0,0xea,0x40,0x60,0xfc,0xeb,
-0x41,0x60,0x24,0xea,0x41,0x60,0xa2,0xeb,0x42,0x60,0x20,0xea,0x42,0x60,0x20,0xeb,
-0x3a,0x5c,0x80,0x2b,0x12,0x00,0x8b,0xff,0x74,0x40,0x88,0xff,0x3a,0x5c,0x80,0x2b,
-0x09,0x00,0x8b,0xff,0x74,0x40,0x88,0xff,0x3a,0x5c,0x80,0x2b,0x03,0x00,0x8b,0xff,
-0x74,0x40,0x88,0xff,0x8b,0xff,0x74,0x40,0x88,0xff,0x3a,0x5c,0x80,0x2b,0xff,0xff,
-0x31,0x60,0x00,0xea,0xff,0xff,0xff,0xff,0x00,0x60,0x00,0xea,0x3a,0x5c,0x80,0x27,
-0x06,0x00,0x31,0x60,0x00,0xea,0xff,0xff,0xff,0xff,0x00,0x60,0x00,0xea,0x68,0x60,
-0x44,0x64,0x3a,0x5c,0xa0,0xd9,0xff,0xff,0x30,0x60,0x00,0xea,0xff,0xff,0xff,0xff,
-0x68,0x60,0x44,0x64,0x3a,0x5c,0xa0,0xd9,0x3a,0x5c,0x40,0x27,0xfc,0x00,0xa0,0xd9,
-0x00,0x60,0x00,0xeb,0xa0,0x60,0x00,0xeb,0xc0,0x60,0x00,0xeb,0x30,0x60,0x00,0xeb,
-0x68,0x60,0x46,0x64,0x3b,0x5c,0xa0,0xd9,0x3b,0x5c,0x40,0x27,0xfc,0x00,0xa0,0xd9,
-0x68,0x60,0x44,0x64,0x3a,0x5c,0xa0,0xd9,0x98,0xff,0xc0,0x60,0x00,0xeb,0x00,0x64,
-0x3e,0xfb,0x40,0xfb,0xff,0xff,0x67,0x60,0xc6,0x62,0x00,0x64,0xa2,0xdb,0x0a,0x64,
-0x40,0x48,0x03,0x60,0xe8,0x64,0x40,0x4b,0x67,0x60,0xc4,0x62,0x05,0x60,0xdc,0x64,
-0xa2,0xdb,0x1e,0x64,0x40,0x4c,0x69,0xe1,0x04,0x60,0x00,0x71,0x8d,0xe2,0x00,0x64,
-0x40,0x40,0xf8,0x60,0x89,0x78,0xff,0xff,0xa2,0xff,0x98,0xff,0x30,0x44,0x02,0xa8,
-0x00,0xe1,0x28,0x03,0x86,0xff,0x88,0xff,0x18,0x60,0xe4,0x65,0x64,0x64,0xa5,0xdb,
-0xff,0xff,0x00,0x64,0x40,0x46,0x58,0xfb,0x28,0x60,0x58,0x4f,0xcb,0x78,0xff,0xff,
-0x28,0x60,0x58,0x4f,0xb4,0x78,0xff,0xff,0x29,0x60,0x58,0x4f,0x3c,0x78,0xff,0xff,
-0x28,0x60,0x58,0x4f,0x68,0x78,0xff,0xff,0x28,0x60,0x58,0x4f,0x15,0x78,0xff,0xff,
-0x27,0x60,0x58,0x4f,0xfe,0x78,0xff,0xff,0x28,0x60,0x58,0x4f,0x2c,0x78,0xff,0xff,
-0x13,0xe1,0xa3,0xff,0x3d,0x60,0x2f,0x78,0xff,0xff,0x0f,0x4e,0x01,0x60,0xe4,0x61,
-0x41,0x4d,0x40,0xa1,0xa2,0xff,0x19,0x60,0x58,0x4f,0xaa,0x78,0xff,0xff,0xa3,0xff,
-0x06,0x03,0x2d,0x41,0x19,0x60,0x58,0x4f,0xcc,0x78,0xff,0xff,0x08,0xfe,0x0e,0x4f,
-0x66,0x44,0x15,0xfb,0x07,0xe1,0xa3,0xff,0x04,0x60,0x41,0x76,0x00,0x60,0x00,0x7c,
-0x08,0x60,0x14,0x64,0xa0,0xd9,0xae,0xff,0x30,0x60,0x61,0x78,0xff,0xff,0xa1,0xff,
-0xff,0xff,0x2c,0x45,0xb8,0x3f,0x41,0xff,0x30,0x44,0x20,0xb4,0x34,0x91,0x9f,0xfe,
-0xff,0xff,0x43,0x05,0x29,0x44,0x05,0x22,0xf2,0x00,0x04,0x26,0x3a,0x00,0x01,0x2a,
-0xee,0x00,0x44,0xff,0xc8,0x74,0xcd,0xe2,0x0c,0xe1,0x29,0x44,0xfe,0xb4,0x40,0x49,
-0x24,0x41,0xe1,0x81,0x00,0x60,0xc8,0x65,0xc5,0x94,0x0c,0xe1,0xe0,0x00,0x1a,0xff,
-0xde,0x00,0xdd,0x00,0x41,0xff,0x40,0x64,0xa0,0xfb,0x3e,0x44,0x01,0x26,0xd7,0x00,
-0x08,0x00,0xc4,0xe2,0x41,0x64,0xa0,0xfb,0x3e,0x44,0x01,0x2a,0x02,0x00,0x62,0xff,
-0x09,0x00,0x01,0x64,0xdc,0xfb,0x67,0x60,0xd0,0x62,0xa2,0xd3,0xff,0xff,0xdc,0x84,
-0xa2,0xdb,0x1a,0xff,0x68,0x60,0x40,0x62,0x01,0x64,0xa2,0xdb,0x08,0xe1,0x00,0x64,
-0x40,0x49,0x72,0x52,0x32,0x7b,0x4d,0xe2,0x44,0xff,0xb9,0x00,0xb8,0x00,0xb7,0x00,
-0xb6,0x00,0x29,0x44,0xfb,0xb4,0x40,0x49,0xb6,0x00,0x65,0xf3,0xff,0xff,0xff,0xff,
-0x04,0x2a,0x04,0x00,0xbf,0xfe,0x10,0x60,0xb3,0x78,0xff,0xff,0x99,0xf1,0x99,0xff,
-0x64,0x40,0x02,0x3b,0x03,0x00,0x11,0x60,0x5f,0x78,0xff,0xff,0x03,0x60,0xe8,0x74,
-0xcd,0xe2,0x04,0xe1,0xa1,0xff,0xff,0xff,0x3c,0x44,0x6f,0xb4,0x40,0x5c,0x00,0x6b,
-0x3e,0x44,0x74,0xb4,0x04,0xbc,0x40,0x5e,0xff,0xff,0xff,0xff,0x02,0xbd,0x45,0x5e,
-0xff,0xff,0xff,0xff,0x40,0x5e,0x00,0xe1,0x00,0x7c,0x15,0x60,0x40,0x62,0x58,0x4f,
-0x18,0x00,0x58,0x4f,0x16,0x00,0x58,0x4f,0x14,0x00,0x58,0x4f,0x12,0x00,0x01,0x7c,
-0x58,0x4f,0x0f,0x00,0x58,0x4f,0x0d,0x00,0x3d,0x44,0x7f,0xb4,0x40,0x5d,0xff,0xff,
-0xff,0xff,0x80,0xbc,0x40,0x5d,0xbf,0xfe,0x2d,0xff,0x08,0xe1,0x10,0x60,0x81,0x78,
-0xff,0xff,0x02,0x65,0xa2,0xd3,0x02,0xa2,0x60,0x47,0xe0,0x84,0xe0,0x84,0xe0,0x84,
-0xe0,0x81,0x06,0x63,0xe1,0x81,0x3d,0x44,0x80,0xb4,0x10,0xbc,0x02,0x24,0x04,0xbc,
-0x40,0x5d,0xff,0xff,0x34,0x9d,0xf6,0x1f,0xff,0xff,0xff,0xff,0x40,0x5d,0xa2,0xd3,
-0x02,0xa2,0x60,0x47,0x60,0x41,0x0e,0x63,0xe1,0x81,0x3d,0x44,0x80,0xb4,0x10,0xbc,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x99,0xff,0x3d,0x44,0x10,0xbc,0x00,0x7f,
+0x40,0x5d,0x98,0xff,0xbc,0xff,0xff,0xff,0xb5,0xff,0xff,0xff,0x99,0xff,0x07,0x60,
+0x80,0xe9,0x98,0xff,0xff,0xff,0xff,0xff,0x80,0xe9,0xff,0xff,0xff,0xff,0xb7,0xff,
+0xb4,0xff,0x99,0xff,0x3e,0x44,0x02,0xbc,0x00,0x7f,0x40,0x5e,0x98,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0x46,0xff,0x47,0xff,0x0e,0x60,0xac,0x64,0xa0,0xd7,
+0xff,0xff,0xff,0xff,0x98,0xff,0x30,0x44,0x02,0xa8,0x00,0xe1,0x0f,0x03,0x83,0xff,
+0x8d,0xff,0x00,0x64,0x40,0x40,0x40,0x44,0x40,0x43,0x40,0x42,0x40,0x41,0x1a,0x60,
+0x65,0x64,0x40,0x4e,0x3f,0x60,0x52,0x64,0x40,0x4d,0xe3,0xe1,0x18,0x60,0xed,0x78,
+0xff,0xff,0x98,0xff,0x30,0x44,0x02,0xa8,0x00,0xe1,0x02,0x02,0xa1,0xff,0xff,0xff,
+0x84,0xff,0x88,0xff,0x98,0xff,0x99,0xff,0xf2,0xe6,0xda,0xe6,0x98,0xff,0x1a,0x60,
+0xb9,0x64,0x40,0x40,0x9e,0xf3,0x74,0xfb,0x0a,0x64,0x40,0x4b,0x21,0x60,0x80,0x65,
+0xab,0xf3,0xff,0xff,0xa5,0xdb,0x01,0x64,0x80,0xfb,0x00,0x64,0x82,0xfb,0x81,0xfb,
+0x40,0x5c,0x1a,0x60,0xb9,0x78,0xff,0xff,0x98,0xff,0x88,0xe2,0x30,0x44,0x00,0xe1,
+0x02,0xa8,0x85,0xff,0x02,0x02,0xa1,0xff,0xff,0xff,0x88,0xff,0x99,0xff,0x00,0x60,
+0x00,0xeb,0xff,0xff,0xff,0xff,0x00,0x60,0x00,0xea,0xff,0xff,0xff,0xff,0x4f,0x60,
+0xf3,0xea,0x4f,0x60,0x36,0xeb,0x43,0x60,0x40,0xea,0x43,0x60,0xe4,0xeb,0x44,0x60,
+0x52,0xea,0x44,0x60,0x34,0xeb,0x45,0x60,0x7d,0xea,0x45,0x60,0x58,0xeb,0x47,0x60,
+0x8b,0xea,0x47,0x60,0xd0,0xeb,0x48,0x60,0x47,0xea,0x48,0x60,0xc3,0xeb,0x49,0x60,
+0xa0,0xea,0x49,0x60,0xfd,0xeb,0x4a,0x60,0xb2,0xea,0x4a,0x60,0x34,0xeb,0x4b,0x60,
+0xc1,0xea,0x4b,0x60,0x58,0xeb,0x4c,0x60,0xd7,0xea,0x4c,0x60,0xc0,0xeb,0x4d,0x60,
+0xeb,0xea,0x4d,0x60,0xd0,0xeb,0x4e,0x60,0xa0,0xea,0x4e,0x60,0x91,0xeb,0x40,0x60,
+0xf0,0xea,0x40,0x60,0xfc,0xeb,0x41,0x60,0x24,0xea,0x41,0x60,0xa2,0xeb,0x42,0x60,
+0x20,0xea,0x42,0x60,0x20,0xeb,0x3a,0x5c,0x80,0x2b,0x12,0x00,0x8b,0xff,0x74,0x40,
+0x88,0xff,0x3a,0x5c,0x80,0x2b,0x09,0x00,0x8b,0xff,0x74,0x40,0x88,0xff,0x3a,0x5c,
+0x80,0x2b,0x03,0x00,0x8b,0xff,0x74,0x40,0x88,0xff,0x8b,0xff,0x74,0x40,0x88,0xff,
+0x3a,0x5c,0x80,0x2b,0xff,0xff,0x31,0x60,0x00,0xea,0xff,0xff,0xff,0xff,0x00,0x60,
+0x00,0xea,0x3a,0x5c,0x80,0x27,0x06,0x00,0x31,0x60,0x00,0xea,0xff,0xff,0xff,0xff,
+0x00,0x60,0x00,0xea,0x30,0x60,0x00,0xea,0xff,0xff,0xff,0xff,0x3a,0x5c,0x3a,0x5c,
+0x40,0x27,0xfd,0x00,0x00,0x60,0x00,0xeb,0xa0,0x60,0x00,0xeb,0xc0,0x60,0x00,0xeb,
+0x30,0x60,0x00,0xeb,0x3b,0x5c,0x3b,0x5c,0x40,0x27,0xfd,0x00,0x98,0xff,0xc0,0x60,
+0x00,0xeb,0x00,0x64,0x2f,0xfb,0x31,0xfb,0xff,0xff,0x6a,0x60,0x9e,0x62,0x00,0x64,
+0xa2,0xdb,0x0a,0x64,0x40,0x48,0x03,0x60,0xe8,0x64,0x40,0x4b,0x6a,0x60,0x9c,0x62,
+0x05,0x60,0xdc,0x64,0xa2,0xdb,0x1e,0x64,0x40,0x4c,0x69,0xe1,0x04,0x60,0x00,0x71,
+0x8d,0xe2,0x00,0x64,0x40,0x40,0xfb,0x60,0x27,0x78,0xff,0xff,0xa2,0xff,0x98,0xff,
+0x30,0x44,0x02,0xa8,0x00,0xe1,0x28,0x03,0x86,0xff,0x88,0xff,0x19,0x60,0x5c,0x65,
+0x64,0x64,0xa5,0xdb,0xff,0xff,0x00,0x64,0x40,0x46,0x4c,0xfb,0x28,0x60,0x58,0x4f,
+0x1b,0x78,0xff,0xff,0x28,0x60,0x58,0x4f,0x04,0x78,0xff,0xff,0x28,0x60,0x58,0x4f,
+0x8c,0x78,0xff,0xff,0x27,0x60,0x58,0x4f,0xb8,0x78,0xff,0xff,0x27,0x60,0x58,0x4f,
+0x65,0x78,0xff,0xff,0x27,0x60,0x58,0x4f,0x4e,0x78,0xff,0xff,0x27,0x60,0x58,0x4f,
+0x7c,0x78,0xff,0xff,0x13,0xe1,0xa3,0xff,0x3d,0x60,0x36,0x78,0xff,0xff,0x0f,0x4e,
+0x01,0x60,0xe4,0x61,0x41,0x4d,0x40,0xa1,0xa2,0xff,0x19,0x60,0x58,0x4f,0x39,0x78,
+0xff,0xff,0xa3,0xff,0x06,0x03,0x2d,0x41,0x19,0x60,0x58,0x4f,0x5b,0x78,0xff,0xff,
+0x08,0xfe,0x0e,0x4f,0x66,0x44,0x15,0xfb,0x07,0xe1,0xa3,0xff,0x04,0x60,0x41,0x76,
+0x00,0x60,0x00,0x7c,0x08,0x60,0x14,0x64,0xa0,0xd9,0xae,0xff,0x30,0x60,0x09,0x78,
+0xff,0xff,0xa1,0xff,0xff,0xff,0x2c,0x45,0xb8,0x3f,0x41,0xff,0x30,0x44,0x20,0xb4,
+0x34,0x91,0x9f,0xfe,0xff,0xff,0x43,0x05,0x29,0x44,0x05,0x22,0xf2,0x00,0x04,0x26,
+0x3a,0x00,0x01,0x2a,0xee,0x00,0x44,0xff,0xc8,0x74,0xcd,0xe2,0x0c,0xe1,0x29,0x44,
+0xfe,0xb4,0x40,0x49,0x24,0x41,0xe1,0x81,0x00,0x60,0xc8,0x65,0xc5,0x94,0x0c,0xe1,
+0xe0,0x00,0x1a,0xff,0xde,0x00,0xdd,0x00,0x41,0xff,0x40,0x64,0x96,0xfb,0x3e,0x44,
+0x01,0x26,0xd7,0x00,0x08,0x00,0xc4,0xe2,0x41,0x64,0x96,0xfb,0x3e,0x44,0x01,0x2a,
+0x02,0x00,0x62,0xff,0x09,0x00,0x01,0x64,0xcb,0xfb,0x6a,0x60,0xa8,0x62,0xa2,0xd3,
+0xff,0xff,0xdc,0x84,0xa2,0xdb,0x1a,0xff,0x6b,0x60,0x28,0x62,0x01,0x64,0xa2,0xdb,
+0x08,0xe1,0x00,0x64,0x40,0x49,0x72,0x52,0x32,0x7b,0x4d,0xe2,0x44,0xff,0xb9,0x00,
+0xb8,0x00,0xb7,0x00,0xb6,0x00,0x29,0x44,0xfb,0xb4,0x40,0x49,0xb6,0x00,0x59,0xf3,
+0xff,0xff,0xff,0xff,0x04,0x2a,0x04,0x00,0xbf,0xfe,0x10,0x60,0x75,0x78,0xff,0xff,
+0x8f,0xf1,0x99,0xff,0x64,0x40,0x02,0x3b,0x03,0x00,0x11,0x60,0x21,0x78,0xff,0xff,
+0x03,0x60,0xe8,0x74,0xcd,0xe2,0x04,0xe1,0xa1,0xff,0xff,0xff,0x3c,0x44,0x6f,0xb4,
+0x40,0x5c,0x00,0x6b,0x3e,0x44,0x74,0xb4,0x04,0xbc,0x40,0x5e,0xff,0xff,0xff,0xff,
+0x02,0xbd,0x45,0x5e,0xff,0xff,0xff,0xff,0x40,0x5e,0x00,0xe1,0x00,0x7c,0x15,0x60,
+0xb8,0x62,0x58,0x4f,0x18,0x00,0x58,0x4f,0x16,0x00,0x58,0x4f,0x14,0x00,0x58,0x4f,
+0x12,0x00,0x01,0x7c,0x58,0x4f,0x0f,0x00,0x58,0x4f,0x0d,0x00,0x3d,0x44,0x7f,0xb4,
+0x40,0x5d,0xff,0xff,0xff,0xff,0x80,0xbc,0x40,0x5d,0xbf,0xfe,0x2d,0xff,0x08,0xe1,
+0x10,0x60,0x43,0x78,0xff,0xff,0x02,0x65,0xa2,0xd3,0x02,0xa2,0x60,0x47,0xe0,0x84,
+0xe0,0x84,0xe0,0x84,0xe0,0x81,0x06,0x63,0xe1,0x81,0x3d,0x44,0x80,0xb4,0x10,0xbc,
 0x02,0x24,0x04,0xbc,0x40,0x5d,0xff,0xff,0x34,0x9d,0xf6,0x1f,0xff,0xff,0xff,0xff,
 0x40,0x5d,0xa2,0xd3,0x02,0xa2,0x60,0x47,0x60,0x41,0x0e,0x63,0xe1,0x81,0x3d,0x44,
 0x80,0xb4,0x10,0xbc,0x02,0x24,0x04,0xbc,0x40,0x5d,0xff,0xff,0x34,0x9d,0xf6,0x1f,
-0xff,0xff,0xff,0xff,0x40,0x5d,0x64,0x40,0x01,0x26,0x08,0x00,0x3c,0x44,0x5f,0xb4,
-0x20,0x65,0x34,0x9c,0xff,0xff,0xff,0xff,0x40,0x5c,0x05,0x00,0x01,0x65,0x34,0x9d,
-0xff,0xff,0xff,0xff,0x40,0x5d,0x2f,0x58,0xff,0xff,0x99,0xf1,0x00,0xe1,0x64,0x44,
-0x00,0x7f,0xe0,0x85,0xc4,0x84,0xe0,0x85,0x3c,0x44,0x6f,0xb4,0x40,0x5c,0x00,0x6b,
-0x3e,0x44,0x74,0xb4,0x40,0x5e,0x01,0x7c,0x15,0x60,0x64,0x62,0xc6,0x82,0x58,0x4f,
-0xa0,0x00,0x01,0x60,0xf4,0x64,0x60,0x54,0xcd,0xe2,0x32,0x44,0x08,0x2b,0xfd,0x00,
-0x3c,0x44,0x7f,0xb4,0x10,0xbc,0x40,0x5c,0x62,0xff,0x01,0x7c,0x08,0x60,0x2a,0x64,
-0xa0,0xd9,0x9a,0xf3,0xbf,0xfe,0x60,0x40,0x05,0x36,0x2d,0xff,0x07,0x36,0xd8,0xfe,
-0x08,0xe1,0x10,0x60,0x81,0x78,0xff,0xff,0xdc,0xf3,0xff,0xff,0x60,0x40,0x00,0x36,
-0x03,0x00,0x0e,0x60,0x8b,0x78,0xff,0xff,0x00,0x64,0xa0,0xfb,0x0a,0x64,0x40,0x4c,
-0x19,0xff,0x23,0xf3,0x20,0x44,0x01,0x2a,0x04,0x00,0x00,0x64,0x40,0x40,0xa1,0xf3,
-0x0b,0x00,0x00,0x3a,0x32,0x00,0x1a,0xe1,0x00,0x64,0xd0,0xfb,0x31,0x44,0x01,0x26,
-0x1b,0xe1,0xa1,0xff,0xff,0xff,0xb9,0x3f,0x72,0x45,0xdc,0x84,0xa1,0xfb,0x60,0x55,
-0x65,0x52,0x11,0x64,0xa0,0xfb,0xa2,0xf3,0x06,0x04,0xdc,0x84,0xa2,0xfb,0xa3,0xf3,
-0x02,0x04,0xdc,0x84,0xa3,0xfb,0x4b,0xf3,0xff,0xff,0xfe,0xa0,0x65,0xf3,0xe3,0x04,
-0x60,0x40,0x02,0x2a,0xe0,0x00,0x99,0xff,0x3d,0x44,0x7f,0xb4,0x00,0x7f,0x40,0x5d,
-0x80,0xbc,0xff,0xff,0xff,0xff,0x40,0x5d,0x98,0xff,0x00,0x64,0x4b,0xfb,0xd3,0x00,
-0x22,0xf1,0x43,0xff,0x64,0x40,0x07,0x26,0x03,0x00,0x12,0x60,0x31,0x78,0xff,0xff,
-0x6c,0x40,0x03,0xe1,0x00,0x6b,0x99,0xff,0x3e,0x44,0x01,0xbc,0x00,0x7f,0x40,0x5e,
-0xdd,0xf1,0x3d,0x44,0xe7,0xb4,0x40,0x5d,0x3e,0x44,0xed,0xb4,0xb0,0x84,0x40,0x5e,
+0xff,0xff,0xff,0xff,0x40,0x5d,0xa2,0xd3,0x02,0xa2,0x60,0x47,0x60,0x41,0x0e,0x63,
+0xe1,0x81,0x3d,0x44,0x80,0xb4,0x10,0xbc,0x02,0x24,0x04,0xbc,0x40,0x5d,0xff,0xff,
+0x34,0x9d,0xf6,0x1f,0xff,0xff,0xff,0xff,0x40,0x5d,0x64,0x40,0x01,0x26,0x08,0x00,
+0x3c,0x44,0x5f,0xb4,0x20,0x65,0x34,0x9c,0xff,0xff,0xff,0xff,0x40,0x5c,0x05,0x00,
+0x01,0x65,0x34,0x9d,0xff,0xff,0xff,0xff,0x40,0x5d,0x2f,0x58,0xff,0xff,0x8f,0xf1,
+0x00,0xe1,0x64,0x44,0x00,0x7f,0xe0,0x85,0xc4,0x84,0xe0,0x85,0x3c,0x44,0x6f,0xb4,
+0x40,0x5c,0x00,0x6b,0x3e,0x44,0x74,0xb4,0x40,0x5e,0x01,0x7c,0x15,0x60,0xdc,0x62,
+0xc6,0x82,0x58,0x4f,0xa0,0x00,0x01,0x60,0xf4,0x64,0x60,0x54,0xcd,0xe2,0x32,0x44,
+0x08,0x2b,0xfd,0x00,0x3c,0x44,0x7f,0xb4,0x10,0xbc,0x40,0x5c,0x62,0xff,0x01,0x7c,
+0x08,0x60,0x2a,0x64,0xa0,0xd9,0x90,0xf3,0xbf,0xfe,0x60,0x40,0x05,0x36,0x2d,0xff,
+0x07,0x36,0xd8,0xfe,0x08,0xe1,0x10,0x60,0x43,0x78,0xff,0xff,0xcb,0xf3,0xff,0xff,
+0x60,0x40,0x00,0x36,0x03,0x00,0x0e,0x60,0x5e,0x78,0xff,0xff,0x00,0x64,0x96,0xfb,
+0x0a,0x64,0x40,0x4c,0x19,0xff,0x22,0xf3,0x20,0x44,0x01,0x2a,0x04,0x00,0x00,0x64,
+0x40,0x40,0x97,0xf3,0x0b,0x00,0x00,0x3a,0x32,0x00,0x1a,0xe1,0x00,0x64,0xc0,0xfb,
+0x31,0x44,0x01,0x26,0x1b,0xe1,0xa1,0xff,0xff,0xff,0xb9,0x3f,0x72,0x45,0xdc,0x84,
+0x97,0xfb,0x60,0x55,0x65,0x52,0x11,0x64,0x96,0xfb,0x98,0xf3,0x06,0x04,0xdc,0x84,
+0x98,0xfb,0x99,0xf3,0x02,0x04,0xdc,0x84,0x99,0xfb,0x3e,0xf3,0xff,0xff,0xfe,0xa0,
+0x59,0xf3,0xe3,0x04,0x60,0x40,0x02,0x2a,0xe0,0x00,0x99,0xff,0x3d,0x44,0x7f,0xb4,
+0x00,0x7f,0x40,0x5d,0x80,0xbc,0xff,0xff,0xff,0xff,0x40,0x5d,0x98,0xff,0x00,0x64,
+0x3e,0xfb,0xd3,0x00,0x21,0xf1,0x43,0xff,0x64,0x40,0x07,0x26,0x03,0x00,0x12,0x60,
+0x01,0x78,0xff,0xff,0x6c,0x40,0x03,0xe1,0x3c,0x46,0x0f,0xf0,0x46,0xf3,0x64,0x40,
+0x01,0x2a,0x09,0x00,0x60,0x5c,0x62,0x60,0xda,0x61,0xa1,0xd3,0xff,0xff,0xd0,0x80,
+0xff,0xff,0x01,0x06,0x64,0x44,0x1c,0xf0,0xff,0xff,0x64,0x41,0x08,0xb1,0x60,0x45,
+0x03,0x22,0x00,0x61,0xb5,0x85,0x2b,0x5c,0xd1,0x80,0x1e,0xf1,0x0b,0x03,0x41,0x4b,
+0x38,0x64,0x65,0x40,0x08,0x2a,0x80,0x64,0x60,0x48,0x88,0x6a,0xff,0xff,0xff,0xff,
+0x01,0x16,0xfe,0x00,0x00,0x6b,0x99,0xff,0x3e,0x44,0x01,0xbc,0x00,0x7f,0x40,0x5e,
+0xcc,0xf1,0x3d,0x44,0xe7,0xb4,0x40,0x5d,0x3e,0x44,0xed,0xb4,0xb0,0x84,0x40,0x5e,
 0x3d,0x44,0x08,0xbc,0x40,0x5d,0x98,0xff,0x05,0x64,0xcc,0x84,0xff,0xff,0xfd,0x02,
 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x99,0xff,
-0x3e,0x44,0x77,0xb4,0x80,0xbc,0x40,0x5e,0x98,0xff,0x3c,0x46,0x1c,0xf0,0x53,0xf3,
-0x64,0x41,0x08,0xb1,0x60,0x45,0x03,0x22,0x00,0x61,0xb5,0x85,0x2b,0x5c,0xd1,0x80,
-0x1f,0xf1,0x0b,0x03,0x41,0x4b,0x38,0x64,0x65,0x40,0x08,0x2a,0x80,0x64,0x60,0x48,
-0x88,0x6a,0xff,0xff,0xff,0xff,0x01,0x16,0xfe,0x00,0x7f,0xf1,0x10,0x64,0x64,0x40,
+0x3e,0x44,0x77,0xb4,0x80,0xbc,0x40,0x5e,0x98,0xff,0x73,0xf1,0x10,0x64,0x64,0x40,
 0x0e,0x36,0xb4,0x85,0x65,0x48,0x8a,0x6a,0xff,0xff,0xff,0xff,0x01,0x16,0xfe,0x00,
-0x4b,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0x0a,0x03,0x99,0xff,0x3d,0x44,0x7f,0xb4,
-0x00,0x7f,0x40,0x5d,0x80,0xbd,0x00,0x64,0x4b,0xfb,0x45,0x5d,0x98,0xff,0x22,0xf1,
-0x23,0xf3,0x64,0x45,0x00,0xbc,0x00,0x64,0x4d,0x03,0x00,0x61,0x23,0xfb,0x5e,0xf1,
-0xa4,0xf3,0x64,0x40,0x04,0x2a,0x06,0x00,0x60,0x45,0x73,0x44,0xd4,0x84,0xe7,0xa0,
-0x0d,0x0e,0x0c,0x04,0x28,0x60,0xfa,0x63,0x72,0x45,0x65,0x44,0xd4,0xfb,0x04,0x05,
-0x65,0x44,0xdc,0x80,0xff,0xff,0x05,0x02,0x01,0x64,0x40,0x40,0x11,0x60,0x8e,0x78,
+0x3e,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0x0a,0x03,0x99,0xff,0x3d,0x44,0x7f,0xb4,
+0x00,0x7f,0x40,0x5d,0x80,0xbd,0x00,0x64,0x3e,0xfb,0x45,0x5d,0x98,0xff,0x21,0xf1,
+0x22,0xf3,0x64,0x45,0x00,0xbc,0x00,0x64,0x4d,0x03,0x00,0x61,0x22,0xfb,0x52,0xf1,
+0x9a,0xf3,0x64,0x40,0x04,0x2a,0x06,0x00,0x60,0x45,0x73,0x44,0xd4,0x84,0xe7,0xa0,
+0x0d,0x0e,0x0c,0x04,0x2b,0x60,0xc2,0x63,0x72,0x45,0x65,0x44,0xc3,0xfb,0x04,0x05,
+0x65,0x44,0xdc,0x80,0xff,0xff,0x05,0x02,0x01,0x64,0x40,0x40,0x11,0x60,0x50,0x78,
 0xff,0xff,0xff,0x60,0xf0,0x64,0xd4,0x80,0x20,0xa4,0xf8,0x04,0xd4,0x80,0xff,0xff,
 0xf5,0x07,0x02,0xfe,0xbd,0xd3,0xff,0xff,0x44,0x8a,0x02,0x24,0xdd,0x81,0x02,0x24,
-0xdd,0x81,0xbd,0xd3,0xa1,0xf1,0x61,0x45,0xc0,0x84,0x00,0x61,0x02,0x24,0x01,0xb9,
-0xc4,0x84,0x60,0x55,0x2a,0x52,0xa1,0xfb,0x02,0x24,0x01,0xb9,0xbd,0xd3,0xa2,0xf1,
-0x61,0x45,0xc0,0x84,0x00,0x61,0x02,0x24,0x01,0xb9,0xc4,0x84,0xa2,0xfb,0x02,0x24,
-0x01,0xb9,0xbd,0xd3,0xa3,0xf1,0x61,0x45,0xc0,0x84,0xc4,0x84,0xa3,0xfb,0x22,0xf3,
-0xff,0xff,0x60,0x45,0x65,0x40,0x01,0x2a,0x07,0x00,0x3c,0x44,0x40,0x42,0x22,0xf3,
-0xff,0xff,0xfe,0xb4,0x22,0xfb,0x06,0x00,0x11,0x60,0x8e,0x78,0xff,0xff,0x11,0x60,
-0x8e,0x78,0xff,0xff,0x07,0x64,0xa0,0xfb,0x22,0x46,0x0f,0xf0,0xff,0xff,0x64,0x40,
-0x01,0x2a,0x03,0x00,0x16,0x60,0x48,0x78,0xff,0xff,0x15,0x60,0x3e,0x78,0xff,0xff,
-0x27,0x44,0x04,0x2a,0x09,0x00,0xfb,0xb4,0x40,0x47,0x3c,0x46,0x02,0x64,0x21,0xfb,
-0xc0,0xfe,0x11,0x60,0x8e,0x78,0xff,0xff,0x27,0x44,0x02,0x2a,0x08,0x00,0xfd,0xb4,
-0x40,0x47,0x06,0x64,0x21,0xfb,0xc0,0xfe,0x11,0x60,0x8e,0x78,0xff,0xff,0x02,0x0a,
-0x00,0x64,0x60,0x50,0x11,0x60,0x8e,0x78,0xff,0xff,0x01,0x60,0x2c,0x74,0xcd,0xe2,
-0x46,0xff,0x47,0xff,0x01,0x64,0x57,0xfb,0x83,0xe1,0x00,0x65,0x26,0x44,0x02,0x26,
+0xdd,0x81,0xbd,0xd3,0x97,0xf1,0x61,0x45,0xc0,0x84,0x00,0x61,0x02,0x24,0x01,0xb9,
+0xc4,0x84,0x60,0x55,0x2a,0x52,0x97,0xfb,0x02,0x24,0x01,0xb9,0xbd,0xd3,0x98,0xf1,
+0x61,0x45,0xc0,0x84,0x00,0x61,0x02,0x24,0x01,0xb9,0xc4,0x84,0x98,0xfb,0x02,0x24,
+0x01,0xb9,0xbd,0xd3,0x99,0xf1,0x61,0x45,0xc0,0x84,0xc4,0x84,0x99,0xfb,0x21,0xf3,
+0xff,0xff,0x60,0x45,0x65,0x40,0x01,0x2a,0x07,0x00,0x3c,0x44,0x40,0x42,0x21,0xf3,
+0xff,0xff,0xfe,0xb4,0x21,0xfb,0x06,0x00,0x11,0x60,0x50,0x78,0xff,0xff,0x11,0x60,
+0x50,0x78,0xff,0xff,0x07,0x64,0x96,0xfb,0x22,0x46,0x0f,0xf0,0xff,0xff,0x64,0x40,
+0x01,0x2a,0x03,0x00,0x16,0x60,0x03,0x78,0xff,0xff,0x15,0x60,0x0c,0x78,0xff,0xff,
+0x27,0x44,0x04,0x2a,0x09,0x00,0xfb,0xb4,0x40,0x47,0x3c,0x46,0x02,0x64,0x20,0xfb,
+0xc0,0xfe,0x11,0x60,0x50,0x78,0xff,0xff,0x27,0x44,0x02,0x2a,0x08,0x00,0xfd,0xb4,
+0x40,0x47,0x06,0x64,0x20,0xfb,0xc0,0xfe,0x11,0x60,0x50,0x78,0xff,0xff,0x02,0x0a,
+0x00,0x64,0x60,0x50,0x11,0x60,0x50,0x78,0xff,0xff,0x01,0x60,0x2c,0x74,0xcd,0xe2,
+0x46,0xff,0x47,0xff,0x01,0x64,0x4a,0xfb,0x83,0xe1,0x00,0x65,0x26,0x44,0x02,0x26,
 0x09,0x00,0x3e,0x44,0x34,0x81,0xff,0xff,0x05,0x03,0x45,0x5e,0x26,0x44,0x02,0xbc,
 0x40,0x46,0xd1,0xfe,0x0c,0x64,0x40,0x4c,0x19,0xff,0xa1,0xff,0x4c,0x4e,0x01,0x25,
-0x00,0x00,0x01,0x64,0xd0,0xfb,0x4b,0x74,0xcd,0xe2,0xf0,0x60,0x00,0x78,0x00,0x61,
-0x46,0xff,0x47,0xff,0x11,0x60,0x8e,0x78,0xff,0xff,0x99,0xff,0x3e,0x44,0xfd,0xb4,
+0x00,0x00,0x01,0x64,0xc0,0xfb,0x4b,0x74,0xcd,0xe2,0xf0,0x60,0x00,0x78,0x00,0x61,
+0x46,0xff,0x47,0xff,0x11,0x60,0x50,0x78,0xff,0xff,0x99,0xff,0x3e,0x44,0xfd,0xb4,
 0x40,0x5e,0x98,0xff,0xb5,0xff,0xbc,0xff,0x46,0xff,0xb7,0xff,0xb4,0xff,0xff,0xff,
 0xff,0xff,0x84,0x60,0x1d,0x7d,0xb5,0xff,0xff,0xff,0x99,0xff,0x07,0x60,0x80,0xe9,
 0x98,0xff,0xff,0xff,0xff,0xff,0x80,0xe9,0xff,0xff,0xff,0xff,0xb7,0xff,0xb4,0xff,
 0xff,0xff,0x99,0xff,0x3e,0x44,0x02,0xbc,0x00,0x7f,0x40,0x5e,0x98,0xff,0xff,0xff,
-0xff,0xff,0x46,0xff,0x47,0xff,0x26,0x43,0x04,0x2a,0x50,0x00,0xfb,0xb3,0x43,0x46,
-0x04,0xbb,0x2a,0x44,0x23,0xfa,0x20,0x44,0xe8,0x80,0x00,0x64,0x40,0x40,0xa1,0xf3,
-0x05,0x04,0x72,0x45,0xdc,0x84,0xa1,0xfb,0x60,0x55,0x65,0x52,0x24,0xfa,0xa2,0xf3,
-0x02,0x04,0xdc,0x84,0xa2,0xfb,0x27,0xfa,0xa3,0xf3,0x02,0x04,0xdc,0x84,0xa3,0xfb,
-0x28,0xfa,0x2a,0x44,0xdc,0x80,0xff,0xff,0x01,0x02,0x58,0x80,0xf4,0xb3,0x32,0x40,
-0x01,0x2a,0x08,0x00,0x04,0xbb,0x0f,0xfc,0x01,0x5d,0xdc,0xfe,0x05,0xff,0x11,0x60,
-0x8e,0x78,0xff,0xff,0x2d,0x44,0x0c,0x26,0x0d,0x00,0xcf,0xf3,0xff,0xff,0x00,0xa0,
-0xff,0xff,0x04,0x03,0x26,0x44,0x02,0xbc,0x40,0x46,0x36,0x00,0x0f,0xfc,0x01,0x5d,
-0xdc,0xfe,0x05,0xff,0x27,0x44,0x04,0x2a,0x09,0x00,0xfb,0xb4,0x40,0x47,0x2d,0x44,
-0x58,0x36,0x37,0x00,0x02,0x64,0x21,0xfb,0xc0,0xfe,0x26,0x00,0x02,0x2a,0x24,0x00,
-0xfd,0xb4,0x40,0x47,0x06,0x64,0x21,0xfb,0xc0,0xfe,0x1e,0x00,0x2a,0x44,0xdc,0x80,
-0xff,0xff,0x01,0x02,0x58,0x80,0x27,0x44,0x80,0x2a,0x13,0x00,0x7f,0xb4,0x40,0x47,
-0x27,0x44,0x04,0x2a,0x06,0x00,0xfb,0xb4,0x40,0x47,0x02,0x64,0x21,0xfb,0xc0,0xfe,
-0x08,0x00,0x27,0x44,0x02,0x2a,0x05,0x00,0xfd,0xb4,0x40,0x47,0x06,0x64,0x21,0xfb,
-0xc0,0xfe,0x11,0x60,0x8e,0x78,0xff,0xff,0x26,0x44,0x80,0x2a,0x07,0x00,0x20,0xf1,
-0x70,0x44,0xd0,0x80,0xff,0xff,0x02,0x05,0x64,0xe2,0x64,0x50,0x11,0x60,0x8e,0x78,
-0xff,0xff,0x06,0x64,0xa0,0xfb,0x22,0x46,0x29,0xf0,0xf7,0x60,0xff,0x64,0xa0,0x84,
-0xa2,0xda,0x04,0x64,0x03,0xfa,0x00,0xf2,0xff,0xff,0x04,0xfa,0x01,0x64,0x21,0xfb,
-0xc0,0xfe,0x11,0x60,0x8e,0x78,0xff,0xff,0x04,0x64,0xa0,0xfb,0x46,0xff,0x47,0xff,
-0x0a,0x64,0x40,0x4c,0x19,0xff,0x03,0xe1,0x29,0xf2,0xff,0xff,0x0c,0xb4,0xff,0xff,
-0x08,0x3a,0x0f,0x00,0x18,0x60,0x08,0x64,0xa0,0xd3,0xff,0xff,0xe8,0x84,0xe0,0x84,
-0x60,0x45,0x18,0x60,0x0c,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
-0xff,0xff,0xa1,0xff,0xff,0xff,0xb9,0x3f,0x00,0x6b,0x99,0xff,0x3e,0x44,0x01,0xbc,
-0x00,0x7f,0x40,0x5e,0xdd,0xf1,0x3d,0x44,0xe7,0xb4,0x40,0x5d,0x3e,0x44,0xed,0xb4,
-0xb0,0x84,0x40,0x5e,0x3d,0x44,0x08,0xbc,0x40,0x5d,0x98,0xff,0x05,0x64,0xcc,0x84,
-0xff,0xff,0xfd,0x02,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0xff,0xff,0x99,0xff,0x3e,0x44,0x77,0xb4,0x80,0xbc,0x40,0x5e,0x98,0xff,0x22,0xf2,
-0x08,0x63,0xff,0xff,0x08,0x2a,0x00,0x63,0x28,0x44,0x04,0x26,0x0a,0x00,0x25,0x44,
-0x06,0xfa,0x60,0x46,0x01,0xf2,0xff,0xff,0x61,0x5e,0x03,0x2b,0x01,0xfa,0x21,0x46,
-0x0d,0x00,0x28,0x44,0xb4,0x36,0x0a,0x00,0x08,0x63,0x3c,0x46,0xf0,0x27,0x7e,0x00,
-0x6c,0x07,0x1c,0xf2,0x53,0xf3,0x60,0x40,0x08,0x2a,0x00,0x63,0x21,0x46,0x60,0x45,
-0x1b,0x00,0x20,0xf2,0xff,0xff,0x00,0x7f,0xf6,0xa0,0x00,0x65,0x07,0x03,0xec,0xa0,
-0x01,0x65,0x04,0x03,0xc9,0xa0,0x02,0x65,0x01,0x03,0x03,0x65,0x29,0xf2,0xff,0xff,
-0x0c,0xb4,0xff,0xff,0x00,0x36,0x08,0x00,0x59,0x60,0xe8,0x62,0xa2,0xd3,0xff,0xff,
-0xd4,0x80,0xff,0xff,0x01,0x05,0x60,0x45,0x45,0x45,0x65,0x40,0x03,0x22,0x00,0x63,
-0xb7,0x85,0x2b,0x5c,0xd3,0x80,0xff,0xff,0x0b,0x03,0x43,0x4b,0x38,0x64,0x65,0x40,
-0x08,0x2a,0x80,0x64,0x60,0x48,0x88,0x6a,0xff,0xff,0xff,0xff,0x01,0x16,0xfe,0x00,
-0x7f,0xf1,0x00,0x64,0x64,0x40,0x0e,0x36,0x10,0x64,0xb4,0x85,0x65,0x48,0x8a,0x6a,
-0xff,0xff,0xff,0xff,0x01,0x16,0xfe,0x00,0x4b,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,
-0x0a,0x03,0x99,0xff,0x3d,0x44,0x7f,0xb4,0x00,0x7f,0x40,0x5d,0x80,0xbd,0x00,0x64,
-0x4b,0xfb,0x45,0x5d,0x98,0xff,0x2a,0x44,0x23,0xfa,0x20,0x44,0xe8,0x80,0x00,0x64,
-0x40,0x40,0xa1,0xf3,0x05,0x04,0x72,0x45,0xdc,0x84,0xa1,0xfb,0x60,0x55,0x65,0x52,
-0x24,0xfa,0xa2,0xf3,0x02,0x04,0xdc,0x84,0xa2,0xfb,0x27,0xfa,0xa3,0xf3,0x02,0x04,
-0xdc,0x84,0xa3,0xfb,0x28,0xfa,0x2a,0x44,0xdc,0x80,0xff,0xff,0x01,0x02,0x58,0x80,
-0x08,0x29,0x09,0x00,0x22,0xf1,0xff,0xff,0x64,0x40,0x07,0x2e,0x04,0x00,0x43,0xff,
-0x10,0x64,0x21,0xfb,0xc0,0xfe,0x2d,0x44,0x08,0x22,0x03,0x00,0x0d,0xb0,0x0c,0x3a,
+0xff,0xff,0x46,0xff,0x47,0xff,0x26,0x43,0x04,0x2a,0x54,0x00,0xfb,0xb3,0x43,0x46,
+0x04,0xbb,0x2a,0x44,0x23,0xfa,0x20,0x44,0xe8,0x80,0x00,0x64,0x40,0x40,0x97,0xf3,
+0x05,0x04,0x72,0x45,0xdc,0x84,0x97,0xfb,0x60,0x55,0x65,0x52,0x24,0xfa,0x98,0xf3,
+0x02,0x04,0xdc,0x84,0x98,0xfb,0x27,0xfa,0x99,0xf3,0x02,0x04,0xdc,0x84,0x99,0xfb,
+0x28,0xfa,0x65,0x44,0xdc,0x80,0xff,0xff,0x04,0x03,0x2a,0x44,0xdc,0x80,0xff,0xff,
+0x01,0x02,0x58,0x80,0xf4,0xb3,0x32,0x40,0x01,0x2a,0x08,0x00,0x04,0xbb,0x0f,0xfc,
+0x01,0x5d,0xdc,0xfe,0x05,0xff,0x11,0x60,0x50,0x78,0xff,0xff,0x2d,0x44,0x0c,0x26,
+0x0d,0x00,0xbf,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0x04,0x03,0x26,0x44,0x02,0xbc,
+0x40,0x46,0x36,0x00,0x0f,0xfc,0x01,0x5d,0xdc,0xfe,0x05,0xff,0x27,0x44,0x04,0x2a,
+0x09,0x00,0xfb,0xb4,0x40,0x47,0x2d,0x44,0x58,0x36,0x37,0x00,0x02,0x64,0x20,0xfb,
+0xc0,0xfe,0x26,0x00,0x02,0x2a,0x24,0x00,0xfd,0xb4,0x40,0x47,0x06,0x64,0x20,0xfb,
+0xc0,0xfe,0x1e,0x00,0x2a,0x44,0xdc,0x80,0xff,0xff,0x01,0x02,0x58,0x80,0x27,0x44,
+0x80,0x2a,0x13,0x00,0x7f,0xb4,0x40,0x47,0x27,0x44,0x04,0x2a,0x06,0x00,0xfb,0xb4,
+0x40,0x47,0x02,0x64,0x20,0xfb,0xc0,0xfe,0x08,0x00,0x27,0x44,0x02,0x2a,0x05,0x00,
+0xfd,0xb4,0x40,0x47,0x06,0x64,0x20,0xfb,0xc0,0xfe,0x11,0x60,0x50,0x78,0xff,0xff,
+0x26,0x44,0x80,0x2a,0x07,0x00,0x1f,0xf1,0x70,0x44,0xd0,0x80,0xff,0xff,0x02,0x05,
+0x64,0xe2,0x64,0x50,0x11,0x60,0x50,0x78,0xff,0xff,0x06,0x64,0x96,0xfb,0x22,0x46,
+0x29,0xf0,0xf7,0x60,0xff,0x64,0xa0,0x84,0xa2,0xda,0x04,0x64,0x03,0xfa,0x00,0xf2,
+0xff,0xff,0x04,0xfa,0x01,0x64,0x20,0xfb,0xc0,0xfe,0x11,0x60,0x50,0x78,0xff,0xff,
+0x04,0x64,0x96,0xfb,0x46,0xff,0x47,0xff,0x0a,0x64,0x40,0x4c,0x19,0xff,0x03,0xe1,
+0x29,0xf2,0xff,0xff,0x0c,0xb4,0xff,0xff,0x08,0x3a,0x0f,0x00,0x18,0x60,0x80,0x64,
+0xa0,0xd3,0xff,0xff,0xe8,0x84,0xe0,0x84,0x60,0x45,0x18,0x60,0x84,0x64,0xc4,0x84,
+0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0xff,0xff,0xa1,0xff,0xff,0xff,0xb9,0x3f,
+0x22,0xf2,0x08,0x63,0xff,0xff,0x08,0x2a,0x00,0x63,0x28,0x44,0x04,0x26,0x0a,0x00,
+0x25,0x44,0x06,0xfa,0x60,0x46,0x01,0xf2,0xff,0xff,0x61,0x5e,0x03,0x2b,0x01,0xfa,
+0x21,0x46,0x0d,0x00,0x28,0x44,0xb4,0x36,0x0a,0x00,0x08,0x63,0x3c,0x46,0x1c,0xf2,
+0x46,0xf3,0x60,0x40,0x08,0x2a,0x00,0x63,0x21,0x46,0x60,0x45,0x1b,0x00,0x20,0xf2,
+0xff,0xff,0x00,0x7f,0xf6,0xa0,0x00,0x65,0x07,0x03,0xec,0xa0,0x01,0x65,0x04,0x03,
+0xc9,0xa0,0x02,0x65,0x01,0x03,0x03,0x65,0x29,0xf2,0xff,0xff,0x0c,0xb4,0xff,0xff,
+0x00,0x36,0x08,0x00,0x62,0x60,0xda,0x62,0xa2,0xd3,0xff,0xff,0xd4,0x80,0xff,0xff,
+0x01,0x05,0x60,0x45,0x45,0x45,0x65,0x40,0x03,0x22,0x00,0x63,0xb7,0x85,0x2b,0x5c,
+0xd3,0x80,0xff,0xff,0x0b,0x03,0x43,0x4b,0x38,0x64,0x65,0x40,0x08,0x2a,0x80,0x64,
+0x60,0x48,0x88,0x6a,0xff,0xff,0xff,0xff,0x01,0x16,0xfe,0x00,0x00,0x6b,0x99,0xff,
+0x3e,0x44,0x01,0xbc,0x00,0x7f,0x40,0x5e,0xcc,0xf1,0x3d,0x44,0xe7,0xb4,0x40,0x5d,
+0x3e,0x44,0xed,0xb4,0xb0,0x84,0x40,0x5e,0x3d,0x44,0x08,0xbc,0x40,0x5d,0x98,0xff,
+0x05,0x64,0xcc,0x84,0xff,0xff,0xfd,0x02,0xff,0xff,0xff,0xff,0xf0,0x27,0x7e,0x00,
+0x3e,0x06,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x99,0xff,0x3e,0x44,
+0x77,0xb4,0x80,0xbc,0x40,0x5e,0x98,0xff,0x73,0xf1,0x00,0x64,0x64,0x40,0x0e,0x36,
+0x10,0x64,0xb4,0x85,0x65,0x48,0x8a,0x6a,0xff,0xff,0xff,0xff,0x01,0x16,0xfe,0x00,
+0x3e,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0x0a,0x03,0x99,0xff,0x3d,0x44,0x7f,0xb4,
+0x00,0x7f,0x40,0x5d,0x80,0xbd,0x00,0x64,0x3e,0xfb,0x45,0x5d,0x98,0xff,0x2a,0x44,
+0x23,0xfa,0x20,0x44,0xe8,0x80,0x00,0x64,0x40,0x40,0x97,0xf3,0x05,0x04,0x72,0x45,
+0xdc,0x84,0x97,0xfb,0x60,0x55,0x65,0x52,0x24,0xfa,0x98,0xf3,0x02,0x04,0xdc,0x84,
+0x98,0xfb,0x27,0xfa,0x99,0xf3,0x02,0x04,0xdc,0x84,0x99,0xfb,0x28,0xfa,0x65,0x44,
+0xdc,0x80,0xff,0xff,0x04,0x03,0x2a,0x44,0xdc,0x80,0xff,0xff,0x01,0x02,0x58,0x80,
+0x08,0x29,0x09,0x00,0x21,0xf1,0xff,0xff,0x64,0x40,0x07,0x2e,0x04,0x00,0x43,0xff,
+0x10,0x64,0x20,0xfb,0xc0,0xfe,0x2d,0x44,0x08,0x22,0x03,0x00,0x0d,0xb0,0x0c,0x3a,
 0x0a,0x00,0x26,0x43,0x84,0xbb,0xf4,0xb3,0x21,0x46,0x0f,0xfc,0x00,0x64,0x40,0x46,
-0x01,0x5d,0xdc,0xfe,0x05,0xff,0x09,0x64,0xa0,0xfb,0x28,0x44,0xb4,0x3a,0x0b,0x00,
-0x27,0x44,0x06,0x22,0x05,0x00,0xf9,0xb4,0x40,0x47,0x02,0x64,0x21,0xfb,0xc0,0xfe,
-0x17,0x60,0x3a,0x78,0xff,0xff,0xa4,0x36,0x0a,0x00,0x04,0x26,0x0b,0x00,0x27,0x44,
-0x06,0x22,0x05,0x00,0xf9,0xb4,0x40,0x47,0x02,0x64,0x21,0xfb,0xc0,0xfe,0x16,0x60,
-0xf3,0x78,0xff,0xff,0x28,0x44,0xd4,0x3a,0x5b,0x00,0x48,0xe2,0x1c,0x42,0x22,0x46,
+0x01,0x5d,0xdc,0xfe,0x05,0xff,0x09,0x64,0x96,0xfb,0x28,0x44,0xb4,0x3a,0x0b,0x00,
+0x27,0x44,0x06,0x22,0x05,0x00,0xf9,0xb4,0x40,0x47,0x02,0x64,0x20,0xfb,0xc0,0xfe,
+0x16,0x60,0xc0,0x78,0xff,0xff,0xa4,0x36,0x0a,0x00,0x04,0x26,0x0b,0x00,0x27,0x44,
+0x06,0x22,0x05,0x00,0xf9,0xb4,0x40,0x47,0x02,0x64,0x20,0xfb,0xc0,0xfe,0x16,0x60,
+0x89,0x78,0xff,0xff,0x28,0x44,0xd4,0x3a,0x5b,0x00,0x48,0xe2,0x1c,0x42,0x22,0x46,
 0x1c,0xf2,0xff,0xff,0x07,0xb4,0xfc,0xa0,0x03,0x64,0x01,0x02,0x1c,0xfa,0x27,0xf0,
 0x01,0x60,0x00,0x64,0xc0,0x84,0x27,0xfa,0x26,0xf0,0xff,0x60,0x00,0x64,0xa0,0x84,
-0x26,0xfa,0x5a,0x60,0x6c,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,
-0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x53,0xf3,0x00,0x7c,0x60,0x43,
-0xe0,0x84,0xe0,0x84,0x60,0x45,0x5a,0x60,0x70,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,
+0x26,0xfa,0x63,0x60,0x5e,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,
+0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x46,0xf3,0x00,0x7c,0x60,0x43,
+0xe0,0x84,0xe0,0x84,0x60,0x45,0x63,0x60,0x62,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,
 0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
-0x18,0x60,0xda,0x65,0xe3,0x83,0xc7,0x82,0xa2,0xd9,0x27,0x44,0xf8,0xb4,0x40,0x44,
+0x19,0x60,0x52,0x65,0xe3,0x83,0xc7,0x82,0xa2,0xd9,0x27,0x44,0xfb,0xb4,0x40,0x47,
 0x29,0xf0,0xf7,0x60,0xff,0x64,0xa0,0x84,0xa2,0xda,0x0b,0xf2,0x03,0xfa,0xff,0xff,
 0x0c,0xf2,0x04,0xfa,0x34,0xf2,0xff,0xff,0xdc,0x84,0x34,0xfa,0x14,0xf2,0x0f,0xb5,
 0x0f,0xb4,0xcc,0x84,0x94,0x80,0x29,0xf0,0x04,0x02,0xfb,0x60,0xff,0x64,0xa0,0x84,
-0x03,0x00,0x04,0x64,0x60,0x47,0xb0,0x84,0x29,0xfa,0x00,0x64,0x15,0xfa,0x3f,0x00,
-0xc4,0x3a,0x1d,0x00,0x27,0x44,0xfd,0xb4,0x40,0x47,0x48,0xe2,0x5a,0x60,0xae,0x64,
+0x03,0x00,0x04,0x64,0x60,0x47,0xb0,0x84,0x29,0xfa,0x00,0x64,0x15,0xfa,0x35,0x00,
+0xc4,0x3a,0x1d,0x00,0x27,0x44,0xfd,0xb4,0x40,0x47,0x48,0xe2,0x63,0x60,0xa0,0x64,
 0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,
-0xdc,0x84,0xa2,0xdb,0x5b,0x60,0x3e,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
-0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x20,0x00,0x28,0x44,
-0x04,0x2a,0x0b,0x00,0x32,0x44,0x04,0x2a,0x08,0x00,0x22,0xf3,0xff,0xff,0xff,0xff,
-0x02,0x2a,0x03,0x00,0x17,0x60,0xa0,0x78,0xff,0xff,0x04,0x26,0x08,0x00,0x68,0x3a,
-0x06,0x00,0x32,0x44,0x00,0x2b,0x03,0x00,0x15,0x60,0x39,0x78,0xff,0xff,0x11,0x60,
-0x8e,0x78,0xff,0xff,0x0a,0x64,0xa0,0xfb,0x11,0x60,0x8e,0x78,0xff,0xff,0x1c,0x42,
-0x22,0x46,0x53,0xf3,0xff,0xff,0x40,0x45,0x29,0xf2,0xff,0xff,0xff,0xff,0x04,0x2b,
-0x61,0x00,0x16,0xf2,0xff,0xff,0x40,0x43,0x21,0xf2,0x25,0x40,0x02,0x36,0xe0,0x84,
-0x55,0xf3,0x60,0x41,0x60,0x45,0x23,0x60,0x58,0x4f,0x75,0x78,0xff,0xff,0xae,0x81,
-0xff,0xff,0x0d,0x03,0xdc,0x84,0x03,0x65,0xd5,0x80,0x25,0x40,0x03,0x3a,0x07,0x00,
-0x06,0x07,0x23,0x5c,0x60,0x41,0x00,0x64,0x80,0x7f,0x30,0x83,0x61,0x44,0x40,0x44,
-0x0f,0x64,0x14,0xf0,0x34,0xf2,0xa0,0x81,0x0f,0xb4,0xc9,0x85,0xd4,0x80,0x24,0x44,
-0x0f,0x02,0x1f,0xf2,0x25,0x40,0x02,0x36,0xe0,0x84,0x55,0xf3,0x60,0x41,0x60,0x45,
-0x23,0x60,0x58,0x4f,0x75,0x78,0xff,0xff,0xae,0x81,0xff,0xff,0x01,0x03,0xdc,0x84,
-0xc0,0x65,0xc4,0x85,0x59,0x60,0xe8,0x61,0xa1,0xd1,0x25,0x44,0xd0,0x80,0xff,0xff,
-0x01,0x04,0x64,0x44,0x2b,0x5c,0x08,0x26,0x0a,0x00,0x00,0x36,0x25,0xf1,0x01,0x36,
-0x26,0xf1,0x02,0x36,0x27,0xf1,0x03,0x36,0x28,0xf1,0x65,0x44,0x0a,0x00,0x00,0x36,
-0x29,0xf1,0x01,0x36,0x2a,0xf1,0x02,0x36,0x2b,0xf1,0x03,0x36,0x2c,0xf1,0x65,0x44,
-0xa0,0xa4,0xc0,0x84,0xb5,0xf1,0xc0,0x84,0xc0,0x84,0x2a,0xfa,0x27,0x44,0x40,0xbc,
-0x40,0x47,0x49,0x00,0x17,0xf2,0x1f,0xf2,0x40,0x43,0x25,0x40,0x02,0x36,0xe0,0x84,
-0x55,0xf3,0x60,0x41,0x60,0x45,0x23,0x60,0x58,0x4f,0x75,0x78,0xff,0xff,0xae,0x81,
-0xff,0xff,0x0d,0x03,0xdc,0x84,0x03,0x65,0xd5,0x80,0x25,0x40,0x03,0x3a,0x07,0x00,
-0x06,0x07,0x23,0x5c,0x60,0x41,0x00,0x64,0x80,0x7f,0x30,0x83,0x61,0x44,0x40,0x44,
-0x29,0xf2,0xff,0xff,0x60,0x40,0xc4,0x36,0x23,0x00,0x56,0x64,0xa0,0xd2,0x00,0x7c,
-0x60,0x40,0x01,0x26,0x1c,0x00,0x59,0x60,0xe8,0x61,0xa1,0xd1,0x25,0x44,0xd0,0x80,
-0xff,0xff,0x01,0x04,0x64,0x44,0x2b,0x5c,0x08,0x26,0x09,0x00,0x00,0x36,0x25,0xf1,
-0x01,0x36,0x26,0xf1,0x02,0x36,0x27,0xf1,0x03,0x36,0x28,0xf1,0x08,0x00,0x00,0x36,
-0x29,0xf1,0x01,0x36,0x2a,0xf1,0x02,0x36,0x2b,0xf1,0x03,0x36,0x2c,0xf1,0x2a,0xf8,
-0x27,0x44,0xbf,0xb4,0x40,0x47,0x22,0x46,0x29,0xf0,0x6b,0x44,0x64,0x40,0x40,0x27,
-0x80,0xbc,0x60,0x4b,0xf3,0x60,0x58,0x4f,0xba,0x78,0xff,0xff,0xbc,0xff,0x22,0x46,
-0x2b,0xf2,0xff,0xff,0xff,0xff,0x01,0x26,0x0e,0x00,0x27,0x44,0x04,0xbc,0x40,0x47,
-0x35,0xf3,0xb4,0xff,0x60,0x5b,0x4d,0xe2,0x84,0x60,0x1d,0x7d,0x8e,0x60,0x00,0x6b,
-0x13,0x60,0x9e,0x78,0xff,0xff,0xb5,0xff,0xbc,0xff,0x46,0xff,0x47,0xff,0xb7,0xff,
-0xb4,0xff,0x00,0x6b,0x99,0xff,0x3e,0x44,0x7c,0xb4,0x08,0xbc,0x40,0x5e,0xff,0xff,
-0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x99,0xff,
-0x3d,0x44,0x10,0xbc,0x00,0x7f,0x40,0x5d,0x98,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb7,0xff,
-0xb4,0xff,0xff,0xff,0xff,0xff,0x84,0x60,0x1d,0x7d,0x99,0xff,0x3e,0x44,0x02,0xbc,
-0x00,0x7f,0x40,0x5e,0x98,0xff,0xff,0xff,0x46,0xff,0x47,0xff,0x13,0x60,0x8b,0x78,
-0xff,0xff,0x0e,0x64,0xa0,0xfb,0x00,0x60,0x13,0x66,0x46,0x42,0x10,0x60,0x00,0x7c,
-0x3c,0x46,0x29,0xf2,0x22,0x46,0xa0,0x84,0xb4,0xbc,0x29,0xfa,0x59,0x60,0xe8,0x61,
-0xa1,0xd1,0x53,0xf3,0xff,0xff,0xd0,0x80,0xff,0xff,0x01,0x06,0x64,0x44,0x40,0x45,
-0x3c,0x46,0x2b,0xf2,0x2c,0xf0,0x60,0x43,0x2d,0xf2,0x22,0x46,0x2b,0xfc,0x2c,0xf8,
-0x2d,0xfa,0x3c,0x46,0x2e,0xf2,0x2f,0xf0,0x60,0x43,0x30,0xf2,0x22,0x46,0x2e,0xfc,
-0x2f,0xf8,0x30,0xfa,0x3c,0x46,0x29,0xf2,0xff,0xff,0xff,0xff,0x04,0x2b,0x13,0x00,
-0x21,0xf2,0x53,0xf1,0xff,0xff,0x64,0x40,0x02,0x36,0xe0,0x84,0x55,0xf3,0x60,0x41,
-0x60,0x45,0x23,0x60,0x58,0x4f,0x75,0x78,0xff,0xff,0xae,0x81,0xff,0xff,0x01,0x03,
-0xdc,0x84,0x40,0x44,0x12,0x00,0x1f,0xf2,0x53,0xf1,0xff,0xff,0x64,0x40,0x02,0x36,
-0xe0,0x84,0x55,0xf3,0x60,0x41,0x60,0x45,0x23,0x60,0x58,0x4f,0x75,0x78,0xff,0xff,
-0xae,0x81,0xff,0xff,0x01,0x03,0xdc,0x84,0x40,0x44,0x00,0x64,0x40,0x43,0x25,0x44,
-0x00,0x3a,0x0b,0x00,0x2b,0x5c,0x08,0x26,0x04,0x00,0x2d,0xf1,0x25,0xf1,0x64,0x43,
-0x2b,0x00,0x31,0xf1,0x29,0xf1,0x64,0x43,0x24,0x00,0x01,0x3a,0x0b,0x00,0x2b,0x5c,
-0x08,0x26,0x04,0x00,0x2e,0xf1,0x26,0xf1,0x64,0x43,0x1e,0x00,0x32,0xf1,0x2a,0xf1,
-0x64,0x43,0x17,0x00,0x02,0x3a,0x0b,0x00,0x2b,0x5c,0x08,0x26,0x04,0x00,0x2f,0xf1,
-0x27,0xf1,0x64,0x43,0x11,0x00,0x33,0xf1,0x2b,0xf1,0x64,0x43,0x0a,0x00,0x2b,0x5c,
-0x08,0x26,0x04,0x00,0x30,0xf1,0x28,0xf1,0x64,0x43,0x06,0x00,0x34,0xf1,0x2c,0xf1,
-0x64,0x43,0xa0,0xa3,0x60,0x65,0x02,0x00,0xc0,0x65,0xd7,0x83,0xb5,0xf3,0xff,0xff,
-0xc0,0x84,0xc0,0x84,0xc4,0x84,0x24,0x45,0xc4,0x84,0x22,0x46,0x2a,0xfa,0x63,0x44,
-0xb5,0xf1,0xff,0xff,0xd0,0x84,0xff,0xff,0x40,0x44,0xf3,0x60,0x58,0x4f,0xba,0x78,
-0xff,0xff,0xbc,0xff,0x27,0x44,0x02,0xbc,0x40,0x47,0x35,0xf3,0xb4,0xff,0x60,0x5b,
-0x4d,0xe2,0x13,0x60,0x9e,0x78,0xff,0xff,0x0d,0x64,0xa0,0xfb,0x00,0x64,0x40,0x43,
-0x2b,0x44,0x08,0x26,0x0f,0x00,0x25,0x44,0x00,0x36,0x25,0xf1,0x01,0x36,0x26,0xf1,
-0x02,0x36,0x27,0xf1,0xfd,0xa0,0xff,0xff,0x15,0x02,0x28,0xf1,0x80,0x60,0x00,0x64,
-0x40,0x43,0x10,0x00,0x25,0x44,0x00,0x36,0x29,0xf1,0x01,0x36,0x2a,0xf1,0x02,0x36,
-0x2b,0xf1,0xfd,0xa0,0xff,0xff,0x04,0x02,0x2c,0xf1,0x80,0x60,0x00,0x64,0x40,0x43,
-0x60,0x65,0x01,0x00,0xc0,0x65,0x00,0x60,0x13,0x66,0x20,0xf3,0x46,0x42,0xd0,0x83,
-0xff,0xff,0x02,0x28,0x00,0x63,0x2a,0xfc,0x64,0x44,0xb5,0xf1,0xd4,0x84,0xd0,0x84,
-0xff,0xff,0x40,0x44,0xd4,0x64,0x29,0xfa,0x21,0x46,0x2e,0xf2,0x2f,0xf0,0x60,0x43,
-0x30,0xf2,0x22,0x46,0x2b,0xfc,0x2c,0xf8,0x2d,0xfa,0xf3,0x60,0x58,0x4f,0xba,0x78,
-0xff,0xff,0xbc,0xff,0x5c,0x00,0x0f,0x64,0xa0,0xfb,0x5b,0x60,0x3a,0x64,0xa0,0xd3,
-0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,
-0xa2,0xdb,0x00,0x64,0x40,0x43,0x00,0x60,0x13,0x66,0x46,0x42,0xc4,0x64,0x29,0xfa,
-0x21,0x46,0x2e,0xf2,0x2f,0xf0,0x60,0x43,0x30,0xf2,0x22,0x46,0x2b,0xfc,0x2c,0xf8,
-0x2d,0xfa,0x2b,0x44,0x08,0x26,0x0f,0x00,0x25,0x44,0x00,0x36,0x25,0xf1,0x01,0x36,
-0x26,0xf1,0x02,0x36,0x27,0xf1,0xfd,0xa0,0xff,0xff,0x15,0x02,0x28,0xf1,0x80,0x60,
-0x00,0x64,0x40,0x43,0x10,0x00,0x25,0x44,0x00,0x36,0x29,0xf1,0x01,0x36,0x2a,0xf1,
-0x02,0x36,0x2b,0xf1,0xfd,0xa0,0xff,0xff,0x04,0x02,0x2c,0xf1,0x80,0x60,0x00,0x64,
-0x40,0x43,0x60,0x65,0x01,0x00,0xc0,0x65,0x20,0xf3,0x22,0x46,0xd0,0x84,0x2a,0xfa,
-0x64,0x44,0xb5,0xf1,0xd4,0x84,0xd0,0x84,0xff,0xff,0x40,0x44,0xf3,0x60,0x58,0x4f,
-0xba,0x78,0xff,0xff,0xbc,0xff,0x5a,0x60,0xb2,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,
-0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0xb4,0xff,
-0xff,0xff,0xff,0xff,0x84,0x60,0x1d,0x7d,0x8e,0x60,0x00,0x6b,0x11,0x60,0x8e,0x78,
-0xff,0xff,0x10,0x64,0xa0,0xfb,0xbc,0xff,0x00,0x60,0x13,0x66,0x46,0x42,0xf3,0x60,
-0x58,0x4f,0xba,0x78,0xff,0xff,0x11,0x60,0x8e,0x78,0xff,0xff,0xff,0x00,0x00,0xe0,
-0x7f,0x00,0x1a,0x0e,0xd8,0xf1,0x01,0x64,0xd0,0x80,0xcf,0xfb,0x1a,0x03,0xd7,0xfb,
-0x18,0x60,0x02,0x65,0xa5,0xd3,0x41,0x4d,0xdc,0x84,0xa5,0xdb,0x26,0x44,0x02,0x26,
-0x17,0x00,0x3e,0x45,0x35,0x81,0xff,0xff,0x0f,0x02,0x5b,0x60,0x86,0x64,0xa0,0xd3,
-0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,
-0xa2,0xdb,0xf3,0x60,0x8e,0x78,0xff,0xff,0x41,0x5e,0x02,0x64,0x40,0x46,0xd1,0xfe,
-0x21,0x46,0x46,0x45,0x4c,0xe2,0x0e,0x64,0x40,0x4c,0x19,0xff,0x03,0xe1,0x26,0x44,
-0x02,0xb4,0x12,0xbc,0x40,0x46,0x2e,0x44,0x20,0xfa,0x17,0x60,0x98,0x62,0xa2,0xd1,
-0xff,0xff,0x64,0x40,0x01,0x2a,0x12,0x00,0x66,0x69,0xff,0xff,0xff,0xff,0x01,0x16,
-0xfe,0x00,0x68,0x44,0x00,0x7f,0x60,0x45,0x7c,0x69,0xff,0xff,0xff,0xff,0x01,0x16,
-0xfe,0x00,0x68,0x44,0x00,0x7f,0x60,0x47,0xb4,0x84,0x0f,0x00,0x00,0x65,0x7c,0x69,
-0xff,0xff,0xff,0xff,0x01,0x16,0xfe,0x00,0x68,0x44,0xdf,0xf1,0x00,0x7f,0xd0,0x80,
-0xff,0xff,0x01,0x04,0x64,0x44,0x60,0x47,0xb4,0x84,0x25,0xfa,0x20,0xf2,0xff,0xff,
-0xff,0xb4,0x0a,0x36,0x00,0x7f,0x14,0x36,0x01,0x7f,0x37,0x36,0x02,0x7f,0x6e,0x36,
-0x03,0x7f,0x26,0xfa,0x00,0x7c,0x22,0xf8,0x35,0xf1,0x01,0x64,0x57,0xfb,0x2e,0x44,
-0xa1,0xff,0x6c,0x43,0x21,0xfc,0x7e,0x69,0xc3,0x94,0xcd,0xe2,0x9c,0xfe,0xff,0xff,
-0x0e,0x04,0x67,0x60,0xd8,0x62,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x01,0x64,
-0xcf,0xfb,0x27,0x44,0x80,0xbc,0x40,0x47,0xf3,0x60,0x94,0x78,0xff,0xff,0xdc,0xf1,
-0xff,0xff,0x64,0x40,0x00,0x36,0x03,0x00,0x0e,0x60,0x8b,0x78,0xff,0xff,0x00,0x7c,
-0xcf,0xf9,0x40,0x45,0x6e,0x36,0x35,0x00,0x37,0x36,0x26,0x00,0x14,0x36,0x1f,0x00,
-0x0a,0x36,0x17,0x00,0x5b,0x60,0x7a,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
-0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x21,0x63,0xa0,0xfd,
-0x27,0x44,0x80,0xbc,0x40,0x47,0x07,0x60,0xd0,0x74,0xcd,0xe2,0xf3,0x60,0x94,0x78,
-0xff,0xff,0xa1,0xff,0x4c,0x48,0xeb,0x83,0xeb,0x83,0xeb,0x83,0x20,0x00,0xa1,0xff,
-0x4c,0x48,0xeb,0x83,0xeb,0x83,0x1b,0x00,0xa1,0xff,0x4c,0x48,0xe3,0x85,0xc7,0x85,
-0xe3,0x83,0xe3,0x83,0xe3,0x83,0xc7,0x83,0xeb,0x83,0xeb,0x83,0xeb,0x83,0xeb,0x83,
-0x0e,0x00,0xe3,0x85,0xc7,0x85,0xe3,0x83,0xe3,0x83,0xe3,0x83,0xa1,0xff,0x4c,0x48,
-0xc7,0x83,0xeb,0x83,0xeb,0x83,0xeb,0x83,0xff,0xff,0x80,0x27,0xcf,0x83,0x1f,0xfc,
-0xfc,0xa3,0x48,0xf3,0x43,0x43,0xa1,0xff,0x4c,0x4e,0x1c,0x7c,0xd0,0x9c,0xd3,0x80,
-0x20,0x44,0x0f,0x04,0x5b,0x60,0x7e,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
-0x27,0x44,0x80,0xbc,0x40,0x47,0x07,0x60,0xd0,0x74,0xcd,0xe2,0xf3,0x60,0x94,0x78,
-0xff,0xff,0xe8,0x84,0x52,0x4a,0x01,0x05,0x70,0x80,0x52,0x63,0x28,0x44,0xbd,0xda,
-0xff,0xff,0xa1,0xff,0x6c,0x45,0x2e,0x44,0x80,0x2b,0x20,0xfb,0xbd,0xda,0x65,0x44,
-0xbd,0xf1,0xbd,0xda,0x50,0xfe,0xff,0xff,0x01,0x2a,0x04,0x00,0x26,0x44,0x20,0xbc,
-0x40,0x46,0x01,0x00,0xd0,0x80,0xa1,0xff,0x6c,0x44,0xbe,0xf1,0xbd,0xda,0xc4,0x85,
-0xd0,0x80,0x00,0x61,0x28,0x44,0x04,0x2a,0x03,0x00,0x40,0x27,0xd1,0x00,0x01,0x61,
-0xbf,0xf1,0xff,0xff,0xa1,0xff,0x6c,0x44,0xbd,0xda,0xc4,0x85,0xd0,0x80,0x32,0x44,
-0x01,0x2a,0x27,0x00,0x28,0x44,0xd4,0x36,0x02,0x00,0xc4,0x3a,0x06,0x00,0x00,0x64,
-0x38,0xfa,0x08,0x64,0xf2,0x60,0xbb,0x78,0x40,0x4c,0xa1,0xff,0x6c,0x44,0xbd,0xda,
-0xff,0xff,0xa1,0xff,0x6c,0x44,0xbd,0xda,0x20,0x61,0x28,0x44,0x03,0x2b,0x00,0x61,
-0x60,0x40,0x40,0x27,0x02,0xb9,0x41,0x4e,0xa1,0xff,0x6c,0x44,0xbd,0xda,0x28,0x44,
-0xb4,0x36,0xe5,0x00,0xa4,0x36,0xe3,0x00,0xe4,0x36,0xe1,0x00,0xf1,0x60,0xb9,0x78,
-0xff,0xff,0x61,0x40,0x01,0x22,0x31,0x00,0xa1,0xff,0x6c,0x44,0xbd,0xda,0x28,0x44,
-0xd4,0x3a,0x02,0x00,0x48,0x61,0x08,0x00,0xc4,0x36,0x05,0x00,0x28,0x44,0xb4,0x3a,
-0x03,0x00,0x4d,0x61,0x01,0x00,0x49,0x61,0x41,0x4d,0x46,0x4e,0x08,0x64,0x40,0x4c,
-0x05,0x01,0x00,0x65,0x2d,0x44,0x04,0x2a,0x0a,0x00,0x0d,0x00,0x2d,0x44,0x49,0x36,
-0x05,0x00,0x48,0x3a,0x07,0x00,0x10,0x65,0x27,0x40,0x40,0x26,0x30,0x65,0xf2,0x60,
-0xbe,0x78,0x35,0x8d,0x30,0x65,0xa1,0xff,0x6c,0x44,0xbd,0xda,0xff,0xff,0xa1,0xff,
-0x6c,0x44,0xbd,0xda,0xf2,0x60,0xbb,0x78,0x35,0x8d,0x45,0x4e,0x23,0x44,0xe8,0xa5,
-0xff,0xff,0x05,0x05,0x60,0x43,0xfa,0xa3,0xf3,0x60,0xa8,0x78,0xff,0xff,0xa1,0xff,
-0x6c,0x44,0xbd,0xda,0xff,0xff,0xa1,0xff,0x6c,0x44,0xbd,0xda,0xff,0xff,0xa1,0xff,
-0x6c,0x44,0xbd,0xda,0x26,0x41,0x20,0x26,0x1d,0x00,0x2d,0x44,0x22,0x01,0x32,0x40,
-0x02,0x2a,0x03,0x00,0x50,0xbc,0x40,0x4d,0x1e,0x00,0x01,0x64,0xcf,0xfb,0x18,0x60,
-0xe6,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x27,0x44,0x06,0x22,0x06,0x00,
-0xf9,0xb4,0x40,0x47,0x02,0x64,0x21,0xfb,0xc0,0xfe,0x48,0xe2,0x27,0x44,0x80,0xbc,
-0x40,0x47,0x09,0x00,0x2e,0x44,0x03,0xa4,0xef,0xb1,0x08,0x24,0x40,0xb9,0x41,0x46,
-0x02,0x00,0x70,0xbc,0x40,0x4d,0xa1,0xff,0x6c,0x44,0xbd,0xda,0x20,0x61,0x28,0x44,
-0x03,0x2b,0x00,0x61,0x60,0x40,0x40,0x2b,0x0d,0x00,0xbf,0x60,0xff,0x65,0x43,0xf3,
-0x02,0xb9,0x80,0xb0,0x28,0x44,0x06,0x03,0xa4,0x84,0x40,0x48,0x29,0xfa,0x04,0x64,
-0x22,0xfa,0x02,0xa9,0x23,0x44,0xe8,0xa4,0x41,0x4e,0x20,0x26,0xfa,0xa4,0x28,0x40,
-0x40,0x27,0xf8,0xa4,0x40,0x43,0x38,0xfa,0xff,0xff,0xa1,0xff,0x6c,0x44,0xbd,0xda,
-0x23,0x44,0x80,0x2b,0x03,0x00,0x14,0x64,0x40,0x43,0x38,0xfa,0x23,0x47,0x3f,0xfa,
-0x08,0x65,0x45,0x4c,0x21,0xf2,0x70,0x45,0xd4,0x80,0xff,0xff,0x02,0x06,0x64,0xe2,
-0x60,0x50,0xa1,0xff,0x6c,0x44,0xbd,0xda,0x2e,0x44,0x22,0x26,0x05,0x00,0x23,0x41,
-0xa1,0xff,0x6c,0x44,0x34,0xfa,0x54,0x00,0xa1,0xff,0x6c,0x44,0xbd,0xda,0x2e,0x40,
-0x20,0x2a,0x12,0x00,0xa1,0xff,0x6c,0x44,0xbd,0xda,0xff,0xff,0xa1,0xff,0x6c,0x44,
-0xbd,0xda,0x2e,0x40,0x02,0x26,0x05,0x00,0x23,0x41,0xa1,0xff,0x6c,0x44,0x37,0xfa,
-0x3f,0x00,0xa1,0xff,0x6c,0x44,0x37,0xfa,0x32,0x44,0x01,0x2a,0x1a,0x00,0x00,0xf4,
-0x02,0x62,0x46,0x45,0xa1,0xff,0xda,0x82,0x6c,0x44,0xa2,0xda,0xff,0xff,0xa1,0xff,
-0xda,0x82,0x6c,0x44,0xa2,0xda,0x23,0x41,0x04,0xa1,0x78,0x7c,0x01,0x65,0x61,0x43,
-0xd1,0x80,0x46,0x45,0x02,0x07,0x04,0xa1,0x37,0x00,0x64,0x43,0xd1,0x81,0x7c,0x7c,
-0x3b,0x00,0xcf,0xf3,0x48,0xf1,0x00,0xa0,0x23,0x44,0x04,0x02,0x00,0xa0,0xd0,0x80,
-0x01,0x03,0x05,0x04,0x60,0x43,0x0c,0xa3,0xf3,0x60,0xa8,0x78,0xff,0xff,0xa1,0xff,
-0x6c,0x44,0xff,0xff,0x1a,0xfa,0xff,0xff,0xa1,0xff,0x6c,0x44,0xff,0xff,0x1b,0xfa,
-0xb0,0xff,0x01,0x5d,0xdc,0xfe,0x05,0xff,0x3e,0xf3,0x23,0x41,0x04,0xbc,0x3e,0xfb,
-0x7c,0x7c,0x01,0x65,0x25,0x44,0xd5,0x80,0x61,0x43,0x45,0x04,0x35,0x03,0xdc,0xf3,
-0xff,0xff,0xff,0xff,0x00,0x36,0x03,0x00,0x0e,0x60,0x8b,0x78,0xff,0xff,0x00,0xf4,
-0x02,0x62,0xd1,0x80,0x46,0x45,0x06,0x07,0x61,0x40,0x01,0x26,0x01,0xa1,0x61,0x5c,
-0x00,0x61,0x02,0x00,0x64,0x43,0xd1,0x81,0xa1,0xff,0xec,0x44,0x5a,0xda,0xfc,0x1d,
-0xe2,0x1e,0x23,0x00,0xa1,0xff,0xd5,0x80,0x61,0x43,0x37,0x04,0x16,0x03,0x00,0xf4,
-0x02,0x62,0xd1,0x80,0x46,0x45,0x07,0x07,0xec,0x44,0x61,0x40,0x01,0x26,0x01,0xa1,
-0x61,0x5c,0x00,0x61,0x05,0x00,0x64,0x43,0xec,0x44,0xd1,0x81,0x01,0x00,0xec,0x44,
-0x7a,0xda,0xfd,0x1d,0xe8,0x1e,0x0a,0x00,0xa1,0xff,0xb6,0xff,0x6c,0x44,0x00,0xf4,
-0x02,0xfa,0x02,0x7c,0x46,0x45,0xb7,0xff,0x06,0x00,0xa1,0xff,0xb6,0xff,0x00,0x64,
-0x6c,0x44,0x5a,0xda,0xb7,0xff,0x64,0x41,0x28,0x44,0x40,0x2b,0x1d,0x00,0xb1,0xff,
-0x32,0x44,0x01,0x26,0x19,0x00,0xa1,0xff,0x6c,0x44,0xff,0xff,0x3c,0xfb,0xff,0xff,
-0xa1,0xff,0x6c,0x44,0xff,0xff,0x3d,0xfb,0x0f,0x00,0x6c,0x44,0x64,0x41,0x28,0x40,
-0x40,0x2b,0x0d,0x00,0xb1,0xff,0x32,0x40,0x01,0x26,0x09,0x00,0x3c,0xfb,0xff,0xff,
-0xa1,0xff,0x6c,0x44,0xff,0xff,0x3d,0xfb,0x21,0x46,0xa1,0xff,0x6c,0x40,0x21,0x46,
-0x6a,0x43,0xa1,0xff,0x6c,0x40,0x24,0xf1,0xff,0xff,0x64,0x54,0xcd,0xe2,0x19,0xff,
-0x01,0x16,0xfe,0x00,0x68,0x44,0x60,0x40,0x10,0x2a,0x04,0x00,0x22,0xf2,0xff,0xff,
-0x08,0xbc,0x22,0xfa,0x32,0x44,0x03,0x22,0x20,0x00,0x47,0xff,0x26,0x44,0xfd,0xb4,
-0x84,0xbc,0x63,0x40,0x40,0x27,0x08,0x00,0x0d,0x63,0x07,0x15,0x06,0x15,0x05,0x15,
-0x04,0x15,0xff,0xa3,0x02,0x15,0xf9,0x02,0x7f,0xb4,0x40,0x46,0x6c,0x40,0x28,0x44,
-0x40,0x2b,0x08,0x00,0x32,0x44,0x01,0x2a,0x05,0x00,0x23,0x44,0x08,0xa4,0x38,0xfa,
-0x60,0x47,0x3f,0xfa,0xf3,0x60,0x74,0x78,0xff,0xff,0x63,0x40,0x40,0x2b,0x05,0x00,
-0xd2,0xf3,0xff,0xff,0x01,0xa4,0xd2,0xfb,0x08,0x00,0x0d,0x64,0x4b,0x15,0x4a,0x15,
-0x49,0x15,0x48,0x15,0xff,0xa4,0x46,0x15,0xf9,0x02,0x48,0xe2,0xcf,0xf3,0xff,0xff,
-0x00,0xa0,0xff,0xff,0x73,0x02,0x27,0x44,0x06,0x22,0x05,0x00,0xf9,0xb4,0x40,0x47,
-0x02,0x64,0x21,0xfb,0xc0,0xfe,0x20,0xf2,0xff,0xff,0xff,0xb4,0x0a,0x36,0x00,0x7f,
-0x14,0x36,0x01,0x7f,0x37,0x36,0x02,0x7f,0x6e,0x36,0x03,0x7f,0x26,0xfa,0x5b,0x60,
-0x52,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,
-0xff,0xff,0xdc,0x84,0xa2,0xdb,0x26,0xf2,0xff,0xff,0x60,0x47,0x00,0x7f,0xe0,0x84,
-0xe0,0x84,0x60,0x45,0x5b,0x60,0x56,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,0xdc,0x84,
-0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x28,0x40,
-0x04,0x26,0x3c,0x00,0x28,0x40,0x40,0x2b,0x39,0x00,0x26,0x44,0x04,0xbc,0xfd,0xb4,
-0x40,0x46,0x34,0x00,0x6c,0x40,0x2d,0x44,0x20,0x2a,0x18,0x00,0xb5,0xf3,0xff,0xff,
-0xf7,0xa4,0x60,0x54,0xcd,0xe2,0x5d,0x2a,0x05,0x00,0x70,0x44,0x00,0xbc,0xff,0xff,
-0x0d,0x02,0x05,0x00,0x59,0x2a,0x03,0x00,0x27,0x40,0x02,0x2a,0x07,0x00,0x47,0xff,
-0xb5,0xff,0x00,0x64,0xd7,0xfb,0x13,0x60,0xbe,0x78,0xff,0xff,0xcf,0xf3,0xff,0xff,
-0x00,0xa0,0x26,0x44,0x03,0x03,0x84,0xbc,0x40,0x46,0x10,0x00,0x84,0xbc,0x2d,0x40,
-0x0c,0x22,0x02,0x00,0x40,0x46,0x0a,0x00,0xfd,0xb4,0x40,0x46,0x25,0x44,0x06,0xfa,
-0x60,0x46,0x01,0xf2,0xff,0xff,0x61,0x5e,0x03,0x2b,0x01,0xfa,0x21,0x46,0x08,0x29,
-0x09,0x00,0x22,0xf1,0xff,0xff,0x64,0x40,0x07,0x2e,0x04,0x00,0x43,0xff,0x10,0x64,
-0x21,0xfb,0xc0,0xfe,0x00,0x64,0xd7,0xfb,0x47,0xff,0x12,0x60,0xe7,0x78,0xff,0xff,
-0xa1,0xff,0x6c,0x43,0x63,0x54,0xcd,0xe2,0x0e,0x64,0x01,0x00,0x0c,0x64,0x40,0x4c,
-0x19,0xff,0x00,0x64,0x40,0x4a,0xd7,0xfb,0x08,0x64,0x40,0x4c,0x27,0x44,0x06,0x22,
-0x06,0x00,0xf9,0xb4,0x40,0x47,0x02,0x64,0x21,0xfb,0xc0,0xfe,0x48,0xe2,0x82,0xe1,
-0xa1,0xff,0xd4,0x00,0x00,0x60,0x18,0x63,0xa1,0xff,0xec,0x44,0xff,0xff,0xfc,0x1d,
-0x04,0x1e,0xb6,0xff,0xa1,0xff,0x6c,0x44,0xb7,0xff,0x08,0x64,0x40,0x4c,0x19,0xff,
-0x27,0x44,0x80,0xbc,0x40,0x47,0xc2,0x00,0x01,0x64,0xd0,0xfb,0x24,0x44,0x60,0x48,
-0x90,0x6a,0x60,0x47,0x23,0x41,0xe1,0x81,0xff,0xff,0x01,0x16,0xfe,0x00,0x60,0x48,
-0x8e,0x6a,0x00,0x64,0x02,0x24,0x80,0x64,0x69,0x83,0xde,0xf1,0x25,0x45,0x02,0x2a,
-0x03,0x00,0x64,0x40,0x01,0x2a,0x04,0xbc,0x01,0x16,0xfe,0x00,0x60,0x48,0x8c,0x6a,
-0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x01,0x16,0xfe,0x00,0x02,0xe1,0x08,0x64,
-0x40,0x4c,0x29,0x44,0x01,0xbc,0x40,0x49,0x19,0xff,0x52,0x63,0x22,0x46,0xbd,0xd0,
-0x22,0xf3,0x43,0xff,0x60,0x40,0x07,0x22,0x03,0x00,0x10,0x64,0x21,0xfb,0xc0,0xfe,
-0x01,0xe1,0x28,0xf2,0x44,0x48,0x60,0x40,0x01,0x2a,0x03,0x00,0x40,0x67,0xb0,0x84,
-0x60,0x5c,0x99,0xff,0x07,0x60,0x00,0xe8,0x98,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0xff,0xff,0xff,0xff,0xff,0xff,0x80,0xe8,0xff,0xff,0xff,0xff,0xff,0xff,0x64,0x4d,
-0x64,0x47,0x60,0x4d,0xff,0xff,0xff,0xff,0xa1,0xff,0xb5,0xff,0xbb,0xff,0x32,0x64,
-0xa0,0xfb,0xff,0xff,0xa1,0xff,0xbd,0xd2,0xff,0xff,0x60,0x4d,0x60,0x47,0x60,0x4d,
-0x26,0x44,0x02,0xb4,0x40,0x46,0x20,0x61,0x28,0x44,0x80,0x36,0x04,0x00,0x50,0x3a,
-0x03,0x00,0x00,0x65,0xb5,0x81,0x04,0xb9,0x41,0x4e,0xa1,0xff,0xbd,0xd2,0xff,0xff,
-0x60,0x4d,0x60,0x47,0x60,0x4d,0xa1,0xff,0xbd,0xd2,0xff,0xff,0x60,0x4d,0x60,0x47,
-0x60,0x4d,0xa1,0xff,0xbd,0xd2,0xff,0xff,0x60,0x4c,0x28,0x44,0xc4,0x36,0x13,0x00,
-0xd4,0x36,0x11,0x00,0xa1,0xff,0xbd,0xd2,0xff,0xff,0x60,0x4c,0xa1,0xff,0xbd,0xd2,
-0xff,0xff,0x60,0x4c,0xa1,0xff,0xbd,0xd2,0xff,0xff,0x60,0x4c,0x28,0x44,0xb4,0x36,
-0x02,0x00,0xa4,0x3a,0x03,0x00,0xf5,0x60,0x03,0x78,0xff,0xff,0xa1,0xff,0xbd,0xd2,
-0xff,0xff,0x60,0x4c,0xff,0x65,0xa1,0xff,0xbd,0xd2,0xff,0xff,0x60,0x4c,0x2e,0x41,
-0x28,0x44,0x03,0x2b,0xdf,0xb1,0x60,0x40,0x40,0x27,0x02,0xb9,0xa1,0xff,0xbd,0xd2,
-0xff,0xff,0x60,0x4c,0x23,0x44,0xcc,0x84,0xdc,0x84,0x03,0x03,0x03,0x02,0x08,0xb9,
-0x01,0x00,0x10,0xb9,0xbd,0xd0,0x41,0x4e,0xa1,0xff,0xff,0xff,0x64,0x4c,0x2e,0x44,
-0x22,0x22,0x30,0x00,0x20,0x2a,0x0f,0x00,0xa1,0xff,0xbd,0xd2,0xff,0xff,0x60,0x4c,
-0xa1,0xff,0xbd,0xd2,0xff,0xff,0x60,0x4c,0xa1,0xff,0xbd,0xd2,0xff,0xff,0x60,0x4c,
-0x2e,0x44,0x02,0x2a,0x1f,0x00,0xa1,0xff,0xff,0xff,0x38,0xf3,0x39,0xf3,0x60,0x4c,
-0x60,0x43,0x03,0xf0,0x04,0xf4,0x01,0xf2,0x64,0x42,0x04,0xa4,0xd0,0x81,0xa1,0xff,
-0x63,0x4c,0x23,0x43,0x2e,0x44,0x10,0x2a,0x06,0x00,0xa2,0xd2,0xff,0xff,0xa1,0xff,
-0xff,0xff,0x60,0x4f,0x63,0x00,0xe2,0xd2,0xff,0xff,0xa1,0xff,0xda,0x82,0xc9,0x81,
-0x60,0x4e,0x51,0x00,0x18,0x22,0x0a,0x00,0x10,0x26,0x03,0x00,0xf5,0x60,0x03,0x78,
-0xff,0xff,0x03,0xf0,0x04,0xf4,0x00,0x61,0x64,0x42,0x4b,0x00,0x04,0x2a,0x32,0x00,
-0x00,0xf4,0x01,0xf2,0xff,0x65,0xa4,0x81,0xa1,0xff,0x02,0xfe,0xff,0xff,0x10,0x25,
-0x42,0xfe,0x72,0x45,0x28,0x40,0x50,0x3a,0x00,0x00,0x65,0x4c,0x23,0x43,0xa1,0xf3,
-0x04,0x04,0xdc,0x84,0xa1,0xfb,0x60,0x55,0x65,0x52,0xa1,0xff,0xff,0xff,0x60,0x4c,
-0xa2,0xf3,0x03,0x04,0xdc,0x84,0xa2,0xfb,0xff,0xff,0xa1,0xff,0xff,0xff,0x60,0x4c,
-0xa3,0xf3,0x03,0x04,0xdc,0x84,0xa3,0xfb,0xff,0xff,0xa1,0xff,0x0c,0x62,0x60,0x4c,
-0xf8,0xa3,0x2e,0x44,0xfb,0xb4,0x40,0x4e,0x65,0x44,0xdc,0x80,0xff,0xff,0x01,0x02,
-0x58,0x80,0x0c,0x00,0x23,0x43,0x03,0xf0,0x04,0xf4,0x01,0xf2,0x64,0x42,0x04,0xa4,
-0xd0,0x81,0x04,0x00,0x00,0xf4,0x01,0xf2,0x04,0x62,0xa4,0x81,0xa1,0xff,0xe2,0xd2,
-0xda,0x82,0xc9,0x81,0x60,0x4c,0xfa,0x1c,0xf5,0x1d,0x08,0x1e,0x02,0x02,0x00,0xf4,
-0x04,0x62,0xa2,0xd2,0xff,0xff,0xa1,0xff,0xff,0xff,0x60,0x4d,0x28,0x44,0x40,0x2b,
-0x04,0x00,0xa1,0xff,0x60,0x4e,0xa1,0xff,0x60,0x4c,0xa1,0xff,0xc3,0x60,0x33,0x64,
-0x60,0x4e,0xa1,0xff,0xff,0xff,0x62,0x5c,0x02,0xe1,0x08,0x64,0x40,0x4c,0x19,0xff,
-0x61,0x40,0x7f,0x26,0x02,0x00,0x00,0xf4,0x04,0x7c,0x66,0x44,0x22,0x46,0x0b,0xf8,
-0x0c,0xfa,0x34,0x64,0xa0,0xfb,0x6a,0x40,0x40,0x26,0x02,0x00,0xfc,0x0b,0x02,0x00,
-0x07,0x60,0x80,0xe8,0x24,0xf3,0xff,0xff,0x60,0x54,0xcd,0xe2,0x03,0x64,0xcc,0x84,
-0xff,0xff,0xfd,0x02,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xdc,0x84,0xa2,0xdb,0x64,0x60,0x30,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
+0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x16,0x00,0x28,0x44,
+0x04,0x2a,0x01,0x00,0x00,0x00,0x04,0x26,0x08,0x00,0x68,0x3a,0x06,0x00,0x32,0x44,
+0x00,0x2b,0x03,0x00,0x15,0x60,0x07,0x78,0xff,0xff,0x11,0x60,0x50,0x78,0xff,0xff,
+0x0a,0x64,0x96,0xfb,0x11,0x60,0x50,0x78,0xff,0xff,0x1c,0x42,0x22,0x46,0x46,0xf3,
+0xff,0xff,0x40,0x45,0x29,0xf2,0xff,0xff,0xff,0xff,0x04,0x2b,0x59,0x00,0x16,0xf2,
+0xff,0xff,0x40,0x43,0x21,0xf2,0x25,0x40,0x02,0x36,0xe0,0x84,0x48,0xf3,0x60,0x41,
+0x60,0x45,0x22,0x60,0x58,0x4f,0xe1,0x78,0xff,0xff,0xae,0x81,0xff,0xff,0x0d,0x03,
+0xdc,0x84,0x03,0x65,0xd5,0x80,0x25,0x40,0x03,0x3a,0x07,0x00,0x06,0x07,0x23,0x5c,
+0x60,0x41,0x00,0x64,0x80,0x7f,0x30,0x83,0x61,0x44,0x40,0x44,0x0f,0x64,0x14,0xf0,
+0x34,0xf2,0xa0,0x81,0x0f,0xb4,0xc9,0x85,0xd4,0x80,0x24,0x44,0x0f,0x02,0x1f,0xf2,
+0x25,0x40,0x02,0x36,0xe0,0x84,0x48,0xf3,0x60,0x41,0x60,0x45,0x22,0x60,0x58,0x4f,
+0xe1,0x78,0xff,0xff,0xae,0x81,0xff,0xff,0x01,0x03,0xdc,0x84,0xc0,0x65,0xc4,0x85,
+0x62,0x60,0xda,0x61,0xa1,0xd1,0x25,0x44,0xd0,0x80,0xff,0xff,0x01,0x04,0x64,0x44,
+0xe0,0x84,0xe0,0x84,0xe0,0x9c,0x19,0x60,0xf4,0x64,0x2b,0x40,0x08,0x26,0x03,0x00,
+0x40,0xd1,0x65,0x44,0x04,0x00,0x04,0xa4,0x40,0xd1,0x65,0x44,0xa0,0xa4,0xc0,0x84,
+0xa8,0xf1,0xc0,0x84,0xc0,0x84,0x2a,0xfa,0x27,0x44,0x40,0xbc,0x40,0x47,0x3e,0x00,
+0x17,0xf2,0x1f,0xf2,0x40,0x43,0x25,0x40,0x02,0x36,0xe0,0x84,0x48,0xf3,0x60,0x41,
+0x60,0x45,0x22,0x60,0x58,0x4f,0xe1,0x78,0xff,0xff,0xae,0x81,0xff,0xff,0x0d,0x03,
+0xdc,0x84,0x03,0x65,0xd5,0x80,0x25,0x40,0x03,0x3a,0x07,0x00,0x06,0x07,0x23,0x5c,
+0x60,0x41,0x00,0x64,0x80,0x7f,0x30,0x83,0x61,0x44,0x40,0x44,0x29,0xf2,0xff,0xff,
+0x60,0x40,0xc4,0x36,0x18,0x00,0x56,0x64,0xa0,0xd2,0x00,0x7c,0x60,0x40,0x01,0x26,
+0x11,0x00,0x62,0x60,0xda,0x61,0xa1,0xd1,0x25,0x44,0xd0,0x80,0xff,0xff,0x01,0x04,
+0x64,0x44,0xe0,0x84,0xe0,0x84,0xe0,0x85,0x19,0x60,0xf4,0x64,0x2b,0x40,0x08,0x26,
+0x04,0xa4,0x44,0xd1,0x2a,0xf8,0x27,0x44,0xbf,0xb4,0x40,0x47,0x22,0x46,0x29,0xf0,
+0x6b,0x44,0x64,0x40,0x40,0x27,0x80,0xbc,0x60,0x4b,0xf3,0x60,0x58,0x4f,0xd8,0x78,
+0xff,0xff,0xbc,0xff,0x22,0x46,0x2b,0xf2,0xff,0xff,0xff,0xff,0x01,0x26,0x0e,0x00,
+0x27,0x44,0x04,0xbc,0x40,0x47,0x24,0xf3,0xb4,0xff,0x60,0x5b,0x4d,0xe2,0x84,0x60,
+0x1d,0x7d,0x8e,0x60,0x00,0x6b,0x13,0x60,0x72,0x78,0xff,0xff,0xb5,0xff,0xbc,0xff,
+0x46,0xff,0x47,0xff,0xb7,0xff,0xb4,0xff,0x00,0x6b,0x99,0xff,0x3e,0x44,0x7c,0xb4,
+0x08,0xbc,0x40,0x5e,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0x99,0xff,0x3d,0x44,0x10,0xbc,0x00,0x7f,0x40,0x5d,0x98,0xff,
 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0xff,0xff,0x99,0xff,0x3e,0x44,0x7d,0xb4,0x08,0xbc,0x40,0x5e,0x98,0xff,0x05,0x64,
+0xff,0xff,0xff,0xff,0xb7,0xff,0xb4,0xff,0xff,0xff,0xff,0xff,0x84,0x60,0x1d,0x7d,
+0x99,0xff,0x3e,0x44,0x02,0xbc,0x00,0x7f,0x40,0x5e,0x98,0xff,0xff,0xff,0x46,0xff,
+0x47,0xff,0x13,0x60,0x5f,0x78,0xff,0xff,0x0e,0x64,0x96,0xfb,0x00,0x60,0x13,0x66,
+0x46,0x42,0x10,0x60,0x00,0x7c,0x3c,0x46,0x29,0xf2,0x22,0x46,0xa0,0x84,0xb4,0xbc,
+0x29,0xfa,0x62,0x60,0xda,0x61,0xa1,0xd1,0x46,0xf3,0xff,0xff,0xd0,0x80,0xff,0xff,
+0x01,0x06,0x64,0x44,0x40,0x45,0x3c,0x46,0x2b,0xf2,0x2c,0xf0,0x60,0x43,0x2d,0xf2,
+0x22,0x46,0x2b,0xfc,0x2c,0xf8,0x2d,0xfa,0x3c,0x46,0x2e,0xf2,0x2f,0xf0,0x60,0x43,
+0x30,0xf2,0x22,0x46,0x2e,0xfc,0x2f,0xf8,0x30,0xfa,0x3c,0x46,0x29,0xf2,0xff,0xff,
+0xff,0xff,0x04,0x2b,0x13,0x00,0x21,0xf2,0x46,0xf1,0xff,0xff,0x64,0x40,0x02,0x36,
+0xe0,0x84,0x48,0xf3,0x60,0x41,0x60,0x45,0x22,0x60,0x58,0x4f,0xe1,0x78,0xff,0xff,
+0xae,0x81,0xff,0xff,0x01,0x03,0xdc,0x84,0x40,0x44,0x12,0x00,0x1f,0xf2,0x46,0xf1,
+0xff,0xff,0x64,0x40,0x02,0x36,0xe0,0x84,0x48,0xf3,0x60,0x41,0x60,0x45,0x22,0x60,
+0x58,0x4f,0xe1,0x78,0xff,0xff,0xae,0x81,0xff,0xff,0x01,0x03,0xdc,0x84,0x40,0x44,
+0x00,0x64,0x40,0x43,0x19,0x60,0xf2,0x63,0x25,0x44,0xe0,0x84,0xe0,0x84,0xe0,0x85,
+0xc7,0x83,0x2b,0x40,0x08,0x26,0x04,0xa3,0xbd,0xd1,0xa3,0xd1,0x64,0x43,0xc0,0x65,
+0x2b,0x40,0x08,0x26,0x60,0x65,0xd7,0x83,0xa8,0xf3,0xff,0xff,0xc0,0x84,0xc0,0x84,
+0xc4,0x84,0x24,0x45,0xc4,0x84,0x22,0x46,0x2a,0xfa,0x63,0x44,0xa8,0xf1,0xff,0xff,
+0xd0,0x84,0xff,0xff,0x40,0x44,0xf3,0x60,0x58,0x4f,0xd8,0x78,0xff,0xff,0xbc,0xff,
+0x27,0x44,0x02,0xbc,0x40,0x47,0x24,0xf3,0xb4,0xff,0x60,0x5b,0x4d,0xe2,0x13,0x60,
+0x72,0x78,0xff,0xff,0x0d,0x64,0x96,0xfb,0x00,0x64,0x40,0x43,0x25,0x44,0xe0,0x84,
+0xe0,0x84,0xe0,0x85,0x19,0x60,0xf4,0x64,0x2b,0x40,0x08,0x26,0x04,0xa4,0x44,0xd1,
+0x80,0x60,0x00,0x64,0x25,0x40,0x03,0x36,0x40,0x43,0xc0,0x65,0x2b,0x40,0x08,0x26,
+0x60,0x65,0x00,0x60,0x13,0x66,0x1f,0xf3,0x46,0x42,0xd0,0x83,0xff,0xff,0x02,0x28,
+0x00,0x63,0x2a,0xfc,0x64,0x44,0xa8,0xf1,0xd4,0x84,0xd0,0x84,0xff,0xff,0x40,0x44,
+0xd4,0x64,0x29,0xfa,0x21,0x46,0x2e,0xf2,0x2f,0xf0,0x60,0x43,0x30,0xf2,0x22,0x46,
+0x2b,0xfc,0x2c,0xf8,0x2d,0xfa,0xf3,0x60,0x58,0x4f,0xd8,0x78,0xff,0xff,0xbc,0xff,
+0x4c,0x00,0x0f,0x64,0x96,0xfb,0x64,0x60,0x2c,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,
+0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x00,0x64,
+0x40,0x43,0x00,0x60,0x13,0x66,0x46,0x42,0xc4,0x64,0x29,0xfa,0x21,0x46,0x2e,0xf2,
+0x2f,0xf0,0x60,0x43,0x30,0xf2,0x22,0x46,0x2b,0xfc,0x2c,0xf8,0x2d,0xfa,0x25,0x44,
+0xe0,0x84,0xe0,0x84,0xe0,0x85,0x19,0x60,0xf4,0x64,0x2b,0x40,0x08,0x26,0x04,0xa4,
+0x44,0xd1,0x80,0x60,0x00,0x64,0x25,0x40,0x03,0x36,0x40,0x43,0xc0,0x65,0x2b,0x40,
+0x08,0x26,0x60,0x65,0x1f,0xf3,0x22,0x46,0xd0,0x84,0x2a,0xfa,0x64,0x44,0xa8,0xf1,
+0xd4,0x84,0xd0,0x84,0xff,0xff,0x40,0x44,0xf3,0x60,0x58,0x4f,0xd8,0x78,0xff,0xff,
+0xbc,0xff,0x63,0x60,0xa4,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,
+0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0xb4,0xff,0xff,0xff,0xff,0xff,
+0x84,0x60,0x1d,0x7d,0x8e,0x60,0x00,0x6b,0x11,0x60,0x50,0x78,0xff,0xff,0xff,0x00,
+0x00,0xe0,0x7f,0x00,0xfe,0x0f,0xc7,0xf1,0x01,0x64,0xd0,0x80,0xbf,0xfb,0x1a,0x03,
+0xc6,0xfb,0x18,0x60,0x7a,0x65,0xa5,0xd3,0x41,0x4d,0xdc,0x84,0xa5,0xdb,0x26,0x44,
+0x02,0x26,0x17,0x00,0x3e,0x45,0x35,0x81,0xff,0xff,0x0f,0x02,0x64,0x60,0x78,0x64,
+0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,
+0xdc,0x84,0xa2,0xdb,0xf3,0x60,0xac,0x78,0xff,0xff,0x41,0x5e,0x02,0x64,0x40,0x46,
+0xd1,0xfe,0x21,0x46,0x46,0x45,0x4c,0xe2,0x0e,0x64,0x40,0x4c,0x19,0xff,0x03,0xe1,
+0x26,0x44,0x02,0xb4,0x12,0xbc,0x40,0x46,0x2e,0x44,0x20,0xfa,0x18,0x60,0x10,0x62,
+0xa2,0xd1,0xff,0xff,0x64,0x40,0x01,0x2a,0x12,0x00,0x66,0x69,0xff,0xff,0xff,0xff,
+0x01,0x16,0xfe,0x00,0x68,0x44,0x00,0x7f,0x60,0x45,0x7c,0x69,0xff,0xff,0xff,0xff,
+0x01,0x16,0xfe,0x00,0x68,0x44,0x00,0x7f,0x60,0x47,0xb4,0x84,0x0f,0x00,0x00,0x65,
+0x7c,0x69,0xff,0xff,0xff,0xff,0x01,0x16,0xfe,0x00,0x68,0x44,0xce,0xf1,0x00,0x7f,
+0xd0,0x80,0xff,0xff,0x01,0x04,0x64,0x44,0x60,0x47,0xb4,0x84,0x25,0xfa,0x20,0xf2,
+0xff,0xff,0xff,0xb4,0x0a,0x36,0x00,0x7f,0x14,0x36,0x01,0x7f,0x37,0x36,0x02,0x7f,
+0x6e,0x36,0x03,0x7f,0x26,0xfa,0x00,0x7c,0x22,0xf8,0x24,0xf1,0x01,0x64,0x4a,0xfb,
+0x2e,0x44,0xa1,0xff,0x6c,0x43,0x21,0xfc,0x7e,0x69,0xc3,0x94,0xcd,0xe2,0x9c,0xfe,
+0xff,0xff,0x0e,0x04,0x6a,0x60,0xb4,0x62,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
+0x01,0x64,0xbf,0xfb,0x27,0x44,0x80,0xbc,0x40,0x47,0xf3,0x60,0xb2,0x78,0xff,0xff,
+0xcb,0xf1,0xff,0xff,0x64,0x40,0x00,0x36,0x03,0x00,0x0e,0x60,0x5e,0x78,0xff,0xff,
+0x00,0x7c,0xbf,0xf9,0x40,0x45,0x6e,0x36,0x35,0x00,0x37,0x36,0x26,0x00,0x14,0x36,
+0x1f,0x00,0x0a,0x36,0x17,0x00,0x64,0x60,0x6c,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,
+0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x21,0x63,
+0x96,0xfd,0x27,0x44,0x80,0xbc,0x40,0x47,0x07,0x60,0xd0,0x74,0xcd,0xe2,0xf3,0x60,
+0xb2,0x78,0xff,0xff,0xa1,0xff,0x4c,0x48,0xeb,0x83,0xeb,0x83,0xeb,0x83,0x20,0x00,
+0xa1,0xff,0x4c,0x48,0xeb,0x83,0xeb,0x83,0x1b,0x00,0xa1,0xff,0x4c,0x48,0xe3,0x85,
+0xc7,0x85,0xe3,0x83,0xe3,0x83,0xe3,0x83,0xc7,0x83,0xeb,0x83,0xeb,0x83,0xeb,0x83,
+0xeb,0x83,0x0e,0x00,0xe3,0x85,0xc7,0x85,0xe3,0x83,0xe3,0x83,0xe3,0x83,0xa1,0xff,
+0x4c,0x48,0xc7,0x83,0xeb,0x83,0xeb,0x83,0xeb,0x83,0xff,0xff,0x80,0x27,0xcf,0x83,
+0x1f,0xfc,0xfc,0xa3,0x3b,0xf3,0x43,0x43,0xa1,0xff,0x4c,0x4e,0x1c,0x7c,0xd0,0x9c,
+0xd3,0x80,0x20,0x44,0x0f,0x04,0x64,0x60,0x70,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,
+0xa2,0xdb,0x27,0x44,0x80,0xbc,0x40,0x47,0x07,0x60,0xd0,0x74,0xcd,0xe2,0xf3,0x60,
+0xb2,0x78,0xff,0xff,0xe8,0x84,0x52,0x4a,0x01,0x05,0x70,0x80,0x52,0x63,0x28,0x44,
+0xbd,0xda,0xff,0xff,0xa1,0xff,0x6c,0x45,0x2e,0x44,0x80,0x2b,0x1f,0xfb,0xbd,0xda,
+0x65,0x44,0xb0,0xf1,0xbd,0xda,0x50,0xfe,0xff,0xff,0x01,0x2a,0x04,0x00,0x26,0x44,
+0x20,0xbc,0x40,0x46,0x01,0x00,0xd0,0x80,0xa1,0xff,0x6c,0x44,0xb1,0xf1,0xbd,0xda,
+0xc4,0x85,0xd0,0x80,0x00,0x61,0x28,0x44,0x04,0x2a,0x03,0x00,0x40,0x27,0xd1,0x00,
+0x01,0x61,0xb2,0xf1,0xff,0xff,0xa1,0xff,0x6c,0x44,0xbd,0xda,0xc4,0x85,0xd0,0x80,
+0x32,0x44,0x01,0x2a,0x27,0x00,0x28,0x44,0xd4,0x36,0x02,0x00,0xc4,0x3a,0x06,0x00,
+0x00,0x64,0x38,0xfa,0x08,0x64,0xf2,0x60,0xe6,0x78,0x40,0x4c,0xa1,0xff,0x6c,0x44,
+0xbd,0xda,0xff,0xff,0xa1,0xff,0x6c,0x44,0xbd,0xda,0x20,0x61,0x28,0x44,0x03,0x2b,
+0x00,0x61,0x60,0x40,0x40,0x27,0x02,0xb9,0x41,0x4e,0xa1,0xff,0x6c,0x44,0xbd,0xda,
+0x28,0x44,0xb4,0x36,0xe5,0x00,0xa4,0x36,0xe3,0x00,0xe4,0x36,0xe1,0x00,0xf1,0x60,
+0xb9,0x78,0xff,0xff,0x61,0x40,0x01,0x22,0x31,0x00,0xa1,0xff,0x6c,0x44,0xbd,0xda,
+0x28,0x44,0xd4,0x3a,0x02,0x00,0x48,0x61,0x08,0x00,0xc4,0x36,0x05,0x00,0x28,0x44,
+0xb4,0x3a,0x03,0x00,0x4d,0x61,0x01,0x00,0x49,0x61,0x41,0x4d,0x46,0x4e,0x08,0x64,
+0x40,0x4c,0x05,0x01,0x00,0x65,0x2d,0x44,0x04,0x2a,0x0a,0x00,0x0d,0x00,0x2d,0x44,
+0x49,0x36,0x05,0x00,0x48,0x3a,0x07,0x00,0x10,0x65,0x27,0x40,0x40,0x26,0x30,0x65,
+0xf2,0x60,0xe9,0x78,0x35,0x8d,0x30,0x65,0xa1,0xff,0x6c,0x44,0xbd,0xda,0xff,0xff,
+0xa1,0xff,0x6c,0x44,0xbd,0xda,0xf2,0x60,0xe6,0x78,0x35,0x8d,0x45,0x4e,0x23,0x44,
+0xe8,0xa5,0xff,0xff,0x05,0x05,0x60,0x43,0xfa,0xa3,0xf3,0x60,0xc6,0x78,0xff,0xff,
+0xa1,0xff,0x6c,0x44,0xbd,0xda,0xff,0xff,0xa1,0xff,0x6c,0x44,0xbd,0xda,0xff,0xff,
+0xa1,0xff,0x6c,0x44,0xbd,0xda,0x26,0x41,0x20,0x26,0x1d,0x00,0x2d,0x44,0x22,0x01,
+0x32,0x40,0x02,0x2a,0x03,0x00,0x50,0xbc,0x40,0x4d,0x1e,0x00,0x01,0x64,0xbf,0xfb,
+0x19,0x60,0x5e,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x27,0x44,0x06,0x22,
+0x06,0x00,0xf9,0xb4,0x40,0x47,0x02,0x64,0x20,0xfb,0xc0,0xfe,0x48,0xe2,0x27,0x44,
+0x80,0xbc,0x40,0x47,0x09,0x00,0x2e,0x44,0x03,0xa4,0xef,0xb1,0x08,0x24,0x40,0xb9,
+0x41,0x46,0x02,0x00,0x70,0xbc,0x40,0x4d,0xa1,0xff,0x6c,0x44,0xbd,0xda,0x20,0x61,
+0x28,0x44,0x03,0x2b,0x00,0x61,0x60,0x40,0x40,0x2b,0x0d,0x00,0xbf,0x60,0xff,0x65,
+0x34,0xf3,0x02,0xb9,0x80,0xb0,0x28,0x44,0x06,0x03,0xa4,0x84,0x40,0x48,0x29,0xfa,
+0x04,0x64,0x22,0xfa,0x02,0xa9,0x23,0x44,0xe8,0xa4,0x41,0x4e,0x20,0x26,0xfa,0xa4,
+0x28,0x40,0x40,0x27,0xf8,0xa4,0x40,0x43,0x38,0xfa,0xff,0xff,0xa1,0xff,0x6c,0x44,
+0xbd,0xda,0x23,0x44,0x80,0x2b,0x03,0x00,0x14,0x64,0x40,0x43,0x38,0xfa,0x23,0x47,
+0x3f,0xfa,0x08,0x65,0x45,0x4c,0x21,0xf2,0x70,0x45,0xd4,0x80,0xff,0xff,0x02,0x06,
+0x64,0xe2,0x60,0x50,0xa1,0xff,0x6c,0x44,0xbd,0xda,0x2e,0x44,0x22,0x26,0x05,0x00,
+0x23,0x41,0xa1,0xff,0x6c,0x44,0x34,0xfa,0x7f,0x00,0xa1,0xff,0x6c,0x44,0xbd,0xda,
+0x2e,0x40,0x20,0x2a,0x12,0x00,0xa1,0xff,0x6c,0x44,0xbd,0xda,0xff,0xff,0xa1,0xff,
+0x6c,0x44,0xbd,0xda,0x2e,0x40,0x02,0x26,0x05,0x00,0x23,0x41,0xa1,0xff,0x6c,0x44,
+0x37,0xfa,0x6a,0x00,0xa1,0xff,0x6c,0x44,0x37,0xfa,0x32,0x44,0x01,0x2a,0x1a,0x00,
+0x00,0xf4,0x02,0x62,0x46,0x45,0xa1,0xff,0xda,0x82,0x6c,0x44,0xa2,0xda,0xff,0xff,
+0xa1,0xff,0xda,0x82,0x6c,0x44,0xa2,0xda,0x23,0x41,0x04,0xa1,0x78,0x7c,0x01,0x65,
+0x61,0x43,0xd1,0x80,0x46,0x45,0x02,0x07,0x04,0xa1,0x62,0x00,0x64,0x43,0xd1,0x81,
+0x7c,0x7c,0x66,0x00,0xbf,0xf3,0x3b,0xf1,0x00,0xa0,0x23,0x44,0x04,0x02,0x00,0xa0,
+0xd0,0x80,0x01,0x03,0x05,0x04,0x60,0x43,0x0c,0xa3,0xf3,0x60,0xc6,0x78,0xff,0xff,
+0xa1,0xff,0x6c,0x44,0xff,0xff,0x1a,0xfa,0xff,0xff,0xa1,0xff,0x6c,0x44,0xff,0xff,
+0x1b,0xfa,0x60,0x40,0x20,0x2b,0x1e,0x00,0x1a,0xf2,0xff,0xff,0x60,0x47,0x1a,0xfa,
+0xff,0xff,0xa1,0xff,0x6c,0x44,0xff,0xff,0x60,0x47,0x10,0xfa,0xff,0xff,0xa1,0xff,
+0x6c,0x44,0xff,0xff,0x60,0x47,0x11,0xfa,0x3b,0xf1,0x23,0x44,0xfc,0xa4,0x00,0xa0,
+0x40,0x43,0xd0,0x80,0x01,0x03,0x03,0x04,0xf3,0x60,0xc6,0x78,0xff,0xff,0x38,0xfa,
+0x23,0x47,0x3f,0xfa,0x28,0x44,0x0c,0x2e,0x01,0x00,0x06,0x00,0x0c,0x26,0xf4,0x00,
+0xf0,0xb4,0xff,0xff,0xb0,0x3a,0xf0,0x00,0xb0,0xff,0x01,0x5d,0xdc,0xfe,0x05,0xff,
+0x2f,0xf3,0x23,0x41,0x04,0xbc,0x2f,0xfb,0x7c,0x7c,0x01,0x65,0x25,0x44,0xd5,0x80,
+0x61,0x43,0x45,0x04,0x35,0x03,0xcb,0xf3,0xff,0xff,0xff,0xff,0x00,0x36,0x03,0x00,
+0x0e,0x60,0x5e,0x78,0xff,0xff,0x00,0xf4,0x02,0x62,0xd1,0x80,0x46,0x45,0x06,0x07,
+0x61,0x40,0x01,0x26,0x01,0xa1,0x61,0x5c,0x00,0x61,0x02,0x00,0x64,0x43,0xd1,0x81,
+0xa1,0xff,0xec,0x44,0x5a,0xda,0xfc,0x1d,0xe2,0x1e,0x23,0x00,0xa1,0xff,0xd5,0x80,
+0x61,0x43,0x37,0x04,0x16,0x03,0x00,0xf4,0x02,0x62,0xd1,0x80,0x46,0x45,0x07,0x07,
+0xec,0x44,0x61,0x40,0x01,0x26,0x01,0xa1,0x61,0x5c,0x00,0x61,0x05,0x00,0x64,0x43,
+0xec,0x44,0xd1,0x81,0x01,0x00,0xec,0x44,0x7a,0xda,0xfd,0x1d,0xe8,0x1e,0x0a,0x00,
+0xa1,0xff,0xb6,0xff,0x6c,0x44,0x00,0xf4,0x02,0xfa,0x02,0x7c,0x46,0x45,0xb7,0xff,
+0x06,0x00,0xa1,0xff,0xb6,0xff,0x00,0x64,0x6c,0x44,0x5a,0xda,0xb7,0xff,0x64,0x41,
+0x28,0x44,0x40,0x2b,0x1d,0x00,0xb1,0xff,0x32,0x44,0x01,0x26,0x19,0x00,0xa1,0xff,
+0x6c,0x44,0xff,0xff,0x2d,0xfb,0xff,0xff,0xa1,0xff,0x6c,0x44,0xff,0xff,0x2e,0xfb,
+0x0f,0x00,0x6c,0x44,0x64,0x41,0x28,0x40,0x40,0x2b,0x0d,0x00,0xb1,0xff,0x32,0x40,
+0x01,0x26,0x09,0x00,0x2d,0xfb,0xff,0xff,0xa1,0xff,0x6c,0x44,0xff,0xff,0x2e,0xfb,
+0x21,0x46,0xa1,0xff,0x6c,0x40,0x21,0x46,0x01,0x16,0xfe,0x00,0x68,0x44,0x60,0x40,
+0x10,0x2a,0x04,0x00,0x22,0xf2,0xff,0xff,0x08,0xbc,0x22,0xfa,0x6a,0x43,0xa1,0xff,
+0x6c,0x40,0x23,0xf1,0xff,0xff,0x64,0x54,0xcd,0xe2,0x19,0xff,0x32,0x44,0x03,0x22,
+0x20,0x00,0x47,0xff,0x26,0x44,0xfd,0xb4,0x84,0xbc,0x63,0x40,0x40,0x27,0x08,0x00,
+0x0d,0x63,0x07,0x15,0x06,0x15,0x05,0x15,0x04,0x15,0xff,0xa3,0x02,0x15,0xf9,0x02,
+0x7f,0xb4,0x40,0x46,0x6c,0x40,0x28,0x44,0x40,0x2b,0x08,0x00,0x32,0x44,0x01,0x2a,
+0x05,0x00,0x23,0x44,0x08,0xa4,0x38,0xfa,0x60,0x47,0x3f,0xfa,0xf3,0x60,0x92,0x78,
+0xff,0xff,0x63,0x40,0x40,0x2b,0x07,0x00,0x6a,0x60,0xaa,0x62,0xa2,0xd3,0xff,0xff,
+0x01,0xa4,0xa2,0xdb,0x08,0x00,0x0d,0x64,0x4b,0x15,0x4a,0x15,0x49,0x15,0x48,0x15,
+0xff,0xa4,0x46,0x15,0xf9,0x02,0x48,0xe2,0xbf,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,
+0x64,0x02,0x27,0x44,0x06,0x22,0x05,0x00,0xf9,0xb4,0x40,0x47,0x02,0x64,0x20,0xfb,
+0xc0,0xfe,0x20,0xf2,0xff,0xff,0xff,0xb4,0x0a,0x36,0x00,0x7f,0x14,0x36,0x01,0x7f,
+0x37,0x36,0x02,0x7f,0x6e,0x36,0x03,0x7f,0x26,0xfa,0x64,0x60,0x44,0x64,0xa0,0xd3,
+0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,
+0xa2,0xdb,0x26,0xf2,0xff,0xff,0x60,0x47,0x00,0x7f,0xe0,0x84,0xe0,0x84,0x60,0x45,
+0x64,0x60,0x48,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,
+0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x28,0x40,0x04,0x26,0x2d,0x00,
+0x28,0x40,0x40,0x2b,0x2a,0x00,0x26,0x44,0x04,0xbc,0xfd,0xb4,0x40,0x46,0x25,0x00,
+0x6c,0x40,0x2d,0x44,0x20,0x2a,0x09,0x00,0x01,0x74,0xcd,0xe2,0x47,0xff,0xb5,0xff,
+0x00,0x64,0xc6,0xfb,0x13,0x60,0x92,0x78,0xff,0xff,0xbf,0xf3,0xff,0xff,0x00,0xa0,
+0x26,0x44,0x03,0x03,0x84,0xbc,0x40,0x46,0x10,0x00,0x84,0xbc,0x2d,0x40,0x0c,0x22,
+0x02,0x00,0x40,0x46,0x0a,0x00,0xfd,0xb4,0x40,0x46,0x25,0x44,0x06,0xfa,0x60,0x46,
+0x01,0xf2,0xff,0xff,0x61,0x5e,0x03,0x2b,0x01,0xfa,0x21,0x46,0x08,0x29,0x09,0x00,
+0x21,0xf1,0xff,0xff,0x64,0x40,0x07,0x2e,0x04,0x00,0x43,0xff,0x10,0x64,0x20,0xfb,
+0xc0,0xfe,0x00,0x64,0xc6,0xfb,0x47,0xff,0x12,0x60,0xb7,0x78,0xff,0xff,0xa1,0xff,
+0x6c,0x43,0x63,0x54,0xcd,0xe2,0x0e,0x64,0x01,0x00,0x0c,0x64,0x40,0x4c,0x19,0xff,
+0x00,0x64,0x40,0x4a,0xc6,0xfb,0x08,0x64,0x40,0x4c,0x27,0x44,0x06,0x22,0x06,0x00,
+0xf9,0xb4,0x40,0x47,0x02,0x64,0x20,0xfb,0xc0,0xfe,0x48,0xe2,0x82,0xe1,0xa1,0xff,
+0xd4,0x00,0x00,0x60,0x18,0x63,0xa1,0xff,0xec,0x44,0xff,0xff,0xfc,0x1d,0x04,0x1e,
+0xb6,0xff,0xa1,0xff,0x6c,0x44,0xb7,0xff,0x08,0x64,0x40,0x4c,0x19,0xff,0x27,0x44,
+0x80,0xbc,0x40,0x47,0xc2,0x00,0x01,0x64,0xc0,0xfb,0x24,0x44,0x60,0x48,0x90,0x6a,
+0x60,0x47,0x23,0x41,0xe1,0x81,0xff,0xff,0x01,0x16,0xfe,0x00,0x60,0x48,0x8e,0x6a,
+0x00,0x64,0x02,0x24,0x80,0x64,0x69,0x83,0xcd,0xf1,0x25,0x45,0x02,0x2a,0x03,0x00,
+0x64,0x40,0x01,0x2a,0x04,0xbc,0x01,0x16,0xfe,0x00,0x60,0x48,0x8c,0x6a,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0x01,0x16,0xfe,0x00,0x02,0xe1,0x08,0x64,0x40,0x4c,
+0x29,0x44,0x01,0xbc,0x40,0x49,0x19,0xff,0x52,0x63,0x22,0x46,0xbd,0xd0,0x21,0xf3,
+0x43,0xff,0x60,0x40,0x07,0x22,0x03,0x00,0x10,0x64,0x20,0xfb,0xc0,0xfe,0x01,0xe1,
+0x28,0xf2,0x44,0x48,0x60,0x40,0x01,0x2a,0x03,0x00,0x40,0x67,0xb0,0x84,0x60,0x5c,
+0x99,0xff,0x07,0x60,0x00,0xe8,0x98,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0x80,0xe8,0xff,0xff,0xff,0xff,0xff,0xff,0x64,0x4d,0x64,0x47,
+0x60,0x4d,0xff,0xff,0xff,0xff,0xa1,0xff,0xb5,0xff,0xbb,0xff,0x32,0x64,0x96,0xfb,
+0xff,0xff,0xa1,0xff,0xbd,0xd2,0xff,0xff,0x60,0x4d,0x60,0x47,0x60,0x4d,0x26,0x44,
+0x02,0xb4,0x40,0x46,0x20,0x61,0x28,0x44,0x80,0x36,0x02,0x00,0x50,0x3a,0x01,0x00,
+0x04,0xb9,0x41,0x4e,0xa1,0xff,0xbd,0xd2,0xff,0xff,0x60,0x4d,0x60,0x47,0x60,0x4d,
+0xa1,0xff,0xbd,0xd2,0xff,0xff,0x60,0x4d,0x60,0x47,0x60,0x4d,0xa1,0xff,0xbd,0xd2,
+0xff,0xff,0x60,0x4c,0x28,0x44,0xc4,0x36,0x13,0x00,0xd4,0x36,0x11,0x00,0xa1,0xff,
+0xbd,0xd2,0xff,0xff,0x60,0x4c,0xa1,0xff,0xbd,0xd2,0xff,0xff,0x60,0x4c,0xa1,0xff,
+0xbd,0xd2,0xff,0xff,0x60,0x4c,0x28,0x44,0xb4,0x36,0x02,0x00,0xa4,0x3a,0x03,0x00,
+0xf5,0x60,0x33,0x78,0xff,0xff,0xa1,0xff,0xbd,0xd2,0xff,0xff,0x60,0x4c,0xff,0x65,
+0xa1,0xff,0xbd,0xd2,0xff,0xff,0x60,0x4c,0x2e,0x41,0x28,0x44,0x03,0x2b,0xdf,0xb1,
+0x60,0x40,0x40,0x27,0x02,0xb9,0xa1,0xff,0xbd,0xd2,0xff,0xff,0x60,0x4c,0x23,0x44,
+0xcc,0x84,0xdc,0x84,0x03,0x03,0x03,0x02,0x08,0xb9,0x01,0x00,0x10,0xb9,0xbd,0xd0,
+0x41,0x4e,0xa1,0xff,0xff,0xff,0x64,0x4c,0x2e,0x44,0x22,0x22,0x47,0x00,0x20,0x2a,
+0x0f,0x00,0xa1,0xff,0xbd,0xd2,0xff,0xff,0x60,0x4c,0xa1,0xff,0xbd,0xd2,0xff,0xff,
+0x60,0x4c,0xa1,0xff,0xbd,0xd2,0xff,0xff,0x60,0x4c,0x2e,0x44,0x02,0x2a,0x36,0x00,
+0xa1,0xff,0xff,0xff,0x1b,0xf0,0x1a,0xf2,0x64,0x40,0x20,0x27,0x06,0x00,0x60,0x4c,
+0xa1,0xff,0xff,0xff,0xff,0xff,0x64,0x4c,0x12,0x00,0xa1,0xff,0xff,0xff,0x60,0x47,
+0x60,0x4c,0xa1,0xff,0xff,0xff,0xff,0xff,0x64,0x4c,0xa1,0xff,0xff,0xff,0x10,0xf2,
+0x11,0xf0,0x60,0x47,0x60,0x4c,0xa1,0xff,0xff,0xff,0x64,0x47,0x60,0x4c,0x03,0xf0,
+0x04,0xf4,0x01,0xf2,0x64,0x42,0x04,0xa4,0xd0,0x81,0x23,0x43,0x2e,0x44,0x10,0x2a,
+0x06,0x00,0xa2,0xd2,0xff,0xff,0xa1,0xff,0xff,0xff,0x60,0x4f,0x60,0x00,0xe2,0xd2,
+0xff,0xff,0xa1,0xff,0xda,0x82,0xc9,0x81,0x60,0x4e,0x4e,0x00,0x18,0x22,0x0a,0x00,
+0x10,0x26,0x03,0x00,0xf5,0x60,0x33,0x78,0xff,0xff,0x03,0xf0,0x04,0xf4,0x00,0x61,
+0x64,0x42,0x48,0x00,0x04,0x2a,0x2f,0x00,0x00,0xf4,0x01,0xf2,0xff,0x65,0xa4,0x81,
+0xa1,0xff,0x02,0xfe,0xff,0xff,0x10,0x25,0x42,0xfe,0x72,0x45,0x65,0x4c,0x23,0x43,
+0x97,0xf3,0x04,0x04,0xdc,0x84,0x97,0xfb,0x60,0x55,0x65,0x52,0xa1,0xff,0xff,0xff,
+0x60,0x4c,0x98,0xf3,0x03,0x04,0xdc,0x84,0x98,0xfb,0xff,0xff,0xa1,0xff,0xff,0xff,
+0x60,0x4c,0x99,0xf3,0x03,0x04,0xdc,0x84,0x99,0xfb,0xff,0xff,0xa1,0xff,0x0c,0x62,
+0x60,0x4c,0xf8,0xa3,0x2e,0x44,0xfb,0xb4,0x40,0x4e,0x65,0x44,0xdc,0x80,0xff,0xff,
+0x01,0x02,0x58,0x80,0x0c,0x00,0x23,0x43,0x03,0xf0,0x04,0xf4,0x01,0xf2,0x64,0x42,
+0x04,0xa4,0xd0,0x81,0x04,0x00,0x00,0xf4,0x01,0xf2,0x04,0x62,0xa4,0x81,0xa1,0xff,
+0xe2,0xd2,0xda,0x82,0xc9,0x81,0x60,0x4c,0xfa,0x1c,0xf5,0x1d,0x08,0x1e,0x02,0x02,
+0x00,0xf4,0x04,0x62,0xa2,0xd2,0xff,0xff,0xa1,0xff,0xff,0xff,0x60,0x4d,0x28,0x44,
+0x40,0x2b,0x04,0x00,0xa1,0xff,0x60,0x4e,0xa1,0xff,0x60,0x4c,0xa1,0xff,0xc3,0x60,
+0x33,0x64,0x60,0x4e,0xa1,0xff,0xff,0xff,0x62,0x5c,0x02,0xe1,0x08,0x64,0x40,0x4c,
+0x19,0xff,0x61,0x40,0x7f,0x26,0x02,0x00,0x00,0xf4,0x04,0x7c,0x66,0x44,0x22,0x46,
+0x0b,0xf8,0x0c,0xfa,0x34,0x64,0x96,0xfb,0x6a,0x40,0x40,0x26,0x02,0x00,0xfc,0x0b,
+0x02,0x00,0x07,0x60,0x80,0xe8,0x23,0xf3,0xff,0xff,0x60,0x54,0xcd,0xe2,0x03,0x64,
 0xcc,0x84,0xff,0xff,0xfd,0x02,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0xff,0xff,0xff,0xff,0x99,0xff,0x3d,0x44,0xf7,0xb4,0x40,0x5d,0x98,0xff,0x00,0x60,
-0x00,0x6b,0x99,0xff,0x3d,0x44,0x10,0xbc,0x40,0x5d,0x3e,0x44,0xfe,0xb4,0x40,0x5e,
-0x98,0xff,0xbc,0xff,0x28,0x44,0x40,0x2b,0x3e,0x00,0x99,0xff,0x3a,0x44,0x98,0xff,
-0x10,0x2b,0xfb,0x00,0x99,0xff,0x00,0x60,0x00,0xea,0xff,0xff,0xff,0xff,0xff,0xff,
-0x3a,0x5c,0x80,0x2b,0x12,0x00,0x8b,0xff,0x74,0x40,0x88,0xff,0x3a,0x5c,0x80,0x2b,
-0x09,0x00,0x8b,0xff,0x74,0x40,0x88,0xff,0x3a,0x5c,0x80,0x2b,0x03,0x00,0x8b,0xff,
-0x74,0x40,0x88,0xff,0x8b,0xff,0x74,0x40,0x88,0xff,0x3a,0x5c,0x80,0x2b,0xff,0xff,
-0x31,0x60,0x00,0xea,0xff,0xff,0xff,0xff,0x00,0x60,0x00,0xea,0x3a,0x5c,0x80,0x27,
-0x06,0x00,0x31,0x60,0x00,0xea,0xff,0xff,0xff,0xff,0x00,0x60,0x00,0xea,0x00,0x64,
-0xdb,0xfb,0x68,0x60,0x44,0x64,0x3a,0x5c,0xa0,0xd9,0xff,0xff,0x30,0x60,0x00,0xea,
-0xff,0xff,0xff,0xff,0x98,0xff,0xff,0xff,0xb7,0xff,0xb4,0xff,0xff,0xff,0xff,0xff,
-0x84,0x60,0x1d,0x7d,0xb5,0xff,0xff,0xff,0x99,0xff,0x07,0x60,0x80,0xe9,0x98,0xff,
-0xff,0xff,0xff,0xff,0x80,0xe9,0xff,0xff,0xff,0xff,0xb7,0xff,0xb4,0xff,0xff,0xff,
-0x99,0xff,0x3e,0x44,0x02,0xbc,0x00,0x7f,0x40,0x5e,0x98,0xff,0xff,0xff,0xff,0xff,
-0xff,0xff,0xff,0xff,0x46,0xff,0x47,0xff,0x2f,0x58,0xff,0xff,0x01,0x64,0x3f,0xfb,
-0xff,0xff,0x00,0xea,0x99,0xff,0x3b,0x44,0x40,0x27,0xfd,0x00,0x98,0xff,0x00,0xeb,
-0x40,0xf3,0xff,0xff,0x60,0x40,0x01,0x2a,0x03,0x00,0x18,0x60,0x1f,0x78,0xff,0xff,
-0x1b,0xf2,0x41,0xf1,0x60,0x40,0xc0,0x27,0x07,0x00,0x64,0x40,0x01,0x2a,0x16,0x00,
-0x68,0x60,0x06,0x63,0x00,0x65,0x77,0x00,0xc0,0x2b,0x07,0x00,0x64,0x40,0x08,0x2a,
-0x0d,0x00,0x68,0x60,0x30,0x63,0x30,0x65,0x6e,0x00,0x40,0x2b,0x0c,0x00,0x64,0x40,
-0x02,0x2a,0x04,0x00,0x68,0x60,0x14,0x63,0x10,0x65,0x65,0x00,0x20,0x60,0x00,0xea,
-0xf6,0x60,0xeb,0x78,0xff,0xff,0x64,0x40,0x04,0x2a,0xf8,0x00,0x68,0x60,0x22,0x63,
-0x95,0xf3,0xd6,0xf3,0x00,0xa0,0x00,0xa0,0x55,0x03,0x54,0x03,0x19,0x60,0x4a,0x65,
-0x30,0xf2,0x2f,0xf0,0x60,0x41,0x64,0x43,0xeb,0x83,0x00,0x7f,0xe0,0x84,0x44,0xd1,
-0x61,0x47,0x93,0x83,0x00,0x7f,0xe0,0x84,0x44,0xd1,0xeb,0x83,0x93,0x83,0x0f,0x60,
-0xf0,0x65,0xa7,0x85,0x44,0x60,0xce,0x63,0xc7,0x83,0x02,0x65,0xbd,0xd3,0xff,0xff,
-0x60,0x40,0x80,0x2b,0x0e,0x00,0x5c,0x61,0xa1,0xd0,0xbd,0xd3,0x50,0xfe,0x59,0xd0,
-0xd0,0x80,0xbd,0xd3,0x59,0xd0,0xd0,0x80,0xbd,0xd3,0xff,0xff,0xd0,0x80,0xff,0xff,
-0x1f,0x01,0x65,0x44,0xff,0xa5,0xff,0xff,0xe9,0x02,0x54,0x60,0xce,0x63,0x7e,0x65,
-0xbd,0xd3,0xff,0xff,0x60,0x40,0x80,0x2b,0x0e,0x00,0x5c,0x61,0xa1,0xd0,0xbd,0xd3,
-0x50,0xfe,0x59,0xd0,0xd0,0x80,0xbd,0xd3,0x59,0xd0,0xd0,0x80,0xbd,0xd3,0xff,0xff,
-0xd0,0x80,0xff,0xff,0x05,0x01,0x65,0x44,0xff,0xa5,0xff,0xff,0xe9,0x02,0x0a,0x00,
-0xf8,0xa3,0xa3,0xd3,0xff,0xff,0xe0,0x84,0xe8,0x85,0x3d,0x60,0xcc,0x64,0xc4,0x83,
-0x67,0x44,0xd9,0xfb,0x20,0x65,0x22,0xf2,0xff,0xff,0xb4,0x84,0x22,0xfa,0x1a,0xf0,
-0x99,0xff,0x64,0x44,0xe0,0x7f,0x40,0x5b,0x64,0x47,0xe1,0x7f,0x40,0x5b,0x1b,0xf0,
-0xff,0xff,0x64,0x44,0xe2,0x7f,0x40,0x5b,0x60,0x47,0x60,0x41,0xd9,0xf3,0xd9,0xf9,
-0x45,0xf1,0x90,0x84,0x00,0x37,0x13,0x00,0x63,0x42,0x02,0x63,0x64,0x40,0x07,0x3a,
-0x0a,0x63,0x5a,0xd3,0xdd,0x81,0x60,0x45,0x61,0x5f,0x40,0x5b,0x65,0x47,0xdd,0x81,
-0x61,0x5f,0x40,0x5b,0xf6,0x1f,0x5a,0xd3,0xdd,0x81,0x61,0x5f,0x40,0x5b,0x98,0xff,
-0xa0,0x60,0x00,0xeb,0xc0,0x60,0x00,0xeb,0x64,0x40,0x07,0x3a,0x03,0x00,0x80,0x60,
-0x07,0xeb,0x02,0x00,0x80,0x60,0x0f,0xeb,0x33,0x60,0x00,0xeb,0x00,0x64,0x3f,0xfb,
-0x38,0xf2,0x00,0xf4,0xff,0xff,0x28,0x87,0x04,0x64,0x40,0x49,0x46,0x4a,0xb3,0xff,
-0x02,0x64,0x9c,0xfb,0x99,0xff,0x30,0x44,0x02,0xbc,0x40,0x51,0x98,0xff,0xf8,0x60,
-0x89,0x78,0xff,0xff,0x40,0xf3,0x2a,0x46,0x60,0x40,0x01,0x26,0x65,0x00,0x29,0x43,
-0x27,0x44,0x00,0xa8,0x60,0x41,0xa3,0xd2,0x1b,0x03,0x99,0xff,0x3b,0x40,0x80,0x2b,
-0xfd,0x00,0x98,0xff,0x60,0x57,0xff,0xff,0x77,0x5f,0xc9,0x81,0x60,0x57,0xff,0xff,
-0x77,0x5f,0xbd,0xda,0x01,0x0f,0x25,0x00,0x0b,0x03,0xa3,0xd2,0x7f,0x26,0xf2,0x00,
-0x00,0xf2,0x04,0x63,0x00,0xa8,0x40,0x4a,0x60,0x46,0x3b,0x03,0xa3,0xd2,0xea,0x00,
-0x3d,0x46,0x38,0xf2,0x2a,0x46,0x60,0x40,0x01,0x2a,0x1f,0x00,0x63,0x40,0x7f,0x26,
-0x05,0x00,0x00,0xf2,0x04,0x63,0x00,0xa8,0x60,0x46,0x2b,0x03,0x46,0x4a,0x01,0x0f,
-0x11,0x00,0xa3,0xd2,0xff,0xff,0x60,0x57,0xff,0xff,0x77,0x5f,0x60,0x47,0xa3,0xda,
-0x0c,0x00,0xe6,0x03,0x63,0x40,0x7f,0x26,0x05,0x00,0x00,0xf2,0x04,0x63,0x00,0xa8,
-0x40,0x4a,0x17,0x03,0x43,0x49,0x41,0x47,0x11,0x00,0x00,0x64,0x9c,0xfb,0x99,0xff,
-0x30,0x44,0xfd,0xb4,0x40,0x51,0x98,0xff,0x3e,0xf3,0x00,0x7c,0x02,0xbc,0x3e,0xfb,
-0x3d,0x46,0x0f,0xf2,0x44,0x47,0x60,0x40,0x04,0x26,0x0b,0x00,0xf8,0x60,0x89,0x78,
-0xff,0xff,0x3d,0x46,0x0f,0xf0,0xff,0x60,0xf7,0x65,0x64,0x43,0x17,0x60,0xed,0x78,
-0xff,0xff,0x17,0x60,0xae,0x78,0xff,0xff,0x18,0x60,0x1f,0x78,0xff,0xff,0x5c,0x2f,
-0x7e,0x00,0x18,0x09,0x3d,0x46,0x0f,0xf0,0x3c,0xf3,0x64,0x43,0x60,0x45,0x1b,0xf2,
-0x41,0xf1,0x60,0x40,0xc0,0x23,0x01,0x64,0xc0,0x2b,0x01,0x00,0x08,0x64,0x80,0x2b,
-0x01,0x00,0x04,0x64,0x40,0x2b,0x01,0x00,0x02,0x64,0xa0,0x84,0x0f,0x22,0x2d,0x00,
-0x65,0x44,0x63,0x5c,0x80,0x2a,0x29,0x00,0x99,0xff,0x3b,0x40,0x80,0x2b,0xfd,0x00,
-0x98,0xff,0x60,0x57,0xff,0xff,0x77,0x5f,0x60,0x57,0xff,0xff,0x77,0x5f,0x99,0xff,
-0x3b,0x40,0x80,0x2b,0xfd,0x00,0x98,0xff,0x3d,0xf3,0xff,0xff,0x60,0x57,0xff,0xff,
-0x77,0x5f,0x60,0x57,0xff,0xff,0x77,0x5f,0xff,0xff,0xff,0x60,0xf7,0x65,0x0b,0x14,
-0x0a,0x14,0x09,0x14,0x08,0x14,0x07,0x14,0x06,0x14,0x05,0x14,0x04,0x14,0x03,0x14,
-0x02,0x14,0xa7,0x83,0x01,0x00,0x08,0xbb,0x0f,0xfc,0x0f,0xf0,0x80,0x60,0x00,0x63,
-0xb3,0x9c,0x0f,0xf8,0x00,0x64,0x9c,0xfb,0x99,0xff,0x30,0x44,0xfd,0xb4,0x40,0x51,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0x99,0xff,0x3e,0x44,0x7d,0xb4,0x08,0xbc,0x40,0x5e,0x98,0xff,
+0x05,0x64,0xcc,0x84,0xff,0xff,0xfd,0x02,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0x99,0xff,0x3d,0x44,0xf7,0xb4,0x40,0x5d,0x98,0xff,
+0x00,0x60,0x00,0x6b,0x99,0xff,0x3d,0x44,0x10,0xbc,0x40,0x5d,0x3e,0x44,0xfe,0xb4,
+0x40,0x5e,0x98,0xff,0xbc,0xff,0x28,0x44,0x40,0x2b,0x39,0x00,0x99,0xff,0x3a,0x44,
+0x98,0xff,0x10,0x2b,0xfb,0x00,0x99,0xff,0x00,0x60,0x00,0xea,0xff,0xff,0xff,0xff,
+0xff,0xff,0x3a,0x5c,0x80,0x2b,0x12,0x00,0x8b,0xff,0x74,0x40,0x88,0xff,0x3a,0x5c,
+0x80,0x2b,0x09,0x00,0x8b,0xff,0x74,0x40,0x88,0xff,0x3a,0x5c,0x80,0x2b,0x03,0x00,
+0x8b,0xff,0x74,0x40,0x88,0xff,0x8b,0xff,0x74,0x40,0x88,0xff,0x3a,0x5c,0x80,0x2b,
+0xff,0xff,0x31,0x60,0x00,0xea,0xff,0xff,0xff,0xff,0x00,0x60,0x00,0xea,0x3a,0x5c,
+0x80,0x27,0x06,0x00,0x31,0x60,0x00,0xea,0xff,0xff,0xff,0xff,0x00,0x60,0x00,0xea,
+0x00,0x64,0xca,0xfb,0x30,0x60,0x00,0xea,0xff,0xff,0xff,0xff,0x98,0xff,0xff,0xff,
+0xb7,0xff,0xb4,0xff,0xff,0xff,0xff,0xff,0x84,0x60,0x1d,0x7d,0xb5,0xff,0xff,0xff,
+0x99,0xff,0x07,0x60,0x80,0xe9,0x98,0xff,0xff,0xff,0xff,0xff,0x80,0xe9,0xff,0xff,
+0xff,0xff,0xb7,0xff,0xb4,0xff,0xff,0xff,0x99,0xff,0x3e,0x44,0x02,0xbc,0x00,0x7f,
+0x40,0x5e,0x98,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x46,0xff,0x47,0xff,
+0x2f,0x58,0xff,0xff,0x01,0x64,0x30,0xfb,0xff,0xff,0x00,0xea,0x99,0xff,0x3b,0x44,
+0x40,0x27,0xfd,0x00,0x98,0xff,0x00,0xeb,0x31,0xf3,0xff,0xff,0x60,0x40,0x01,0x2a,
+0x03,0x00,0x17,0x60,0xae,0x78,0xff,0xff,0x00,0x64,0xd8,0xfb,0xdc,0xfb,0x89,0xf3,
+0xff,0xff,0x00,0xa0,0xff,0xff,0x03,0x02,0xf6,0x60,0x85,0x78,0xff,0xff,0x1a,0x60,
+0x12,0x65,0x30,0xf2,0x2f,0xf0,0x60,0x41,0x64,0x43,0xeb,0x83,0x00,0x7f,0xe0,0x84,
+0x44,0xd1,0x61,0x47,0x93,0x83,0x00,0x7f,0xe0,0x84,0x44,0xd1,0xeb,0x83,0x93,0x83,
+0x0f,0x60,0xf0,0x65,0xa7,0x85,0x4c,0x60,0xc2,0x63,0xc7,0x83,0x02,0x65,0xbd,0xd3,
+0xff,0xff,0x60,0x40,0x80,0x2b,0x0e,0x00,0x5c,0x61,0xa1,0xd0,0xbd,0xd3,0x50,0xfe,
+0x59,0xd0,0xd0,0x80,0xbd,0xd3,0x59,0xd0,0xd0,0x80,0xbd,0xd3,0xff,0xff,0xd0,0x80,
+0xff,0xff,0x23,0x01,0x65,0x44,0xff,0xa5,0xff,0xff,0xe9,0x02,0x5c,0x60,0xc2,0x63,
+0x9e,0x65,0xbd,0xd3,0xff,0xff,0x60,0x40,0x80,0x2b,0x0e,0x00,0x5c,0x61,0xa1,0xd0,
+0xbd,0xd3,0x50,0xfe,0x59,0xd0,0xd0,0x80,0xbd,0xd3,0x59,0xd0,0xd0,0x80,0xbd,0xd3,
+0xff,0xff,0xd0,0x80,0xff,0xff,0x09,0x01,0x65,0x44,0xff,0xa5,0xff,0xff,0xe9,0x02,
+0x0f,0x7c,0x37,0xf9,0x00,0x7c,0x00,0x61,0x16,0x00,0xf8,0xa3,0xa3,0xd3,0xff,0xff,
+0xe0,0x84,0xe8,0x81,0x60,0x5c,0xe0,0x84,0xe0,0x84,0xc0,0x9c,0xc0,0x9c,0x41,0x60,
+0x92,0x63,0x43,0xd3,0x07,0x7c,0x60,0x40,0x01,0x27,0x0f,0x7c,0x37,0xf9,0xee,0xa3,
+0x60,0x47,0x18,0xb4,0x60,0x5c,0x67,0x44,0xc8,0xfb,0x1b,0xf2,0xff,0xff,0x60,0x40,
+0xc0,0x2f,0x03,0x00,0x80,0x2b,0x01,0x00,0x3c,0x00,0xf0,0x81,0xf1,0x81,0xf1,0x81,
+0x03,0xb1,0x64,0x44,0xe8,0x9c,0xc1,0x81,0x90,0x7c,0xc1,0x81,0xe1,0x84,0x60,0x5c,
+0xe0,0x84,0xe0,0x84,0xc0,0x9c,0xc0,0x9c,0x41,0x60,0x80,0x63,0xc3,0x83,0x29,0x00,
+0x1b,0xf2,0x32,0xf1,0x60,0x40,0xc0,0x27,0x07,0x00,0x64,0x40,0x01,0x2a,0x16,0x00,
+0x6a,0x60,0xe6,0x63,0xa0,0x61,0x1d,0x00,0xc0,0x2b,0x07,0x00,0x64,0x40,0x08,0x2a,
+0x0d,0x00,0x6b,0x60,0x16,0x63,0xa3,0x61,0x14,0x00,0x40,0x2b,0x0c,0x00,0x64,0x40,
+0x02,0x2a,0x04,0x00,0x6a,0x60,0xf6,0x63,0xa1,0x61,0x0b,0x00,0x20,0x60,0x00,0xea,
+0xf8,0x60,0x51,0x78,0xff,0xff,0x64,0x40,0x04,0x2a,0xf8,0x00,0x6b,0x60,0x06,0x63,
+0xa2,0x61,0x1b,0xf0,0xff,0xff,0x64,0x40,0x20,0x27,0x03,0x00,0xf7,0x60,0xbb,0x78,
+0xff,0xff,0x67,0x44,0xc8,0xfb,0x79,0x60,0x98,0x64,0xe1,0x85,0x44,0xd1,0xd9,0xfb,
+0x64,0x45,0x61,0x44,0xe0,0x84,0xe0,0x9c,0x7d,0x60,0x70,0x64,0x40,0xd1,0xdb,0xfb,
+0x10,0xf0,0x64,0x42,0x50,0xfe,0xd2,0x80,0x58,0xd1,0x1a,0xf0,0x64,0x42,0xd2,0x80,
+0x90,0x7c,0x01,0x01,0x00,0x65,0x89,0xf3,0xd1,0x80,0x00,0xa0,0x19,0x04,0x18,0x03,
+0x61,0x44,0xd0,0x84,0xe0,0x84,0xe0,0x9c,0xc0,0x9c,0x80,0x60,0x00,0x64,0x40,0xd1,
+0x2e,0xf0,0x64,0x42,0x50,0xfe,0xd2,0x80,0x58,0xd1,0x2f,0xf0,0x64,0x42,0xd2,0x80,
+0x58,0xd1,0x30,0xf0,0x64,0x42,0xd2,0x80,0xfc,0xa4,0x02,0x01,0xdc,0xfb,0x00,0x65,
+0x65,0x5c,0xe1,0x85,0xe1,0x81,0xe1,0x81,0xc5,0x85,0xc5,0x85,0x71,0x60,0xe8,0x61,
+0xc5,0x81,0x1c,0x60,0x12,0x65,0x02,0xa3,0x64,0x40,0x01,0x2a,0x03,0x00,0xf7,0x60,
+0x49,0x78,0xff,0xff,0x61,0x44,0xda,0xfb,0x01,0x64,0xd8,0xfb,0x80,0x60,0x60,0x61,
+0x10,0xf2,0x1a,0xf0,0xa1,0xdb,0xff,0xff,0x59,0xd9,0x2e,0xf2,0x59,0xdb,0xff,0xff,
+0x2f,0xf2,0x59,0xdb,0x30,0xf0,0xff,0xff,0x59,0xd9,0x00,0x64,0xe5,0xfb,0xff,0xff,
+0x60,0x40,0x01,0x26,0x02,0xa3,0x05,0x64,0xe6,0xfb,0xa3,0xd3,0xff,0xff,0x90,0x84,
+0x60,0x5c,0x00,0x7f,0xe0,0x82,0x64,0x47,0x46,0xd1,0x00,0x7f,0xe0,0x84,0x44,0xd3,
+0xff,0xff,0x60,0x47,0x90,0x84,0xe6,0xf3,0x60,0x5c,0x02,0xa1,0x60,0x40,0x05,0x36,
+0xf6,0xa1,0xa1,0xd3,0xff,0xff,0xc0,0x9c,0xe6,0xf3,0xa1,0xd9,0xff,0xa4,0xe6,0xfb,
+0x04,0xa3,0x60,0x40,0x01,0x36,0xf0,0xa3,0x60,0x40,0x00,0x3a,0xde,0x00,0xe5,0xf3,
+0xfc,0xa3,0xff,0xff,0x60,0x40,0x01,0x26,0xfe,0xa3,0xc0,0x9c,0x01,0xa4,0xf8,0xa0,
+0xa1,0xd9,0xe5,0xfb,0xce,0x02,0xf8,0xa1,0x80,0x60,0x7c,0x64,0xfe,0xa1,0x63,0x45,
+0x08,0x63,0x59,0xd1,0x58,0xd9,0xfd,0x1f,0x11,0xf2,0x60,0x43,0xc0,0x9c,0x5b,0xd9,
+0x65,0x41,0xfe,0xa1,0x1c,0x60,0x12,0x65,0x00,0x64,0xe5,0xfb,0x59,0xd3,0xff,0xff,
+0x90,0x84,0x60,0x5c,0x00,0x7f,0xe0,0x82,0x64,0x47,0x46,0xd1,0x00,0x7f,0xe0,0x84,
+0x44,0xd3,0xff,0xff,0x60,0x47,0x90,0x84,0xe5,0xf3,0x60,0x5c,0x02,0xa3,0x60,0x40,
+0x00,0x36,0xf4,0xa3,0xa3,0xd3,0xe5,0xf3,0xc0,0x9c,0xa3,0xd9,0x01,0xa4,0xfa,0xa0,
+0xe5,0xfb,0xe4,0x02,0x61,0x44,0xf6,0xa4,0xe5,0xfb,0x59,0xd3,0xf6,0xa3,0x90,0x84,
+0xa3,0xd1,0xe8,0x85,0x01,0xb4,0xf8,0x84,0x94,0x84,0xc0,0x84,0x59,0xd1,0xa3,0xdb,
+0x90,0x84,0x5b,0xd1,0xe8,0x85,0x01,0xb4,0xf8,0x84,0x94,0x84,0xc0,0x84,0xa3,0xdb,
+0x04,0x61,0x5b,0xd1,0xe8,0x85,0x01,0xb4,0xf8,0x84,0x94,0x84,0xc0,0x84,0xff,0xa1,
+0xa3,0xdb,0x61,0x40,0x00,0x3a,0xf5,0x00,0xe5,0xf3,0x60,0x41,0xa0,0xd1,0x11,0xf2,
+0x91,0x81,0xe9,0x85,0xf2,0xa3,0x60,0x41,0x60,0x47,0x60,0x5c,0x20,0xbc,0x7f,0xb4,
+0x60,0x47,0x64,0x5e,0xa3,0xdb,0x65,0x47,0x61,0x5e,0x5b,0xdb,0x99,0xff,0xdf,0x61,
+0xfc,0xa3,0x01,0xa1,0x5b,0xd1,0x61,0x5f,0x64,0x5e,0x40,0x5b,0x01,0xa1,0x64,0x47,
+0x61,0x5f,0x40,0x5b,0xef,0x3b,0xf5,0x00,0x0f,0x7c,0x28,0x00,0x1a,0xf0,0x99,0xff,
+0x64,0x44,0xe0,0x7f,0x40,0x5b,0x64,0x47,0xe1,0x7f,0x40,0x5b,0x1b,0xf0,0xff,0xff,
+0x64,0x44,0xe2,0x7f,0x40,0x5b,0x60,0x47,0x60,0x41,0xc8,0xf3,0xc8,0xf9,0x37,0xf1,
+0x90,0x84,0x00,0x37,0x13,0x00,0x63,0x42,0x02,0x63,0x64,0x40,0x07,0x3a,0x0a,0x63,
+0x5a,0xd3,0xdd,0x81,0x60,0x45,0x61,0x5f,0x40,0x5b,0x65,0x47,0xdd,0x81,0x61,0x5f,
+0x40,0x5b,0xf6,0x1f,0x5a,0xd3,0xdd,0x81,0x61,0x5f,0x40,0x5b,0x98,0xff,0xa0,0x60,
+0x00,0xeb,0xc0,0x60,0x00,0xeb,0x64,0x40,0x07,0x3a,0x03,0x00,0x80,0x60,0x07,0xeb,
+0x02,0x00,0x80,0x60,0x0f,0xeb,0x33,0x60,0x00,0xeb,0x00,0x64,0x30,0xfb,0x38,0xf2,
+0x00,0xf4,0xff,0xff,0x28,0x87,0x04,0x64,0x40,0x49,0x46,0x4a,0xb3,0xff,0x02,0x64,
+0x92,0xfb,0x99,0xff,0xfe,0xef,0x7f,0x00,0xe8,0x00,0x30,0x44,0x02,0xbc,0x40,0x51,
+0x98,0xff,0xfb,0x60,0x27,0x78,0xff,0xff,0x31,0xf3,0x2a,0x46,0x60,0x40,0x01,0x26,
+0x65,0x00,0x29,0x43,0x27,0x44,0x00,0xa8,0x60,0x41,0xa3,0xd2,0x1b,0x03,0x99,0xff,
+0x3b,0x40,0x80,0x2b,0xfd,0x00,0x98,0xff,0x60,0x57,0xff,0xff,0x77,0x5f,0xc9,0x81,
+0x60,0x57,0xff,0xff,0x77,0x5f,0xbd,0xda,0x01,0x0f,0x25,0x00,0x0b,0x03,0xa3,0xd2,
+0x7f,0x26,0xf2,0x00,0x00,0xf2,0x04,0x63,0x00,0xa8,0x40,0x4a,0x60,0x46,0x3b,0x03,
+0xa3,0xd2,0xea,0x00,0x3d,0x46,0x38,0xf2,0x2a,0x46,0x60,0x40,0x01,0x2a,0x1f,0x00,
+0x63,0x40,0x7f,0x26,0x05,0x00,0x00,0xf2,0x04,0x63,0x00,0xa8,0x60,0x46,0x2b,0x03,
+0x46,0x4a,0x01,0x0f,0x11,0x00,0xa3,0xd2,0xff,0xff,0x60,0x57,0xff,0xff,0x77,0x5f,
+0x60,0x47,0xa3,0xda,0x0c,0x00,0xe6,0x03,0x63,0x40,0x7f,0x26,0x05,0x00,0x00,0xf2,
+0x04,0x63,0x00,0xa8,0x40,0x4a,0x17,0x03,0x43,0x49,0x41,0x47,0x11,0x00,0x00,0x64,
+0x92,0xfb,0x99,0xff,0x30,0x44,0xfd,0xb4,0x40,0x51,0x98,0xff,0x2f,0xf3,0x00,0x7c,
+0x02,0xbc,0x2f,0xfb,0x3d,0x46,0x0f,0xf2,0x44,0x47,0x60,0x40,0x04,0x26,0x0b,0x00,
+0xfb,0x60,0x27,0x78,0xff,0xff,0x3d,0x46,0x0f,0xf0,0xff,0x60,0xf7,0x65,0x64,0x43,
+0x17,0x60,0x56,0x78,0xff,0xff,0x17,0x60,0x17,0x78,0xff,0xff,0x17,0x60,0xae,0x78,
+0xff,0xff,0x2e,0x2e,0x7e,0x00,0x84,0x09,0x3d,0x46,0x0f,0xf0,0x2d,0xf3,0x64,0x43,
+0x60,0x45,0x1b,0xf2,0x32,0xf1,0x60,0x40,0xc0,0x23,0x01,0x64,0xc0,0x2b,0x01,0x00,
+0x08,0x64,0x80,0x2b,0x01,0x00,0x04,0x64,0x40,0x2b,0x01,0x00,0x02,0x64,0xa0,0x84,
+0x0f,0x22,0x53,0x00,0x65,0x44,0x63,0x5c,0x80,0x2a,0x4f,0x00,0x99,0xff,0x3b,0x40,
+0x80,0x2b,0xfd,0x00,0x98,0xff,0x60,0x57,0xff,0xff,0x77,0x5f,0x60,0x57,0xff,0xff,
+0x77,0x5f,0x99,0xff,0x3b,0x40,0x80,0x2b,0xfd,0x00,0x98,0xff,0x2e,0xf3,0xff,0xff,
+0x60,0x57,0xff,0xff,0x77,0x5f,0x60,0x57,0xff,0xff,0x77,0x5f,0xff,0xff,0xff,0x60,
+0xf7,0x65,0x0b,0x14,0x0a,0x14,0x09,0x14,0x08,0x14,0x07,0x14,0x06,0x14,0x05,0x14,
+0x04,0x14,0x03,0x14,0x02,0x14,0xa7,0x83,0x27,0x00,0xd8,0xf3,0x08,0xbb,0x60,0x40,
+0x01,0x3a,0x22,0x00,0x00,0x64,0xd8,0xfb,0x5a,0xd3,0x5a,0xd3,0x60,0x42,0x01,0x7c,
+0xa2,0xd9,0x63,0x45,0x08,0x63,0x60,0x41,0xfe,0xa1,0x80,0x60,0x5e,0x64,0x58,0xd1,
+0x59,0xd9,0xfd,0x1f,0xdb,0xf3,0x10,0xf0,0xa0,0xd9,0xff,0xff,0x1a,0xf0,0x58,0xd9,
+0xdc,0xf3,0xff,0xff,0x00,0xa0,0x2e,0xf0,0x06,0x03,0xa0,0xd9,0x2f,0xf0,0x58,0xd9,
+0xff,0xff,0x30,0xf0,0x58,0xd9,0x65,0x43,0x0f,0xfc,0x0f,0xf0,0x80,0x60,0x00,0x63,
+0xb3,0x9c,0x0f,0xf8,0x00,0x64,0x92,0xfb,0x99,0xff,0x30,0x44,0xfd,0xb4,0x40,0x51,
 0x98,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x20,0x60,0x00,0xea,0x00,0xeb,
-0xa0,0x60,0x00,0xeb,0x30,0x60,0x00,0xeb,0x3e,0xf3,0xff,0xff,0xf9,0xb4,0x3e,0xfb,
-0xf8,0x60,0xd7,0x78,0xff,0xff,0x00,0x64,0x9c,0xfb,0x99,0xff,0x30,0x44,0xfd,0xb4,
+0xa0,0x60,0x00,0xeb,0x30,0x60,0x00,0xeb,0x2f,0xf3,0xff,0xff,0xf9,0xb4,0x2f,0xfb,
+0xfb,0x60,0x75,0x78,0xff,0xff,0x00,0x64,0x92,0xfb,0x99,0xff,0x30,0x44,0xfd,0xb4,
 0x40,0x51,0x98,0xff,0x00,0xeb,0xa0,0x60,0x00,0xeb,0x30,0x60,0x00,0xeb,0x20,0x60,
-0x00,0xea,0x00,0x64,0x3e,0xf3,0xff,0xff,0xf9,0xb4,0x3e,0xfb,0x40,0xfb,0xff,0xff,
+0x00,0xea,0x00,0x64,0x2f,0xf3,0xff,0xff,0xf9,0xb4,0x2f,0xfb,0x31,0xfb,0xff,0xff,
 0xff,0xff,0xff,0xff,0xff,0xff,0x99,0xff,0x3a,0x44,0x3b,0x44,0x98,0xff,0x3d,0x46,
 0x0f,0xf0,0x80,0x60,0x00,0x63,0xb3,0x83,0xff,0x60,0x7f,0x7c,0xa3,0x83,0x0f,0xfc,
-0xf8,0x60,0xd7,0x78,0xff,0xff,0xa9,0xff,0x77,0x44,0x60,0x57,0x40,0x4a,0x01,0x2a,
+0xfb,0x60,0x75,0x78,0xff,0xff,0xa9,0xff,0x77,0x44,0x60,0x57,0x40,0x4a,0x01,0x2a,
 0x31,0x00,0x24,0x44,0x00,0xa8,0x24,0x46,0x09,0xf2,0x2c,0x03,0x00,0xa8,0x40,0x44,
 0x13,0x03,0x60,0x46,0x60,0x5c,0x08,0x60,0x20,0x64,0xa0,0xd9,0x64,0x44,0x3a,0x44,
 0x01,0x26,0x02,0x00,0x01,0x75,0x03,0x00,0x3b,0x44,0x01,0xbc,0x40,0x5b,0x0e,0xf2,
 0xff,0xff,0x01,0xbc,0x0e,0xfa,0x0a,0xf4,0x08,0xf2,0x2d,0x45,0xd4,0x80,0x0e,0xf2,
-0x02,0x03,0xd2,0xfe,0x0f,0x00,0x02,0xbc,0x0e,0xfa,0xd0,0xfe,0x5a,0x60,0xf0,0x64,
+0x02,0x03,0xd2,0xfe,0x0f,0x00,0x02,0xbc,0x0e,0xfa,0xd0,0xfe,0x63,0x60,0xe2,0x64,
 0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,
 0xdc,0x84,0xa2,0xdb,0x2a,0x44,0x08,0x2a,0x1c,0x00,0x23,0x44,0x00,0xa8,0xff,0xff,
-0x18,0x03,0x3c,0x60,0x60,0x64,0x40,0x47,0x58,0x4f,0x53,0x00,0x46,0x43,0x11,0x02,
+0x18,0x03,0x3f,0x60,0x28,0x64,0x40,0x47,0x58,0x4f,0x53,0x00,0x46,0x43,0x11,0x02,
 0x0e,0xf2,0x66,0x43,0x60,0x5c,0x08,0x60,0x22,0x64,0xa0,0xdd,0x64,0x44,0x01,0xbc,
 0x0e,0xfa,0x3a,0x44,0x01,0x26,0x02,0x00,0x08,0x75,0x03,0x00,0x3b,0x44,0x08,0xbc,
 0x40,0x5b,0x2a,0x44,0x06,0x22,0x4b,0x00,0x22,0x44,0x00,0xa8,0x60,0x46,0x0e,0xf2,
 0x46,0x03,0x01,0xb0,0x02,0xbc,0x03,0x02,0x00,0x64,0x40,0x42,0x40,0x00,0x0e,0xfa,
-0xd0,0xfe,0x3c,0x60,0x66,0x64,0x40,0x47,0x58,0x4f,0x2b,0x00,0x46,0x42,0x37,0x02,
+0xd0,0xfe,0x3f,0x60,0x2e,0x64,0x40,0x47,0x58,0x4f,0x2b,0x00,0x46,0x42,0x37,0x02,
 0x22,0xf2,0x66,0x43,0x00,0xa8,0x0e,0xf2,0x12,0x02,0x01,0xbc,0x40,0x2a,0xe9,0x00,
 0xf7,0xb4,0x0e,0xfa,0xff,0xff,0x08,0x60,0x24,0x64,0xa0,0xdd,0x3a,0x44,0x01,0x26,
 0x02,0x00,0x02,0x75,0x24,0x00,0x3b,0x44,0x02,0xbc,0x40,0x5b,0x20,0x00,0x01,0xbc,
@@ -935,7 +965,7 @@
 0x0e,0x00,0x27,0x42,0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,0x0e,0xf2,0x04,0x03,
 0x05,0xb0,0x09,0xf2,0xf9,0x02,0x01,0x00,0x08,0xfe,0x2f,0x58,0xff,0xff,0x2a,0x44,
 0x80,0x2a,0x1f,0x00,0x21,0x44,0x00,0xa8,0x60,0x46,0x0e,0xf2,0x1a,0x03,0x02,0xbc,
-0x0e,0xfa,0xd0,0xfe,0x3c,0x60,0x90,0x64,0x40,0x47,0x58,0x4f,0xe2,0x00,0x46,0x41,
+0x0e,0xfa,0xd0,0xfe,0x3f,0x60,0x58,0x64,0x40,0x47,0x58,0x4f,0xe2,0x00,0x46,0x41,
 0x10,0x02,0x0e,0xf2,0x66,0x43,0x01,0xbc,0x0e,0xfa,0xff,0xff,0x08,0x60,0x10,0x64,
 0xa0,0xdd,0x3a,0x44,0x01,0x26,0x02,0x00,0x80,0x75,0x03,0x00,0x3b,0x44,0x80,0xbc,
 0x40,0x5b,0x34,0x40,0xff,0x26,0x3b,0xff,0x2a,0x44,0x0c,0xf7,0xff,0xff,0xff,0xff,
@@ -945,445 +975,481 @@
 0x28,0x02,0x0e,0xf2,0x46,0x44,0x01,0xbc,0x0e,0xfa,0x66,0x5c,0x08,0x60,0x20,0x64,
 0xa0,0xd9,0x3a,0x44,0x01,0x26,0x02,0x00,0x01,0x75,0x03,0x00,0x3b,0x44,0x01,0xbc,
 0x40,0x5b,0x17,0x00,0x35,0x40,0x04,0x2a,0x07,0x00,0x23,0x41,0x00,0xb9,0x40,0x55,
-0x10,0x02,0x18,0x60,0x85,0x78,0xff,0xff,0x35,0x40,0x02,0x2a,0x07,0x00,0x22,0x41,
-0x00,0xb9,0x40,0x55,0x06,0x02,0x18,0x60,0xad,0x78,0xff,0xff,0x35,0x40,0x08,0x26,
+0x10,0x02,0x18,0x60,0x14,0x78,0xff,0xff,0x35,0x40,0x02,0x2a,0x07,0x00,0x22,0x41,
+0x00,0xb9,0x40,0x55,0x06,0x02,0x18,0x60,0x3c,0x78,0xff,0xff,0x35,0x40,0x08,0x26,
 0x03,0x00,0x34,0x40,0x08,0x2a,0x05,0x00,0x21,0x41,0x00,0xb9,0x40,0x55,0x40,0x54,
-0x99,0x03,0x00,0x00,0xa1,0xff,0xff,0xff,0xba,0x3f,0x19,0x60,0x70,0x61,0x27,0x42,
+0x99,0x03,0x00,0x00,0xa1,0xff,0xff,0xff,0xba,0x3f,0x18,0x60,0xff,0x61,0x27,0x42,
 0xa2,0xd3,0x0e,0x4c,0x41,0x4e,0x40,0x45,0x60,0x46,0x00,0xa8,0x09,0xf2,0x06,0x03,
-0x40,0x4b,0x1a,0x60,0x66,0x78,0xff,0xff,0x2b,0x44,0xf5,0x00,0x0c,0x4e,0x2e,0x58,
+0x40,0x4b,0x19,0x60,0xf7,0x78,0xff,0xff,0x2b,0x44,0xf5,0x00,0x0c,0x4e,0x2e,0x58,
 0xff,0xff,0x25,0x46,0x08,0xf0,0x27,0x43,0xa4,0xd5,0xbd,0xd3,0x46,0x45,0x63,0x45,
 0x64,0x43,0x60,0x41,0x00,0xa8,0x00,0x64,0xa3,0xdb,0xbe,0xdb,0x04,0x02,0x65,0x43,
 0x25,0x44,0xbf,0xdb,0x05,0x00,0x61,0x44,0x0a,0xfa,0x61,0x46,0x25,0x44,0x09,0xfa,
 0x25,0x44,0x27,0x43,0x08,0xfe,0x05,0x03,0x60,0x46,0x09,0xf2,0x08,0xfc,0x00,0xa8,
 0xfa,0x00,0x66,0x44,0xa5,0xdb,0x2e,0x58,0xff,0xff,0x28,0x41,0x58,0x4f,0x0e,0x00,
 0x2e,0x58,0xff,0xff,0x28,0x41,0x40,0xa1,0x58,0x4f,0x08,0x00,0x05,0x03,0x28,0x41,
-0x58,0x4f,0x26,0x00,0x58,0x4f,0x56,0x00,0x2e,0x58,0xff,0xff,0x9e,0xf3,0x7c,0x63,
+0x58,0x4f,0x26,0x00,0x58,0x4f,0x58,0x00,0x2e,0x58,0xff,0xff,0x94,0xf3,0x7c,0x63,
 0x00,0xbe,0x40,0x45,0x1b,0x03,0x00,0x65,0x65,0x44,0xdc,0x85,0x84,0xa1,0x00,0xf2,
 0x06,0x06,0x01,0xfc,0x00,0xa8,0x60,0x46,0xf7,0x02,0x40,0x45,0x0f,0x00,0x33,0x44,
 0x54,0x93,0x33,0x44,0xfd,0xfb,0x80,0x60,0x7c,0x64,0x01,0xfa,0x00,0x64,0x00,0xf0,
-0x00,0xfa,0xd0,0x80,0x9e,0xf9,0x02,0x02,0x9f,0xf9,0x08,0xfe,0x2f,0x58,0xff,0xff,
+0x00,0xfa,0xd0,0x80,0x94,0xf9,0x02,0x02,0x95,0xf9,0x08,0xfe,0x2f,0x58,0xff,0xff,
 0x66,0x43,0x25,0x46,0x05,0xfc,0x06,0xfc,0x61,0x44,0x02,0xfa,0x01,0xf0,0x03,0x67,
 0xb0,0x84,0x00,0xf0,0x3c,0x7e,0x01,0xfa,0x04,0x64,0x03,0xfa,0x04,0xf8,0x00,0x64,
-0x23,0xfa,0x0c,0x61,0x10,0x63,0x59,0xda,0xfe,0x1f,0x2f,0x58,0xff,0xff,0x05,0x4c,
-0x7c,0x61,0x58,0x4f,0xc3,0x00,0x80,0x63,0x13,0x03,0x2c,0x46,0xbf,0xd0,0x25,0x46,
-0xff,0xd8,0x2c,0x46,0xfb,0x1d,0x25,0x46,0x00,0x64,0xd0,0x80,0x09,0xfa,0x0a,0xfa,
-0x05,0x03,0x64,0x46,0x01,0xf0,0x08,0x67,0xc0,0x84,0x01,0xfa,0x58,0x4f,0x02,0x00,
-0x2e,0x58,0xff,0xff,0x27,0x43,0x00,0xbb,0x25,0x46,0x12,0x03,0xbe,0xd3,0x08,0xfc,
-0x00,0xa8,0xff,0xff,0x03,0x02,0x25,0x44,0xa3,0xdb,0x04,0x00,0x0a,0xfa,0x60,0x46,
-0x25,0x44,0x09,0xfa,0xbe,0xdb,0x04,0xa3,0xa3,0xd3,0xff,0xff,0xdc,0x84,0xa3,0xdb,
-0x2f,0x58,0xff,0xff,0x07,0x4c,0x58,0x4f,0x28,0x00,0x0c,0x47,0x58,0x4f,0xe2,0x00,
-0x2e,0x58,0xff,0xff,0x07,0x4c,0x58,0x4f,0x20,0x00,0x0c,0x47,0x58,0x4f,0x5e,0x00,
-0x2e,0x58,0xff,0xff,0x07,0x4c,0x58,0x4f,0x18,0x00,0x0c,0x47,0x27,0x44,0x00,0xbe,
-0x08,0xf0,0x11,0x03,0x09,0xf2,0x25,0x43,0x09,0xfc,0x63,0x46,0x27,0x43,0x0a,0xfc,
-0x09,0xfa,0x08,0xf8,0x00,0xa8,0x66,0x43,0x03,0x02,0x64,0x44,0x58,0xdd,0x03,0x00,
-0x60,0x46,0x25,0x44,0x0a,0xfa,0x2e,0x58,0xff,0xff,0x25,0x46,0x08,0xf2,0x09,0xf0,
-0x00,0xa8,0x40,0x47,0x1d,0x03,0x0a,0xf2,0x64,0x43,0x00,0xbb,0x27,0x42,0xda,0x82,
-0x08,0x24,0xa2,0xdb,0x00,0xa8,0xca,0x82,0x02,0x02,0xa2,0xdd,0x02,0x00,0x60,0x46,
-0x09,0xfc,0x00,0xbb,0x63,0x46,0x08,0x28,0x0a,0xfa,0x25,0x46,0x00,0x64,0x09,0xfa,
-0x0a,0xfa,0x08,0xfa,0x27,0x42,0x04,0xa2,0xa2,0xd3,0xff,0xff,0xcc,0x84,0xa2,0xdb,
-0x2f,0x58,0xff,0xff,0x25,0x46,0x01,0xf2,0x00,0xf2,0xff,0xff,0x03,0x23,0x11,0x00,
-0x00,0xa8,0x60,0x46,0x0c,0x03,0x01,0xf0,0x78,0x67,0xa0,0x80,0xf8,0x67,0x07,0x03,
-0xc0,0x84,0x01,0xfa,0x25,0x46,0x00,0x64,0x00,0xfa,0x25,0x44,0x05,0xfa,0x58,0x4f,
-0xc4,0x00,0x58,0x4f,0x27,0x00,0xd1,0xfe,0x2e,0x58,0xff,0xff,0x27,0x43,0x00,0xbb,
-0x25,0x46,0x10,0x03,0xa3,0xd3,0x08,0xfc,0x00,0xa8,0x09,0xfa,0x03,0x02,0x25,0x44,
-0xbe,0xdb,0x04,0x00,0x60,0x46,0x25,0x44,0x0a,0xfa,0x25,0x46,0x00,0x64,0x0a,0xfa,
-0x25,0x44,0xa3,0xdb,0x2f,0x58,0xff,0xff,0x9f,0xf3,0x05,0xf0,0x00,0xbe,0x9f,0xf9,
-0x25,0x44,0x02,0x02,0x9e,0xfb,0x01,0x00,0x00,0xfa,0x25,0x46,0x7c,0x64,0x01,0xfa,
-0x2f,0x58,0xff,0xff,0x9f,0xf3,0x00,0x61,0x00,0xbe,0x25,0x44,0x02,0x03,0x00,0xfa,
-0x01,0x00,0x9e,0xfb,0x60,0x46,0x00,0xf2,0x66,0x43,0x00,0xbe,0xdd,0x81,0xfb,0x02,
-0x9f,0xfd,0x33,0x45,0x45,0x93,0x33,0x44,0xfd,0xfb,0x2f,0x58,0xff,0xff,0x25,0x46,
-0x05,0xf0,0x06,0xf2,0x05,0xfa,0xd0,0x80,0x64,0x43,0x0e,0x03,0x60,0x46,0x01,0xf0,
-0x80,0x67,0xb0,0x84,0x01,0xfa,0x00,0xf0,0x00,0x64,0x00,0xfa,0x64,0x46,0x05,0xfc,
-0x46,0x45,0x58,0x4f,0xd7,0x00,0xd1,0xfe,0x2e,0x58,0xff,0xff,0x00,0x66,0x46,0x45,
-0x29,0x43,0xfc,0xa3,0x66,0x44,0xbd,0xdb,0x25,0x44,0xbd,0xdb,0x00,0x64,0xbd,0xdb,
-0x03,0x61,0x1a,0x65,0x3c,0x60,0xa0,0x63,0x43,0x49,0xa3,0xd3,0x06,0xa3,0x00,0xa8,
-0xcd,0x81,0x04,0x02,0xf9,0x02,0x19,0x60,0x5e,0x78,0xff,0xff,0x01,0x26,0xe6,0x00,
-0xd4,0x80,0x60,0x45,0xe3,0x05,0xf6,0xa3,0xbd,0xd1,0xbd,0xd1,0x44,0x47,0x44,0x48,
-0x44,0x45,0x13,0x60,0x38,0x64,0x44,0xd7,0xff,0xff,0xff,0xff,0x9e,0xf3,0x33,0x41,
-0x00,0xa8,0x40,0x45,0x0f,0x03,0x60,0x46,0x80,0x60,0x7c,0x64,0x01,0xfa,0x4d,0x93,
-0x33,0x44,0xfd,0xfb,0x00,0x64,0x00,0xf0,0x00,0xfa,0xd0,0x80,0x9e,0xf9,0x02,0x02,
-0x9f,0xf9,0x08,0xfe,0x2f,0x58,0xff,0xff,0xa2,0xfe,0xff,0xff,0x12,0x05,0xa0,0xfe,
-0xff,0xff,0x07,0x05,0xa3,0xfe,0xff,0xff,0x07,0x05,0xa1,0xfe,0xff,0xff,0x0a,0x04,
-0x18,0x00,0x20,0x58,0xff,0xff,0xff,0xff,0x65,0xf3,0xff,0xff,0x80,0xbc,0x65,0xfb,
-0x10,0x00,0xff,0xff,0xff,0xff,0x0a,0x00,0x99,0xff,0x30,0x44,0x50,0xbc,0x40,0x51,
-0x98,0xff,0x99,0xff,0x30,0x44,0x7d,0xb4,0x40,0x51,0x98,0xff,0xa1,0xff,0xff,0xff,
-0xbb,0x3f,0x3c,0x44,0xac,0x84,0x8b,0xf3,0xf9,0x02,0x02,0xa8,0x00,0x64,0x09,0x02,
-0x8b,0xfb,0x8c,0xfb,0x8d,0xfb,0xca,0xfe,0x00,0x64,0x8e,0xfb,0x1b,0x60,0x28,0x78,
-0xff,0xff,0x8b,0xf3,0x8c,0xf3,0x02,0xa8,0x02,0xa8,0x0a,0x02,0x00,0x64,0x8d,0xfb,
-0x8b,0xfb,0x8c,0xfb,0x00,0x64,0x8e,0xfb,0xca,0xfe,0x1b,0x60,0xe0,0x78,0xff,0xff,
-0x8d,0xf1,0x00,0x64,0x64,0x41,0x02,0x02,0x8c,0xfb,0xca,0xfe,0x61,0x44,0x01,0xa8,
-0xff,0xff,0x09,0x02,0x3c,0x60,0x96,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,
-0x14,0x02,0xfe,0xb4,0x8d,0xfb,0x95,0xf3,0xff,0xff,0x60,0x40,0x01,0x26,0x10,0x00,
-0x8c,0xf3,0x8e,0xf3,0x01,0xa8,0x02,0xb0,0x01,0x02,0x0a,0x03,0x3c,0x60,0x4e,0x62,
-0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,0x67,0x03,0x1b,0x60,0xf7,0x78,0xff,0xff,
-0x3c,0x60,0x4e,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,0x74,0x02,0xcb,0xf3,
-0xff,0xff,0xfd,0xa0,0x6d,0xf3,0x44,0x02,0x02,0xb0,0x67,0xf1,0x06,0x02,0x64,0x43,
-0x00,0xbb,0xff,0xff,0x02,0x03,0x63,0x44,0x08,0x00,0xfd,0xb4,0x6d,0xfb,0x3c,0x60,
-0x48,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,0x00,0xbc,0x67,0xfb,0x44,0x03,
-0x60,0x46,0x2b,0xf2,0xff,0xff,0x01,0xb0,0x6d,0xf3,0x04,0x03,0x01,0xb0,0xff,0xff,
-0x19,0x02,0x16,0x00,0xfe,0xb4,0x6d,0xfb,0x6a,0x60,0x58,0x4e,0x17,0x78,0xff,0xff,
-0x0f,0x03,0x19,0xf2,0xff,0xff,0x00,0xbc,0xff,0xff,0x0c,0x03,0xa0,0xd3,0xff,0xff,
-0x02,0xb0,0xff,0xff,0x07,0x03,0x69,0x60,0x58,0x4e,0xfd,0x78,0xff,0xff,0x02,0x03,
-0x09,0xf2,0xdb,0x00,0x0d,0xf2,0xff,0xff,0x00,0x7f,0x0d,0xfa,0x09,0xf2,0x67,0xfb,
-0x00,0xbc,0xff,0xff,0x30,0x02,0x6d,0xf3,0xff,0xff,0xfe,0xb4,0x6d,0xfb,0x2b,0x00,
-0x3c,0x60,0x48,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,0x0d,0x03,0x13,0xf3,
-0x95,0xf3,0x00,0xa8,0x00,0xa0,0x1f,0x03,0x1e,0x03,0x22,0xf0,0x10,0x64,0xb0,0x84,
-0xa2,0xda,0x1e,0x60,0xd2,0x78,0xff,0xff,0x00,0x64,0x40,0x5c,0x65,0xf3,0xff,0xff,
-0xcb,0xf1,0x80,0x2a,0x0d,0x00,0x7f,0xb4,0x65,0xfb,0x64,0x40,0x04,0x3a,0x08,0x00,
-0x29,0x44,0x2a,0x37,0x05,0x00,0x74,0xf3,0xff,0xff,0x04,0xbc,0x74,0xfb,0xc9,0xfe,
-0x1b,0x60,0x28,0x78,0xff,0xff,0x65,0xf3,0xff,0xff,0xff,0xff,0x80,0x26,0x13,0x00,
-0x02,0x26,0x0f,0x00,0x69,0x60,0x44,0x62,0x90,0x60,0x62,0x64,0xa2,0xdb,0x3c,0x60,
-0xba,0x62,0x08,0x64,0xa2,0xdb,0x00,0x64,0x5a,0xdb,0x2d,0xff,0x1b,0x60,0x32,0x78,
-0xff,0xff,0x80,0xbc,0x65,0xfb,0xcb,0xf3,0x0e,0xf0,0xfc,0xa0,0xfd,0xa0,0x01,0x03,
+0x23,0xfa,0x1a,0xfa,0x1b,0xfa,0x0c,0x61,0x14,0x63,0x59,0xda,0xfe,0x1f,0x2f,0x58,
+0xff,0xff,0x05,0x4c,0x7c,0x61,0x58,0x4f,0xc1,0x00,0x80,0x63,0x13,0x03,0x2c,0x46,
+0xbf,0xd0,0x25,0x46,0xff,0xd8,0x2c,0x46,0xfb,0x1d,0x25,0x46,0x00,0x64,0xd0,0x80,
+0x09,0xfa,0x0a,0xfa,0x05,0x03,0x64,0x46,0x01,0xf0,0x08,0x67,0xc0,0x84,0x01,0xfa,
+0x58,0x4f,0x02,0x00,0x2e,0x58,0xff,0xff,0x27,0x43,0x00,0xbb,0x25,0x46,0x12,0x03,
+0xbe,0xd3,0x08,0xfc,0x00,0xa8,0xff,0xff,0x03,0x02,0x25,0x44,0xa3,0xdb,0x04,0x00,
+0x0a,0xfa,0x60,0x46,0x25,0x44,0x09,0xfa,0xbe,0xdb,0x04,0xa3,0xa3,0xd3,0xff,0xff,
+0xdc,0x84,0xa3,0xdb,0x2f,0x58,0xff,0xff,0x07,0x4c,0x58,0x4f,0x28,0x00,0x0c,0x47,
+0x58,0x4f,0xe2,0x00,0x2e,0x58,0xff,0xff,0x07,0x4c,0x58,0x4f,0x20,0x00,0x0c,0x47,
+0x58,0x4f,0x5e,0x00,0x2e,0x58,0xff,0xff,0x07,0x4c,0x58,0x4f,0x18,0x00,0x0c,0x47,
+0x27,0x44,0x00,0xbe,0x08,0xf0,0x11,0x03,0x09,0xf2,0x25,0x43,0x09,0xfc,0x63,0x46,
+0x27,0x43,0x0a,0xfc,0x09,0xfa,0x08,0xf8,0x00,0xa8,0x66,0x43,0x03,0x02,0x64,0x44,
+0x58,0xdd,0x03,0x00,0x60,0x46,0x25,0x44,0x0a,0xfa,0x2e,0x58,0xff,0xff,0x25,0x46,
+0x08,0xf2,0x09,0xf0,0x00,0xa8,0x40,0x47,0x1d,0x03,0x0a,0xf2,0x64,0x43,0x00,0xbb,
+0x27,0x42,0xda,0x82,0x08,0x24,0xa2,0xdb,0x00,0xa8,0xca,0x82,0x02,0x02,0xa2,0xdd,
+0x02,0x00,0x60,0x46,0x09,0xfc,0x00,0xbb,0x63,0x46,0x08,0x28,0x0a,0xfa,0x25,0x46,
+0x00,0x64,0x09,0xfa,0x0a,0xfa,0x08,0xfa,0x27,0x42,0x04,0xa2,0xa2,0xd3,0xff,0xff,
+0xcc,0x84,0xa2,0xdb,0x2f,0x58,0xff,0xff,0x25,0x46,0x01,0xf2,0x00,0xf2,0xff,0xff,
+0x03,0x23,0x11,0x00,0x00,0xa8,0x60,0x46,0x0c,0x03,0x01,0xf0,0x78,0x67,0xa0,0x80,
+0xf8,0x67,0x07,0x03,0xc0,0x84,0x01,0xfa,0x25,0x46,0x00,0x64,0x00,0xfa,0x25,0x44,
+0x05,0xfa,0x58,0x4f,0xc4,0x00,0x58,0x4f,0x27,0x00,0xd1,0xfe,0x2e,0x58,0xff,0xff,
+0x27,0x43,0x00,0xbb,0x25,0x46,0x10,0x03,0xa3,0xd3,0x08,0xfc,0x00,0xa8,0x09,0xfa,
+0x03,0x02,0x25,0x44,0xbe,0xdb,0x04,0x00,0x60,0x46,0x25,0x44,0x0a,0xfa,0x25,0x46,
+0x00,0x64,0x0a,0xfa,0x25,0x44,0xa3,0xdb,0x2f,0x58,0xff,0xff,0x95,0xf3,0x05,0xf0,
+0x00,0xbe,0x95,0xf9,0x25,0x44,0x02,0x02,0x94,0xfb,0x01,0x00,0x00,0xfa,0x25,0x46,
+0x7c,0x64,0x01,0xfa,0x2f,0x58,0xff,0xff,0x95,0xf3,0x00,0x61,0x00,0xbe,0x25,0x44,
+0x02,0x03,0x00,0xfa,0x01,0x00,0x94,0xfb,0x60,0x46,0x00,0xf2,0x66,0x43,0x00,0xbe,
+0xdd,0x81,0xfb,0x02,0x95,0xfd,0x33,0x45,0x45,0x93,0x33,0x44,0xfd,0xfb,0x2f,0x58,
+0xff,0xff,0x25,0x46,0x05,0xf0,0x06,0xf2,0x05,0xfa,0xd0,0x80,0x64,0x43,0x0e,0x03,
+0x60,0x46,0x01,0xf0,0x80,0x67,0xb0,0x84,0x01,0xfa,0x00,0xf0,0x00,0x64,0x00,0xfa,
+0x64,0x46,0x05,0xfc,0x46,0x45,0x58,0x4f,0xd7,0x00,0xd1,0xfe,0x2e,0x58,0xff,0xff,
+0x00,0x66,0x46,0x45,0x29,0x43,0xfc,0xa3,0x66,0x44,0xbd,0xdb,0x25,0x44,0xbd,0xdb,
+0x00,0x64,0xbd,0xdb,0x03,0x61,0x1a,0x65,0x3f,0x60,0x68,0x63,0x43,0x49,0xa3,0xd3,
+0x06,0xa3,0x00,0xa8,0xcd,0x81,0x04,0x02,0xf9,0x02,0x18,0x60,0xed,0x78,0xff,0xff,
+0x01,0x26,0xe6,0x00,0xd4,0x80,0x60,0x45,0xe3,0x05,0xf6,0xa3,0xbd,0xd1,0xbd,0xd1,
+0x44,0x47,0x44,0x48,0x44,0x45,0x13,0x60,0xb0,0x64,0x44,0xd7,0xff,0xff,0xff,0xff,
+0x94,0xf3,0x33,0x41,0x00,0xa8,0x40,0x45,0x0f,0x03,0x60,0x46,0x80,0x60,0x7c,0x64,
+0x01,0xfa,0x4d,0x93,0x33,0x44,0xfd,0xfb,0x00,0x64,0x00,0xf0,0x00,0xfa,0xd0,0x80,
+0x94,0xf9,0x02,0x02,0x95,0xf9,0x08,0xfe,0x2f,0x58,0xff,0xff,0xa2,0xfe,0xff,0xff,
+0x12,0x05,0xa0,0xfe,0xff,0xff,0x07,0x05,0xa3,0xfe,0xff,0xff,0x07,0x05,0xa1,0xfe,
+0xff,0xff,0x0a,0x04,0x18,0x00,0x20,0x58,0xff,0xff,0xff,0xff,0x59,0xf3,0xff,0xff,
+0x80,0xbc,0x59,0xfb,0x10,0x00,0xff,0xff,0xff,0xff,0x0a,0x00,0x99,0xff,0x30,0x44,
+0x50,0xbc,0x40,0x51,0x98,0xff,0x99,0xff,0x30,0x44,0x7d,0xb4,0x40,0x51,0x98,0xff,
+0xa1,0xff,0xff,0xff,0xbb,0x3f,0x3c,0x44,0xac,0x84,0x7f,0xf3,0xf9,0x02,0x02,0xa8,
+0x00,0x64,0x09,0x02,0x7f,0xfb,0x80,0xfb,0x81,0xfb,0xca,0xfe,0x00,0x64,0x82,0xfb,
+0x1a,0x60,0xb9,0x78,0xff,0xff,0x7f,0xf3,0x80,0xf3,0x02,0xa8,0x02,0xa8,0x0a,0x02,
+0x00,0x64,0x81,0xfb,0x7f,0xfb,0x80,0xfb,0x00,0x64,0x82,0xfb,0xca,0xfe,0x1b,0x60,
+0x83,0x78,0xff,0xff,0x81,0xf1,0x00,0x64,0x64,0x41,0x02,0x02,0x80,0xfb,0xca,0xfe,
+0x61,0x44,0x01,0xa8,0xff,0xff,0x09,0x02,0x3f,0x60,0x5e,0x62,0xa2,0xd3,0xff,0xff,
+0x00,0xa8,0x60,0x46,0x14,0x02,0xfe,0xb4,0x81,0xfb,0x89,0xf3,0xff,0xff,0x60,0x40,
+0x01,0x26,0x10,0x00,0x80,0xf3,0x82,0xf3,0x01,0xa8,0x02,0xb0,0x01,0x02,0x0a,0x03,
+0x3f,0x60,0x16,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,0x53,0x03,0x1b,0x60,
+0x9b,0x78,0xff,0xff,0x3f,0x60,0x16,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,
+0xf6,0x02,0xbd,0xf3,0xff,0xff,0xfd,0xa0,0x61,0xf3,0x45,0x02,0x02,0xb0,0x5b,0xf1,
+0x06,0x02,0x64,0x43,0x00,0xbb,0xff,0xff,0x02,0x03,0x63,0x44,0x08,0x00,0xfd,0xb4,
+0x61,0xfb,0x3f,0x60,0x10,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,0x00,0xbc,
+0x5b,0xfb,0x56,0x03,0x60,0x46,0x2b,0xf2,0xff,0xff,0x01,0xb0,0x61,0xf3,0x04,0x03,
+0x01,0xb0,0xff,0xff,0x19,0x02,0x16,0x00,0xfe,0xb4,0x61,0xfb,0x6e,0x60,0x58,0x4e,
+0x48,0x78,0xff,0xff,0x0f,0x03,0x19,0xf2,0xff,0xff,0x00,0xbc,0xff,0xff,0x0c,0x03,
+0xa0,0xd3,0xff,0xff,0x02,0xb0,0xff,0xff,0x07,0x03,0x6e,0x60,0x58,0x4e,0x2e,0x78,
+0xff,0xff,0x02,0x03,0x09,0xf2,0xdb,0x00,0x0d,0xf2,0xff,0xff,0x00,0x7f,0x0d,0xfa,
+0x09,0xf2,0x5b,0xfb,0x00,0xbc,0xff,0xff,0x43,0x02,0x61,0xf3,0xff,0xff,0xfe,0xb4,
+0x61,0xfb,0x3e,0x00,0x25,0x00,0x3f,0x60,0x10,0x65,0x6a,0x60,0xd0,0x64,0xa0,0xd3,
+0xa5,0xd3,0x00,0xa0,0xff,0xff,0x0a,0x03,0x00,0xa0,0x60,0x46,0x07,0x03,0x0f,0xf2,
+0xff,0xff,0x60,0x40,0x02,0x26,0x07,0x00,0x09,0xf2,0xf6,0x00,0xa5,0xd3,0xff,0xff,
+0x00,0xa8,0x60,0x46,0x0d,0x03,0x13,0xf3,0x89,0xf3,0x00,0xa8,0x00,0xa0,0x20,0x03,
+0x1f,0x03,0x22,0xf0,0x10,0x64,0xb0,0x84,0xa2,0xda,0x1e,0x60,0x58,0x78,0xff,0xff,
+0x00,0x64,0x40,0x5c,0xbd,0xf1,0x59,0xf3,0xff,0xff,0x60,0x40,0x80,0x2a,0x0d,0x00,
+0x7f,0xb4,0x59,0xfb,0x64,0x40,0x04,0x3a,0x08,0x00,0x29,0x44,0x2a,0x37,0x05,0x00,
+0x68,0xf3,0xff,0xff,0x04,0xbc,0x68,0xfb,0xc9,0xfe,0x1a,0x60,0xb9,0x78,0xff,0xff,
+0x59,0xf3,0xff,0xff,0xff,0xff,0x80,0x26,0x0e,0x00,0x02,0x26,0x0a,0x00,0x3f,0x60,
+0x82,0x62,0x08,0x64,0xa2,0xdb,0x00,0x64,0x5a,0xdb,0x2d,0xff,0x1a,0x60,0xc3,0x78,
+0xff,0xff,0x80,0xbc,0x59,0xfb,0xbd,0xf3,0x0e,0xf0,0xfc,0xa0,0xfd,0xa0,0x01,0x03,
 0x17,0x02,0x60,0x41,0x02,0x65,0x64,0x44,0x40,0x49,0x2a,0x37,0x11,0x00,0x18,0x37,
 0x0f,0x00,0xff,0x37,0x02,0x00,0xfd,0x3b,0x06,0x00,0x61,0x44,0xfd,0xa0,0x01,0x65,
-0x02,0x03,0x00,0x64,0x66,0xfb,0x74,0xf3,0xff,0xff,0xb4,0x84,0x74,0xfb,0xc9,0xfe,
-0x29,0xf2,0x66,0xf1,0x60,0x40,0xb0,0x36,0x06,0x00,0x00,0x36,0x04,0x00,0x20,0x36,
-0x02,0x00,0xb0,0x84,0x29,0xfa,0xf7,0x60,0x0d,0x78,0xff,0xff,0x1a,0xee,0x7f,0x00,
-0x86,0x02,0x67,0x60,0xc8,0x62,0x00,0x64,0xa2,0xdb,0x29,0xf0,0xff,0xff,0x64,0x40,
-0x40,0x27,0x03,0x00,0x1c,0x60,0x3a,0x78,0xff,0xff,0x3e,0xf3,0xff,0xff,0xff,0xff,
-0x04,0x2a,0x19,0x00,0x46,0x5c,0x67,0x60,0xd2,0x62,0x01,0x64,0xa2,0xdb,0xf7,0x60,
-0x2e,0x64,0x40,0x44,0x99,0xff,0x30,0x44,0x41,0xbc,0x40,0x51,0x98,0xff,0xa1,0xff,
-0xff,0xff,0xbb,0x3f,0x99,0xff,0x30,0x44,0xfe,0xb4,0x40,0x51,0x98,0xff,0x67,0x60,
-0xd2,0x62,0x00,0x64,0xa2,0xdb,0x42,0xf3,0x00,0x65,0x60,0x41,0xd6,0xf3,0x95,0xf3,
-0x00,0xa0,0x00,0xa0,0x09,0x03,0x23,0xf2,0x04,0x03,0x60,0x45,0x00,0x7f,0x60,0x41,
-0x03,0x00,0xff,0xff,0xff,0x36,0x03,0x61,0x44,0xf1,0x98,0xff,0x64,0x40,0x08,0x26,
-0x02,0x00,0x00,0x64,0x14,0x00,0x07,0xf2,0xff,0xff,0x00,0xa0,0xff,0xff,0x06,0x03,
-0x1a,0xf2,0x38,0xfb,0xff,0xff,0x1b,0xf2,0x39,0xfb,0x15,0x00,0x38,0xf3,0x39,0xf1,
-0xdc,0x84,0x38,0xfb,0x1a,0xfa,0x64,0x44,0x02,0x24,0xdc,0x84,0xff,0xb4,0x60,0x5c,
-0x02,0xfe,0x61,0x44,0x03,0xb4,0xf8,0x84,0xf8,0x84,0xf8,0x84,0xb0,0x84,0x39,0xfb,
-0x1b,0xfa,0x01,0x64,0x07,0xfa,0x61,0x5c,0x41,0xf3,0x64,0x40,0x03,0x26,0x06,0x00,
-0x60,0x40,0x01,0x2a,0x15,0x00,0x68,0x60,0x08,0x63,0x30,0x00,0x64,0x40,0x03,0x2a,
-0x06,0x00,0x60,0x40,0x08,0x2a,0x0c,0x00,0x68,0x60,0x32,0x63,0x27,0x00,0x64,0x40,
-0x01,0x2a,0x0e,0x00,0x60,0x40,0x02,0x2a,0x03,0x00,0x68,0x60,0x16,0x63,0x1e,0x00,
-0x46,0x5c,0x22,0xf0,0x04,0x64,0xb0,0x84,0xa2,0xda,0x1e,0x60,0xd2,0x78,0xff,0xff,
-0x60,0x40,0x04,0x2a,0xf5,0x00,0x65,0x47,0x00,0x36,0x0e,0x00,0x00,0x7f,0xe0,0x84,
-0x60,0x45,0xe0,0x84,0xe0,0x81,0xc4,0x85,0xc5,0x85,0x3d,0x60,0xce,0x64,0xc4,0x83,
-0x02,0x61,0x67,0x44,0xda,0xfb,0x02,0x00,0x68,0x60,0x24,0x63,0x00,0x60,0x00,0xea,
-0xff,0xff,0xff,0xff,0x00,0x60,0x00,0xeb,0xff,0xff,0xff,0xff,0x38,0xf1,0xe0,0x7f,
-0x64,0x5e,0x99,0xff,0x40,0x5a,0x64,0x47,0xe1,0x7f,0x40,0x5a,0x39,0xf3,0xff,0xff,
-0xe2,0x7f,0x40,0x5a,0x61,0x5c,0xda,0xf3,0xda,0xf9,0xd0,0x80,0xbd,0xd3,0x30,0x03,
-0x60,0x45,0xe3,0x7f,0x40,0x5a,0x65,0x47,0xe4,0x7f,0xbd,0xd3,0x40,0x5a,0x60,0x45,
-0xe5,0x7f,0x40,0x5a,0x65,0x47,0xe6,0x7f,0xbd,0xd3,0x40,0x5a,0x60,0x45,0x45,0xf1,
-0xe7,0x7f,0x40,0x5a,0x64,0x40,0x0f,0x3a,0x61,0x00,0x65,0x47,0xe8,0x7f,0xbd,0xd3,
-0x40,0x5a,0x60,0x45,0xe9,0x7f,0x40,0x5a,0x65,0x47,0xea,0x7f,0xbd,0xd3,0x40,0x5a,
-0x60,0x45,0xeb,0x7f,0x40,0x5a,0x65,0x47,0xec,0x7f,0xbd,0xd3,0x40,0x5a,0x60,0x45,
-0xed,0x7f,0x40,0x5a,0x65,0x47,0xee,0x7f,0xbd,0xd3,0x40,0x5a,0xef,0x7f,0x40,0x5a,
-0x20,0x60,0x00,0xeb,0x68,0x60,0x40,0x62,0xa2,0xd3,0xff,0xff,0xff,0xff,0x01,0x2a,
-0x3d,0x00,0x00,0x64,0xa2,0xdb,0x00,0x60,0x00,0xea,0xff,0xff,0xff,0xff,0xff,0xff,
-0x3a,0x5c,0x80,0x2b,0x12,0x00,0x8b,0xff,0x74,0x40,0x88,0xff,0x3a,0x5c,0x80,0x2b,
-0x09,0x00,0x8b,0xff,0x74,0x40,0x88,0xff,0x3a,0x5c,0x80,0x2b,0x03,0x00,0x8b,0xff,
-0x74,0x40,0x88,0xff,0x8b,0xff,0x74,0x40,0x88,0xff,0x3a,0x5c,0x80,0x2b,0xff,0xff,
-0x31,0x60,0x00,0xea,0xff,0xff,0xff,0xff,0x00,0x60,0x00,0xea,0x3a,0x5c,0x80,0x27,
-0x09,0x00,0x31,0x60,0x00,0xea,0xff,0xff,0xff,0xff,0x00,0x60,0x00,0xea,0x3a,0x5c,
-0x80,0x2b,0xf7,0x00,0x00,0x64,0xdb,0xfb,0x68,0x60,0x44,0x64,0x3a,0x5c,0xa0,0xd9,
-0xff,0xff,0x30,0x60,0x00,0xea,0xff,0xff,0xff,0xff,0xff,0xff,0x3a,0x40,0x40,0x27,
-0xfd,0x00,0x67,0x60,0xd6,0x62,0x00,0x64,0xa2,0xdb,0x45,0xf1,0x80,0x60,0x00,0x64,
-0xb0,0x84,0x40,0x5a,0x98,0xff,0x33,0x60,0x00,0xea,0x3f,0xf3,0xff,0xff,0x01,0xbc,
-0x3f,0xfb,0x1c,0x60,0x3a,0x78,0xff,0xff,0x74,0x38,0x7e,0x00,0xf2,0x06,0x19,0xf2,
-0xff,0xff,0x00,0xb8,0x1d,0xf2,0x06,0x03,0x60,0x47,0x00,0x7f,0x53,0xfb,0x51,0xfb,
-0x60,0x5c,0x07,0x00,0x50,0xf3,0x51,0xf1,0xff,0xff,0x52,0xfb,0x53,0xf9,0x00,0x64,
-0x54,0xfb,0x95,0xf3,0xff,0xff,0x00,0xbc,0xff,0xff,0x06,0x02,0x29,0xf2,0xff,0xff,
-0x0c,0xb4,0xff,0xff,0x00,0x3a,0x02,0x00,0x13,0xf0,0x53,0xf9,0x64,0x44,0x00,0xa0,
-0x01,0x63,0x04,0x03,0xff,0xa0,0x02,0x63,0x01,0x03,0x0b,0x63,0x55,0xfd,0x46,0x5c,
+0x02,0x03,0x00,0x64,0x5a,0xfb,0x68,0xf3,0xff,0xff,0xb4,0x84,0x68,0xfb,0xc9,0xfe,
+0x29,0xf2,0x5a,0xf1,0x60,0x40,0xb0,0x36,0x06,0x00,0x00,0x36,0x04,0x00,0x20,0x36,
+0x02,0x00,0xb0,0x84,0x29,0xfa,0xf8,0x60,0x73,0x78,0xff,0xff,0xe6,0xf0,0x7f,0x00,
+0xf6,0x04,0x6a,0x60,0xa0,0x62,0x00,0x64,0xa2,0xdb,0x29,0xf0,0xff,0xff,0x64,0x40,
+0x40,0x27,0x03,0x00,0x1b,0x60,0xd9,0x78,0xff,0xff,0x2f,0xf3,0xff,0xff,0xff,0xff,
+0x04,0x2a,0x19,0x00,0x46,0x5c,0x6a,0x60,0xae,0x62,0x01,0x64,0xa2,0xdb,0xf8,0x60,
+0x94,0x64,0x40,0x44,0x99,0xff,0x30,0x44,0x41,0xbc,0x40,0x51,0x98,0xff,0xa1,0xff,
+0xff,0xff,0xbb,0x3f,0x99,0xff,0x30,0x44,0xfe,0xb4,0x40,0x51,0x98,0xff,0x6a,0x60,
+0xae,0x62,0x00,0x64,0xa2,0xdb,0x33,0xf3,0x00,0x65,0x60,0x41,0x89,0xf3,0xc5,0xf3,
+0x00,0xa0,0x23,0xf2,0x00,0xa0,0x02,0x02,0x3a,0x03,0x37,0x00,0xe2,0xfb,0x60,0x41,
+0x60,0x47,0x00,0x7f,0xe0,0x84,0x60,0x45,0xe0,0x84,0xe0,0x84,0xc4,0x85,0xc4,0x85,
+0x41,0x60,0x92,0x63,0x47,0xd3,0xf0,0xa3,0x00,0x7c,0x60,0x40,0x02,0x27,0x02,0x7c,
+0xd5,0xf9,0xff,0xff,0x07,0x7c,0x60,0x40,0x01,0x27,0x0f,0x7c,0x38,0xf9,0x60,0x47,
+0x18,0xb4,0x60,0x5c,0x61,0x47,0xff,0xb5,0xff,0xb1,0x67,0x44,0xc9,0xfb,0x65,0x44,
+0x80,0xa0,0x61,0x40,0x02,0x36,0x40,0x00,0x3f,0x05,0x64,0x44,0xe8,0x85,0xc5,0x85,
+0x90,0x64,0xc4,0x85,0x65,0x44,0xe0,0x9c,0x64,0x44,0xe0,0x84,0xe0,0x84,0xc0,0x9c,
+0xc0,0x9c,0x41,0x60,0x82,0x63,0xc3,0x83,0x2f,0x00,0xff,0x36,0x03,0x61,0x61,0x5c,
+0x32,0xf3,0x64,0x40,0x03,0x26,0x06,0x00,0x60,0x40,0x01,0x2a,0x15,0x00,0x6a,0x60,
+0xe8,0x63,0x1f,0x00,0x64,0x40,0x03,0x2a,0x06,0x00,0x60,0x40,0x08,0x2a,0x0c,0x00,
+0x6b,0x60,0x18,0x63,0x16,0x00,0x64,0x40,0x01,0x2a,0x0e,0x00,0x60,0x40,0x02,0x2a,
+0x03,0x00,0x6a,0x60,0xf8,0x63,0x0d,0x00,0x46,0x5c,0x22,0xf0,0x04,0x64,0xb0,0x84,
+0xa2,0xda,0x1e,0x60,0x58,0x78,0xff,0xff,0x60,0x40,0x04,0x2a,0xf5,0x00,0x6b,0x60,
+0x08,0x63,0x03,0xb1,0xa0,0x65,0xc5,0x85,0x98,0xff,0x07,0xf2,0xff,0xff,0x60,0x40,
+0x00,0x3a,0x43,0x00,0xd5,0xf3,0xff,0xff,0x60,0x40,0x02,0x26,0x0d,0x00,0x25,0xf3,
+0x26,0xf1,0xdc,0x84,0x25,0xfb,0x1a,0xfa,0x64,0x44,0x02,0x24,0xdc,0x84,0xff,0xb4,
+0x60,0x5c,0x02,0xfe,0x4c,0x62,0x27,0x00,0x29,0xf3,0x2a,0xf1,0xdc,0x84,0x29,0xfb,
+0x11,0xfa,0x64,0x44,0x02,0x28,0x14,0x00,0x89,0xf3,0x63,0x5c,0x60,0x40,0x01,0x3a,
+0x05,0x00,0x78,0x60,0x4e,0x62,0x9f,0x63,0xe3,0x83,0x03,0x00,0x79,0x60,0x8e,0x62,
+0x06,0x63,0x00,0x64,0x5a,0xdb,0xfe,0x1f,0x2a,0xf3,0x64,0x43,0xdc,0x84,0x2a,0xfb,
+0x2c,0xf1,0x10,0xfa,0xff,0xff,0x64,0x44,0x02,0x24,0xdc,0x84,0x2c,0xfb,0x1a,0xfa,
+0x00,0x7c,0x42,0xfe,0x56,0x62,0x61,0x44,0x03,0xb4,0xf8,0x84,0xf8,0x84,0xf8,0x84,
+0xb0,0x84,0xa2,0xdb,0x1b,0xfa,0x01,0x64,0x07,0xfa,0x1b,0xf0,0x21,0xf2,0x64,0x40,
+0x20,0x27,0x04,0xa4,0x21,0xfa,0x64,0x40,0x20,0x27,0x03,0x00,0xfa,0x60,0x4b,0x78,
+0xff,0xff,0x67,0x44,0xc9,0xfb,0x78,0x60,0x50,0x62,0x65,0x44,0xe0,0x85,0x46,0xd1,
+0x01,0x64,0xa2,0xdb,0x65,0x44,0xe0,0x85,0x7a,0x60,0xe0,0x64,0x64,0x41,0x44,0xd1,
+0x10,0xf0,0x64,0x42,0x50,0xfe,0xd2,0x80,0xa0,0xd9,0x58,0xd1,0x1a,0xf0,0x64,0x42,
+0xd2,0x80,0xa0,0xd9,0x61,0x5c,0x01,0x01,0x00,0x7c,0x65,0x44,0xe8,0x85,0xc4,0x85,
+0xc4,0x85,0x6b,0x60,0x80,0x61,0xc5,0x81,0x1c,0x60,0x12,0x65,0x64,0x40,0x00,0x36,
+0x03,0x00,0xf9,0x60,0xd2,0x78,0xff,0xff,0x10,0xf2,0x1a,0xf0,0xa1,0xdb,0xff,0xff,
+0x59,0xd9,0xb0,0xf3,0x59,0xdb,0xff,0xff,0xb1,0xf3,0x59,0xdb,0xb2,0xf1,0xff,0xff,
+0x59,0xd9,0x00,0x64,0xe3,0xfb,0xff,0xff,0x60,0x40,0x01,0x26,0x02,0xa3,0x05,0x64,
+0xe4,0xfb,0xa3,0xd3,0xff,0xff,0x90,0x84,0x60,0x5c,0x00,0x7f,0xe0,0x82,0x64,0x47,
+0x46,0xd1,0x00,0x7f,0xe0,0x84,0x44,0xd3,0xff,0xff,0x60,0x47,0x90,0x84,0xe4,0xf3,
+0x60,0x5c,0x02,0xa1,0x60,0x40,0x05,0x36,0xf6,0xa1,0xa1,0xd3,0xff,0xff,0xc0,0x9c,
+0xe4,0xf3,0xa1,0xd9,0xff,0xa4,0xe4,0xfb,0x04,0xa3,0x60,0x40,0x01,0x36,0xf0,0xa3,
+0x60,0x40,0x00,0x3a,0xde,0x00,0xe3,0xf3,0xfc,0xa3,0xff,0xff,0x60,0x40,0x01,0x26,
+0xfe,0xa3,0xc0,0x9c,0x01,0xa4,0xf8,0xa0,0xa1,0xd9,0xe3,0xfb,0xce,0x02,0xf8,0xa1,
+0x80,0x60,0x6c,0x64,0xfe,0xa1,0x63,0x45,0x08,0x63,0x59,0xd1,0x58,0xd9,0xfd,0x1f,
+0x11,0xf2,0x60,0x43,0xc0,0x9c,0x5b,0xd9,0x65,0x41,0xfe,0xa1,0x1c,0x60,0x12,0x65,
+0x00,0x64,0xe3,0xfb,0x59,0xd3,0xff,0xff,0x90,0x84,0x60,0x5c,0x00,0x7f,0xe0,0x82,
+0x64,0x47,0x46,0xd1,0x00,0x7f,0xe0,0x84,0x44,0xd3,0xff,0xff,0x60,0x47,0x90,0x84,
+0xe3,0xf3,0x60,0x5c,0x02,0xa3,0x60,0x40,0x00,0x36,0xf4,0xa3,0xa3,0xd3,0xe3,0xf3,
+0xc0,0x9c,0xa3,0xd9,0x01,0xa4,0xfa,0xa0,0xe3,0xfb,0xe4,0x02,0x61,0x44,0xf6,0xa4,
+0xe3,0xfb,0x59,0xd3,0xf6,0xa3,0x90,0x84,0xa3,0xd1,0xe8,0x85,0x01,0xb4,0xf8,0x84,
+0x94,0x84,0xc0,0x84,0x59,0xd1,0xa3,0xdb,0x90,0x84,0x5b,0xd1,0xe8,0x85,0x01,0xb4,
+0xf8,0x84,0x94,0x84,0xc0,0x84,0xa3,0xdb,0x04,0x61,0x5b,0xd1,0xe8,0x85,0x01,0xb4,
+0xf8,0x84,0x94,0x84,0xc0,0x84,0xff,0xa1,0xa3,0xdb,0x61,0x40,0x00,0x3a,0xf5,0x00,
+0xe3,0xf3,0x60,0x41,0xa0,0xd1,0x11,0xf2,0x91,0x81,0xe9,0x85,0xf2,0xa3,0x60,0x41,
+0x60,0x47,0x60,0x5c,0x20,0xbc,0x7f,0xb4,0x60,0x47,0x64,0x5e,0xa3,0xdb,0x65,0x47,
+0x61,0x5e,0x5b,0xdb,0x99,0xff,0x00,0x60,0x00,0xea,0xff,0xff,0xff,0xff,0x00,0x60,
+0x00,0xeb,0xff,0xff,0xff,0xff,0xdf,0x61,0xfc,0xa3,0x01,0xa1,0x5b,0xd1,0x61,0x5f,
+0x64,0x5e,0x40,0x5a,0x01,0xa1,0x64,0x47,0x61,0x5f,0x40,0x5a,0xef,0x3b,0xf5,0x00,
+0x4c,0x00,0x00,0x60,0x00,0xea,0xff,0xff,0xff,0xff,0x00,0x60,0x00,0xeb,0xff,0xff,
+0xff,0xff,0x1a,0xf0,0xe0,0x7f,0x64,0x5e,0x99,0xff,0x40,0x5a,0x64,0x47,0xe1,0x7f,
+0x40,0x5a,0x1b,0xf2,0xff,0xff,0xe2,0x7f,0x40,0x5a,0x61,0x5c,0xc9,0xf3,0xc9,0xf9,
+0xd0,0x80,0xff,0xff,0x32,0x03,0xbd,0xd3,0xff,0xff,0x60,0x45,0xe3,0x7f,0x40,0x5a,
+0x65,0x47,0xe4,0x7f,0xbd,0xd3,0x40,0x5a,0x60,0x45,0xe5,0x7f,0x40,0x5a,0x65,0x47,
+0xe6,0x7f,0xbd,0xd3,0x40,0x5a,0x60,0x45,0x38,0xf1,0xe7,0x7f,0x40,0x5a,0x64,0x40,
+0x0f,0x3a,0x1b,0x00,0x65,0x47,0xe8,0x7f,0xbd,0xd3,0x40,0x5a,0x60,0x45,0xe9,0x7f,
+0x40,0x5a,0x65,0x47,0xea,0x7f,0xbd,0xd3,0x40,0x5a,0x60,0x45,0xeb,0x7f,0x40,0x5a,
+0x65,0x47,0xec,0x7f,0xbd,0xd3,0x40,0x5a,0x60,0x45,0xed,0x7f,0x40,0x5a,0x65,0x47,
+0xee,0x7f,0xbd,0xd3,0x40,0x5a,0xef,0x7f,0x40,0x5a,0x20,0x60,0x00,0xeb,0x6b,0x60,
+0x28,0x62,0xa2,0xd3,0xff,0xff,0xff,0xff,0x01,0x2a,0x38,0x00,0x00,0x64,0xa2,0xdb,
+0x00,0x60,0x00,0xea,0xff,0xff,0xff,0xff,0xff,0xff,0x3a,0x5c,0x80,0x2b,0x12,0x00,
+0x8b,0xff,0x74,0x40,0x88,0xff,0x3a,0x5c,0x80,0x2b,0x09,0x00,0x8b,0xff,0x74,0x40,
+0x88,0xff,0x3a,0x5c,0x80,0x2b,0x03,0x00,0x8b,0xff,0x74,0x40,0x88,0xff,0x8b,0xff,
+0x74,0x40,0x88,0xff,0x3a,0x5c,0x80,0x2b,0xff,0xff,0x31,0x60,0x00,0xea,0xff,0xff,
+0xff,0xff,0x00,0x60,0x00,0xea,0x3a,0x5c,0x80,0x27,0x09,0x00,0x31,0x60,0x00,0xea,
+0xff,0xff,0xff,0xff,0x00,0x60,0x00,0xea,0x3a,0x5c,0x80,0x2b,0xf7,0x00,0x00,0x64,
+0xca,0xfb,0x30,0x60,0x00,0xea,0xff,0xff,0xff,0xff,0xff,0xff,0x3a,0x40,0x40,0x27,
+0xfd,0x00,0x6a,0x60,0xb2,0x62,0x00,0x64,0xa2,0xdb,0x38,0xf1,0x80,0x60,0x00,0x64,
+0xb0,0x84,0x40,0x5a,0x98,0xff,0x33,0x60,0x00,0xea,0x30,0xf3,0xff,0xff,0x01,0xbc,
+0x30,0xfb,0x1b,0x60,0xd9,0x78,0xff,0xff,0xb2,0x37,0x7e,0x00,0xc0,0x06,0x19,0xf2,
+0xff,0xff,0x00,0xb8,0x1d,0xf2,0x06,0x03,0x60,0x47,0x00,0x7f,0x46,0xfb,0x44,0xfb,
+0x60,0x5c,0x07,0x00,0x43,0xf3,0x44,0xf1,0xff,0xff,0x45,0xfb,0x46,0xf9,0x00,0x64,
+0x47,0xfb,0x89,0xf3,0xff,0xff,0x00,0xbc,0xff,0xff,0x06,0x02,0x29,0xf2,0xff,0xff,
+0x0c,0xb4,0xff,0xff,0x00,0x3a,0x02,0x00,0x13,0xf0,0x46,0xf9,0x64,0x44,0x00,0xa0,
+0x01,0x63,0x04,0x03,0xff,0xa0,0x02,0x63,0x01,0x03,0x0b,0x63,0x48,0xfd,0x46,0x5c,
 0x22,0xf2,0xff,0xff,0x60,0x40,0x10,0x26,0x40,0x00,0x21,0xf2,0x16,0xf2,0x60,0x45,
 0x45,0x4c,0xc4,0x84,0xe0,0x84,0xe0,0x84,0xe0,0x84,0x21,0xfa,0x17,0xf0,0x2c,0x44,
-0xc0,0x84,0xe0,0x84,0xe0,0x84,0xe0,0x84,0x1f,0xfa,0x95,0xf3,0x29,0xf0,0x00,0xbc,
-0x00,0x64,0x03,0x02,0x64,0x40,0x80,0x3a,0x01,0xbc,0x4f,0xfb,0x95,0xf3,0xff,0xff,
+0xc0,0x84,0xe0,0x84,0xe0,0x84,0xe0,0x84,0x1f,0xfa,0x89,0xf3,0x29,0xf0,0x00,0xbc,
+0x00,0x64,0x03,0x02,0x64,0x40,0x80,0x3a,0x01,0xbc,0x42,0xfb,0x89,0xf3,0xff,0xff,
 0x00,0xa0,0xff,0xff,0x06,0x03,0x27,0xf2,0xff,0xff,0x00,0xa0,0xff,0xff,0x19,0x03,
-0x1c,0x00,0xa6,0xf3,0x56,0x63,0x02,0xa8,0x29,0xf2,0x13,0x03,0x29,0xf0,0x60,0x47,
+0x1c,0x00,0x9c,0xf3,0x56,0x63,0x02,0xa8,0x29,0xf2,0x13,0x03,0x29,0xf0,0x60,0x47,
 0x64,0x40,0x08,0x2a,0x0e,0x00,0x03,0xa8,0x03,0x2e,0x0b,0x00,0x03,0xb0,0x03,0x22,
-0x62,0x63,0x81,0xf1,0xbd,0xd8,0xff,0xff,0x82,0xf1,0xbd,0xd8,0xff,0xff,0x83,0xf1,
-0xa3,0xd8,0x4c,0xf3,0x34,0xfa,0x10,0xa4,0x4c,0xfb,0x95,0xf3,0xff,0xff,0x00,0xa0,
-0xff,0xff,0x7b,0x02,0x29,0xf2,0xcb,0xf3,0x60,0x40,0x08,0x3a,0x76,0x00,0xfd,0xa0,
-0xfc,0xa0,0x05,0x03,0x95,0xf3,0x03,0x03,0x60,0x40,0x00,0x36,0x6e,0x00,0x14,0xf2,
+0x62,0x63,0x75,0xf1,0xbd,0xd8,0xff,0xff,0x76,0xf1,0xbd,0xd8,0xff,0xff,0x77,0xf1,
+0xa3,0xd8,0x3f,0xf3,0x34,0xfa,0x10,0xa4,0x3f,0xfb,0x89,0xf3,0xff,0xff,0x00,0xa0,
+0xff,0xff,0x6c,0x02,0x29,0xf2,0xbd,0xf3,0x60,0x40,0x08,0x3a,0x67,0x00,0xfd,0xa0,
+0xfc,0xa0,0x05,0x03,0x89,0xf3,0x03,0x03,0x60,0x40,0x00,0x36,0x5f,0x00,0x14,0xf2,
 0x21,0xf0,0xcc,0x84,0x60,0x41,0x04,0x03,0x00,0x64,0xcd,0x81,0xc0,0x84,0xfd,0x02,
-0x1f,0xf0,0x53,0xf1,0xc0,0x84,0x55,0xf1,0x64,0x41,0x02,0x36,0xe0,0x84,0x64,0x45,
+0x1f,0xf0,0x46,0xf1,0xc0,0x84,0x48,0xf1,0x64,0x41,0x02,0x36,0xe0,0x84,0x64,0x45,
 0x00,0x62,0x11,0x61,0xe0,0x84,0xcd,0x81,0xfd,0x04,0x01,0x00,0xe0,0x84,0xf2,0x82,
 0xff,0xff,0x02,0x24,0xc6,0x82,0x02,0x28,0xd6,0x82,0xe2,0x80,0xcd,0x81,0x02,0x28,
 0x01,0xbc,0xf4,0x02,0x01,0x2a,0xc6,0x82,0x14,0xf0,0x60,0x43,0x00,0x60,0xaf,0x65,
 0x00,0x64,0x64,0x41,0xcd,0x81,0xc4,0x84,0xfd,0x02,0x63,0x45,0xc4,0x84,0x40,0x48,
-0x60,0x45,0x69,0x60,0x44,0x62,0x80,0x60,0x10,0x64,0xa2,0xdb,0x69,0x60,0x46,0x62,
-0x65,0x44,0xa2,0xdb,0x28,0x44,0x70,0x45,0xc4,0x85,0x02,0x60,0x58,0x64,0xc4,0x84,
-0xa4,0xf1,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xc0,0x84,
-0x60,0x41,0x73,0x45,0xd4,0x80,0xe1,0xf1,0x0d,0x0d,0x64,0x44,0x00,0x36,0x38,0x00,
-0xe0,0x84,0xe0,0x84,0xe0,0x84,0xe0,0x84,0x61,0x45,0xc4,0x84,0x73,0x45,0xd4,0x80,
-0xff,0xff,0x2e,0x0e,0x69,0x60,0x44,0x62,0x80,0x60,0x20,0x64,0xa2,0xdb,0xcb,0xf3,
-0xff,0xff,0xfd,0xa0,0xff,0xff,0x0a,0x02,0x00,0x64,0x40,0x5c,0x22,0xf0,0x10,0x64,
-0xb0,0x84,0xa2,0xda,0x1b,0x60,0x28,0x78,0xff,0xff,0x26,0x00,0xe2,0xf3,0x28,0x45,
-0x60,0x40,0x00,0x3a,0x15,0x00,0x07,0x60,0xd0,0x64,0xc4,0x84,0x70,0x45,0xd4,0x80,
-0xff,0xff,0x0e,0x04,0x60,0x50,0x60,0x45,0x69,0x60,0x44,0x62,0x80,0x60,0x30,0x64,
-0xa2,0xdb,0x69,0x60,0x46,0x62,0x65,0x44,0xa2,0xdb,0x01,0x64,0xe5,0xfb,0x0c,0x00,
-0x28,0x44,0x68,0xfb,0x60,0x45,0x69,0x60,0x44,0x62,0x80,0x60,0x10,0x64,0xa2,0xdb,
-0x69,0x60,0x46,0x62,0x65,0x44,0xa2,0xdb,0x67,0x60,0xc8,0x62,0xa2,0xd3,0xff,0xff,
-0x00,0xa0,0x00,0x64,0x08,0x03,0xa2,0xdb,0x67,0x60,0xd4,0x62,0xa2,0xd1,0x1e,0x60,
-0xba,0x62,0xa2,0xd9,0x2a,0x00,0x1e,0x60,0xb8,0x64,0xa0,0xd1,0x95,0xf3,0x64,0x41,
-0x00,0xa0,0x29,0xf2,0x0b,0x02,0x60,0x40,0x80,0x3a,0x08,0x00,0x71,0xf3,0xdd,0x81,
-0xf6,0xa0,0xec,0xa0,0x03,0x04,0xdd,0x81,0x01,0x04,0xdd,0x81,0x25,0xf2,0xff,0xff,
-0x60,0x47,0x60,0x43,0xff,0xb3,0x61,0x40,0xff,0x22,0x04,0x00,0x23,0x60,0x58,0x4f,
-0x67,0x78,0xff,0xff,0x1e,0x60,0xba,0x64,0xa0,0xdd,0xb8,0xf1,0x23,0x60,0x58,0x4f,
-0x66,0x78,0xff,0xff,0x1e,0x60,0xbc,0x64,0xa0,0xdd,0x29,0xf2,0xff,0xff,0x60,0x45,
-0x69,0x60,0x44,0x62,0x90,0x60,0x60,0x64,0xa2,0xdb,0x69,0x60,0x46,0x62,0x65,0x44,
-0xa2,0xdb,0x22,0xf0,0xff,0x60,0xef,0x64,0xa0,0x84,0xa2,0xda,0x8e,0xf3,0x46,0x5c,
-0xfd,0xb4,0x01,0xbc,0x8e,0xfb,0x66,0x44,0xe0,0xfb,0x20,0x60,0x26,0x78,0xff,0xff,
-0x00,0x64,0x68,0xfb,0xe0,0xfb,0x69,0x60,0x44,0x62,0x90,0x60,0x61,0x64,0xa2,0xdb,
-0x46,0x5c,0x8e,0xf3,0x3c,0x46,0x4e,0xf1,0xfe,0xb4,0x8e,0xfb,0x01,0x65,0x32,0x40,
-0x04,0x2b,0x64,0x45,0x02,0x22,0x03,0x00,0x1e,0x60,0xfa,0x78,0xff,0xff,0x65,0x40,
-0x01,0x26,0x09,0x00,0x5a,0x60,0xda,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
-0x1e,0x60,0xd2,0x78,0xff,0xff,0x27,0xf0,0x01,0x60,0x00,0x64,0xc0,0x84,0x27,0xfa,
+0x28,0x44,0x70,0x45,0xc4,0x85,0x02,0x60,0x58,0x64,0xc4,0x84,0x9a,0xf1,0xe8,0x84,
+0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xc0,0x84,0x60,0x41,0x73,0x45,
+0xd4,0x80,0xd0,0xf1,0x0d,0x0d,0x64,0x44,0x00,0x36,0x29,0x00,0xe0,0x84,0xe0,0x84,
+0xe0,0x84,0xe0,0x84,0x61,0x45,0xc4,0x84,0x73,0x45,0xd4,0x80,0xff,0xff,0x1f,0x0e,
+0xbd,0xf3,0xff,0xff,0xfd,0xa0,0xff,0xff,0x0a,0x02,0x00,0x64,0x40,0x5c,0x22,0xf0,
+0x10,0x64,0xb0,0x84,0xa2,0xda,0x1a,0x60,0xb9,0x78,0xff,0xff,0x12,0x00,0xd1,0xf3,
+0x28,0x45,0x60,0x40,0x00,0x3a,0x0b,0x00,0x07,0x60,0xd0,0x64,0xc4,0x84,0x70,0x45,
+0xd4,0x80,0xff,0xff,0x04,0x04,0x60,0x50,0x01,0x64,0xd4,0xfb,0x02,0x00,0x28,0x44,
+0x5c,0xfb,0x6a,0x60,0xa0,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0x00,0x64,0x08,0x03,
+0xa2,0xdb,0x6a,0x60,0xb0,0x62,0xa2,0xd1,0x21,0x60,0x82,0x62,0xa2,0xd9,0x35,0x00,
+0x29,0xf2,0x0f,0xf2,0x60,0x40,0x08,0x27,0x04,0x00,0x02,0x2a,0x02,0x00,0x03,0x7c,
+0x03,0x00,0x21,0x60,0x80,0x64,0xa0,0xd1,0x89,0xf3,0x64,0x41,0x00,0xa0,0x29,0xf2,
+0x0b,0x02,0x60,0x40,0x80,0x3a,0x08,0x00,0x65,0xf3,0xdd,0x81,0xf6,0xa0,0xec,0xa0,
+0x03,0x04,0xdd,0x81,0x01,0x04,0xdd,0x81,0x25,0xf2,0xff,0xff,0x60,0x47,0x60,0x43,
+0xff,0xb3,0x61,0x40,0xff,0x22,0x06,0x00,0x61,0x44,0xfe,0xfb,0x22,0x60,0x58,0x4f,
+0xd3,0x78,0xff,0xff,0x21,0x60,0x82,0x64,0xa0,0xdd,0xab,0xf1,0x22,0x60,0x58,0x4f,
+0xd2,0x78,0xff,0xff,0x21,0x60,0x84,0x64,0xa0,0xdd,0x29,0xf2,0xff,0xff,0x60,0x45,
+0x6b,0x60,0x2c,0x62,0x90,0x60,0x60,0x64,0xa2,0xdb,0x6b,0x60,0x2e,0x62,0x65,0x44,
+0xa2,0xdb,0x22,0xf0,0xff,0x60,0xef,0x64,0xa0,0x84,0xa2,0xda,0x82,0xf3,0x46,0x5c,
+0xfd,0xb4,0x01,0xbc,0x82,0xfb,0x66,0x44,0xcf,0xfb,0x1f,0x60,0xac,0x78,0xff,0xff,
+0x00,0x64,0x5c,0xfb,0xcf,0xfb,0x6b,0x60,0x2c,0x62,0x90,0x60,0x61,0x64,0xa2,0xdb,
+0x46,0x5c,0x82,0xf3,0x3c,0x46,0x41,0xf1,0xfe,0xb4,0x82,0xfb,0x01,0x65,0x32,0x40,
+0x04,0x2b,0x64,0x45,0x02,0x22,0x03,0x00,0x1e,0x60,0x80,0x78,0xff,0xff,0x65,0x40,
+0x01,0x26,0x09,0x00,0x63,0x60,0xcc,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
+0x1e,0x60,0x58,0x78,0xff,0xff,0x27,0xf0,0x01,0x60,0x00,0x64,0xc0,0x84,0x27,0xfa,
 0x29,0xf0,0x00,0x60,0x0c,0x64,0xa0,0x84,0x04,0x36,0x02,0x00,0x0c,0x3a,0x03,0x00,
-0x1e,0x60,0xd2,0x78,0xff,0xff,0x60,0x41,0x61,0x40,0x08,0x36,0x67,0x00,0x29,0xf0,
-0x00,0x60,0xf0,0x64,0xa0,0x84,0xff,0xff,0x00,0x3a,0x07,0x00,0x5a,0x60,0x9e,0x64,
-0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x56,0x00,0x20,0x3a,0x07,0x00,0x5a,0x60,
-0x9e,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x4d,0x00,0x40,0x3a,0x07,0x00,
-0x5a,0x60,0xa6,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x44,0x00,0xb0,0x3a,
-0x07,0x00,0x5a,0x60,0x9c,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x3b,0x00,
-0x80,0x3a,0x16,0x00,0x69,0x60,0x44,0x62,0x90,0x60,0x31,0x64,0xa2,0xdb,0x71,0xf3,
-0xff,0xff,0xdc,0x84,0x71,0xfb,0x80,0xf3,0xff,0xff,0xfd,0xa4,0x60,0x47,0x01,0xbc,
-0x6e,0xfb,0x5a,0x60,0x94,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x23,0x00,
-0xa0,0x3a,0x07,0x00,0x5a,0x60,0xa4,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
-0x1a,0x00,0x50,0x3a,0x07,0x00,0x5a,0x60,0xaa,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,
-0xa2,0xdb,0x11,0x00,0x10,0x3a,0x07,0x00,0x5a,0x60,0xa0,0x64,0xa0,0xd3,0xff,0xff,
-0xdc,0x84,0xa2,0xdb,0x08,0x00,0x30,0x3a,0x06,0x00,0x5a,0x60,0xa0,0x64,0xa0,0xd3,
-0xff,0xff,0xdc,0x84,0xa2,0xdb,0x1e,0x60,0xd2,0x78,0xff,0xff,0x19,0xf2,0x0e,0x65,
-0x00,0xbc,0xc4,0x83,0x14,0x03,0xa3,0xd3,0xff,0xff,0x60,0x40,0x14,0x3a,0xdc,0x84,
-0xa3,0xdb,0x14,0x3a,0x0c,0x00,0x60,0x47,0x00,0x7f,0xfd,0xa0,0xff,0xff,0x07,0x07,
-0x19,0xf0,0x1f,0x60,0x58,0x4e,0xe2,0x78,0xff,0xff,0x00,0x64,0xa3,0xdb,0x14,0xf2,
-0x28,0xf2,0x60,0x41,0x60,0x45,0x1e,0x63,0x60,0x47,0x18,0x63,0x04,0xa3,0x63,0x45,
-0x00,0x63,0xcd,0x81,0xc7,0x83,0xfd,0x02,0x38,0xf0,0xff,0xff,0xc3,0x83,0x2b,0xf2,
-0xff,0xff,0xff,0xff,0x01,0x2a,0x31,0x00,0x3d,0x60,0x9c,0x64,0xa0,0xd3,0xff,0xff,
-0x01,0xbc,0xa2,0xdb,0x5a,0x60,0x80,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
-0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x51,0xf3,0xff,0xff,
-0xe0,0x84,0xe0,0x84,0x60,0x45,0x5a,0x60,0x84,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,
+0x1e,0x60,0x58,0x78,0xff,0xff,0x60,0x41,0x61,0x40,0x08,0x36,0x62,0x00,0x29,0xf0,
+0x00,0x60,0xf0,0x64,0xa0,0x84,0xff,0xff,0x00,0x3a,0x07,0x00,0x63,0x60,0x90,0x64,
+0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x51,0x00,0x20,0x3a,0x07,0x00,0x63,0x60,
+0x90,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x48,0x00,0x40,0x3a,0x07,0x00,
+0x63,0x60,0x98,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x3f,0x00,0xb0,0x3a,
+0x07,0x00,0x63,0x60,0x8e,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x36,0x00,
+0x80,0x3a,0x11,0x00,0x65,0xf3,0xff,0xff,0xdc,0x84,0x65,0xfb,0x74,0xf3,0xff,0xff,
+0xfd,0xa4,0x60,0x47,0x01,0xbc,0x62,0xfb,0x63,0x60,0x86,0x64,0xa0,0xd3,0xff,0xff,
+0xdc,0x84,0xa2,0xdb,0x23,0x00,0xa0,0x3a,0x07,0x00,0x63,0x60,0x96,0x64,0xa0,0xd3,
+0xff,0xff,0xdc,0x84,0xa2,0xdb,0x1a,0x00,0x50,0x3a,0x07,0x00,0x63,0x60,0x9c,0x64,
+0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x11,0x00,0x10,0x3a,0x07,0x00,0x63,0x60,
+0x92,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x08,0x00,0x30,0x3a,0x06,0x00,
+0x63,0x60,0x92,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x1e,0x60,0x58,0x78,
+0xff,0xff,0x2b,0xf2,0x19,0xf2,0x60,0x40,0x01,0x26,0x18,0x00,0x00,0xa0,0x60,0x43,
+0x15,0x03,0x0e,0xa3,0xa3,0xd3,0xff,0xff,0x60,0x45,0x00,0x7f,0xec,0xa0,0xdc,0x84,
+0xa3,0xdb,0x0c,0x04,0x65,0x47,0x00,0x7f,0xfd,0xa0,0xff,0xff,0x05,0x07,0x19,0xf0,
+0x1f,0x60,0x58,0x4e,0x68,0x78,0xff,0xff,0x00,0x64,0xa3,0xdb,0x14,0xf2,0x28,0xf2,
+0x60,0x41,0x60,0x45,0x1e,0x63,0x60,0x47,0x18,0x63,0x04,0xa3,0x63,0x45,0x00,0x63,
+0xcd,0x81,0xc7,0x83,0xfd,0x02,0x38,0xf0,0xff,0xff,0xc3,0x83,0x2b,0xf2,0xff,0xff,
+0xff,0xff,0x01,0x2a,0x31,0x00,0x40,0x60,0x1c,0x64,0xa0,0xd3,0xff,0xff,0x01,0xbc,
+0xa2,0xdb,0x63,0x60,0x72,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,
+0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x44,0xf3,0xff,0xff,0xe0,0x84,
+0xe0,0x84,0x60,0x45,0x63,0x60,0x76,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,0xdc,0x84,
+0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x63,0x60,
+0xb4,0x64,0xa0,0xd3,0x63,0x45,0xc4,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,
+0xff,0xff,0xdc,0x84,0xa2,0xdb,0x32,0x00,0x63,0x60,0x5e,0x64,0xa0,0xd3,0xff,0xff,
 0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
-0x5a,0x60,0xc2,0x64,0xa0,0xd3,0x63,0x45,0xc4,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,
-0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x32,0x00,0x5a,0x60,0x6c,0x64,0xa0,0xd3,
-0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,
-0xa2,0xdb,0x53,0xf3,0xff,0xff,0xe0,0x84,0xe0,0x84,0x60,0x45,0x5a,0x60,0x70,0x64,
-0xc4,0x84,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,
-0xff,0xff,0xdc,0x84,0xa2,0xdb,0x18,0x60,0xda,0x65,0x53,0xf3,0xff,0xff,0xe0,0x84,
-0xc4,0x82,0x00,0x64,0xa2,0xdb,0x5a,0x60,0xc2,0x64,0xa0,0xd3,0x63,0x45,0xc4,0x84,
-0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0xcb,0xf3,
-0x3c,0x46,0xfd,0xa0,0xfc,0xa0,0x01,0x03,0x13,0x00,0x22,0xf2,0xff,0xff,0x60,0x40,
-0x10,0x2a,0x0e,0x00,0x8c,0xf1,0x00,0x64,0x40,0x5c,0x13,0xfb,0xe0,0xfb,0x64,0x40,
-0x02,0x36,0x03,0x00,0x1b,0x60,0x28,0x78,0xff,0xff,0x1b,0x60,0x35,0x78,0xff,0xff,
-0x3c,0x60,0x9c,0x62,0x3c,0x60,0x6c,0x64,0xa2,0xdb,0x3c,0x44,0x5a,0xdb,0x0a,0x64,
-0x5a,0xdb,0xff,0xff,0x2b,0xff,0xce,0xfe,0x1b,0x60,0x45,0x78,0xff,0xff,0x67,0x60,
-0xc8,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0xff,0xff,0x03,0x03,0x1f,0x60,0xae,0x78,
-0xff,0xff,0x0f,0xf0,0xb7,0xf1,0x64,0x41,0x01,0x2a,0xb6,0xf1,0x95,0xf3,0xff,0xff,
-0x60,0x40,0xff,0x26,0x1d,0xf0,0x26,0xf2,0xff,0xff,0xdc,0x84,0x26,0xfa,0x15,0xf2,
-0xff,0xff,0xdc,0x84,0xd0,0x80,0x15,0xfa,0x03,0x04,0x1f,0x60,0xb3,0x78,0xff,0xff,
-0x13,0xf3,0xff,0xff,0x00,0xa8,0xff,0xff,0x05,0x03,0x22,0xf0,0x10,0x64,0xb0,0x84,
-0xa2,0xda,0xad,0x00,0x95,0xf3,0xff,0xff,0x00,0xbc,0x29,0xf2,0x02,0x02,0x0c,0xb4,
-0x00,0x36,0x7d,0x00,0x19,0xf2,0xff,0xff,0x00,0xbc,0x0e,0xa4,0x4f,0x03,0x60,0x43,
-0xa3,0xd1,0x01,0x60,0x01,0x64,0xc0,0x84,0xa3,0xdb,0x60,0x45,0x00,0x7f,0xec,0xa0,
-0xff,0xff,0x0c,0x04,0x65,0x47,0x00,0x7f,0xf9,0xa0,0xff,0xff,0x05,0x04,0x19,0xf0,
-0x1f,0x60,0x58,0x4e,0xcb,0x78,0xff,0xff,0x00,0x64,0xa3,0xdb,0x0d,0xf2,0xff,0xff,
-0x01,0xa4,0x0d,0xfa,0x00,0x7f,0xfe,0xa0,0xff,0xff,0x15,0x04,0x1f,0x60,0x58,0x4e,
-0xf9,0x78,0xff,0xff,0x1d,0xf2,0xff,0xff,0x00,0x7e,0x60,0x47,0x53,0xfb,0x0b,0x63,
-0x60,0x40,0x00,0x36,0x01,0x63,0x60,0x40,0x01,0x36,0x02,0x63,0x55,0xfd,0x0d,0xf2,
-0xff,0xff,0x00,0x7e,0x0d,0xfa,0x0d,0xf2,0xff,0xff,0x60,0x47,0x01,0xa4,0x60,0x47,
-0x0d,0xfa,0x60,0x47,0x00,0x7f,0xfd,0xa0,0xff,0xff,0x39,0x04,0x6a,0x60,0x58,0x4e,
-0x17,0x78,0xff,0xff,0x04,0x03,0x6a,0x60,0x58,0x4e,0x2e,0x78,0xff,0xff,0x22,0xf0,
-0x10,0x64,0xb0,0x84,0xa2,0xda,0x1e,0x60,0xd2,0x78,0xff,0xff,0x54,0xf3,0xff,0xff,
-0xdc,0x84,0xfe,0xa0,0x54,0xfb,0x23,0x04,0x00,0x64,0x54,0xfb,0x53,0xf3,0x52,0xf3,
-0x60,0x41,0xff,0xa0,0xe8,0x84,0x1b,0x03,0xff,0xa1,0x60,0x45,0x59,0x60,0xea,0x63,
-0xa3,0xd3,0xff,0xff,0xa4,0x80,0x65,0x44,0xf4,0x03,0x52,0xfb,0x61,0x43,0x53,0xfd,
-0x63,0x44,0x00,0x3a,0x02,0x00,0x01,0x63,0x09,0x00,0x01,0x3a,0x02,0x00,0x02,0x63,
-0x05,0x00,0x02,0x3a,0x02,0x00,0x0b,0x63,0x01,0x00,0x0b,0x63,0x55,0xfd,0x29,0xf0,
-0x08,0x67,0xb0,0x84,0xa2,0xda,0x00,0x64,0x4f,0xfb,0xf8,0x60,0x50,0x78,0xff,0xff,
-0xa0,0xf0,0x7f,0x00,0x72,0x00,0x29,0xf0,0xff,0xff,0x64,0x40,0x40,0x2b,0x31,0x00,
-0x3e,0xf3,0xff,0xff,0x60,0x40,0x04,0x2a,0x18,0x00,0x67,0x60,0xd2,0x62,0x01,0x64,
-0xa2,0xdb,0xf8,0x60,0x69,0x64,0x40,0x44,0x99,0xff,0x30,0x44,0x41,0xbc,0x40,0x51,
-0x98,0xff,0xa1,0xff,0xff,0xff,0xbb,0x3f,0x99,0xff,0x30,0x44,0xfe,0xb4,0x40,0x51,
-0x98,0xff,0x67,0x60,0xd2,0x62,0x00,0x64,0xa2,0xdb,0x99,0xff,0x3a,0x44,0x98,0xff,
-0x8f,0x2b,0x0f,0x00,0x50,0x27,0x0d,0x00,0x67,0x60,0xd6,0x62,0x00,0x64,0xa2,0xdb,
-0x45,0xf1,0x80,0x60,0x00,0x64,0xb0,0x84,0x99,0xff,0x40,0x5a,0x98,0xff,0x33,0x60,
-0x00,0xea,0x1c,0x60,0xa8,0x78,0xff,0xff,0x66,0x3f,0x7e,0x00,0xc8,0x07,0x29,0xf2,
-0xff,0xff,0x60,0x40,0x08,0x3a,0x06,0x00,0x5a,0x60,0xda,0x64,0xa0,0xd3,0xff,0xff,
-0xdc,0x84,0xa2,0xdb,0x1e,0x60,0xb8,0x65,0xb8,0xf3,0xff,0xff,0xa5,0xdb,0x22,0xf0,
-0x01,0x64,0xb0,0x84,0xa2,0xda,0x1e,0x60,0xd2,0x78,0xff,0xff,0xff,0x00,0x64,0x44,
-0x08,0xa4,0xa0,0xd3,0xff,0xff,0x60,0x41,0x60,0x47,0x00,0x7f,0x60,0x45,0x61,0x44,
-0x00,0x7f,0xe8,0x84,0xa4,0x80,0x00,0xa0,0x02,0x02,0x06,0x03,0xfa,0x00,0x60,0x41,
-0x65,0x47,0x61,0x45,0xb4,0x84,0xa2,0xdb,0x2e,0x58,0xff,0xff,0x64,0x44,0x08,0xa4,
+0x46,0xf3,0xff,0xff,0xe0,0x84,0xe0,0x84,0x60,0x45,0x63,0x60,0x62,0x64,0xc4,0x84,
+0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,
+0xdc,0x84,0xa2,0xdb,0x19,0x60,0x52,0x65,0x46,0xf3,0xff,0xff,0xe0,0x84,0xc4,0x82,
+0x00,0x64,0xa2,0xdb,0x63,0x60,0xb4,0x64,0xa0,0xd3,0x63,0x45,0xc4,0x84,0xa2,0xdb,
+0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0xbd,0xf3,0x3c,0x46,
+0xfd,0xa0,0xfc,0xa0,0x01,0x03,0x13,0x00,0x22,0xf2,0xff,0xff,0x60,0x40,0x10,0x2a,
+0x0e,0x00,0x80,0xf1,0x00,0x64,0x40,0x5c,0x13,0xfb,0xcf,0xfb,0x64,0x40,0x02,0x36,
+0x03,0x00,0x1a,0x60,0xb9,0x78,0xff,0xff,0x1a,0x60,0xc6,0x78,0xff,0xff,0x3f,0x60,
+0x64,0x62,0x3f,0x60,0x34,0x64,0xa2,0xdb,0x3c,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,
+0xff,0xff,0x2b,0xff,0xce,0xfe,0x1a,0x60,0xd6,0x78,0xff,0xff,0x6a,0x60,0xa0,0x62,
+0xa2,0xd3,0xff,0xff,0x00,0xa0,0xff,0xff,0x03,0x03,0x1f,0x60,0x34,0x78,0xff,0xff,
+0x0f,0xf0,0xaa,0xf1,0x64,0x41,0x01,0x2a,0xa9,0xf1,0x89,0xf3,0xff,0xff,0x60,0x40,
+0xff,0x26,0x1d,0xf0,0x26,0xf2,0xff,0xff,0xdc,0x84,0x26,0xfa,0x15,0xf2,0xff,0xff,
+0xdc,0x84,0xd0,0x80,0x15,0xfa,0x03,0x04,0x1f,0x60,0x39,0x78,0xff,0xff,0x13,0xf3,
+0xff,0xff,0x00,0xa8,0xff,0xff,0x05,0x03,0x22,0xf0,0x10,0x64,0xb0,0x84,0xa2,0xda,
+0xad,0x00,0x89,0xf3,0xff,0xff,0x00,0xbc,0x29,0xf2,0x02,0x02,0x0c,0xb4,0x00,0x36,
+0x7d,0x00,0x19,0xf2,0xff,0xff,0x00,0xbc,0x0e,0xa4,0x4f,0x03,0x60,0x43,0xa3,0xd1,
+0x01,0x60,0x01,0x64,0xc0,0x84,0xa3,0xdb,0x60,0x45,0x00,0x7f,0xec,0xa0,0xff,0xff,
+0x0c,0x04,0x65,0x47,0x00,0x7f,0xf9,0xa0,0xff,0xff,0x05,0x04,0x19,0xf0,0x1f,0x60,
+0x58,0x4e,0x51,0x78,0xff,0xff,0x00,0x64,0xa3,0xdb,0x0d,0xf2,0xff,0xff,0x01,0xa4,
+0x0d,0xfa,0x00,0x7f,0xfe,0xa0,0xff,0xff,0x15,0x04,0x1f,0x60,0x58,0x4e,0x7f,0x78,
+0xff,0xff,0x1d,0xf2,0xff,0xff,0x00,0x7e,0x60,0x47,0x46,0xfb,0x0b,0x63,0x60,0x40,
+0x00,0x36,0x01,0x63,0x60,0x40,0x01,0x36,0x02,0x63,0x48,0xfd,0x0d,0xf2,0xff,0xff,
+0x00,0x7e,0x0d,0xfa,0x0d,0xf2,0xff,0xff,0x60,0x47,0x01,0xa4,0x60,0x47,0x0d,0xfa,
+0x60,0x47,0x00,0x7f,0xfd,0xa0,0xff,0xff,0x39,0x04,0x6e,0x60,0x58,0x4e,0x48,0x78,
+0xff,0xff,0x04,0x03,0x6e,0x60,0x58,0x4e,0x5f,0x78,0xff,0xff,0x22,0xf0,0x10,0x64,
+0xb0,0x84,0xa2,0xda,0x1e,0x60,0x58,0x78,0xff,0xff,0x47,0xf3,0xff,0xff,0xdc,0x84,
+0xfe,0xa0,0x47,0xfb,0x23,0x04,0x00,0x64,0x47,0xfb,0x46,0xf3,0x45,0xf3,0x60,0x41,
+0xff,0xa0,0xe8,0x84,0x1b,0x03,0xff,0xa1,0x60,0x45,0x62,0x60,0xdc,0x63,0xa3,0xd3,
+0xff,0xff,0xa4,0x80,0x65,0x44,0xf4,0x03,0x45,0xfb,0x61,0x43,0x46,0xfd,0x63,0x44,
+0x00,0x3a,0x02,0x00,0x01,0x63,0x09,0x00,0x01,0x3a,0x02,0x00,0x02,0x63,0x05,0x00,
+0x02,0x3a,0x02,0x00,0x0b,0x63,0x01,0x00,0x0b,0x63,0x48,0xfd,0x29,0xf0,0x08,0x67,
+0xb0,0x84,0xa2,0xda,0x00,0x64,0x42,0xfb,0xfa,0x60,0xee,0x78,0xff,0xff,0xdc,0xf5,
+0x7f,0x00,0x72,0x00,0x29,0xf0,0xff,0xff,0x64,0x40,0x40,0x2b,0x31,0x00,0x2f,0xf3,
+0xff,0xff,0x60,0x40,0x04,0x2a,0x18,0x00,0x6a,0x60,0xae,0x62,0x01,0x64,0xa2,0xdb,
+0xfb,0x60,0x07,0x64,0x40,0x44,0x99,0xff,0x30,0x44,0x41,0xbc,0x40,0x51,0x98,0xff,
+0xa1,0xff,0xff,0xff,0xbb,0x3f,0x99,0xff,0x30,0x44,0xfe,0xb4,0x40,0x51,0x98,0xff,
+0x6a,0x60,0xae,0x62,0x00,0x64,0xa2,0xdb,0x99,0xff,0x3a,0x44,0x98,0xff,0x8f,0x2b,
+0x0f,0x00,0x50,0x27,0x0d,0x00,0x6a,0x60,0xb2,0x62,0x00,0x64,0xa2,0xdb,0x38,0xf1,
+0x80,0x60,0x00,0x64,0xb0,0x84,0x99,0xff,0x40,0x5a,0x98,0xff,0x33,0x60,0x00,0xea,
+0x1c,0x60,0x47,0x78,0xff,0xff,0x72,0x3e,0x7e,0x00,0x94,0x07,0x29,0xf2,0xff,0xff,
+0x60,0x40,0x08,0x3a,0x06,0x00,0x63,0x60,0xcc,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,
+0xa2,0xdb,0x21,0x60,0x80,0x65,0xab,0xf3,0xff,0xff,0xa5,0xdb,0x22,0xf0,0x01,0x64,
+0xb0,0x84,0xa2,0xda,0x1e,0x60,0x58,0x78,0xff,0xff,0xff,0x00,0x64,0x44,0x08,0xa4,
 0xa0,0xd3,0xff,0xff,0x60,0x41,0x60,0x47,0x00,0x7f,0x60,0x45,0x61,0x44,0x00,0x7f,
-0xe0,0x84,0xa4,0x80,0xf0,0xa0,0x02,0x02,0x06,0x03,0xfa,0x00,0x60,0x41,0x65,0x47,
-0x61,0x45,0xb4,0x84,0xa2,0xdb,0x2e,0x58,0xff,0xff,0x19,0xf2,0xff,0xff,0x08,0xa4,
-0xa0,0xd3,0xff,0xff,0x60,0x47,0x00,0x7f,0x60,0x45,0x1d,0xf2,0xff,0xff,0x40,0x4d,
-0x60,0x47,0x00,0x7f,0x60,0x41,0x2d,0x44,0x00,0x7f,0xcd,0x81,0xe8,0x84,0x07,0x0e,
-0xa4,0x80,0xff,0xff,0xfa,0x03,0x60,0x45,0x61,0x47,0xb4,0x84,0x1d,0xfa,0x2e,0x58,
-0xff,0xff,0x22,0x60,0x78,0x78,0xff,0xff,0x99,0xff,0x30,0x44,0xff,0xff,0x98,0xff,
-0x80,0x2a,0x03,0x00,0x47,0xff,0x21,0x58,0xff,0xff,0x47,0xff,0xa1,0xff,0xff,0xff,
-0xbb,0x3f,0xff,0xff,0x99,0xff,0x32,0x44,0x98,0xff,0x10,0x26,0x57,0x00,0x64,0xe2,
-0x45,0xff,0x47,0xff,0x53,0x0a,0x99,0xff,0x32,0x44,0x98,0xff,0x10,0x26,0x4e,0x00,
-0x04,0x27,0x04,0x00,0xb5,0xf3,0xff,0xff,0x60,0x54,0xcd,0xe2,0x20,0x60,0x47,0x64,
-0x40,0x42,0xc4,0xe2,0x99,0xff,0x30,0x44,0x04,0xbc,0x1d,0xb4,0x40,0x51,0x98,0xff,
-0xa1,0xff,0xff,0xff,0xbb,0x3f,0x99,0xff,0x32,0x44,0x98,0xff,0x10,0x26,0x36,0x00,
-0x64,0xe2,0x45,0xff,0x47,0xff,0x32,0x0a,0x99,0xff,0x32,0x44,0x98,0xff,0x10,0x26,
-0x2d,0x00,0xd0,0xf3,0x4f,0xf3,0x00,0xa0,0xff,0xff,0xea,0x02,0x01,0x3a,0x63,0x00,
-0x99,0xff,0x3e,0x44,0xfc,0xb4,0x40,0x5e,0x02,0xbc,0xff,0xff,0xff,0xff,0x40,0x5e,
-0x98,0xff,0x20,0x60,0x71,0x64,0x40,0x42,0x99,0xff,0x30,0x44,0x44,0xbc,0x5d,0xb4,
-0x40,0x51,0x98,0xff,0xa1,0xff,0xff,0xff,0xbb,0x3f,0x99,0xff,0x32,0x44,0x98,0xff,
-0x10,0x26,0x0c,0x00,0x64,0xe2,0x45,0xff,0x47,0xff,0x08,0x0a,0x99,0xff,0x32,0x44,
-0x98,0xff,0x10,0x26,0x03,0x00,0x21,0x60,0x48,0x78,0xff,0xff,0x20,0x60,0x91,0x64,
-0x40,0x40,0x20,0x60,0xbf,0x64,0x40,0x41,0x99,0xff,0x30,0x44,0xe0,0xbc,0xf9,0xb4,
-0x40,0x51,0x98,0xff,0xa1,0xff,0xff,0xff,0xbb,0x3f,0x28,0x60,0x80,0x62,0xa2,0xd3,
-0x13,0xf3,0x00,0xa0,0x00,0xa0,0x13,0x03,0x68,0x60,0x40,0x62,0x01,0x64,0xa2,0xdb,
-0x22,0xf0,0x01,0x64,0xb0,0x84,0xa2,0xda,0x99,0xff,0x30,0x44,0x59,0xb4,0x40,0x51,
-0x98,0xff,0x1b,0x60,0x28,0x64,0x40,0x40,0x1e,0x60,0xd2,0x78,0xff,0xff,0x13,0x03,
-0x68,0x60,0x40,0x62,0x01,0x64,0xa2,0xdb,0x22,0xf0,0x10,0x64,0xb0,0x84,0xa2,0xda,
-0x99,0xff,0x30,0x44,0x59,0xb4,0x40,0x51,0x98,0xff,0x1b,0x60,0x28,0x64,0x40,0x40,
-0x1e,0x60,0xd2,0x78,0xff,0xff,0x21,0x60,0x2a,0x64,0x40,0x40,0x20,0x60,0xef,0x64,
-0x40,0x42,0x99,0xff,0x30,0x44,0x44,0xbc,0x5d,0xb4,0x40,0x51,0x98,0xff,0x99,0xff,
-0x32,0x44,0x98,0xff,0x10,0x26,0xb2,0x00,0xd0,0xf3,0x64,0xe2,0x00,0xa0,0x45,0xff,
-0x47,0xff,0x16,0x02,0xab,0x0a,0x99,0xff,0x32,0x44,0x98,0xff,0x10,0x26,0xa6,0x00,
-0x1e,0x60,0xba,0x65,0xa5,0xd3,0xff,0xff,0x01,0xa8,0xff,0xff,0x09,0x02,0x99,0xff,
+0xe8,0x84,0xa4,0x80,0x00,0xa0,0x02,0x02,0x06,0x03,0xfa,0x00,0x60,0x41,0x65,0x47,
+0x61,0x45,0xb4,0x84,0xa2,0xdb,0x2e,0x58,0xff,0xff,0x64,0x44,0x08,0xa4,0xa0,0xd3,
+0xff,0xff,0x60,0x41,0x60,0x47,0x00,0x7f,0x60,0x45,0x61,0x44,0x00,0x7f,0xe0,0x84,
+0xa4,0x80,0xf0,0xa0,0x02,0x02,0x06,0x03,0xfa,0x00,0x60,0x41,0x65,0x47,0x61,0x45,
+0xb4,0x84,0xa2,0xdb,0x2e,0x58,0xff,0xff,0x19,0xf2,0xff,0xff,0x08,0xa4,0xa0,0xd3,
+0xff,0xff,0x60,0x47,0x00,0x7f,0x60,0x45,0x1d,0xf2,0xff,0xff,0x40,0x4d,0x60,0x47,
+0x00,0x7f,0x60,0x41,0x2d,0x44,0x00,0x7f,0xcd,0x81,0xe8,0x84,0x07,0x0e,0xa4,0x80,
+0xff,0xff,0xfa,0x03,0x60,0x45,0x61,0x47,0xb4,0x84,0x1d,0xfa,0x2e,0x58,0xff,0xff,
+0x21,0x60,0xf5,0x78,0xff,0xff,0x99,0xff,0x30,0x44,0xff,0xff,0x98,0xff,0x80,0x2a,
+0x03,0x00,0x47,0xff,0x21,0x58,0xff,0xff,0x47,0xff,0xa1,0xff,0xff,0xff,0xbb,0x3f,
+0xff,0xff,0x99,0xff,0x32,0x44,0x98,0xff,0x10,0x26,0x57,0x00,0x64,0xe2,0x45,0xff,
+0x47,0xff,0x53,0x0a,0x99,0xff,0x32,0x44,0x98,0xff,0x10,0x26,0x4e,0x00,0x04,0x27,
+0x04,0x00,0xa8,0xf3,0xff,0xff,0x60,0x54,0xcd,0xe2,0x1f,0x60,0xcd,0x64,0x40,0x42,
+0xc4,0xe2,0x99,0xff,0x30,0x44,0x04,0xbc,0x1d,0xb4,0x40,0x51,0x98,0xff,0xa1,0xff,
+0xff,0xff,0xbb,0x3f,0x99,0xff,0x32,0x44,0x98,0xff,0x10,0x26,0x36,0x00,0x64,0xe2,
+0x45,0xff,0x47,0xff,0x32,0x0a,0x99,0xff,0x32,0x44,0x98,0xff,0x10,0x26,0x2d,0x00,
+0xc0,0xf3,0x42,0xf3,0x00,0xa0,0xff,0xff,0xea,0x02,0x01,0x3a,0x63,0x00,0x99,0xff,
 0x3e,0x44,0xfc,0xb4,0x40,0x5e,0x02,0xbc,0xff,0xff,0xff,0xff,0x40,0x5e,0x98,0xff,
-0xa1,0xff,0xff,0xff,0xbb,0x3f,0xd0,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0xf8,0x02,
-0x99,0xff,0x32,0x44,0x98,0xff,0x10,0x26,0x89,0x00,0x64,0xe2,0x45,0xff,0x47,0xff,
-0x29,0x0a,0x99,0xff,0x32,0x44,0x98,0xff,0x10,0x26,0x24,0x00,0x13,0xf3,0xff,0xff,
-0x00,0xa8,0xff,0xff,0x13,0x03,0x68,0x60,0x40,0x62,0x01,0x64,0xa2,0xdb,0x22,0xf0,
-0x10,0x64,0xb0,0x84,0xa2,0xda,0x99,0xff,0x30,0x44,0x59,0xb4,0x40,0x51,0x98,0xff,
-0x1b,0x60,0x28,0x64,0x40,0x40,0x1e,0x60,0xd2,0x78,0xff,0xff,0x1e,0x60,0xba,0x65,
-0xa5,0xd3,0xff,0xff,0x00,0xa8,0xcc,0x84,0x27,0x03,0xa5,0xdb,0x25,0x03,0x20,0x60,
-0xdc,0x78,0xff,0xff,0x20,0x60,0x82,0x78,0xff,0xff,0x1e,0x00,0x28,0x60,0x80,0x62,
-0xa2,0xd3,0x13,0xf3,0x00,0xa0,0x00,0xa0,0x13,0x03,0x68,0x60,0x40,0x62,0x01,0x64,
-0xa2,0xdb,0x22,0xf0,0x01,0x64,0xb0,0x84,0xa2,0xda,0x99,0xff,0x30,0x44,0x59,0xb4,
-0x40,0x51,0x98,0xff,0x1b,0x60,0x28,0x64,0x40,0x40,0x1e,0x60,0xd2,0x78,0xff,0xff,
-0xc2,0x02,0x20,0x60,0xdc,0x78,0xff,0xff,0x13,0xf3,0xff,0xff,0x00,0xa8,0xff,0xff,
-0x13,0x03,0x68,0x60,0x40,0x62,0x01,0x64,0xa2,0xdb,0x22,0xf0,0x10,0x64,0xb0,0x84,
-0xa2,0xda,0x99,0xff,0x30,0x44,0x59,0xb4,0x40,0x51,0x98,0xff,0x1b,0x60,0x28,0x64,
-0x40,0x40,0x1e,0x60,0xd2,0x78,0xff,0xff,0x29,0xf2,0xff,0xff,0x60,0x40,0x40,0x2b,
-0x25,0x00,0x3e,0xf3,0xff,0xff,0x60,0x40,0x04,0x26,0x0b,0x00,0x99,0xff,0x3a,0x5c,
-0x98,0xff,0x64,0x40,0x40,0x27,0x09,0x00,0x64,0x40,0x0f,0x2b,0x02,0x00,0x33,0x60,
-0x00,0xea,0x98,0xff,0x20,0x60,0xbf,0x78,0xff,0xff,0x99,0xff,0x3a,0x5c,0x98,0xff,
-0x64,0x40,0x10,0x2b,0xf6,0x00,0xdb,0xf3,0xff,0xff,0xff,0xff,0x01,0x26,0x06,0x00,
-0x8b,0xff,0x74,0x40,0x74,0x40,0x88,0xff,0x01,0x64,0xdb,0xfb,0x21,0xf3,0xff,0xff,
-0xc4,0xb4,0x21,0xfb,0x21,0x60,0xaa,0x64,0x40,0x40,0x01,0x64,0x22,0xfb,0x99,0xff,
-0x30,0x44,0x40,0xbc,0x59,0xb4,0x40,0x51,0x98,0xff,0xe2,0xf1,0x69,0x60,0x44,0x62,
-0x80,0x60,0x70,0x64,0xa2,0xdb,0x64,0x40,0x01,0x26,0xff,0xff,0xa0,0xfe,0x1a,0xff,
-0x00,0x64,0x68,0xfb,0xff,0xff,0xa1,0xff,0xff,0xff,0xbb,0x3f,0x95,0xf3,0xff,0xff,
-0x00,0xa0,0xff,0xff,0x07,0x02,0x13,0xf3,0xff,0xff,0x00,0xa0,0x00,0x64,0x02,0x03,
-0x13,0xfb,0xe3,0x00,0x28,0x60,0x80,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0x00,0x64,
-0x02,0x03,0xa2,0xdb,0xda,0x00,0x21,0xf3,0xff,0xff,0xff,0xff,0x01,0x2a,0x0d,0x00,
-0xfe,0xb4,0x21,0xfb,0x01,0x64,0x4e,0xfb,0x1e,0x60,0xb8,0x65,0xb8,0xf3,0xff,0xff,
-0xa5,0xdb,0xff,0xff,0x22,0x60,0x49,0x78,0xff,0xff,0x02,0x2a,0x62,0x00,0x27,0xf2,
-0xff,0xff,0xdc,0x84,0x27,0xfa,0x5a,0x60,0xc6,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,
-0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x18,0x60,
-0x08,0x64,0xa0,0xd3,0xff,0xff,0xe8,0x84,0xe0,0x84,0x60,0x45,0x18,0x60,0x74,0x64,
-0xc4,0x84,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x53,0xf3,0xff,0xff,0xe0,0x84,
-0x60,0x45,0x18,0x60,0xda,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
-0x53,0xf3,0xff,0xff,0xe0,0x84,0xe0,0x84,0x60,0x45,0x5a,0x60,0xca,0x64,0xc4,0x84,
-0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,
-0xdc,0x84,0xa2,0xdb,0x21,0xf3,0xff,0xff,0xfd,0xb4,0x21,0xfb,0x02,0x64,0x4e,0xfb,
-0x29,0xf2,0xff,0xff,0x0c,0xb4,0xff,0xff,0x00,0x36,0x5e,0x00,0x95,0xf1,0x00,0x63,
-0xd3,0x80,0xff,0xff,0x04,0x02,0xb9,0xf1,0xff,0xff,0x64,0x45,0x09,0x00,0x25,0xf2,
-0xff,0xff,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0x0f,0xb4,0xff,0xff,0x60,0x45,
-0x1e,0x60,0xb8,0x63,0xa3,0xd3,0xff,0xff,0xd4,0x80,0xdc,0x84,0x45,0x03,0xa3,0xdb,
-0x43,0x00,0x10,0x2a,0x07,0x00,0x21,0xf3,0x2b,0xf0,0xef,0xb4,0x21,0xfb,0x20,0x60,
-0x26,0x78,0xff,0xff,0x21,0xf3,0xff,0xff,0xdf,0xb4,0x21,0xfb,0x2b,0xf0,0x02,0x64,
-0x64,0x40,0x01,0x26,0x01,0x64,0x4e,0xfb,0x2f,0x00,0x00,0x63,0x95,0xf3,0x68,0xfd,
-0x00,0xbc,0xff,0xff,0x29,0x02,0x28,0x0a,0x70,0x44,0xac,0x80,0xff,0xff,0x24,0x02,
-0x32,0x40,0x02,0x27,0x21,0x00,0x1e,0x60,0xbc,0x65,0xa5,0xd3,0xff,0xff,0x00,0xa8,
-0xff,0xff,0x1a,0x03,0x22,0x60,0x6a,0x64,0x40,0x42,0x99,0xff,0x30,0x44,0x04,0xbc,
-0x1d,0xb4,0x40,0x51,0x98,0xff,0xa1,0xff,0xff,0xff,0xbb,0x3f,0x0d,0x0a,0x70,0x44,
-0xac,0x80,0xff,0xff,0x09,0x02,0x1e,0x60,0xbc,0x65,0xa5,0xd3,0xff,0xff,0xcc,0x84,
-0xa5,0xdb,0xff,0xff,0xf0,0x02,0x00,0x00,0x99,0xff,0x30,0x44,0x59,0xb4,0x40,0x51,
-0x98,0xff,0x1b,0x60,0x28,0x64,0x40,0x40,0x1d,0x60,0xa3,0x78,0xff,0xff,0xa4,0xe2,
-0xff,0xff,0xa4,0xe2,0x73,0x44,0xa4,0xfb,0x80,0xf3,0x60,0x45,0xe0,0x84,0xe0,0x84,
-0xe0,0x84,0xe0,0x84,0xc4,0x93,0x00,0x60,0x01,0x71,0x95,0xf1,0x16,0x60,0x60,0x64,
-0xa0,0xd3,0x64,0x40,0x00,0x36,0x0f,0x00,0x8a,0xff,0x80,0x60,0x00,0x75,0x88,0xff,
-0xe1,0xf3,0xff,0xff,0x00,0xa0,0x60,0x45,0x80,0xf3,0x24,0x03,0x67,0x60,0xf6,0x62,
-0xd4,0x84,0xa3,0xdb,0x1f,0x00,0x01,0x3a,0x1d,0x00,0xe1,0xf3,0x80,0xf1,0x00,0xa0,
-0x60,0x45,0x18,0x03,0x67,0x60,0xf6,0x62,0x64,0x41,0xd5,0x84,0xdc,0x84,0xa2,0xdb,
-0x00,0x64,0xe2,0xfb,0xe3,0xf3,0xff,0xff,0x60,0x40,0x00,0x36,0x0b,0x00,0x99,0xff,
-0x3c,0x44,0x00,0x7f,0xbf,0xb4,0x40,0x5c,0x98,0xff,0x69,0x60,0x44,0x62,0x80,0x60,
-0x60,0x64,0xa2,0xdb,0xe5,0xf3,0xe4,0xf1,0x00,0xa0,0xff,0xff,0x03,0x03,0x64,0x50,
-0x00,0x64,0xe5,0xfb,0x5e,0xf3,0xff,0xff,0x60,0x41,0xfd,0xb4,0xa2,0xdb,0x61,0x44,
-0x01,0xb0,0x02,0xb0,0x0a,0x03,0x09,0x02,0x3c,0x60,0xce,0x62,0x28,0x60,0xee,0x64,
-0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x16,0x60,0x60,0x62,0xa2,0xd3,
-0xff,0xff,0xfc,0xa0,0x01,0x64,0x02,0x02,0x75,0xfb,0xc9,0xfe,0x73,0x44,0x60,0x45,
-0x69,0x60,0x44,0x62,0x90,0x60,0x10,0x64,0xa2,0xdb,0x69,0x60,0x46,0x62,0x65,0x44,
-0xa2,0xdb,0xcb,0xf3,0x62,0xf3,0xfc,0xa0,0x00,0xa0,0x69,0x02,0x17,0x02,0x64,0xf3,
-0xff,0xff,0x00,0xa0,0xcc,0x84,0x12,0x03,0x64,0xfb,0x60,0x45,0x69,0x60,0x44,0x62,
-0x80,0x60,0x40,0x64,0xa2,0xdb,0x69,0x60,0x46,0x62,0x65,0x44,0xa2,0xdb,0x57,0x02,
-0x63,0xf3,0x64,0xfb,0x68,0x60,0x02,0x62,0x01,0x64,0xa2,0xdb,0x68,0x60,0x02,0x62,
-0xa2,0xd3,0xff,0xff,0x00,0xa0,0x00,0x64,0x4a,0x03,0xa2,0xdb,0x67,0x60,0xfc,0x65,
-0x67,0x60,0xfa,0x63,0xa5,0xd1,0xa3,0xd3,0x64,0x40,0x00,0x36,0x40,0x03,0xcc,0x84,
-0xa3,0xdb,0x60,0x45,0x69,0x60,0x44,0x62,0x80,0x60,0x50,0x64,0xa2,0xdb,0x69,0x60,
-0x46,0x62,0x65,0x44,0xa2,0xdb,0x33,0x02,0x64,0x44,0xa3,0xdb,0x67,0x60,0xfe,0x63,
-0x68,0x60,0x04,0x65,0xbd,0xd3,0xa3,0xdb,0xc4,0xa0,0xff,0xff,0x11,0x04,0xc4,0xa4,
-0xa3,0xdb,0xa5,0xdb,0xf0,0x60,0x00,0x64,0x60,0x50,0x60,0x45,0x69,0x60,0x44,0x62,
-0x80,0x60,0x32,0x64,0xa2,0xdb,0x69,0x60,0x46,0x62,0x65,0x44,0xa2,0xdb,0x17,0x00,
-0x60,0x47,0xe0,0x84,0xe0,0x84,0x70,0x45,0xd4,0x80,0xff,0xff,0x10,0x04,0x60,0x50,
-0x60,0x45,0x69,0x60,0x44,0x62,0x80,0x60,0x32,0x64,0xa2,0xdb,0x69,0x60,0x46,0x62,
-0x65,0x44,0xa2,0xdb,0x68,0x60,0x04,0x65,0x00,0x64,0xa3,0xdb,0xa5,0xdb,0x1b,0x60,
-0x32,0x78,0xff,0xff,0x64,0x41,0x40,0x60,0x0b,0x65,0x2b,0x44,0x00,0x63,0xe8,0x80,
-0xf8,0x84,0x02,0x24,0x94,0x84,0xf3,0x83,0xcd,0x81,0xff,0xff,0xf8,0x02,0x2f,0x58,
-0x40,0x4b,0x00,0x62,0x01,0x64,0xd4,0x80,0xe0,0x84,0x1b,0x03,0xd4,0x80,0xe0,0x84,
-0x16,0x03,0x61,0x44,0x11,0x61,0xe0,0x84,0xcd,0x81,0xfd,0x04,0x01,0x00,0xe0,0x84,
-0xf2,0x82,0xff,0xff,0x02,0x24,0xc6,0x82,0x02,0x28,0xd6,0x82,0xe2,0x80,0xcd,0x81,
-0x02,0x28,0x01,0xbc,0xf4,0x02,0x01,0x2a,0xc6,0x82,0x2f,0x58,0xff,0xff,0xe9,0x81,
-0xf2,0x82,0x61,0x44,0xfa,0x00,0x12,0xf1,0x7f,0x00,0xda,0x00,0xa1,0xff,0xff,0xff,
-0xbc,0x3f,0x40,0xf3,0xff,0xff,0x60,0x40,0x01,0x2a,0x03,0x00,0x18,0x60,0x1f,0x78,
-0xff,0xff,0x3d,0x46,0x29,0xf0,0xff,0xff,0x64,0x40,0x40,0x2b,0x27,0x00,0x3e,0xf3,
-0xff,0xff,0x60,0x40,0x02,0x26,0x1a,0x00,0x0f,0xf2,0xff,0xff,0x60,0x40,0x04,0x2a,
-0x00,0x00,0x99,0xff,0x3b,0x44,0x98,0xff,0xff,0xff,0x0f,0x2b,0x05,0x00,0x40,0x27,
-0xf8,0x00,0xf5,0x60,0xbc,0x78,0xff,0xff,0x9c,0xf3,0xff,0xff,0xff,0xff,0x02,0x26,
-0xd5,0x00,0x68,0x60,0x42,0x62,0x01,0x64,0xa2,0xdb,0xd0,0x00,0x0f,0xf2,0xff,0xff,
-0x60,0x40,0x04,0x2a,0xcb,0x00,0x17,0x60,0xae,0x78,0xff,0xff,0x0f,0xf2,0xff,0xff,
-0x08,0xbc,0x0f,0xfa,0x3c,0x60,0x84,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,
-0x01,0x02,0xbc,0x00,0x0f,0xf0,0xff,0xff,0xff,0xff,0x64,0x40,0x00,0x3a,0x04,0x00,
-0x0f,0xf0,0x70,0x64,0xb0,0x84,0xa2,0xda,0x67,0x60,0xdc,0x62,0x00,0x64,0xa2,0xdb,
-0x40,0xfb,0x3e,0xf3,0xff,0xff,0xf9,0xb4,0x3e,0xfb,0x3d,0x46,0x0f,0xf0,0x04,0x64,
-0xb0,0x84,0xa2,0xda,0xcb,0xfe,0x40,0xff,0xbc,0xfe,0x29,0xf2,0xff,0xff,0xff,0xff,
-0x40,0x2b,0x9c,0x00,0x67,0x60,0xd2,0x64,0xa0,0xd3,0xff,0xff,0xff,0xa0,0xff,0xff,
-0x95,0x02,0x04,0xff,0x93,0x00,0x2e,0x47,0x7e,0x00,0x00,0x10,0x7f,0xf1,0x10,0x60,
-0xdc,0xe0,0x43,0x45,0x65,0xf3,0x44,0x46,0x60,0x40,0x02,0x2a,0x03,0x00,0x23,0x60,
-0xe5,0x78,0xff,0xff,0x01,0x64,0x65,0xfb,0x99,0xff,0x00,0x6b,0x3e,0x44,0x70,0xb4,
+0x1f,0x60,0xf7,0x64,0x40,0x42,0x99,0xff,0x30,0x44,0x44,0xbc,0x5d,0xb4,0x40,0x51,
+0x98,0xff,0xa1,0xff,0xff,0xff,0xbb,0x3f,0x99,0xff,0x32,0x44,0x98,0xff,0x10,0x26,
+0x0c,0x00,0x64,0xe2,0x45,0xff,0x47,0xff,0x08,0x0a,0x99,0xff,0x32,0x44,0x98,0xff,
+0x10,0x26,0x03,0x00,0x20,0x60,0xce,0x78,0xff,0xff,0x20,0x60,0x17,0x64,0x40,0x40,
+0x20,0x60,0x45,0x64,0x40,0x41,0x99,0xff,0x30,0x44,0xe0,0xbc,0xf9,0xb4,0x40,0x51,
+0x98,0xff,0xa1,0xff,0xff,0xff,0xbb,0x3f,0x2b,0x60,0x48,0x62,0xa2,0xd3,0x13,0xf3,
+0x00,0xa0,0x00,0xa0,0x13,0x03,0x6b,0x60,0x28,0x62,0x01,0x64,0xa2,0xdb,0x22,0xf0,
+0x01,0x64,0xb0,0x84,0xa2,0xda,0x99,0xff,0x30,0x44,0x59,0xb4,0x40,0x51,0x98,0xff,
+0x1a,0x60,0xb9,0x64,0x40,0x40,0x1e,0x60,0x58,0x78,0xff,0xff,0x13,0x03,0x6b,0x60,
+0x28,0x62,0x01,0x64,0xa2,0xdb,0x22,0xf0,0x10,0x64,0xb0,0x84,0xa2,0xda,0x99,0xff,
+0x30,0x44,0x59,0xb4,0x40,0x51,0x98,0xff,0x1a,0x60,0xb9,0x64,0x40,0x40,0x1e,0x60,
+0x58,0x78,0xff,0xff,0x20,0x60,0xb0,0x64,0x40,0x40,0x20,0x60,0x75,0x64,0x40,0x42,
+0x99,0xff,0x30,0x44,0x44,0xbc,0x5d,0xb4,0x40,0x51,0x98,0xff,0x99,0xff,0x32,0x44,
+0x98,0xff,0x10,0x26,0xb2,0x00,0xc0,0xf3,0x64,0xe2,0x00,0xa0,0x45,0xff,0x47,0xff,
+0x16,0x02,0xab,0x0a,0x99,0xff,0x32,0x44,0x98,0xff,0x10,0x26,0xa6,0x00,0x21,0x60,
+0x82,0x65,0xa5,0xd3,0xff,0xff,0x01,0xa8,0xff,0xff,0x09,0x02,0x99,0xff,0x3e,0x44,
+0xfc,0xb4,0x40,0x5e,0x02,0xbc,0xff,0xff,0xff,0xff,0x40,0x5e,0x98,0xff,0xa1,0xff,
+0xff,0xff,0xbb,0x3f,0xc0,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0xf8,0x02,0x99,0xff,
+0x32,0x44,0x98,0xff,0x10,0x26,0x89,0x00,0x64,0xe2,0x45,0xff,0x47,0xff,0x29,0x0a,
+0x99,0xff,0x32,0x44,0x98,0xff,0x10,0x26,0x24,0x00,0x13,0xf3,0xff,0xff,0x00,0xa8,
+0xff,0xff,0x13,0x03,0x6b,0x60,0x28,0x62,0x01,0x64,0xa2,0xdb,0x22,0xf0,0x10,0x64,
+0xb0,0x84,0xa2,0xda,0x99,0xff,0x30,0x44,0x59,0xb4,0x40,0x51,0x98,0xff,0x1a,0x60,
+0xb9,0x64,0x40,0x40,0x1e,0x60,0x58,0x78,0xff,0xff,0x21,0x60,0x82,0x65,0xa5,0xd3,
+0xff,0xff,0x00,0xa8,0xcc,0x84,0x27,0x03,0xa5,0xdb,0x25,0x03,0x20,0x60,0x62,0x78,
+0xff,0xff,0x20,0x60,0x08,0x78,0xff,0xff,0x1e,0x00,0x2b,0x60,0x48,0x62,0xa2,0xd3,
+0x13,0xf3,0x00,0xa0,0x00,0xa0,0x13,0x03,0x6b,0x60,0x28,0x62,0x01,0x64,0xa2,0xdb,
+0x22,0xf0,0x01,0x64,0xb0,0x84,0xa2,0xda,0x99,0xff,0x30,0x44,0x59,0xb4,0x40,0x51,
+0x98,0xff,0x1a,0x60,0xb9,0x64,0x40,0x40,0x1e,0x60,0x58,0x78,0xff,0xff,0xc2,0x02,
+0x20,0x60,0x62,0x78,0xff,0xff,0x13,0xf3,0xff,0xff,0x00,0xa8,0xff,0xff,0x13,0x03,
+0x6b,0x60,0x28,0x62,0x01,0x64,0xa2,0xdb,0x22,0xf0,0x10,0x64,0xb0,0x84,0xa2,0xda,
+0x99,0xff,0x30,0x44,0x59,0xb4,0x40,0x51,0x98,0xff,0x1a,0x60,0xb9,0x64,0x40,0x40,
+0x1e,0x60,0x58,0x78,0xff,0xff,0x29,0xf2,0xff,0xff,0x60,0x40,0x40,0x2b,0x25,0x00,
+0x2f,0xf3,0xff,0xff,0x60,0x40,0x04,0x26,0x0b,0x00,0x99,0xff,0x3a,0x5c,0x98,0xff,
+0x64,0x40,0x40,0x27,0x09,0x00,0x64,0x40,0x0f,0x2b,0x02,0x00,0x33,0x60,0x00,0xea,
+0x98,0xff,0x20,0x60,0x45,0x78,0xff,0xff,0x99,0xff,0x3a,0x5c,0x98,0xff,0x64,0x40,
+0x10,0x2b,0xf6,0x00,0xca,0xf3,0xff,0xff,0xff,0xff,0x01,0x26,0x06,0x00,0x8b,0xff,
+0x74,0x40,0x74,0x40,0x88,0xff,0x01,0x64,0xca,0xfb,0x20,0xf3,0xff,0xff,0xc4,0xb4,
+0x20,0xfb,0x21,0x60,0x27,0x64,0x40,0x40,0x01,0x64,0x21,0xfb,0x99,0xff,0x30,0x44,
+0x40,0xbc,0x59,0xb4,0x40,0x51,0x98,0xff,0xa0,0xfe,0x1a,0xff,0x00,0x64,0x5c,0xfb,
+0xff,0xff,0xa1,0xff,0xff,0xff,0xbb,0x3f,0x89,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,
+0x07,0x02,0x13,0xf3,0xff,0xff,0x00,0xa0,0x00,0x64,0x02,0x03,0x13,0xfb,0xec,0x00,
+0x2b,0x60,0x48,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0x00,0x64,0x02,0x03,0xa2,0xdb,
+0xe3,0x00,0x20,0xf3,0xff,0xff,0xff,0xff,0x01,0x2a,0x0d,0x00,0xfe,0xb4,0x20,0xfb,
+0x01,0x64,0x41,0xfb,0x21,0x60,0x80,0x65,0xab,0xf3,0xff,0xff,0xa5,0xdb,0xff,0xff,
+0x21,0x60,0xc6,0x78,0xff,0xff,0x02,0x2a,0x62,0x00,0x27,0xf2,0xff,0xff,0xdc,0x84,
+0x27,0xfa,0x63,0x60,0xb8,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,
+0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x18,0x60,0x80,0x64,0xa0,0xd3,
+0xff,0xff,0xe8,0x84,0xe0,0x84,0x60,0x45,0x18,0x60,0xec,0x64,0xc4,0x84,0xa0,0xd3,
+0xff,0xff,0xdc,0x84,0xa2,0xdb,0x46,0xf3,0xff,0xff,0xe0,0x84,0x60,0x45,0x19,0x60,
+0x52,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x46,0xf3,0xff,0xff,
+0xe0,0x84,0xe0,0x84,0x60,0x45,0x63,0x60,0xbc,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,
+0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
+0x20,0xf3,0xff,0xff,0xfd,0xb4,0x20,0xfb,0x02,0x64,0x41,0xfb,0x29,0xf2,0xff,0xff,
+0x0c,0xb4,0xff,0xff,0x00,0x36,0x5e,0x00,0x89,0xf1,0x00,0x63,0xd3,0x80,0xff,0xff,
+0x04,0x02,0xac,0xf1,0xff,0xff,0x64,0x45,0x09,0x00,0x25,0xf2,0xff,0xff,0xe8,0x84,
+0xe8,0x84,0xe8,0x84,0xe8,0x84,0x0f,0xb4,0xff,0xff,0x60,0x45,0x21,0x60,0x80,0x63,
+0xa3,0xd3,0xff,0xff,0xd4,0x80,0xdc,0x84,0x45,0x03,0xa3,0xdb,0x43,0x00,0x10,0x2a,
+0x07,0x00,0x20,0xf3,0x2b,0xf0,0xef,0xb4,0x20,0xfb,0x1f,0x60,0xac,0x78,0xff,0xff,
+0x20,0xf3,0xff,0xff,0xdf,0xb4,0x20,0xfb,0x2b,0xf0,0x02,0x64,0x64,0x40,0x01,0x26,
+0x01,0x64,0x41,0xfb,0x2f,0x00,0x00,0x63,0x89,0xf3,0x5c,0xfd,0x00,0xbc,0xff,0xff,
+0x29,0x02,0x28,0x0a,0x70,0x44,0xac,0x80,0xff,0xff,0x24,0x02,0x32,0x40,0x02,0x27,
+0x21,0x00,0x21,0x60,0x84,0x65,0xa5,0xd3,0xff,0xff,0x00,0xa8,0xff,0xff,0x1a,0x03,
+0x21,0x60,0xe7,0x64,0x40,0x42,0x99,0xff,0x30,0x44,0x04,0xbc,0x1d,0xb4,0x40,0x51,
+0x98,0xff,0xa1,0xff,0xff,0xff,0xbb,0x3f,0x0d,0x0a,0x70,0x44,0xac,0x80,0xff,0xff,
+0x09,0x02,0x21,0x60,0x84,0x65,0xa5,0xd3,0xff,0xff,0xcc,0x84,0xa5,0xdb,0xff,0xff,
+0xf0,0x02,0x00,0x00,0x99,0xff,0x30,0x44,0x59,0xb4,0x40,0x51,0x98,0xff,0x1a,0x60,
+0xb9,0x64,0x40,0x40,0x1d,0x60,0x2a,0x78,0xff,0xff,0x19,0x60,0x92,0x63,0xbd,0xd3,
+0xff,0xff,0x00,0xa0,0x60,0x5c,0x1d,0x03,0xa3,0xd3,0xff,0xff,0x01,0xac,0xa3,0xdb,
+0x10,0x02,0x73,0x44,0x74,0xf3,0x60,0x45,0xe0,0x84,0xe0,0x84,0xe0,0x84,0xe0,0x84,
+0xd0,0x84,0xc4,0x84,0x60,0x53,0x60,0x53,0x8a,0xff,0x80,0x60,0x00,0x75,0x88,0xff,
+0x2b,0x00,0x73,0x44,0x9a,0xfb,0xc0,0x84,0x60,0x53,0x60,0x53,0x00,0x60,0x01,0x71,
+0x18,0x00,0x73,0x44,0x9a,0xfb,0x74,0xf3,0x60,0x45,0xe0,0x84,0xe0,0x84,0xe0,0x84,
+0xe0,0x84,0xc4,0x84,0x60,0x53,0x60,0x53,0x00,0x60,0x01,0x71,0x89,0xf1,0x16,0x60,
+0xd8,0x64,0xa0,0xd3,0x64,0x40,0x00,0x36,0x12,0x00,0x8a,0xff,0x80,0x60,0x00,0x75,
+0x88,0xff,0x6a,0x60,0xd6,0x63,0xd0,0xf3,0xff,0xff,0x00,0xa0,0x60,0x45,0x74,0xf3,
+0x20,0x03,0xd4,0x84,0xa3,0xdb,0x1d,0x00,0x1a,0x60,0xc3,0x78,0xff,0xff,0x01,0x3a,
+0x18,0x00,0xd0,0xf3,0x74,0xf1,0x00,0xa0,0x60,0x45,0x13,0x03,0x6a,0x60,0xd6,0x62,
+0x64,0x41,0xd5,0x84,0xdc,0x84,0xa2,0xdb,0x00,0x64,0xd1,0xfb,0xd2,0xf3,0xff,0xff,
+0x60,0x40,0x00,0x36,0x06,0x00,0x99,0xff,0x3c,0x44,0x00,0x7f,0xbf,0xb4,0x40,0x5c,
+0x98,0xff,0xd4,0xf3,0xd3,0xf1,0x00,0xa0,0xff,0xff,0x03,0x03,0x64,0x50,0x00,0x64,
+0xd4,0xfb,0x52,0xf3,0xff,0xff,0x60,0x41,0xfd,0xb4,0xa2,0xdb,0x61,0x44,0x01,0xb0,
+0x02,0xb0,0x0a,0x03,0x09,0x02,0x3f,0x60,0x96,0x62,0x2b,0x60,0xb6,0x64,0xa2,0xdb,
+0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x16,0x60,0xd8,0x62,0xa2,0xd3,0xff,0xff,
+0xfc,0xa0,0x01,0x64,0x02,0x02,0x69,0xfb,0xc9,0xfe,0x73,0x44,0xbd,0xf3,0x56,0xf3,
+0xfc,0xa0,0x00,0xa0,0x41,0x02,0x0d,0x02,0x58,0xf3,0xff,0xff,0x00,0xa0,0xcc,0x84,
+0x08,0x03,0x58,0xfb,0x39,0x02,0x57,0xf3,0x58,0xfb,0x6a,0x60,0xe2,0x62,0x01,0x64,
+0xa2,0xdb,0x6a,0x60,0xe2,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0x00,0x64,0x2c,0x03,
+0xa2,0xdb,0x6a,0x60,0xdc,0x65,0x6a,0x60,0xda,0x63,0xa5,0xd1,0xa3,0xd3,0x64,0x40,
+0x00,0x36,0x22,0x00,0xcc,0x84,0xa3,0xdb,0x1f,0x02,0x64,0x44,0xa3,0xdb,0x6a,0x60,
+0xde,0x63,0x6a,0x60,0xe4,0x65,0xbd,0xd3,0xa3,0xdb,0xc4,0xa0,0xff,0xff,0x07,0x04,
+0xc4,0xa4,0xa3,0xdb,0xa5,0xdb,0xf0,0x60,0x00,0x64,0x60,0x50,0x0d,0x00,0x60,0x47,
+0xe0,0x84,0xe0,0x84,0x70,0x45,0xd4,0x80,0xff,0xff,0x06,0x04,0x60,0x50,0x6a,0x60,
+0xe4,0x65,0x00,0x64,0xa3,0xdb,0xa5,0xdb,0x1a,0x60,0xc3,0x78,0xff,0xff,0x64,0x41,
+0x40,0x60,0x0b,0x65,0x2b,0x44,0x00,0x63,0xe8,0x80,0xf8,0x84,0x02,0x24,0x94,0x84,
+0xf3,0x83,0xcd,0x81,0xff,0xff,0xf8,0x02,0x2f,0x58,0x40,0x4b,0x00,0x62,0x01,0x64,
+0xd4,0x80,0xe0,0x84,0x1b,0x03,0xd4,0x80,0xe0,0x84,0x16,0x03,0x61,0x44,0x11,0x61,
+0xe0,0x84,0xcd,0x81,0xfd,0x04,0x01,0x00,0xe0,0x84,0xf2,0x82,0xff,0xff,0x02,0x24,
+0xc6,0x82,0x02,0x28,0xd6,0x82,0xe2,0x80,0xcd,0x81,0x02,0x28,0x01,0xbc,0xf4,0x02,
+0x01,0x2a,0xc6,0x82,0x2f,0x58,0xff,0xff,0xe9,0x81,0xf2,0x82,0x61,0x44,0xfa,0x00,
+0x4e,0xf6,0x7f,0x00,0xda,0x00,0xa1,0xff,0xff,0xff,0xbc,0x3f,0x31,0xf3,0xff,0xff,
+0x60,0x40,0x01,0x2a,0x03,0x00,0x17,0x60,0xae,0x78,0xff,0xff,0x3d,0x46,0x29,0xf0,
+0xff,0xff,0x64,0x40,0x40,0x2b,0x27,0x00,0x2f,0xf3,0xff,0xff,0x60,0x40,0x02,0x26,
+0x1a,0x00,0x0f,0xf2,0xff,0xff,0x60,0x40,0x04,0x2a,0x00,0x00,0x99,0xff,0x3b,0x44,
+0x98,0xff,0xff,0xff,0x0f,0x2b,0x05,0x00,0x40,0x27,0xf8,0x00,0xf5,0x60,0xe7,0x78,
+0xff,0xff,0x92,0xf3,0xff,0xff,0xff,0xff,0x02,0x26,0xd5,0x00,0x6b,0x60,0x2a,0x62,
+0x01,0x64,0xa2,0xdb,0xd0,0x00,0x0f,0xf2,0xff,0xff,0x60,0x40,0x04,0x2a,0xcb,0x00,
+0x17,0x60,0x17,0x78,0xff,0xff,0x0f,0xf2,0xff,0xff,0x08,0xbc,0x0f,0xfa,0x3f,0x60,
+0x4c,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,0x01,0x02,0xbc,0x00,0x0f,0xf0,
+0xff,0xff,0xff,0xff,0x64,0x40,0x00,0x3a,0x04,0x00,0x0f,0xf0,0x70,0x64,0xb0,0x84,
+0xa2,0xda,0x6a,0x60,0xb8,0x62,0x00,0x64,0xa2,0xdb,0x31,0xfb,0x2f,0xf3,0xff,0xff,
+0xf9,0xb4,0x2f,0xfb,0x3d,0x46,0x0f,0xf0,0x04,0x64,0xb0,0x84,0xa2,0xda,0xcb,0xfe,
+0x40,0xff,0xbc,0xfe,0x29,0xf2,0xff,0xff,0xff,0xff,0x40,0x2b,0x9c,0x00,0x6a,0x60,
+0xae,0x64,0xa0,0xd3,0xff,0xff,0xff,0xa0,0xff,0xff,0x95,0x02,0x04,0xff,0x93,0x00,
+0x06,0x46,0x7e,0x00,0x00,0x10,0x73,0xf1,0x10,0x60,0xdc,0xe0,0x43,0x45,0x64,0x44,
+0x60,0x45,0x6b,0x60,0x2c,0x62,0x80,0x60,0x11,0x64,0xa2,0xdb,0x6b,0x60,0x2e,0x62,
+0x65,0x44,0xa2,0xdb,0x59,0xf3,0x44,0x46,0x60,0x40,0x02,0x2a,0x03,0x00,0x23,0x60,
+0x5c,0x78,0xff,0xff,0x01,0x64,0x59,0xfb,0x99,0xff,0x00,0x6b,0x3e,0x44,0x70,0xb4,
 0x40,0x5e,0x3d,0x44,0xf7,0xb4,0x90,0xbc,0x40,0x5d,0x3c,0x44,0x6f,0xb4,0x40,0x5c,
-0x98,0xff,0x20,0x44,0x60,0xbc,0x40,0x40,0x01,0x64,0x60,0x47,0x99,0xfb,0x05,0x64,
-0x9a,0xfb,0xff,0xff,0xdf,0xfe,0x19,0xff,0x23,0x60,0xc3,0x64,0x9b,0xfb,0xf8,0x60,
-0x89,0x78,0xff,0xff,0x1f,0xf3,0xff,0xff,0xff,0xff,0x20,0x26,0x05,0x00,0x13,0x60,
-0x78,0x63,0x14,0x60,0x5c,0x65,0x04,0x00,0x14,0x60,0x5c,0x63,0x15,0x60,0x40,0x65,
+0x98,0xff,0x20,0x44,0x60,0xbc,0x40,0x40,0x01,0x64,0x60,0x47,0x8f,0xfb,0x05,0x64,
+0x90,0xfb,0xff,0xff,0xdf,0xfe,0x19,0xff,0x23,0x60,0x3a,0x64,0x91,0xfb,0xfb,0x60,
+0x27,0x78,0xff,0xff,0x1e,0xf3,0xff,0xff,0xff,0xff,0x20,0x26,0x05,0x00,0x13,0x60,
+0xf0,0x63,0x14,0x60,0xd4,0x65,0x04,0x00,0x14,0x60,0xd4,0x63,0x15,0x60,0xb8,0x65,
 0x80,0xe1,0x02,0x00,0x01,0x16,0xfe,0x00,0xbd,0xd1,0xff,0xff,0x64,0x48,0x64,0x47,
 0x00,0x7f,0x60,0x41,0x80,0xbc,0x60,0x4a,0xff,0xff,0xff,0xff,0xa1,0xff,0xff,0xff,
 0xd7,0x80,0xff,0xff,0xef,0x02,0x68,0x40,0x20,0x44,0x60,0xbc,0x40,0x40,0x80,0xe1,
-0x14,0x60,0x98,0x63,0xa3,0xd1,0x67,0x60,0xea,0x62,0xa2,0xd3,0xff,0xff,0xd0,0x80,
-0xa2,0xd9,0x16,0x03,0x01,0x64,0xd8,0xfb,0xd7,0xf3,0xff,0xff,0xff,0xff,0x01,0x26,
+0x15,0x60,0x10,0x63,0xa3,0xd1,0x6a,0x60,0xc6,0x62,0xa2,0xd3,0xff,0xff,0xd0,0x80,
+0xa2,0xd9,0x16,0x03,0x01,0x64,0xc7,0xfb,0xc6,0xf3,0xff,0xff,0xff,0xff,0x01,0x26,
 0xfb,0x00,0x64,0x48,0x64,0x47,0x00,0x7f,0x80,0xbc,0x60,0x4a,0xff,0xff,0xff,0xff,
-0xa1,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x68,0x40,0x00,0x64,0xd8,0xfb,
-0x67,0x60,0x54,0x62,0x17,0x60,0x70,0x7c,0xa2,0xd3,0x99,0xff,0xe0,0x84,0x40,0xd1,
-0x00,0x63,0x64,0x40,0x01,0x26,0x10,0x63,0xdd,0xfd,0x00,0x65,0x64,0x40,0x02,0x26,
-0x04,0x65,0x3c,0x44,0xfb,0xb4,0xb4,0x84,0x40,0x5c,0x98,0xff,0x26,0x44,0x7f,0xfb,
-0x02,0x7f,0x99,0xfb,0x05,0x64,0x9a,0xfb,0xff,0xff,0xdf,0xfe,0x19,0xff,0x24,0x60,
-0x34,0x64,0x9b,0xfb,0x9c,0xf3,0x69,0x65,0xb4,0x84,0x99,0xff,0x40,0x51,0x98,0xff,
-0xf8,0x60,0x89,0x78,0xff,0xff,0x65,0xf3,0xff,0xff,0x02,0xbc,0x65,0xfb,0x25,0x43,
-0x24,0x60,0xb0,0x78,0xff,0xff,0x20,0x44,0x43,0x45,0x20,0xbc,0x40,0x40,0x65,0xf3,
-0xff,0xff,0x60,0x40,0x80,0x2a,0x03,0x00,0x24,0x60,0x68,0x78,0xff,0xff,0x00,0xee,
-0x04,0xbc,0x65,0xfb,0xff,0xff,0xdf,0xfe,0x19,0xff,0xff,0xff,0x99,0xff,0x00,0x6b,
+0xa1,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x68,0x40,0x00,0x64,0xc7,0xfb,
+0x6a,0x60,0x32,0x62,0x17,0x60,0xe8,0x7c,0xa2,0xd3,0x99,0xff,0xe0,0x84,0x40,0xd1,
+0x00,0x63,0x64,0x40,0x01,0x26,0x10,0x63,0xcc,0xfd,0x00,0x65,0x64,0x40,0x02,0x26,
+0x04,0x65,0x3c,0x44,0xfb,0xb4,0xb4,0x84,0x40,0x5c,0x98,0xff,0x26,0x44,0x73,0xfb,
+0x02,0x7f,0x8f,0xfb,0x05,0x64,0x90,0xfb,0xff,0xff,0xdf,0xfe,0x19,0xff,0x23,0x60,
+0xab,0x64,0x91,0xfb,0x92,0xf3,0x69,0x65,0xb4,0x84,0x99,0xff,0x40,0x51,0x98,0xff,
+0xfb,0x60,0x27,0x78,0xff,0xff,0x59,0xf3,0xff,0xff,0x02,0xbc,0x59,0xfb,0x25,0x43,
+0x24,0x60,0x27,0x78,0xff,0xff,0x20,0x44,0x43,0x45,0x20,0xbc,0x40,0x40,0x59,0xf3,
+0xff,0xff,0x60,0x40,0x80,0x2a,0x03,0x00,0x23,0x60,0xdf,0x78,0xff,0xff,0x00,0xee,
+0x04,0xbc,0x59,0xfb,0xff,0xff,0xdf,0xfe,0x19,0xff,0xff,0xff,0x99,0xff,0x00,0x6b,
 0x3c,0x44,0x40,0xb4,0x80,0xbc,0x40,0x5c,0x00,0xed,0x04,0xee,0xff,0xff,0xff,0xff,
-0x00,0xee,0x98,0xff,0x00,0x64,0x65,0xfb,0x69,0x60,0x48,0x62,0xa2,0xd3,0xff,0xff,
+0x00,0xee,0x98,0xff,0x00,0x64,0x59,0xfb,0x6b,0x60,0x30,0x62,0xa2,0xd3,0xff,0xff,
 0x60,0x40,0x00,0x3a,0x04,0x00,0x55,0x60,0xfc,0xe0,0xff,0xff,0xff,0xff,0x25,0x43,
-0x24,0x60,0xb0,0x78,0xff,0xff,0x24,0x60,0xb0,0x78,0xff,0xff,0x20,0x44,0x20,0xbc,
-0x40,0x40,0x24,0x60,0xb0,0x78,0xff,0xff,0x99,0xff,0x3c,0x44,0x7f,0xb4,0x10,0xbc,
+0x24,0x60,0x27,0x78,0xff,0xff,0x24,0x60,0x27,0x78,0xff,0xff,0x20,0x44,0x20,0xbc,
+0x40,0x40,0x24,0x60,0x27,0x78,0xff,0xff,0x99,0xff,0x3c,0x44,0x7f,0xb4,0x10,0xbc,
 0x40,0x5c,0x98,0xff,0x99,0xff,0x3d,0x44,0x10,0xbc,0x00,0x7f,0x40,0x5d,0x98,0xff,
-0x99,0xff,0x3e,0x44,0x02,0xbc,0x00,0x7f,0x40,0x5e,0x98,0xff,0x24,0x60,0xb0,0x78,
-0xff,0xff,0x20,0x44,0x20,0xbc,0x40,0x40,0x80,0xe1,0x01,0x64,0xd8,0xfb,0xd7,0xf3,
+0x99,0xff,0x3e,0x44,0x02,0xbc,0x00,0x7f,0x40,0x5e,0x98,0xff,0x24,0x60,0x27,0x78,
+0xff,0xff,0x20,0x44,0x20,0xbc,0x40,0x40,0x80,0xe1,0x01,0x64,0xc7,0xfb,0xc6,0xf3,
 0xff,0xff,0xff,0xff,0x01,0x26,0xfb,0x00,0x64,0x47,0x3f,0xb4,0xe0,0x85,0x64,0x44,
 0x80,0x2b,0x09,0x00,0x00,0x7f,0x60,0x48,0x65,0x44,0x80,0xbc,0x60,0x4a,0xff,0xff,
 0xff,0xff,0x0b,0x16,0xfe,0x00,0x65,0x49,0xff,0xff,0xff,0xff,0xa1,0xff,0x00,0x64,
-0x68,0x5e,0x60,0x5c,0x08,0x60,0x0a,0x64,0xa0,0xd9,0x00,0x64,0xd8,0xfb,0x9c,0xf3,
+0x68,0x5e,0x60,0x5c,0x08,0x60,0x0a,0x64,0xa0,0xd9,0x00,0x64,0xc7,0xfb,0x92,0xf3,
 0x69,0x65,0xb4,0x84,0x99,0xff,0x40,0x51,0x98,0xff,0x00,0x64,0xbf,0xdb,0x20,0x44,
 0x20,0x2a,0x07,0x00,0x07,0xb4,0x04,0x36,0xc3,0xfe,0x06,0x36,0xcc,0xfe,0x07,0x36,
 0xd8,0xfe,0x20,0x44,0xd8,0xb4,0x40,0x40,0x20,0x44,0x40,0x2a,0x08,0x00,0x9f,0xfe,
-0xff,0xff,0x24,0x05,0xbf,0xb4,0x40,0x40,0x9b,0xf7,0xff,0xff,0xff,0xff,0x3c,0x60,
-0xae,0x62,0xa2,0xd3,0xda,0x83,0x00,0xa8,0x02,0x61,0x1b,0x02,0xdb,0x82,0x5a,0xd3,
+0xff,0xff,0x24,0x05,0xbf,0xb4,0x40,0x40,0x91,0xf7,0xff,0xff,0xff,0xff,0x3f,0x60,
+0x76,0x62,0xa2,0xd3,0xda,0x83,0x00,0xa8,0x02,0x61,0x1b,0x02,0xdb,0x82,0x5a,0xd3,
 0xda,0x83,0x00,0xa8,0x02,0x61,0x15,0x02,0xdb,0x82,0x5a,0xd3,0xda,0x83,0x00,0xa8,
 0x04,0x61,0x0f,0x02,0xdb,0x82,0x5a,0xd3,0xda,0x83,0x00,0xa8,0x06,0x61,0x09,0x02,
-0xdb,0x82,0x5a,0xd3,0xda,0x83,0x00,0xa8,0x07,0x61,0x03,0x02,0xf8,0x60,0x89,0x78,
+0xdb,0x82,0x5a,0xd3,0xda,0x83,0x00,0xa8,0x07,0x61,0x03,0x02,0xfb,0x60,0x27,0x78,
 0xff,0xff,0xa3,0xd1,0x40,0x44,0x62,0x43,0x20,0x44,0x07,0xb5,0xd4,0x85,0x35,0x80,
-0x24,0x45,0x13,0x60,0x50,0x64,0x44,0xd7,0xff,0xff,0xff,0xff,0x80,0xe1,0x43,0x45,
+0x24,0x45,0x13,0x60,0xc8,0x64,0x44,0xd7,0xff,0xff,0xff,0xff,0x80,0xe1,0x43,0x45,
 0x20,0x44,0x20,0xbc,0x40,0x40,0x64,0x43,0xbd,0xd3,0xbd,0xd1,0xff,0xff,0x10,0x2b,
 0x01,0x00,0x0b,0x00,0x01,0x16,0xfe,0x00,0x64,0x49,0xff,0xff,0xff,0xff,0xff,0xff,
 0xa1,0xff,0xff,0xff,0x68,0x44,0x00,0x7f,0xa3,0xdb,0x25,0x43,0x98,0x00,0x80,0xe1,
@@ -1391,728 +1457,746 @@
 0x10,0x2b,0x01,0x00,0x1a,0x00,0xa3,0xd3,0xff,0xff,0x01,0x16,0xfe,0x00,0x60,0x48,
 0x64,0x44,0x00,0x7f,0x60,0x4a,0xff,0xff,0xff,0xff,0xff,0xff,0xa1,0xff,0xff,0xff,
 0x68,0x40,0x01,0x16,0xfe,0x00,0x64,0x49,0xff,0xff,0xff,0xff,0xff,0xff,0xa1,0xff,
-0xff,0xff,0x68,0x45,0xd4,0x80,0xff,0xff,0xe8,0x02,0x25,0x43,0xd7,0x00,0x3c,0x60,
-0xcc,0x61,0xa1,0xd3,0x00,0x63,0x00,0xa8,0x59,0xd1,0x31,0x02,0x59,0xd3,0x00,0x63,
+0xff,0xff,0x68,0x45,0xd4,0x80,0xff,0xff,0xe8,0x02,0x25,0x43,0xd7,0x00,0x3f,0x60,
+0x94,0x61,0xa1,0xd3,0x00,0x63,0x00,0xa8,0x59,0xd1,0x31,0x02,0x59,0xd3,0x00,0x63,
 0x00,0xa8,0x59,0xd1,0x2c,0x02,0x59,0xd3,0x00,0x63,0x00,0xa8,0x59,0xd1,0x27,0x02,
 0x59,0xd3,0x00,0x63,0x00,0xa8,0x59,0xd1,0x22,0x02,0x59,0xd3,0x00,0x63,0x00,0xa8,
 0x59,0xd1,0x1d,0x02,0x59,0xd3,0x00,0x63,0x00,0xa8,0x59,0xd1,0x18,0x02,0x59,0xd3,
 0x00,0x63,0x00,0xa8,0x59,0xd1,0x13,0x02,0x59,0xd3,0x00,0x63,0x00,0xa8,0x59,0xd1,
-0x0e,0x02,0x59,0xd3,0x00,0x63,0x00,0xa8,0x59,0xd1,0x09,0x02,0xf8,0x60,0x89,0x78,
-0xff,0xff,0x27,0x60,0xe2,0x78,0xff,0xff,0x27,0x60,0xbc,0x78,0xff,0xff,0x49,0xdd,
+0x0e,0x02,0x59,0xd3,0x00,0x63,0x00,0xa8,0x59,0xd1,0x09,0x02,0xfb,0x60,0x27,0x78,
+0xff,0xff,0x27,0x60,0x32,0x78,0xff,0xff,0x27,0x60,0x0c,0x78,0xff,0xff,0x49,0xdd,
 0x60,0x40,0x02,0x36,0xf9,0x00,0x03,0x36,0xf4,0x00,0x01,0x36,0x28,0x00,0x05,0x3a,
 0xbe,0x00,0xa4,0xd3,0x5a,0xd3,0x9c,0x85,0xa4,0x84,0xa2,0xdb,0xb8,0x00,0x84,0xe2,
-0x04,0x60,0x00,0x71,0x1e,0xf3,0x14,0xf3,0x00,0xbd,0xcc,0x84,0x08,0x03,0x14,0xfb,
+0x04,0x60,0x00,0x71,0x1d,0xf3,0x14,0xf3,0x00,0xbd,0xcc,0x84,0x08,0x03,0x14,0xfb,
 0x06,0x02,0x65,0x44,0x14,0xfb,0x8a,0xff,0x80,0x60,0x00,0x75,0x88,0xff,0x73,0x44,
-0xce,0xfb,0x1e,0x60,0xb2,0x62,0xa2,0xd3,0xff,0xff,0x01,0xa4,0xa2,0xdb,0x0a,0x02,
-0x1e,0x60,0xb4,0x62,0xa2,0xd3,0xff,0xff,0x01,0xa4,0xa2,0xdb,0x03,0x00,0x27,0x60,
-0xb5,0x78,0xff,0xff,0x67,0x60,0x34,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0xcc,0x84,
-0x06,0x03,0xa2,0xdb,0x04,0x02,0x3a,0x44,0x02,0xbc,0x40,0x5a,0x3b,0xff,0x6e,0xf3,
+0xbe,0xfb,0x21,0x60,0x7a,0x62,0xa2,0xd3,0xff,0xff,0x01,0xa4,0xa2,0xdb,0x0a,0x02,
+0x21,0x60,0x7c,0x62,0xa2,0xd3,0xff,0xff,0x01,0xa4,0xa2,0xdb,0x03,0x00,0x27,0x60,
+0x05,0x78,0xff,0xff,0x6a,0x60,0x0e,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0xcc,0x84,
+0x06,0x03,0xa2,0xdb,0x04,0x02,0x3a,0x44,0x02,0xbc,0x40,0x5a,0x3b,0xff,0x62,0xf3,
 0xff,0xff,0x60,0x47,0xff,0x23,0x05,0x00,0xcc,0x84,0x60,0x47,0xff,0x22,0x00,0x64,
-0x6e,0xfb,0xa4,0xf3,0xff,0xff,0x10,0xa4,0xa4,0xfb,0x68,0xf3,0x10,0xa5,0x00,0xa0,
-0x73,0x41,0x4a,0x03,0xd5,0x80,0xff,0xff,0x27,0x03,0x70,0x45,0xc4,0x85,0x02,0x60,
-0x58,0x64,0xc4,0x84,0xa4,0xf1,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,
-0xe8,0x84,0x40,0x4d,0xc0,0x84,0x60,0x41,0x73,0x45,0xd4,0x80,0xe1,0xf1,0x14,0x0d,
-0x64,0x44,0x00,0x36,0x31,0x00,0xe0,0x84,0xe0,0x84,0xe0,0x84,0xe0,0x84,0x61,0x45,
-0xc4,0x84,0x73,0x45,0xd4,0x80,0xff,0xff,0x07,0x0d,0x67,0x60,0xf6,0x62,0xa2,0xd3,
-0xff,0xff,0xfe,0xa0,0xff,0xff,0x20,0x02,0xcb,0xf3,0xff,0xff,0xfd,0xa0,0xff,0xff,
-0x07,0x02,0x01,0x64,0x13,0xfb,0x00,0x64,0x68,0xfb,0xc0,0xfe,0x13,0xfb,0x14,0x00,
-0xe4,0xf1,0x2d,0x44,0xc0,0x84,0x70,0x45,0xd4,0x80,0xff,0xff,0x0d,0x04,0x60,0x50,
-0x60,0x45,0x69,0x60,0x44,0x62,0x80,0x60,0x31,0x64,0xa2,0xdb,0x69,0x60,0x46,0x62,
-0x65,0x44,0xa2,0xdb,0x01,0x64,0xe5,0xfb,0x67,0x60,0x32,0x64,0xa0,0xd3,0xff,0xff,
-0x00,0xa0,0xcc,0x84,0x12,0x03,0xa2,0xdb,0x10,0x02,0xe0,0xf3,0x76,0xf3,0x60,0x45,
-0x77,0xf3,0xd4,0x80,0xd4,0x80,0x01,0x03,0x08,0x02,0x28,0x60,0x80,0x62,0x80,0x64,
-0xa2,0xdb,0xff,0xff,0xc0,0xfe,0x00,0x64,0xa2,0xdb,0x3d,0x60,0x9a,0x62,0xa2,0xd3,
-0xff,0xff,0x00,0xa0,0xff,0xff,0x0c,0x03,0xcc,0x84,0xa2,0xdb,0x09,0x02,0x3d,0x60,
-0x96,0x63,0xbd,0xd1,0x18,0x60,0xe6,0x64,0xa0,0xd3,0xff,0xff,0xd0,0x84,0xa3,0xdb,
-0x32,0x44,0x01,0x2a,0x30,0x00,0x69,0x60,0x4e,0x62,0xa2,0xd3,0xff,0xff,0xff,0xa0,
-0xff,0xff,0x3b,0x02,0x69,0x60,0x54,0x61,0xa1,0xd3,0xff,0xff,0xcc,0x84,0xff,0xff,
-0xa1,0xdb,0x33,0x02,0x20,0x40,0x40,0x2a,0x03,0x00,0x01,0x64,0xa1,0xdb,0x2d,0x00,
-0xff,0x64,0xa1,0xdb,0x7f,0xf3,0xff,0xff,0x01,0xa4,0x7f,0xfb,0xf2,0xa0,0xff,0xff,
-0x02,0x06,0x01,0x64,0x7f,0xfb,0x60,0x41,0x20,0x44,0x40,0xbc,0x40,0x40,0x24,0x60,
-0xd0,0x64,0x9b,0xfb,0x61,0x44,0x02,0x7f,0x99,0xfb,0x05,0x64,0x9a,0xfb,0xff,0xff,
-0xdf,0xfe,0x19,0xff,0x12,0x00,0x95,0xf3,0x65,0xf3,0x00,0xa0,0xff,0xff,0x0d,0x03,
-0x02,0x2a,0x0b,0x00,0x16,0x60,0xda,0x62,0xa2,0xd3,0x7f,0xf1,0xff,0xff,0xd0,0x80,
-0xff,0xff,0x03,0x03,0x20,0x40,0x40,0x2a,0xd8,0x00,0x67,0x60,0xf6,0x62,0xa2,0xd3,
-0xff,0xff,0x00,0xa0,0xcc,0x84,0x44,0x03,0xa2,0xdb,0x42,0x02,0x95,0xf3,0xff,0xff,
-0x60,0x40,0x00,0x36,0x09,0x00,0x02,0x64,0x08,0x60,0x2c,0x64,0xa0,0xdb,0x8a,0xff,
-0x80,0x60,0x00,0x75,0x88,0xff,0x12,0x00,0x01,0x64,0xe2,0xfb,0xe3,0xf3,0xff,0xff,
-0x60,0x40,0x00,0x36,0x0b,0x00,0x99,0xff,0x3c,0x44,0x40,0xbc,0x00,0x7f,0x40,0x5c,
-0x98,0xff,0x69,0x60,0x44,0x62,0x80,0x60,0x61,0x64,0xa2,0xdb,0x22,0xf3,0xff,0xff,
-0x01,0xb4,0xff,0xff,0x06,0x03,0x68,0x60,0x06,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,
-0xa2,0xdb,0xe1,0xf3,0xe4,0xf1,0x60,0x47,0xe0,0x84,0xe0,0x84,0xc0,0x84,0x70,0x45,
-0xd4,0x80,0xff,0xff,0x0d,0x04,0x60,0x50,0x60,0x45,0x69,0x60,0x44,0x62,0x80,0x60,
-0x31,0x64,0xa2,0xdb,0x69,0x60,0x46,0x62,0x65,0x44,0xa2,0xdb,0x00,0x64,0xe5,0xfb,
-0x67,0x60,0xf8,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0xcc,0x84,0x1b,0x03,0xa2,0xdb,
-0x19,0x02,0x00,0x64,0xe2,0xfb,0xe3,0xf3,0xff,0xff,0x60,0x40,0x00,0x36,0x0b,0x00,
-0x99,0xff,0x3c,0x44,0xbf,0xb4,0x00,0x7f,0x40,0x5c,0x98,0xff,0x69,0x60,0x44,0x62,
-0x80,0x60,0x60,0x64,0xa2,0xdb,0x67,0x60,0xf6,0x63,0xe1,0xf3,0x80,0xf3,0x60,0x45,
-0xd4,0x84,0xa3,0xdb,0x68,0x60,0x04,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0xcc,0x84,
-0x10,0x03,0xa2,0xdb,0x04,0x60,0x00,0x65,0x70,0x44,0xc4,0x84,0x60,0x50,0x60,0x45,
-0x69,0x60,0x44,0x62,0x80,0x60,0x32,0x64,0xa2,0xdb,0x69,0x60,0x46,0x62,0x65,0x44,
-0xa2,0xdb,0xe3,0xf3,0xe1,0xf3,0x00,0xa0,0x00,0xa0,0x32,0x02,0x27,0x02,0x28,0x44,
-0xcc,0x84,0x40,0x48,0x2d,0x02,0x67,0x60,0xca,0x62,0xa2,0xd3,0xff,0xff,0xff,0xff,
-0x03,0x22,0x03,0x00,0x01,0x2a,0x1a,0x00,0x07,0x00,0x67,0x60,0xc6,0x62,0xa2,0xd3,
-0xff,0xff,0x01,0xac,0xa2,0xdb,0x12,0x03,0x99,0xff,0x3c,0x44,0x40,0xbc,0x00,0x7f,
-0x40,0x5c,0x98,0xff,0xcb,0xf3,0x0a,0x65,0xfc,0xa0,0xfd,0xa0,0x10,0x03,0x0f,0x03,
-0xfb,0xa0,0xff,0xff,0x0c,0x03,0x01,0x60,0xf4,0x65,0x09,0x00,0x99,0xff,0x3c,0x44,
-0xbf,0xb4,0x40,0x5c,0x67,0x60,0xc4,0x62,0xa2,0xd3,0x98,0xff,0x60,0x45,0x45,0x48,
-0x2b,0x44,0xcc,0x84,0x40,0x4b,0x40,0x02,0x03,0x60,0xe8,0x64,0x40,0x4b,0x2c,0x44,
-0xcc,0x84,0x40,0x4c,0x05,0x02,0x1e,0x64,0x4b,0xf3,0x40,0x4c,0xdc,0x84,0x4b,0xfb,
-0xcb,0xf3,0xff,0xff,0xfc,0xa0,0xfd,0xa0,0x07,0x03,0x06,0x03,0xfb,0xa0,0xff,0xff,
-0x03,0x03,0x05,0x60,0xdc,0x64,0x24,0x00,0x5a,0x60,0xf4,0x63,0xa3,0xd1,0x5a,0x60,
-0x6c,0x62,0xa2,0xd3,0xff,0xff,0xc0,0x83,0x67,0x60,0xbe,0x62,0xa2,0xd1,0xa2,0xdd,
-0xd3,0x84,0xff,0xff,0xfe,0x27,0x13,0x00,0x01,0x27,0x0f,0x00,0xc0,0x26,0x0b,0x00,
-0x30,0x26,0x07,0x00,0x0f,0x26,0x03,0x00,0x03,0x60,0xde,0x64,0x09,0x00,0xf0,0x64,
-0x07,0x00,0x73,0x64,0x05,0x00,0x38,0x64,0x03,0x00,0x1e,0x64,0x01,0x00,0x0f,0x64,
-0x60,0x5c,0x67,0x60,0xc4,0x62,0xa2,0xd9,0x01,0x60,0x3a,0x61,0xa1,0xd3,0x61,0x43,
-0x00,0xa8,0x60,0x41,0x03,0x02,0xf8,0x60,0x89,0x78,0xff,0xff,0x59,0xd3,0x00,0x66,
-0x00,0xa8,0xcc,0x84,0x02,0x03,0xa1,0xdb,0xf6,0x00,0x49,0xd3,0xa3,0xdb,0x00,0xa8,
-0x60,0x43,0x5b,0xd3,0x06,0x03,0x00,0xa8,0xcc,0x84,0x02,0x02,0x01,0x66,0x01,0x00,
-0xa3,0xdb,0x06,0xa1,0xa1,0xd3,0x59,0xd1,0x60,0x45,0xa5,0xd3,0x59,0xd1,0xb0,0x84,
-0xa5,0xdb,0x64,0x47,0x06,0x36,0xcd,0xfe,0x07,0x37,0xd9,0xfe,0x66,0x40,0x00,0x3a,
-0xd3,0x00,0xf8,0x60,0x89,0x78,0xff,0xff,0x01,0x60,0x3a,0x61,0x00,0x64,0xa1,0xdb,
-0x25,0x60,0x40,0x78,0xff,0xff,0x27,0x60,0xc1,0x64,0x40,0x41,0x44,0x42,0x24,0x00,
-0x01,0x60,0x3a,0x66,0xa6,0xd3,0x04,0xa1,0x60,0x43,0xa1,0xd3,0xc9,0x81,0x60,0x45,
-0x00,0xbb,0xa1,0xdb,0xbe,0xd3,0x09,0x03,0xd4,0x84,0x9c,0x84,0xdc,0x84,0xff,0xff,
-0x04,0x0e,0xa3,0xd1,0x63,0x46,0x64,0x43,0xf2,0x00,0x9c,0x84,0xdc,0x85,0x49,0xdd,
-0x61,0x44,0x00,0xbb,0xa6,0xdb,0x02,0x03,0x65,0x44,0xbe,0xdb,0x25,0x60,0x40,0x78,
-0xff,0xff,0x25,0x60,0x40,0x64,0x40,0x41,0x01,0x60,0x3a,0x66,0xa6,0xd3,0xff,0xff,
-0x00,0xa8,0xd0,0x80,0x10,0x03,0x02,0x03,0x60,0x46,0xf8,0x00,0x58,0xd3,0xa4,0xd3,
-0x60,0x45,0x00,0x63,0xa4,0xdd,0x58,0xd3,0x02,0xa8,0xc4,0x83,0x01,0x03,0xa2,0xdd,
-0x62,0x44,0xc8,0x84,0xa6,0xdb,0x21,0x58,0x22,0x41,0x28,0x60,0xca,0x63,0x00,0x64,
-0xa3,0xdb,0x06,0xa3,0x1f,0x60,0x3a,0x64,0xbd,0xdb,0xbd,0xdb,0x06,0x64,0xa3,0xdb,
-0x1f,0x60,0x38,0x62,0x59,0x60,0x31,0x64,0xa2,0xdb,0x1f,0x60,0x0a,0x62,0x52,0x60,
-0x79,0x64,0xa2,0xdb,0x2f,0x58,0xff,0xff,0x28,0x60,0xb2,0x63,0x00,0x64,0xa3,0xdb,
-0x06,0xa3,0x1f,0x60,0x32,0x64,0xbd,0xdb,0xbd,0xdb,0x06,0x64,0xa3,0xdb,0x1f,0x60,
-0x30,0x62,0x5c,0x60,0x73,0x64,0xa2,0xdb,0x1f,0x60,0x0a,0x62,0x52,0x60,0x79,0x64,
-0xa2,0xdb,0x2f,0x58,0xff,0xff,0x00,0x60,0x7b,0x66,0x32,0x64,0x61,0xfb,0x1e,0x60,
-0xb2,0x64,0xa0,0xd3,0x03,0xfa,0x0f,0x4e,0x00,0x60,0x3c,0x61,0x41,0x4d,0x40,0xa1,
-0xa2,0xff,0x19,0x60,0x58,0x4f,0xaa,0x78,0xff,0xff,0xa3,0xff,0x06,0x03,0x2d,0x41,
-0x19,0x60,0x58,0x4f,0xcc,0x78,0xff,0xff,0x08,0xfe,0x0e,0x4f,0x66,0x44,0x7b,0xfb,
-0x00,0x64,0x28,0xfa,0x01,0x60,0x48,0x64,0x29,0xfa,0x00,0x64,0x38,0xfa,0x28,0x60,
-0xbe,0x63,0x00,0x64,0xa3,0xdb,0x06,0xa3,0x1f,0x60,0x36,0x64,0xbd,0xdb,0x02,0x64,
-0xbd,0xdb,0x06,0x64,0xa3,0xdb,0x1f,0x60,0x34,0x62,0x64,0x60,0xa1,0x64,0xa2,0xdb,
-0x1f,0x60,0x10,0x62,0x64,0x60,0xac,0x64,0xa2,0xdb,0x2f,0x58,0xff,0xff,0x0f,0x4e,
-0x00,0x60,0x48,0x61,0x41,0x4d,0x40,0xa1,0xa2,0xff,0x19,0x60,0x58,0x4f,0xaa,0x78,
-0xff,0xff,0xa3,0xff,0x06,0x03,0x2d,0x41,0x19,0x60,0x58,0x4f,0xcc,0x78,0xff,0xff,
-0x08,0xfe,0x0e,0x4f,0x66,0x44,0x7a,0xfb,0x08,0x64,0x28,0xfa,0xff,0x60,0xff,0x64,
-0x2b,0xfa,0x2c,0xfa,0x2d,0xfa,0xff,0xff,0x31,0xfa,0x32,0xfa,0x33,0xfa,0x12,0x60,
-0x20,0x64,0x0e,0xfa,0x28,0x60,0x82,0x63,0x00,0x64,0xa3,0xdb,0x06,0xa3,0x1f,0x60,
-0x16,0x64,0xbd,0xdb,0x04,0x64,0xbd,0xdb,0x06,0x64,0xa3,0xdb,0x1f,0x60,0x14,0x62,
-0x56,0x60,0x70,0x64,0xa2,0xdb,0x28,0x60,0x8e,0x63,0x00,0x64,0xa3,0xdb,0x06,0xa3,
-0x1f,0x60,0x1a,0x64,0xbd,0xdb,0x08,0x64,0xbd,0xdb,0x06,0x64,0xa3,0xdb,0x1f,0x60,
-0x18,0x62,0x56,0x60,0x7b,0x64,0xa2,0xdb,0x1f,0x60,0x08,0x62,0x56,0x60,0x60,0x64,
-0xa2,0xdb,0x2f,0x58,0xff,0xff,0x28,0x60,0x9a,0x63,0x00,0x64,0xa3,0xdb,0x06,0xa3,
-0x1f,0x60,0x2a,0x64,0xbd,0xdb,0xbd,0xdb,0x06,0x64,0xa3,0xdb,0x1f,0x60,0x28,0x62,
-0x52,0x60,0x93,0x64,0xa2,0xdb,0x1f,0x60,0x0a,0x62,0x52,0x60,0x79,0x64,0xa2,0xdb,
-0x2f,0x58,0xff,0xff,0x00,0x64,0x40,0x40,0x0f,0x4e,0x00,0x60,0x6c,0x61,0x41,0x4d,
-0x40,0xa1,0xa2,0xff,0x19,0x60,0x58,0x4f,0xaa,0x78,0xff,0xff,0xa3,0xff,0x06,0x03,
-0x2d,0x41,0x19,0x60,0x58,0x4f,0xcc,0x78,0xff,0xff,0x08,0xfe,0x0e,0x4f,0x66,0x44,
-0x79,0xfb,0x0f,0x4e,0x00,0x60,0x6c,0x61,0x41,0x4d,0x40,0xa1,0xa2,0xff,0x19,0x60,
-0x58,0x4f,0xaa,0x78,0xff,0xff,0xa3,0xff,0x06,0x03,0x2d,0x41,0x19,0x60,0x58,0x4f,
-0xcc,0x78,0xff,0xff,0x08,0xfe,0x0e,0x4f,0x66,0x44,0x78,0xfb,0x0f,0x4e,0x00,0x60,
-0x3c,0x61,0x41,0x4d,0x40,0xa1,0xa2,0xff,0x19,0x60,0x58,0x4f,0xaa,0x78,0xff,0xff,
-0xa3,0xff,0x06,0x03,0x2d,0x41,0x19,0x60,0x58,0x4f,0xcc,0x78,0xff,0xff,0x08,0xfe,
-0x0e,0x4f,0x66,0x44,0x77,0xfb,0x08,0x64,0x28,0xfa,0xf0,0x60,0x20,0x64,0x0e,0xfa,
-0x00,0x64,0x38,0xfa,0x00,0x60,0x90,0x64,0x29,0xfa,0x0f,0x4e,0x00,0x60,0xab,0x61,
-0x41,0x4d,0x40,0xa1,0xa2,0xff,0x19,0x60,0x58,0x4f,0xaa,0x78,0xff,0xff,0xa3,0xff,
-0x06,0x03,0x2d,0x41,0x19,0x60,0x58,0x4f,0xcc,0x78,0xff,0xff,0x08,0xfe,0x0e,0x4f,
-0x66,0x44,0x76,0xfb,0x08,0x64,0x28,0xfa,0x18,0x60,0x20,0x64,0x0e,0xfa,0x00,0x60,
-0x80,0x64,0x29,0xfa,0x00,0x64,0x19,0xfa,0x1f,0x60,0x0c,0x62,0x43,0x60,0x73,0x64,
-0xa2,0xdb,0x2f,0x58,0xff,0xff,0x1f,0x60,0x04,0x62,0x2c,0x60,0x13,0x64,0xa2,0xdb,
-0x28,0x60,0xd6,0x62,0x00,0x64,0xa2,0xdb,0x06,0xa2,0x1f,0x60,0x1e,0x64,0xa2,0xdb,
-0x06,0x64,0x5a,0xdb,0x5a,0xdb,0x28,0x60,0xe2,0x62,0x00,0x64,0xa2,0xdb,0x06,0xa2,
-0x1f,0x60,0x22,0x64,0xa2,0xdb,0x06,0x64,0x5a,0xdb,0x5a,0xdb,0x28,0x60,0xee,0x62,
-0x00,0x64,0xa2,0xdb,0x06,0xa2,0x1f,0x60,0x26,0x64,0xa2,0xdb,0x06,0x64,0x5a,0xdb,
-0x5a,0xdb,0xab,0xf1,0x28,0x60,0xf2,0x62,0xa2,0xd9,0x1f,0x60,0x1c,0x62,0x2d,0x60,
-0x0a,0x64,0xa2,0xdb,0x1f,0x60,0x20,0x62,0x2d,0x60,0x15,0x64,0xa2,0xdb,0x1f,0x60,
-0x24,0x62,0x2d,0x60,0x20,0x64,0xa2,0xdb,0x1e,0x60,0xd2,0x62,0x00,0x60,0x02,0x64,
-0xa2,0xdb,0x29,0x60,0x80,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,
-0xd0,0x62,0x00,0x64,0xa2,0xdb,0x03,0x64,0x5e,0xfb,0x2c,0x60,0x58,0x4e,0xfe,0x78,
-0xff,0xff,0x1e,0x60,0xd0,0x62,0xa2,0xd1,0xff,0x60,0x8f,0x64,0xa0,0x84,0xa2,0xdb,
-0xac,0xf1,0x28,0x60,0xe6,0x62,0xa2,0xd9,0x3c,0x60,0xd6,0x62,0x28,0x60,0xe2,0x64,
-0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x1e,0x60,0xd2,0x62,0x00,0x60,
-0x74,0x64,0xa2,0xdb,0x29,0x60,0xa9,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,
-0x67,0x60,0xf0,0x62,0xa2,0xd3,0xff,0xff,0x60,0x40,0x02,0x2a,0x03,0x00,0x2a,0x60,
-0xe1,0x78,0xff,0xff,0x1e,0x60,0xd0,0x62,0xa2,0xd1,0x00,0x60,0x04,0x64,0xa0,0x80,
-0x9c,0x84,0x05,0x03,0xa0,0x84,0xa2,0xdb,0x2c,0x60,0x13,0x78,0xff,0xff,0x00,0x60,
-0x40,0x64,0xa0,0x80,0x9c,0x84,0x03,0x03,0xa0,0x84,0xa2,0xdb,0xd6,0x00,0x00,0x60,
-0x20,0x64,0xa0,0x80,0x9c,0x84,0x0e,0x03,0xa0,0x84,0xa2,0xdb,0x01,0x65,0x2e,0x60,
-0x58,0x4e,0xb6,0x78,0xff,0xff,0xff,0x60,0xf7,0x65,0x5e,0xf3,0xff,0xff,0xa4,0x84,
-0xa2,0xdb,0xc3,0x00,0x00,0x60,0x10,0x64,0xa0,0x80,0x9c,0x84,0xc7,0x03,0xa0,0x84,
-0xa2,0xdb,0x1e,0x60,0xb2,0x63,0xa3,0xd1,0x67,0x60,0x70,0x65,0xa5,0xd3,0xff,0xff,
-0xd0,0x80,0xff,0xff,0x14,0x0d,0xad,0xf3,0xff,0xff,0xc0,0x84,0xa5,0xdb,0x67,0x60,
-0x6e,0x62,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x67,0x60,0x7c,0x62,0xa2,0xd3,
-0xff,0xff,0xdc,0x84,0xf8,0xa0,0xff,0xff,0x01,0x04,0x08,0x64,0xa2,0xdb,0x67,0x60,
-0x72,0x65,0xa5,0xd1,0x58,0xf3,0xff,0xff,0xd0,0x80,0x60,0x41,0x0d,0x06,0xa5,0xdb,
-0x67,0x60,0x78,0x63,0x67,0x60,0x76,0x65,0xa5,0xd1,0x61,0x44,0xd0,0x84,0xff,0xff,
-0x01,0x05,0x00,0x64,0xa3,0xdb,0x16,0x00,0x67,0x60,0x78,0x63,0xa3,0xd1,0x58,0xf3,
-0xff,0xff,0xd0,0x80,0x60,0x41,0x0e,0x05,0xa5,0xdb,0x67,0x60,0x76,0x65,0xa5,0xd1,
-0x61,0x44,0xd0,0x84,0xff,0xff,0x01,0x05,0x00,0x64,0xa3,0xdb,0x67,0x60,0x7a,0x62,
-0x01,0x64,0xa2,0xdb,0x67,0x60,0x7a,0x63,0xbd,0xd3,0xff,0xff,0x00,0xa0,0xff,0xff,
-0x2d,0x03,0xbd,0xd3,0xa3,0xd1,0xff,0xff,0xd0,0x80,0xff,0xff,0x27,0x04,0x67,0x60,
-0x6e,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0xff,0xff,0x20,0x03,0x62,0x60,0x48,0x62,
-0x06,0x64,0xa2,0xdb,0x67,0x60,0x7c,0x63,0x00,0x64,0xbd,0xdb,0xa3,0xd3,0xff,0xff,
-0xe0,0x84,0xf8,0xa0,0xff,0xff,0x01,0x04,0x08,0x64,0xa3,0xdb,0x67,0x60,0x76,0x62,
-0xa2,0xd3,0xff,0xff,0xe8,0x84,0xe8,0x84,0xc4,0xfb,0x67,0x60,0x68,0x64,0xa0,0xd3,
-0xff,0xff,0xdc,0x84,0xa2,0xdb,0x2b,0x60,0x30,0x78,0xff,0xff,0xc2,0xf3,0x58,0xf1,
-0xff,0xff,0xd0,0x80,0xff,0xff,0x0d,0x04,0x62,0x60,0x48,0x62,0x06,0x64,0xa2,0xdb,
-0x5a,0x60,0x36,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x2b,0x60,0x30,0x78,
-0xff,0xff,0x5a,0x60,0x1c,0x62,0xa2,0xd1,0xc3,0xf3,0xff,0xff,0xd0,0x80,0xff,0xff,
-0x0d,0x07,0x62,0x60,0x48,0x62,0x02,0x64,0xa2,0xdb,0x5a,0x60,0x36,0x64,0xa0,0xd3,
-0xff,0xff,0xdc,0x84,0xa2,0xdb,0x2b,0x60,0x30,0x78,0xff,0xff,0x67,0x60,0x3a,0x62,
-0xa2,0xd3,0xff,0xff,0x00,0xa0,0x60,0x45,0x0b,0x03,0x1e,0x60,0xb4,0x62,0xa2,0xd3,
-0xff,0xff,0xd4,0x80,0xff,0xff,0x35,0x04,0x67,0x60,0x3a,0x62,0x00,0x64,0xa2,0xdb,
-0x67,0x60,0x38,0x62,0xa2,0xd3,0xff,0xff,0xff,0xa0,0xff,0xff,0x2a,0x02,0x67,0x60,
-0x3c,0x62,0xa2,0xd1,0x67,0x60,0x3e,0x63,0xa3,0xd3,0xff,0xff,0xd0,0x84,0xfe,0xa0,
-0xff,0xff,0x1f,0x04,0xe0,0x84,0xe0,0x84,0xd0,0x80,0xff,0xff,0x1a,0x04,0x67,0x60,
-0x3c,0x62,0x64,0x44,0x01,0xa4,0xa2,0xdb,0x1e,0x60,0xb4,0x62,0x67,0x60,0x3a,0x63,
-0xa2,0xd3,0xff,0xff,0x03,0xa4,0xa3,0xdb,0x62,0x60,0x48,0x62,0x04,0x64,0xa2,0xdb,
-0x5a,0x60,0x38,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x2b,0x60,0x30,0x78,
-0xff,0xff,0x67,0x60,0x36,0x62,0xa2,0xd1,0x1e,0x60,0xb4,0x62,0xa2,0xd3,0xff,0xff,
-0xd0,0x80,0xff,0xff,0x0d,0x04,0x62,0x60,0x48,0x62,0x04,0x64,0xa2,0xdb,0x5a,0x60,
-0x3a,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x2b,0x60,0x30,0x78,0xff,0xff,
-0x67,0x60,0xf0,0x62,0xa2,0xd3,0xff,0xff,0x60,0x40,0x03,0x22,0x11,0x00,0x60,0x45,
-0xfd,0xb4,0xa2,0xdb,0x20,0x44,0xb4,0x84,0x40,0x40,0x62,0x60,0x48,0x62,0x10,0x64,
-0xa2,0xdb,0x5a,0x60,0x3c,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x37,0x00,
-0x1e,0x60,0xd2,0x62,0x00,0x60,0x64,0x64,0xa2,0xdb,0x2b,0x60,0x04,0x64,0x5a,0xdb,
-0xcf,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,0xd0,0x62,0xa2,0xd1,0x00,0x60,0x04,0x64,
-0xa0,0x80,0x9c,0x84,0x05,0x03,0xa0,0x84,0xa2,0xdb,0x2c,0x60,0x13,0x78,0xff,0xff,
-0x00,0x60,0x40,0x64,0xa0,0x80,0x9c,0x84,0x05,0x03,0xa0,0x84,0xa2,0xdb,0x29,0x60,
-0xe2,0x78,0xff,0xff,0x00,0x60,0x20,0x64,0xa0,0x80,0x9c,0x84,0xe2,0x03,0xa0,0x84,
-0xa2,0xdb,0x01,0x65,0x2e,0x60,0x58,0x4e,0xb6,0x78,0xff,0xff,0xff,0x60,0xf7,0x65,
-0x5e,0xf3,0xff,0xff,0xa4,0x84,0xa2,0xdb,0x29,0x60,0xe2,0x78,0xff,0xff,0xad,0xf1,
-0x28,0x60,0xe6,0x62,0xa2,0xd9,0x2b,0x60,0x3a,0x64,0x7c,0xfb,0x2c,0x60,0x48,0x78,
-0xff,0xff,0x3c,0x60,0xd2,0x62,0x28,0x60,0xee,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,
-0xff,0xff,0x1d,0xff,0x1e,0x60,0xd0,0x62,0xa2,0xd1,0xff,0x60,0xdf,0x64,0xa0,0x84,
-0xa2,0xdb,0x1e,0x60,0xb2,0x65,0x67,0x60,0x6e,0x63,0x00,0x64,0xbd,0xdb,0xa5,0xd3,
-0xa3,0xdb,0x62,0x60,0x48,0x62,0xa2,0xd3,0xff,0xff,0xf0,0xa0,0xfc,0xa0,0x08,0x03,
-0x13,0x02,0x67,0x60,0x38,0x62,0xa2,0xd3,0xff,0xff,0xff,0xa0,0xff,0xff,0x0c,0x03,
-0x3c,0x60,0xd2,0x62,0x28,0x60,0xe2,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,
-0x1d,0xff,0x29,0x60,0x8a,0x78,0xff,0xff,0x67,0x60,0x7a,0x63,0xa3,0xd3,0xff,0xff,
-0x60,0x40,0x00,0x36,0x07,0x00,0x58,0xf3,0x1e,0x65,0xd4,0x80,0xff,0xff,0x02,0x04,
-0x00,0x64,0xa3,0xdb,0x88,0xf1,0x28,0x60,0x00,0x63,0xd3,0x80,0xc4,0xf1,0x25,0x03,
-0x00,0x64,0xc4,0xfb,0x67,0x60,0x74,0x65,0x58,0xf3,0xa5,0xdb,0xa3,0xd3,0xc0,0x85,
-0xd4,0x80,0x5b,0xd3,0x1a,0x04,0x60,0x43,0x63,0x42,0x06,0x65,0x46,0xd3,0x5a,0xd3,
-0x40,0x48,0x5a,0xd3,0x40,0x4c,0x40,0x4d,0x81,0xf3,0x28,0x45,0x2e,0x57,0x7e,0x00,
-0x00,0x10,0xd4,0x80,0x5a,0xd3,0x09,0x02,0x2c,0x45,0xd4,0x80,0x5a,0xd3,0x05,0x02,
-0x2d,0x45,0xd4,0x80,0x63,0x42,0x01,0x02,0x03,0x00,0x2c,0x60,0x0a,0x78,0xff,0xff,
-0xc2,0xf1,0x58,0xf3,0xff,0xff,0xd0,0x80,0xff,0xff,0x14,0x06,0x5a,0x60,0x1c,0x62,
-0xa2,0xd3,0xc3,0xf1,0xff,0xff,0xd0,0x80,0xff,0xff,0x0c,0x05,0x3c,0x60,0xd2,0x62,
-0x28,0x60,0xe2,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x29,0x60,
-0x8a,0x78,0xff,0xff,0x1e,0x60,0xd2,0x62,0x00,0x60,0x74,0x64,0xa2,0xdb,0x2b,0x60,
-0xcb,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,0xd0,0x62,0xa2,0xd1,
-0x00,0x60,0x04,0x64,0xa0,0x80,0x9c,0x84,0x05,0x03,0xa0,0x84,0xa2,0xdb,0x2c,0x60,
-0x13,0x78,0xff,0xff,0x00,0x60,0x40,0x64,0xa0,0x80,0x9c,0x84,0x05,0x03,0xa0,0x84,
-0xa2,0xdb,0x2b,0x60,0x6d,0x78,0xff,0xff,0x00,0x60,0x20,0x64,0xa0,0x80,0x9c,0x84,
-0x10,0x03,0xa0,0x84,0xa2,0xdb,0x01,0x65,0x2e,0x60,0x58,0x4e,0xb6,0x78,0xff,0xff,
-0xff,0x60,0xf7,0x65,0x5e,0xf3,0xff,0xff,0xa4,0x84,0xa2,0xdb,0x2b,0x60,0x6d,0x78,
-0xff,0xff,0x00,0x60,0x10,0x64,0xa0,0x80,0x9c,0x84,0xcd,0x03,0xa0,0x84,0xa2,0xdb,
-0x3c,0x60,0xd2,0x62,0x28,0x60,0xee,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,
-0x1d,0xff,0x2b,0x60,0x30,0x78,0xff,0xff,0x1e,0x60,0xe2,0x62,0xa2,0xd1,0x00,0x60,
-0x20,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x3c,0x60,0xd2,0x62,0x28,0x60,
-0xd6,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x3c,0x60,0xd2,0x62,
-0x28,0x60,0xe2,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x3c,0x60,
-0xd2,0x62,0x28,0x60,0xee,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,
-0x1e,0x60,0xd0,0x62,0x00,0x64,0xa2,0xdb,0x5a,0xdb,0x00,0x64,0x5e,0xfb,0x1e,0x60,
-0xc8,0x62,0xa2,0xd1,0x08,0x60,0x00,0x64,0xb0,0x84,0xa2,0xdb,0xcf,0xfe,0x1e,0x60,
-0xd2,0x62,0x00,0x60,0x02,0x64,0xa2,0xdb,0x29,0x60,0x80,0x64,0x5a,0xdb,0xcf,0xfe,
-0x2f,0x58,0xff,0xff,0x1e,0x60,0xd2,0x62,0x80,0x60,0x00,0x64,0xa2,0xdb,0x2c,0x60,
-0x51,0x64,0x5a,0xdb,0xcf,0xfe,0x8c,0xf3,0xff,0xff,0xff,0xa0,0x02,0x64,0x2a,0x02,
-0x8c,0xfb,0x1e,0x60,0xd0,0x62,0xa2,0xd1,0x7f,0x60,0xff,0x64,0xa0,0x84,0xa2,0xdb,
-0x1e,0x60,0xd2,0x62,0x80,0x60,0x00,0x64,0xa2,0xdb,0x2c,0x60,0x6a,0x64,0x5a,0xdb,
-0xcf,0xfe,0xc1,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,0xd0,0x62,0xa2,0xd1,0x7f,0x60,
-0xff,0x64,0xa0,0x84,0xa2,0xdb,0x8c,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0xf2,0x02,
-0x1e,0x60,0xd0,0x62,0xa2,0xd1,0x7f,0x60,0xff,0x61,0xa1,0x84,0x5a,0xd1,0x4a,0xdb,
-0xa1,0x84,0x5a,0xdb,0x20,0x44,0x40,0x2a,0x10,0x00,0x20,0xbc,0x40,0x40,0x11,0x60,
-0x48,0x65,0x2f,0x60,0x58,0x4e,0x05,0x78,0xff,0xff,0x3a,0x60,0x58,0x4e,0x14,0x78,
-0xff,0xff,0x2f,0x60,0x58,0x4e,0x24,0x78,0xff,0xff,0x59,0x60,0xa0,0x64,0x5b,0xfb,
-0x1e,0x60,0xd0,0x62,0xa2,0xd1,0xef,0x60,0xff,0x64,0xa0,0x84,0xa2,0xdb,0x0f,0x4e,
-0x52,0x60,0x58,0x4f,0x9e,0x78,0xff,0xff,0x0e,0x4f,0x1e,0x60,0xd2,0x62,0x10,0x60,
-0x00,0x64,0xa2,0xdb,0x2c,0x60,0xae,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,
-0x20,0x44,0x20,0x2a,0x10,0x00,0xdf,0xb4,0x40,0x40,0x01,0x60,0x48,0x65,0x2f,0x60,
-0x58,0x4e,0x05,0x78,0xff,0xff,0x3a,0x60,0x58,0x4e,0x14,0x78,0xff,0xff,0x2f,0x60,
-0x58,0x4e,0x24,0x78,0xff,0xff,0x3c,0x60,0xd6,0x62,0x28,0x60,0xe2,0x64,0xa2,0xdb,
-0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x1e,0x60,0xd0,0x62,0xa2,0xd1,0xef,0x60,
-0xef,0x64,0xa0,0x84,0xa2,0xdb,0x01,0x64,0x8c,0xfb,0xff,0xff,0xc1,0xfe,0x7c,0xf7,
-0xff,0xff,0xff,0xff,0x59,0xf1,0x28,0x44,0xd0,0x84,0x0f,0xa4,0x03,0x0e,0xe8,0x84,
-0xe8,0x84,0x04,0x00,0xe2,0xa4,0xe8,0x84,0xe8,0x87,0xf0,0xbf,0xc0,0x84,0xa2,0xdb,
-0x2e,0x58,0xff,0xff,0x5a,0xf1,0x28,0x44,0xd0,0x84,0x1f,0xa4,0x06,0x0e,0xe8,0x84,
-0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0x07,0x00,0xc2,0xa4,0xe8,0x84,0xe8,0x84,
-0xe8,0x84,0xe8,0x84,0xe8,0x87,0xf8,0xbf,0xc0,0x84,0xa2,0xdb,0x2e,0x58,0xff,0xff,
-0x5a,0xf1,0x59,0xf3,0x64,0x45,0xd4,0x84,0x80,0x65,0xc4,0x87,0x01,0x05,0x00,0x64,
-0xff,0xb4,0x58,0xfb,0x2e,0x58,0xff,0xff,0x1e,0x60,0xd0,0x62,0xa2,0xd1,0x00,0x60,
-0x08,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,
-0xd0,0x62,0xa2,0xd1,0x00,0x60,0x10,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,
-0x2f,0x58,0xff,0xff,0x1e,0x60,0xd0,0x62,0xa2,0xd1,0x00,0x60,0x20,0x64,0xb0,0x84,
-0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x2e,0x60,0xa3,0x78,0xff,0xff,
-0xcb,0xf3,0xff,0xff,0x60,0x40,0x03,0x36,0x30,0x00,0x1e,0x60,0xd2,0x62,0xa2,0xd3,
-0xff,0xff,0x60,0x40,0x40,0x22,0xf1,0x00,0x67,0x60,0x38,0x62,0xa2,0xd3,0xff,0xff,
-0xff,0xa0,0xff,0xff,0x11,0x02,0x26,0x46,0x00,0xf4,0x57,0x60,0x58,0x4e,0xb8,0x78,
-0xff,0xff,0x67,0x60,0x3e,0x62,0xa2,0xd9,0x67,0x60,0x3c,0x63,0xa3,0xd3,0xff,0xff,
-0xd0,0x80,0xff,0xff,0x01,0x06,0xa3,0xd9,0x5e,0xf3,0xff,0xff,0x60,0x40,0x04,0x26,
-0x06,0x00,0x58,0x60,0x58,0x4e,0xcb,0x78,0xff,0xff,0x65,0x44,0xe1,0xfb,0x00,0x65,
-0x2e,0x60,0x58,0x4e,0xb6,0x78,0xff,0xff,0x09,0x00,0x6d,0xf3,0xff,0xff,0x04,0xb4,
-0x04,0xbc,0x03,0x03,0x2e,0x60,0xa3,0x78,0xff,0xff,0x6d,0xfb,0x26,0x46,0x20,0xf2,
-0xa0,0x65,0x01,0x37,0x50,0x65,0x02,0x37,0x1e,0x65,0x03,0x37,0x0f,0x65,0x28,0x60,
-0xfa,0x63,0x00,0xf4,0x02,0xf2,0xff,0xff,0xd4,0x84,0xbd,0xdb,0x03,0xf2,0x01,0x05,
+0x62,0xfb,0x9a,0xf3,0xff,0xff,0x10,0xa4,0x9a,0xfb,0x5c,0xf3,0x10,0xa5,0x00,0xa0,
+0x73,0x41,0x40,0x03,0xd5,0x80,0xff,0xff,0x27,0x03,0x70,0x45,0xc4,0x85,0x02,0x60,
+0x58,0x64,0xc4,0x84,0x9a,0xf1,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,
+0xe8,0x84,0x40,0x4d,0xc0,0x84,0x60,0x41,0x73,0x45,0xd4,0x80,0xd0,0xf1,0x14,0x0d,
+0x64,0x44,0x00,0x36,0x27,0x00,0xe0,0x84,0xe0,0x84,0xe0,0x84,0xe0,0x84,0x61,0x45,
+0xc4,0x84,0x73,0x45,0xd4,0x80,0xff,0xff,0x07,0x0d,0x6a,0x60,0xd6,0x62,0xa2,0xd3,
+0xff,0xff,0xfe,0xa0,0xff,0xff,0x16,0x02,0xbd,0xf3,0xff,0xff,0xfd,0xa0,0xff,0xff,
+0x07,0x02,0x01,0x64,0x13,0xfb,0x00,0x64,0x5c,0xfb,0xc0,0xfe,0x13,0xfb,0x0a,0x00,
+0xd3,0xf1,0x2d,0x44,0xc0,0x84,0x70,0x45,0xd4,0x80,0xff,0xff,0x03,0x04,0x60,0x50,
+0x01,0x64,0xd4,0xfb,0x6a,0x60,0x0c,0x64,0xa0,0xd3,0xff,0xff,0x00,0xa0,0xcc,0x84,
+0x12,0x03,0xa2,0xdb,0x10,0x02,0xcf,0xf3,0x6a,0xf3,0x60,0x45,0x6b,0xf3,0xd4,0x80,
+0xd4,0x80,0x01,0x03,0x08,0x02,0x2b,0x60,0x48,0x62,0x80,0x64,0xa2,0xdb,0xff,0xff,
+0xc0,0xfe,0x00,0x64,0xa2,0xdb,0x40,0x60,0x1a,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,
+0xff,0xff,0x0c,0x03,0xcc,0x84,0xa2,0xdb,0x09,0x02,0x40,0x60,0x16,0x63,0xbd,0xd1,
+0x19,0x60,0x5e,0x64,0xa0,0xd3,0xff,0xff,0xd0,0x84,0xa3,0xdb,0x32,0x44,0x01,0x2a,
+0x30,0x00,0x6b,0x60,0x36,0x62,0xa2,0xd3,0xff,0xff,0xff,0xa0,0xff,0xff,0x3b,0x02,
+0x6b,0x60,0x3c,0x61,0xa1,0xd3,0xff,0xff,0xcc,0x84,0xff,0xff,0xa1,0xdb,0x33,0x02,
+0x20,0x40,0x40,0x2a,0x03,0x00,0x01,0x64,0xa1,0xdb,0x2d,0x00,0xff,0x64,0xa1,0xdb,
+0x73,0xf3,0xff,0xff,0x01,0xa4,0x73,0xfb,0xf2,0xa0,0xff,0xff,0x02,0x06,0x01,0x64,
+0x73,0xfb,0x60,0x41,0x20,0x44,0x40,0xbc,0x40,0x40,0x24,0x60,0x47,0x64,0x91,0xfb,
+0x61,0x44,0x02,0x7f,0x8f,0xfb,0x05,0x64,0x90,0xfb,0xff,0xff,0xdf,0xfe,0x19,0xff,
+0x12,0x00,0x89,0xf3,0x59,0xf3,0x00,0xa0,0xff,0xff,0x0d,0x03,0x02,0x2a,0x0b,0x00,
+0x17,0x60,0x52,0x62,0xa2,0xd3,0x73,0xf1,0xff,0xff,0xd0,0x80,0xff,0xff,0x03,0x03,
+0x20,0x40,0x40,0x2a,0xd8,0x00,0x6a,0x60,0xd6,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,
+0xcc,0x84,0x35,0x03,0xa2,0xdb,0x33,0x02,0x89,0xf3,0xff,0xff,0x60,0x40,0x00,0x36,
+0x09,0x00,0x02,0x7c,0x08,0x60,0x2c,0x64,0xa0,0xd9,0x8a,0xff,0x80,0x60,0x00,0x75,
+0x88,0xff,0x56,0x00,0x01,0x64,0xd1,0xfb,0xd2,0xf3,0xff,0xff,0x60,0x40,0x00,0x36,
+0x06,0x00,0x99,0xff,0x3c,0x44,0x40,0xbc,0x00,0x7f,0x40,0x5c,0x98,0xff,0x21,0xf3,
+0xff,0xff,0x01,0xb4,0xff,0xff,0x06,0x03,0x6a,0x60,0xe6,0x64,0xa0,0xd3,0xff,0xff,
+0xdc,0x84,0xa2,0xdb,0xd0,0xf3,0xd3,0xf1,0x60,0x47,0xe0,0x84,0xe0,0x84,0xc0,0x84,
+0x70,0x45,0xd4,0x80,0xff,0xff,0x03,0x04,0x60,0x50,0x00,0x64,0xd4,0xfb,0x6a,0x60,
+0xd8,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0xcc,0x84,0x16,0x03,0xa2,0xdb,0x14,0x02,
+0x00,0x64,0xd1,0xfb,0xd2,0xf3,0xff,0xff,0x60,0x40,0x00,0x36,0x06,0x00,0x99,0xff,
+0x3c,0x44,0xbf,0xb4,0x00,0x7f,0x40,0x5c,0x98,0xff,0x6a,0x60,0xd6,0x63,0xd0,0xf3,
+0x74,0xf3,0x60,0x45,0xd4,0x84,0xa3,0xdb,0x6a,0x60,0xe4,0x62,0xa2,0xd3,0xff,0xff,
+0x00,0xa0,0xcc,0x84,0x06,0x03,0xa2,0xdb,0x04,0x60,0x00,0x65,0x70,0x44,0xc4,0x84,
+0x60,0x50,0xd2,0xf3,0xd0,0xf3,0x00,0xa0,0x00,0xa0,0x02,0x03,0x32,0x02,0x27,0x00,
+0x28,0x44,0xcc,0x84,0x40,0x48,0x2d,0x02,0x6a,0x60,0xa2,0x62,0xa2,0xd3,0xff,0xff,
+0xff,0xff,0x03,0x22,0x03,0x00,0x01,0x2a,0x1a,0x00,0x07,0x00,0x6a,0x60,0x9e,0x62,
+0xa2,0xd3,0xff,0xff,0x01,0xac,0xa2,0xdb,0x12,0x03,0x99,0xff,0x3c,0x44,0x40,0xbc,
+0x00,0x7f,0x40,0x5c,0x98,0xff,0xbd,0xf3,0x0a,0x65,0xfc,0xa0,0xfd,0xa0,0x10,0x03,
+0x0f,0x03,0xfb,0xa0,0xff,0xff,0x0c,0x03,0x01,0x60,0xf4,0x65,0x09,0x00,0x99,0xff,
+0x3c,0x44,0xbf,0xb4,0x40,0x5c,0x6a,0x60,0x9c,0x62,0xa2,0xd3,0x98,0xff,0x60,0x45,
+0x45,0x48,0x2b,0x44,0xcc,0x84,0x40,0x4b,0x40,0x02,0x03,0x60,0xe8,0x64,0x40,0x4b,
+0x2c,0x44,0xcc,0x84,0x40,0x4c,0x05,0x02,0x1e,0x64,0x3e,0xf3,0x40,0x4c,0xdc,0x84,
+0x3e,0xfb,0xbd,0xf3,0xff,0xff,0xfc,0xa0,0xfd,0xa0,0x07,0x03,0x06,0x03,0xfb,0xa0,
+0xff,0xff,0x03,0x03,0x05,0x60,0xdc,0x64,0x24,0x00,0x63,0x60,0xe6,0x63,0xa3,0xd1,
+0x63,0x60,0x5e,0x62,0xa2,0xd3,0xff,0xff,0xc0,0x83,0x6a,0x60,0x96,0x62,0xa2,0xd1,
+0xa2,0xdd,0xd3,0x84,0xff,0xff,0xfe,0x27,0x13,0x00,0x01,0x27,0x0f,0x00,0xc0,0x26,
+0x0b,0x00,0x30,0x26,0x07,0x00,0x0f,0x26,0x03,0x00,0x03,0x60,0xde,0x64,0x09,0x00,
+0xf0,0x64,0x07,0x00,0x73,0x64,0x05,0x00,0x38,0x64,0x03,0x00,0x1e,0x64,0x01,0x00,
+0x0f,0x64,0x60,0x5c,0x6a,0x60,0x9c,0x62,0xa2,0xd9,0x01,0x60,0x26,0x61,0xa1,0xd3,
+0x61,0x43,0x00,0xa8,0x60,0x41,0x03,0x02,0xfb,0x60,0x27,0x78,0xff,0xff,0x59,0xd3,
+0x00,0x66,0x00,0xa8,0xcc,0x84,0x02,0x03,0xa1,0xdb,0xf6,0x00,0x49,0xd3,0xa3,0xdb,
+0x00,0xa8,0x60,0x43,0x5b,0xd3,0x06,0x03,0x00,0xa8,0xcc,0x84,0x02,0x02,0x01,0x66,
+0x01,0x00,0xa3,0xdb,0x06,0xa1,0xa1,0xd3,0x59,0xd1,0x60,0x45,0xa5,0xd3,0x59,0xd1,
+0xb0,0x84,0xa5,0xdb,0x64,0x47,0x06,0x36,0xcd,0xfe,0x07,0x37,0xd9,0xfe,0x66,0x40,
+0x00,0x3a,0xd3,0x00,0xfb,0x60,0x27,0x78,0xff,0xff,0x01,0x60,0x26,0x61,0x00,0x64,
+0xa1,0xdb,0x24,0x60,0xb7,0x78,0xff,0xff,0x27,0x60,0x11,0x64,0x40,0x41,0x44,0x42,
+0x24,0x00,0x01,0x60,0x26,0x66,0xa6,0xd3,0x04,0xa1,0x60,0x43,0xa1,0xd3,0xc9,0x81,
+0x60,0x45,0x00,0xbb,0xa1,0xdb,0xbe,0xd3,0x09,0x03,0xd4,0x84,0x9c,0x84,0xdc,0x84,
+0xff,0xff,0x04,0x0e,0xa3,0xd1,0x63,0x46,0x64,0x43,0xf2,0x00,0x9c,0x84,0xdc,0x85,
+0x49,0xdd,0x61,0x44,0x00,0xbb,0xa6,0xdb,0x02,0x03,0x65,0x44,0xbe,0xdb,0x24,0x60,
+0xb7,0x78,0xff,0xff,0x24,0x60,0xb7,0x64,0x40,0x41,0x01,0x60,0x26,0x66,0xa6,0xd3,
+0xff,0xff,0x00,0xa8,0xd0,0x80,0x10,0x03,0x02,0x03,0x60,0x46,0xf8,0x00,0x58,0xd3,
+0xa4,0xd3,0x60,0x45,0x00,0x63,0xa4,0xdd,0x58,0xd3,0x02,0xa8,0xc4,0x83,0x01,0x03,
+0xa2,0xdd,0x62,0x44,0xc8,0x84,0xa6,0xdb,0x21,0x58,0x22,0x41,0x2b,0x60,0x92,0x63,
+0x00,0x64,0xa3,0xdb,0x06,0xa3,0x22,0x60,0x02,0x64,0xbd,0xdb,0xbd,0xdb,0x06,0x64,
+0xa3,0xdb,0x22,0x60,0x00,0x62,0x5d,0x60,0xab,0x64,0xa2,0xdb,0x21,0x60,0xd2,0x62,
+0x53,0x60,0xd9,0x64,0xa2,0xdb,0x2f,0x58,0xff,0xff,0x2b,0x60,0x7a,0x63,0x00,0x64,
+0xa3,0xdb,0x06,0xa3,0x21,0x60,0xfa,0x64,0xbd,0xdb,0xbd,0xdb,0x06,0x64,0xa3,0xdb,
+0x21,0x60,0xf8,0x62,0x60,0x60,0xf7,0x64,0xa2,0xdb,0x21,0x60,0xd2,0x62,0x53,0x60,
+0xd9,0x64,0xa2,0xdb,0x2f,0x58,0xff,0xff,0x00,0x60,0x80,0x66,0x32,0x64,0x55,0xfb,
+0x21,0x60,0x7a,0x64,0xa0,0xd3,0x03,0xfa,0x0f,0x4e,0x00,0x60,0x3c,0x61,0x41,0x4d,
+0x40,0xa1,0xa2,0xff,0x19,0x60,0x58,0x4f,0x39,0x78,0xff,0xff,0xa3,0xff,0x06,0x03,
+0x2d,0x41,0x19,0x60,0x58,0x4f,0x5b,0x78,0xff,0xff,0x08,0xfe,0x0e,0x4f,0x66,0x44,
+0x6f,0xfb,0x00,0x64,0x28,0xfa,0x01,0x60,0x48,0x64,0x29,0xfa,0x00,0x64,0x38,0xfa,
+0x2b,0x60,0x86,0x63,0x00,0x64,0xa3,0xdb,0x06,0xa3,0x21,0x60,0xfe,0x64,0xbd,0xdb,
+0x02,0x64,0xbd,0xdb,0x06,0x64,0xa3,0xdb,0x21,0x60,0xfc,0x62,0x68,0x60,0xd8,0x64,
+0xa2,0xdb,0x21,0x60,0xd8,0x62,0x68,0x60,0xe3,0x64,0xa2,0xdb,0x2f,0x58,0xff,0xff,
+0x0f,0x4e,0x00,0x60,0x48,0x61,0x41,0x4d,0x40,0xa1,0xa2,0xff,0x19,0x60,0x58,0x4f,
+0x39,0x78,0xff,0xff,0xa3,0xff,0x06,0x03,0x2d,0x41,0x19,0x60,0x58,0x4f,0x5b,0x78,
+0xff,0xff,0x08,0xfe,0x0e,0x4f,0x66,0x44,0x6e,0xfb,0x08,0x64,0x28,0xfa,0xff,0x60,
+0xff,0x64,0x2b,0xfa,0x2c,0xfa,0x2d,0xfa,0xff,0xff,0x31,0xfa,0x32,0xfa,0x33,0xfa,
+0x12,0x60,0x20,0x64,0x0e,0xfa,0x2b,0x60,0x4a,0x63,0x00,0x64,0xa3,0xdb,0x06,0xa3,
+0x21,0x60,0xde,0x64,0xbd,0xdb,0x04,0x64,0xbd,0xdb,0x06,0x64,0xa3,0xdb,0x21,0x60,
+0xdc,0x62,0x59,0x60,0xd7,0x64,0xa2,0xdb,0x2b,0x60,0x56,0x63,0x00,0x64,0xa3,0xdb,
+0x06,0xa3,0x21,0x60,0xe2,0x64,0xbd,0xdb,0x08,0x64,0xbd,0xdb,0x06,0x64,0xa3,0xdb,
+0x21,0x60,0xe0,0x62,0x59,0x60,0xe2,0x64,0xa2,0xdb,0x21,0x60,0xd0,0x62,0x59,0x60,
+0xc7,0x64,0xa2,0xdb,0x2f,0x58,0xff,0xff,0x2b,0x60,0x62,0x63,0x00,0x64,0xa3,0xdb,
+0x06,0xa3,0x21,0x60,0xf2,0x64,0xbd,0xdb,0xbd,0xdb,0x06,0x64,0xa3,0xdb,0x21,0x60,
+0xf0,0x62,0x53,0x60,0xf3,0x64,0xa2,0xdb,0x21,0x60,0xd2,0x62,0x53,0x60,0xd9,0x64,
+0xa2,0xdb,0x2f,0x58,0xff,0xff,0x00,0x64,0xe9,0xfb,0x0f,0x4e,0x00,0x60,0x6c,0x61,
+0x41,0x4d,0x40,0xa1,0xa2,0xff,0x19,0x60,0x58,0x4f,0x39,0x78,0xff,0xff,0xa3,0xff,
+0x06,0x03,0x2d,0x41,0x19,0x60,0x58,0x4f,0x5b,0x78,0xff,0xff,0x08,0xfe,0x0e,0x4f,
+0x66,0x44,0x6d,0xfb,0x0f,0x4e,0x00,0x60,0x6c,0x61,0x41,0x4d,0x40,0xa1,0xa2,0xff,
+0x19,0x60,0x58,0x4f,0x39,0x78,0xff,0xff,0xa3,0xff,0x06,0x03,0x2d,0x41,0x19,0x60,
+0x58,0x4f,0x5b,0x78,0xff,0xff,0x08,0xfe,0x0e,0x4f,0x66,0x44,0x6c,0xfb,0x0f,0x4e,
+0x00,0x60,0x3c,0x61,0x41,0x4d,0x40,0xa1,0xa2,0xff,0x19,0x60,0x58,0x4f,0x39,0x78,
+0xff,0xff,0xa3,0xff,0x06,0x03,0x2d,0x41,0x19,0x60,0x58,0x4f,0x5b,0x78,0xff,0xff,
+0x08,0xfe,0x0e,0x4f,0x66,0x44,0x6b,0xfb,0x08,0x64,0x28,0xfa,0xf0,0x60,0x20,0x64,
+0x0e,0xfa,0x00,0x64,0x38,0xfa,0x00,0x60,0x90,0x64,0x29,0xfa,0x0f,0x4e,0x00,0x60,
+0xab,0x61,0x41,0x4d,0x40,0xa1,0xa2,0xff,0x19,0x60,0x58,0x4f,0x39,0x78,0xff,0xff,
+0xa3,0xff,0x06,0x03,0x2d,0x41,0x19,0x60,0x58,0x4f,0x5b,0x78,0xff,0xff,0x08,0xfe,
+0x0e,0x4f,0x66,0x44,0x6a,0xfb,0x08,0x64,0x28,0xfa,0x18,0x60,0x20,0x64,0x0e,0xfa,
+0x00,0x60,0x80,0x64,0x29,0xfa,0x00,0x64,0x19,0xfa,0x21,0x60,0xd4,0x62,0x43,0x60,
+0x96,0x64,0xa2,0xdb,0x2f,0x58,0xff,0xff,0x21,0x60,0xcc,0x62,0x2b,0x60,0x8c,0x64,
+0xa2,0xdb,0x2b,0x60,0x9e,0x62,0x00,0x64,0xa2,0xdb,0x06,0xa2,0x21,0x60,0xe6,0x64,
+0xa2,0xdb,0x06,0x64,0x5a,0xdb,0x5a,0xdb,0x2b,0x60,0xaa,0x62,0x00,0x64,0xa2,0xdb,
+0x06,0xa2,0x21,0x60,0xea,0x64,0xa2,0xdb,0x06,0x64,0x5a,0xdb,0x5a,0xdb,0x2b,0x60,
+0xb6,0x62,0x00,0x64,0xa2,0xdb,0x06,0xa2,0x21,0x60,0xee,0x64,0xa2,0xdb,0x06,0x64,
+0x5a,0xdb,0x5a,0xdb,0xa0,0xf1,0x2b,0x60,0xba,0x62,0xa2,0xd9,0x21,0x60,0xe4,0x62,
+0x2c,0x60,0xa5,0x64,0xa2,0xdb,0x21,0x60,0xe8,0x62,0x2c,0x60,0xb0,0x64,0xa2,0xdb,
+0x21,0x60,0xec,0x62,0x2c,0x60,0xbb,0x64,0xa2,0xdb,0x21,0x60,0x9a,0x62,0x00,0x60,
+0x02,0x64,0xa2,0xdb,0x28,0x60,0xd0,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,
+0x21,0x60,0x98,0x62,0x00,0x64,0xa2,0xdb,0x03,0x64,0x52,0xfb,0x2c,0x60,0x58,0x4e,
+0x99,0x78,0xff,0xff,0x21,0x60,0x98,0x62,0xa2,0xd1,0xff,0x60,0x8f,0x64,0xa0,0x84,
+0xa2,0xdb,0xa1,0xf1,0x2b,0x60,0xae,0x62,0xa2,0xd9,0x3f,0x60,0x9e,0x62,0x2b,0x60,
+0xaa,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x01,0x64,0xe8,0xfb,
+0x21,0x60,0x9a,0x62,0x00,0x60,0x74,0x64,0xa2,0xdb,0x28,0x60,0xfb,0x64,0x5a,0xdb,
+0xcf,0xfe,0x2f,0x58,0xff,0xff,0x6a,0x60,0xcc,0x62,0xa2,0xd3,0xff,0xff,0x60,0x40,
+0x02,0x2a,0x03,0x00,0x2a,0x60,0x3b,0x78,0xff,0xff,0x21,0x60,0x98,0x62,0xa2,0xd1,
+0x00,0x60,0x04,0x64,0xa0,0x80,0x9c,0x84,0x05,0x03,0xa0,0x84,0xa2,0xdb,0x2b,0x60,
+0x8c,0x78,0xff,0xff,0x00,0x60,0x40,0x64,0xa0,0x80,0x9c,0x84,0x03,0x03,0xa0,0x84,
+0xa2,0xdb,0xd4,0x00,0x00,0x60,0x20,0x64,0xa0,0x80,0x9c,0x84,0x0e,0x03,0xa0,0x84,
+0xa2,0xdb,0x01,0x65,0x2e,0x60,0x58,0x4e,0x4f,0x78,0xff,0xff,0xff,0x60,0xf7,0x65,
+0x52,0xf3,0xff,0xff,0xa4,0x84,0xa2,0xdb,0xc1,0x00,0x00,0x60,0x10,0x64,0xa0,0x80,
+0x9c,0x84,0xc7,0x03,0xa0,0x84,0xa2,0xdb,0x21,0x60,0x7a,0x63,0xa3,0xd1,0x6a,0x60,
+0x50,0x65,0xa5,0xd3,0xff,0xff,0xd0,0x80,0xff,0xff,0x14,0x0d,0xa2,0xf3,0xff,0xff,
+0xc0,0x84,0xa5,0xdb,0x6a,0x60,0x4e,0x62,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
+0x6a,0x60,0x5c,0x62,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xf8,0xa0,0xff,0xff,0x01,0x04,
+0x08,0x64,0xa2,0xdb,0x6a,0x60,0x52,0x65,0xa5,0xd1,0x4c,0xf3,0xff,0xff,0xd0,0x80,
+0x60,0x41,0x0d,0x06,0xa5,0xdb,0x6a,0x60,0x58,0x63,0x6a,0x60,0x56,0x65,0xa5,0xd1,
+0x61,0x44,0xd0,0x84,0xff,0xff,0x01,0x05,0x00,0x64,0xa3,0xdb,0x16,0x00,0x6a,0x60,
+0x58,0x63,0xa3,0xd1,0x4c,0xf3,0xff,0xff,0xd0,0x80,0x60,0x41,0x0e,0x05,0xa5,0xdb,
+0x6a,0x60,0x56,0x65,0xa5,0xd1,0x61,0x44,0xd0,0x84,0xff,0xff,0x01,0x05,0x00,0x64,
+0xa3,0xdb,0x6a,0x60,0x5a,0x62,0x01,0x64,0xa2,0xdb,0x6a,0x60,0x5a,0x63,0xbd,0xd3,
+0xff,0xff,0x00,0xa0,0xff,0xff,0x35,0x03,0xbd,0xd3,0xa3,0xd1,0xff,0xff,0xd0,0x80,
+0xff,0xff,0x2f,0x04,0x6a,0x60,0x4e,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0xff,0xff,
+0x28,0x03,0x64,0x60,0xe4,0x62,0x06,0x64,0xa2,0xdb,0x6a,0x60,0x5c,0x63,0x00,0x64,
+0xbd,0xdb,0xa3,0xd3,0xff,0xff,0xe0,0x84,0xf8,0xa0,0xff,0xff,0x01,0x04,0x08,0x64,
+0xa3,0xdb,0x6a,0x60,0x56,0x62,0xa2,0xd3,0xff,0xff,0xe8,0x84,0xe8,0x84,0xb7,0xfb,
+0x6a,0x60,0x48,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x7e,0xf1,0x01,0x60,
+0x98,0x64,0xd0,0x80,0xe9,0xf3,0x02,0x07,0x04,0xbc,0xe9,0xfb,0x2a,0x60,0x8d,0x78,
+0xff,0xff,0xb5,0xf3,0x4c,0xf1,0xff,0xff,0xd0,0x80,0xff,0xff,0x0d,0x04,0x64,0x60,
+0xe4,0x62,0x06,0x64,0xa2,0xdb,0x63,0x60,0x28,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,
+0xa2,0xdb,0x2a,0x60,0x8d,0x78,0xff,0xff,0x63,0x60,0x0e,0x62,0xa2,0xd1,0xb6,0xf3,
+0xff,0xff,0xd0,0x80,0xff,0xff,0x0d,0x07,0x64,0x60,0xe4,0x62,0x02,0x64,0xa2,0xdb,
+0x63,0x60,0x28,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x2a,0x60,0x8d,0x78,
+0xff,0xff,0x6a,0x60,0x14,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0x60,0x45,0x0b,0x03,
+0x21,0x60,0x7c,0x62,0xa2,0xd3,0xff,0xff,0xd4,0x80,0xff,0xff,0x35,0x04,0x6a,0x60,
+0x14,0x62,0x00,0x64,0xa2,0xdb,0x6a,0x60,0x12,0x62,0xa2,0xd3,0xff,0xff,0xff,0xa0,
+0xff,0xff,0x2a,0x02,0x6a,0x60,0x16,0x62,0xa2,0xd1,0x6a,0x60,0x18,0x63,0xa3,0xd3,
+0xff,0xff,0xd0,0x84,0xfe,0xa0,0xff,0xff,0x1f,0x04,0xe0,0x84,0xe0,0x84,0xd0,0x80,
+0xff,0xff,0x1a,0x04,0x6a,0x60,0x16,0x62,0x64,0x44,0x01,0xa4,0xa2,0xdb,0x21,0x60,
+0x7c,0x62,0x6a,0x60,0x14,0x63,0xa2,0xd3,0xff,0xff,0x03,0xa4,0xa3,0xdb,0x64,0x60,
+0xe4,0x62,0x04,0x64,0xa2,0xdb,0x63,0x60,0x2a,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,
+0xa2,0xdb,0x2a,0x60,0x8d,0x78,0xff,0xff,0x6a,0x60,0x10,0x62,0xa2,0xd1,0x21,0x60,
+0x7c,0x62,0xa2,0xd3,0xff,0xff,0xd0,0x80,0xff,0xff,0x0d,0x04,0x64,0x60,0xe4,0x62,
+0x14,0x64,0xa2,0xdb,0x63,0x60,0x2c,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
+0x2a,0x60,0x8d,0x78,0xff,0xff,0x6a,0x60,0xcc,0x62,0xa2,0xd3,0xff,0xff,0x60,0x40,
+0x03,0x22,0x12,0x00,0x60,0x45,0xfd,0xb4,0xa2,0xdb,0xe9,0xf3,0xff,0xff,0xb4,0x84,
+0xe9,0xfb,0x64,0x60,0xe4,0x62,0x10,0x64,0xa2,0xdb,0x63,0x60,0x2e,0x64,0xa0,0xd3,
+0xff,0xff,0xdc,0x84,0xa2,0xdb,0x39,0x00,0x02,0x64,0xe8,0xfb,0x21,0x60,0x9a,0x62,
+0x00,0x60,0x64,0x64,0xa2,0xdb,0x2a,0x60,0x61,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,
+0xff,0xff,0x21,0x60,0x98,0x62,0xa2,0xd1,0x00,0x60,0x04,0x64,0xa0,0x80,0x9c,0x84,
+0x05,0x03,0xa0,0x84,0xa2,0xdb,0x2b,0x60,0x8c,0x78,0xff,0xff,0x00,0x60,0x40,0x64,
+0xa0,0x80,0x9c,0x84,0x05,0x03,0xa0,0x84,0xa2,0xdb,0x29,0x60,0x34,0x78,0xff,0xff,
+0x00,0x60,0x20,0x64,0xa0,0x80,0x9c,0x84,0xe2,0x03,0xa0,0x84,0xa2,0xdb,0x01,0x65,
+0x2e,0x60,0x58,0x4e,0x4f,0x78,0xff,0xff,0xff,0x60,0xf7,0x65,0x52,0xf3,0xff,0xff,
+0xa4,0x84,0xa2,0xdb,0x29,0x60,0x34,0x78,0xff,0xff,0xa2,0xf1,0x2b,0x60,0xae,0x62,
+0xa2,0xd9,0x2a,0x60,0x97,0x64,0x70,0xfb,0x2b,0x60,0xc3,0x78,0xff,0xff,0x3f,0x60,
+0x9a,0x62,0x2b,0x60,0xb6,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,
+0x21,0x60,0x98,0x62,0xa2,0xd1,0xff,0x60,0xdf,0x64,0xa0,0x84,0xa2,0xdb,0x64,0x60,
+0xe4,0x62,0xa2,0xd3,0xff,0xff,0xf0,0xa0,0x60,0x5c,0x20,0x03,0x21,0x60,0x7a,0x65,
+0x6a,0x60,0x4e,0x63,0x00,0x64,0xbd,0xdb,0xa5,0xd3,0xa3,0xdb,0x64,0x44,0xec,0xa0,
+0xfc,0xa0,0x08,0x03,0x1f,0x02,0x6a,0x60,0x12,0x62,0xa2,0xd3,0xff,0xff,0xff,0xa0,
+0xff,0xff,0x18,0x03,0x3f,0x60,0x9a,0x62,0x2b,0x60,0xaa,0x64,0xa2,0xdb,0x03,0x64,
+0x4a,0xdb,0xff,0xff,0x1d,0xff,0x28,0x60,0xda,0x78,0xff,0xff,0x3f,0x60,0x9a,0x62,
+0x2b,0x60,0xaa,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x29,0x60,
+0x34,0x78,0xff,0xff,0x6a,0x60,0x5a,0x63,0xa3,0xd3,0xff,0xff,0x60,0x40,0x00,0x36,
+0x07,0x00,0x4c,0xf3,0x1e,0x65,0xd4,0x80,0xff,0xff,0x02,0x04,0x00,0x64,0xa3,0xdb,
+0x7c,0xf1,0x2a,0x60,0xc8,0x63,0xd3,0x80,0xb7,0xf1,0x25,0x03,0x00,0x64,0xb7,0xfb,
+0x6a,0x60,0x54,0x65,0x4c,0xf3,0xa5,0xdb,0xa3,0xd3,0xc0,0x85,0xd4,0x80,0x5b,0xd3,
+0x1a,0x04,0x60,0x43,0x63,0x42,0x06,0x65,0x46,0xd3,0x5a,0xd3,0x40,0x48,0x5a,0xd3,
+0x40,0x4c,0x40,0x4d,0x75,0xf3,0x06,0x56,0x7e,0x00,0x00,0x10,0x28,0x45,0xd4,0x80,
+0x5a,0xd3,0x09,0x02,0x2c,0x45,0xd4,0x80,0x5a,0xd3,0x05,0x02,0x2d,0x45,0xd4,0x80,
+0x63,0x42,0x01,0x02,0x03,0x00,0x2b,0x60,0x83,0x78,0xff,0xff,0xb5,0xf1,0x4c,0xf3,
+0xff,0xff,0xd0,0x80,0xff,0xff,0x14,0x06,0x63,0x60,0x0e,0x62,0xa2,0xd3,0xb6,0xf1,
+0xff,0xff,0xd0,0x80,0xff,0xff,0x0c,0x05,0x3f,0x60,0x9a,0x62,0x2b,0x60,0xaa,0x64,
+0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x28,0x60,0xda,0x78,0xff,0xff,
+0x6a,0x60,0xcc,0x62,0xa2,0xd3,0xff,0xff,0x60,0x40,0x02,0x2a,0x03,0x00,0x2a,0x60,
+0x3b,0x78,0xff,0xff,0x03,0x64,0xe8,0xfb,0x21,0x60,0x9a,0x62,0x00,0x60,0x74,0x64,
+0xa2,0xdb,0x2b,0x60,0x44,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,
+0x98,0x62,0xa2,0xd1,0x00,0x60,0x04,0x64,0xa0,0x80,0x9c,0x84,0x05,0x03,0xa0,0x84,
+0xa2,0xdb,0x2b,0x60,0x8c,0x78,0xff,0xff,0x00,0x60,0x40,0x64,0xa0,0x80,0x9c,0x84,
+0x05,0x03,0xa0,0x84,0xa2,0xdb,0x2a,0x60,0xda,0x78,0xff,0xff,0x00,0x60,0x20,0x64,
+0xa0,0x80,0x9c,0x84,0x10,0x03,0xa0,0x84,0xa2,0xdb,0x01,0x65,0x2e,0x60,0x58,0x4e,
+0x4f,0x78,0xff,0xff,0xff,0x60,0xf7,0x65,0x52,0xf3,0xff,0xff,0xa4,0x84,0xa2,0xdb,
+0x2a,0x60,0xda,0x78,0xff,0xff,0x00,0x60,0x10,0x64,0xa0,0x80,0x9c,0x84,0xcd,0x03,
+0xa0,0x84,0xa2,0xdb,0x3f,0x60,0x9a,0x62,0x2b,0x60,0xb6,0x64,0xa2,0xdb,0x03,0x64,
+0x4a,0xdb,0xff,0xff,0x1d,0xff,0x2a,0x60,0x8d,0x78,0xff,0xff,0x21,0x60,0xaa,0x62,
+0xa2,0xd1,0x00,0x60,0x20,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x05,0x64,
+0xe8,0xfb,0x3f,0x60,0x9a,0x62,0x2b,0x60,0x9e,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,
+0xff,0xff,0x1d,0xff,0x3f,0x60,0x9a,0x62,0x2b,0x60,0xaa,0x64,0xa2,0xdb,0x03,0x64,
+0x4a,0xdb,0xff,0xff,0x1d,0xff,0x3f,0x60,0x9a,0x62,0x2b,0x60,0xb6,0x64,0xa2,0xdb,
+0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x21,0x60,0x98,0x62,0x00,0x64,0xa2,0xdb,
+0x5a,0xdb,0x00,0x64,0x52,0xfb,0x21,0x60,0x90,0x62,0xa2,0xd1,0x08,0x60,0x00,0x64,
+0xb0,0x84,0xa2,0xdb,0xcf,0xfe,0x21,0x60,0x9a,0x62,0x00,0x60,0x02,0x64,0xa2,0xdb,
+0x28,0x60,0xd0,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,0x9a,0x62,
+0x80,0x60,0x00,0x64,0xa2,0xdb,0x2b,0x60,0xcc,0x64,0x5a,0xdb,0xcf,0xfe,0x80,0xf3,
+0xff,0xff,0xff,0xa0,0x02,0x64,0x2a,0x02,0x80,0xfb,0x21,0x60,0x98,0x62,0xa2,0xd1,
+0x7f,0x60,0xff,0x64,0xa0,0x84,0xa2,0xdb,0x21,0x60,0x9a,0x62,0x80,0x60,0x00,0x64,
+0xa2,0xdb,0x2b,0x60,0xe5,0x64,0x5a,0xdb,0xcf,0xfe,0xc1,0xfe,0x2f,0x58,0xff,0xff,
+0x21,0x60,0x98,0x62,0xa2,0xd1,0x7f,0x60,0xff,0x64,0xa0,0x84,0xa2,0xdb,0x80,0xf3,
+0xff,0xff,0x00,0xa0,0xff,0xff,0xf2,0x02,0x21,0x60,0x98,0x62,0xa2,0xd1,0x7f,0x60,
+0xff,0x61,0xa1,0x84,0x5a,0xd1,0x4a,0xdb,0xa1,0x84,0x5a,0xdb,0xe9,0xf3,0xff,0xff,
+0x60,0x40,0x40,0x26,0x08,0x00,0x6a,0x60,0xd0,0x62,0xa2,0xd3,0x56,0xf3,0x00,0xa0,
+0x00,0xa0,0x13,0x03,0x12,0x02,0xe9,0xf3,0xff,0xff,0x20,0xbc,0xe9,0xfb,0x11,0x60,
+0x48,0x65,0x2e,0x60,0x58,0x4e,0x9e,0x78,0xff,0xff,0x39,0x60,0x58,0x4e,0xfe,0x78,
+0xff,0xff,0x2e,0x60,0x58,0x4e,0xbd,0x78,0xff,0xff,0x62,0x60,0x92,0x64,0x4f,0xfb,
+0x21,0x60,0x98,0x62,0xa2,0xd1,0xef,0x60,0xff,0x64,0xa0,0x84,0xa2,0xdb,0x0f,0x4e,
+0x53,0x60,0x58,0x4f,0xfe,0x78,0xff,0xff,0x0e,0x4f,0x21,0x60,0x9a,0x62,0x10,0x60,
+0x00,0x64,0xa2,0xdb,0x2c,0x60,0x35,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,
+0xe9,0xf3,0xff,0xff,0x60,0x40,0x20,0x2a,0x12,0x00,0xdf,0xb4,0xe9,0xfb,0x01,0x60,
+0x48,0x65,0x2e,0x60,0x58,0x4e,0x9e,0x78,0xff,0xff,0x39,0x60,0x58,0x4e,0xfe,0x78,
+0xff,0xff,0x2e,0x60,0x58,0x4e,0xbd,0x78,0xff,0xff,0xe9,0xf3,0xff,0xff,0x60,0x5c,
+0x03,0x22,0x09,0x00,0xff,0x60,0xfc,0x64,0xa0,0x84,0xe9,0xfb,0x04,0x65,0x3d,0x60,
+0x58,0x4e,0x39,0x78,0xff,0xff,0x3f,0x60,0x9e,0x62,0x2b,0x60,0xaa,0x64,0xa2,0xdb,
+0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x21,0x60,0x98,0x62,0xa2,0xd1,0xef,0x60,
+0xef,0x64,0xa0,0x84,0xa2,0xdb,0x01,0x64,0x80,0xfb,0xff,0xff,0xc1,0xfe,0xe9,0xf3,
+0xff,0xff,0xfb,0xb4,0xe9,0xfb,0x70,0xf7,0xff,0xff,0xff,0xff,0x4d,0xf1,0x28,0x44,
+0xd0,0x84,0x0f,0xa4,0x03,0x0e,0xe8,0x84,0xe8,0x84,0x04,0x00,0xe2,0xa4,0xe8,0x84,
+0xe8,0x87,0xf0,0xbf,0xc0,0x84,0xa2,0xdb,0x2e,0x58,0xff,0xff,0x4e,0xf1,0x28,0x44,
+0xd0,0x84,0x1f,0xa4,0x06,0x0e,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,
+0x07,0x00,0xc2,0xa4,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x87,0xf8,0xbf,
+0xc0,0x84,0xa2,0xdb,0x2e,0x58,0xff,0xff,0x4e,0xf1,0x4d,0xf3,0x64,0x45,0xd4,0x84,
+0x80,0x65,0xc4,0x87,0x01,0x05,0x00,0x64,0xff,0xb4,0x4c,0xfb,0x2e,0x58,0xff,0xff,
+0x21,0x60,0x98,0x62,0xa2,0xd1,0x00,0x60,0x08,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,
+0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,0x98,0x62,0xa2,0xd1,0x00,0x60,0x10,0x64,
+0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,0x98,0x62,
+0xa2,0xd1,0x00,0x60,0x20,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x2f,0x58,
+0xff,0xff,0x2e,0x60,0x3c,0x78,0xff,0xff,0xbd,0xf3,0xff,0xff,0x60,0x40,0x03,0x36,
+0x34,0x00,0x21,0x60,0x9a,0x62,0xa2,0xd3,0xff,0xff,0x60,0x40,0x40,0x22,0xf1,0x00,
+0x6a,0x60,0x2c,0x62,0x00,0x64,0xa2,0xdb,0x6a,0x60,0x12,0x62,0xa2,0xd3,0xff,0xff,
+0xff,0xa0,0xff,0xff,0x11,0x02,0x26,0x46,0x00,0xf4,0x5b,0x60,0x58,0x4e,0x51,0x78,
+0xff,0xff,0x6a,0x60,0x18,0x62,0xa2,0xd9,0x6a,0x60,0x16,0x63,0xa3,0xd3,0xff,0xff,
+0xd0,0x80,0xff,0xff,0x01,0x06,0xa3,0xd9,0x52,0xf3,0xff,0xff,0x60,0x40,0x04,0x26,
+0x06,0x00,0x5c,0x60,0x58,0x4e,0x73,0x78,0xff,0xff,0x65,0x44,0xd0,0xfb,0x00,0x65,
+0x2e,0x60,0x58,0x4e,0x4f,0x78,0xff,0xff,0x09,0x00,0x61,0xf3,0xff,0xff,0x04,0xb4,
+0x04,0xbc,0x03,0x03,0x2e,0x60,0x3c,0x78,0xff,0xff,0x61,0xfb,0x26,0x46,0x20,0xf2,
+0xa0,0x65,0x01,0x37,0x50,0x65,0x02,0x37,0x1e,0x65,0x03,0x37,0x0f,0x65,0x2b,0x60,
+0xc2,0x63,0x00,0xf4,0x02,0xf2,0xff,0xff,0xd4,0x84,0xbd,0xdb,0x03,0xf2,0x01,0x05,
 0xcc,0x84,0xbd,0xdb,0x04,0xf2,0x01,0x05,0xcc,0x84,0xbd,0xdb,0x05,0xf2,0x01,0x05,
 0xcc,0x84,0xa3,0xdb,0xfa,0xa3,0x26,0x46,0x00,0x60,0x00,0x65,0xa3,0xd3,0x23,0xf0,
 0x00,0x61,0xd0,0x84,0xf1,0x81,0xd4,0x84,0xf1,0x81,0xbd,0xdb,0xa3,0xd3,0x03,0xb1,
 0x03,0xa9,0x24,0xf0,0x42,0xfe,0x01,0x03,0xcc,0x84,0xf1,0x81,0xd0,0x84,0xf1,0x81,
 0xbd,0xdb,0xa3,0xd3,0x03,0xb1,0x03,0xa9,0x27,0xf0,0x42,0xfe,0x01,0x03,0xcc,0x84,
 0xf1,0x81,0xd0,0x84,0xf1,0x81,0xbd,0xdb,0xa3,0xd3,0x03,0xb1,0x03,0xa9,0x28,0xf0,
-0x01,0x03,0xcc,0x84,0xd0,0x84,0xa3,0xdb,0x60,0x45,0x69,0x60,0x44,0x62,0x90,0x60,
-0x92,0x64,0xa2,0xdb,0x69,0x60,0x46,0x62,0x65,0x44,0xa2,0xdb,0x5e,0xf3,0xcb,0xf3,
-0x04,0xb0,0xff,0xff,0x35,0x03,0x03,0x3a,0x35,0x00,0x73,0xf3,0xff,0xff,0x60,0x40,
-0x04,0x26,0x30,0x00,0xa3,0xd3,0x4b,0xd1,0x4b,0xd3,0xc0,0x9c,0xc0,0x84,0x4b,0xd1,
-0x00,0xa0,0x03,0xa0,0x01,0x03,0x1f,0x02,0x80,0x60,0x00,0x65,0x64,0x44,0xa4,0x85,
-0xe8,0x84,0xb4,0x84,0xe8,0x84,0xb4,0x84,0xa3,0xdb,0x60,0x45,0xfa,0x64,0xd4,0x80,
-0xff,0x60,0x06,0x64,0xd4,0x80,0x14,0x07,0x13,0x04,0x67,0x60,0x20,0x64,0xa0,0xd3,
-0xff,0xff,0xdc,0x84,0xa2,0xdb,0x4d,0xf3,0xff,0xff,0x60,0x40,0x00,0x3a,0x03,0x00,
-0x01,0x64,0x4d,0xfb,0x07,0x00,0x67,0x60,0x1a,0x62,0x10,0x64,0xa2,0xdb,0x06,0x00,
-0x00,0x64,0x4d,0xfb,0x01,0x64,0x23,0xfb,0xff,0xff,0x1a,0xff,0x5e,0xf3,0xff,0xff,
-0x04,0xb0,0x08,0xb0,0x06,0x03,0x7e,0x02,0x5f,0xf3,0xff,0xff,0xff,0xa4,0x5f,0xfb,
-0x7b,0x02,0x26,0x46,0x00,0xf4,0x02,0xf2,0x5a,0xd2,0x40,0x48,0x40,0x4c,0x5a,0xd2,
-0x5a,0xd2,0x40,0x4d,0x60,0x41,0x5a,0xd0,0x80,0xf9,0x40,0x63,0xad,0x80,0xf0,0xa3,
-0x09,0x02,0x3c,0x03,0x2d,0x41,0x2c,0x44,0x40,0x4d,0x28,0x44,0x40,0x4c,0x00,0x64,
-0x40,0x48,0xf4,0x00,0xd1,0x80,0x01,0x02,0x31,0x04,0x10,0xa3,0x80,0x60,0x00,0x65,
-0xa5,0x80,0xcf,0x83,0x08,0x02,0x28,0x44,0x60,0x88,0x2c,0x44,0x70,0x8c,0x2d,0x44,
-0x70,0x8d,0xf1,0x81,0xf5,0x00,0xe7,0xa3,0x64,0x44,0x00,0xa0,0x00,0x62,0x02,0x02,
-0x00,0x61,0x1c,0x00,0xe0,0x84,0xde,0x82,0xfd,0x04,0x42,0xfe,0xf8,0x84,0x62,0x45,
-0xc7,0x83,0x60,0x45,0x02,0xfe,0xd5,0x84,0x02,0x05,0x01,0x05,0x61,0x44,0xcf,0x83,
-0x60,0x41,0x08,0x03,0x28,0x44,0x60,0x88,0x2c,0x44,0x70,0x8c,0x2d,0x44,0x70,0x8d,
-0xf1,0x81,0xf1,0x00,0xce,0x82,0xe9,0x81,0xfd,0x02,0xf1,0x81,0x02,0xf2,0xff,0xff,
-0x60,0x47,0xe8,0x84,0xe8,0x84,0x5a,0xd2,0x3f,0xb5,0xe0,0x84,0xe0,0x84,0xe0,0x84,
-0xe0,0x84,0xe0,0x84,0xe0,0x84,0xb4,0x84,0x61,0x45,0xd4,0x84,0xc0,0x84,0xe0,0x84,
-0xe0,0x84,0xe0,0x84,0xe0,0x84,0x60,0x53,0x80,0xf3,0x60,0x41,0xe0,0x84,0xe0,0x84,
-0xe0,0x84,0xe0,0x84,0x60,0x45,0x61,0x44,0xd4,0x84,0xa4,0xfb,0x04,0x60,0x00,0x71,
-0x60,0x45,0x69,0x60,0x44,0x62,0x90,0x60,0x95,0x64,0xa2,0xdb,0x69,0x60,0x46,0x62,
-0x65,0x44,0xa2,0xdb,0x05,0x64,0x5f,0xfb,0x5e,0xf3,0x26,0x46,0x0c,0xbc,0xa2,0xdb,
-0xff,0x60,0x00,0x65,0x25,0xf2,0xff,0xff,0x24,0x88,0x60,0x47,0x24,0x8c,0x2c,0x60,
-0x58,0x4e,0xd8,0x78,0xff,0xff,0x0c,0x48,0x2c,0x60,0x58,0x4e,0xe8,0x78,0xff,0xff,
-0x2c,0x60,0x58,0x4e,0xfe,0x78,0xff,0xff,0x1e,0x60,0xd0,0x62,0xa2,0xd1,0x00,0x60,
-0x40,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x3c,0x60,0xd2,0x62,0x28,0x60,
-0xee,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x1e,0x60,0xd0,0x62,
-0xa2,0xd1,0xff,0x60,0xdf,0x64,0xa0,0x84,0xa2,0xdb,0x26,0x46,0x2f,0x58,0xff,0xff,
-0x65,0x44,0x00,0xa0,0x40,0x48,0x13,0x03,0x66,0x60,0xaa,0x62,0xa2,0xd3,0xff,0xff,
-0xdc,0x84,0xf6,0xa0,0xa2,0xdb,0x0f,0x04,0x00,0x64,0xa2,0xdb,0x1e,0x60,0xe2,0x62,
-0xa2,0xd1,0x00,0x60,0x40,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x66,0x60,
-0xaa,0x62,0x00,0x64,0xa2,0xdb,0x66,0x60,0xac,0x62,0xa2,0xd3,0x28,0x45,0xc4,0x84,
-0xa2,0xdb,0x66,0x60,0xae,0x62,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xce,0xa0,0xa2,0xdb,
-0x14,0x06,0x32,0x64,0xa2,0xdb,0x66,0x60,0xb0,0x62,0xa2,0xd1,0x66,0x60,0xb2,0x64,
-0xc0,0x82,0xa2,0xd1,0x66,0x60,0xac,0x62,0xa2,0xd3,0xff,0xff,0xd0,0x84,0xa2,0xdb,
-0xe0,0x85,0x5a,0x60,0x1c,0x62,0x65,0x44,0xa2,0xdb,0x66,0x60,0xb0,0x62,0xa2,0xd1,
-0x66,0x60,0xb2,0x64,0xc0,0x82,0x28,0x44,0xa2,0xdb,0x66,0x60,0xb0,0x62,0x64,0x44,
-0x9e,0xa0,0x02,0xa4,0x01,0x02,0x00,0x64,0xa2,0xdb,0x2e,0x58,0xff,0xff,0x7b,0xf5,
-0xff,0xff,0x81,0xf1,0x2b,0xf8,0x31,0xf8,0xff,0xff,0x82,0xf1,0x2c,0xf8,0x32,0xf8,
-0xff,0xff,0x83,0xf1,0x2d,0xf8,0x33,0xf8,0xff,0xff,0xbd,0xf1,0x2e,0xf8,0xbe,0xf1,
-0xff,0xff,0x2f,0xf8,0xbf,0xf1,0x30,0xf8,0xff,0xff,0x00,0x64,0x22,0xfa,0x06,0x60,
-0x20,0x64,0x0e,0xfa,0x65,0x44,0x29,0xfa,0x2e,0x58,0xff,0xff,0x67,0x60,0x4c,0x62,
-0x2e,0x44,0xa2,0xdb,0x1e,0x60,0xd0,0x62,0x00,0x64,0xa2,0xdb,0x3c,0x60,0xa2,0x62,
-0x3c,0x60,0x4e,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,
-0x2b,0xff,0xc1,0xfe,0x1e,0x60,0xd2,0x62,0x00,0x60,0x01,0x64,0xa2,0xdb,0x2f,0x60,
-0x43,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,0xd0,0x62,0xa2,0xd1,
-0xff,0x60,0xfe,0x61,0xa1,0x84,0x5a,0xd1,0x4a,0xdb,0xa1,0x84,0x5a,0xdb,0x67,0x60,
-0x4c,0x62,0xa2,0xd3,0xff,0xff,0x40,0x4e,0x2e,0x58,0xff,0xff,0x27,0x42,0xa2,0xd3,
-0xa2,0xd1,0xac,0x86,0x0e,0xf2,0x57,0x03,0x60,0x40,0x02,0x2a,0x54,0x00,0x0b,0xf2,
-0xff,0xff,0x00,0xa4,0x44,0x45,0x39,0x02,0x21,0x44,0xf7,0xa0,0xff,0xff,0x35,0x07,
-0x5c,0x81,0x22,0x44,0x00,0x7c,0xd0,0x80,0xff,0xff,0x01,0x02,0x46,0x42,0x48,0xf3,
-0xff,0xff,0x60,0x41,0x02,0xfa,0x40,0xa1,0x7c,0x63,0x84,0xa1,0x00,0xf2,0x03,0x06,
-0x01,0xfc,0x60,0x46,0xfa,0x00,0x80,0x60,0x7c,0x64,0x01,0xfa,0x66,0x43,0x25,0x46,
-0x05,0xfc,0x06,0xfc,0x01,0xf0,0x03,0x67,0xb0,0x84,0x00,0xf0,0x3c,0x7e,0x01,0xfa,
-0x04,0x64,0x03,0xfa,0x04,0xf8,0x00,0x64,0x0b,0xfa,0x0c,0xfa,0xff,0xff,0x0e,0xfa,
-0x0f,0xfa,0x3c,0x60,0xa8,0x62,0x3c,0x60,0x84,0x64,0xa2,0xdb,0x25,0x44,0x5a,0xdb,
-0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xb9,0x00,0x0f,0x4e,0x44,0x45,0x64,0x46,
-0x3c,0x60,0xa8,0x62,0x00,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,
-0xff,0xff,0x2b,0xff,0xa2,0xff,0x1a,0x60,0x58,0x4f,0xa6,0x78,0xff,0xff,0xa3,0xff,
-0xd1,0xfe,0x0e,0x4f,0xa3,0x00,0x2f,0x58,0xff,0xff,0x3c,0x60,0x8a,0x64,0x40,0x47,
-0x58,0x4f,0x9c,0x00,0x3c,0x60,0x66,0x64,0x40,0x47,0x58,0x4f,0x08,0x00,0x3c,0x60,
-0x90,0x64,0x40,0x47,0x58,0x4f,0x03,0x00,0x30,0x60,0x61,0x78,0xff,0xff,0x27,0x42,
-0xa2,0xd3,0xa2,0xd1,0xac,0x86,0x0e,0xf2,0x46,0x03,0x60,0x40,0x02,0x2a,0x43,0x00,
-0x95,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0x28,0x03,0x3c,0x60,0x66,0x64,0x27,0x45,
-0xd4,0x80,0xff,0xff,0x22,0x02,0x00,0x64,0x13,0xfb,0x22,0xf2,0xff,0xff,0xff,0xff,
-0x10,0x26,0x0f,0x00,0x1c,0xf2,0xff,0xff,0x03,0xb4,0xff,0xff,0x00,0x36,0x15,0x00,
-0x01,0x36,0x13,0x00,0x02,0x36,0x05,0x00,0x22,0xf2,0xff,0xff,0x00,0xa8,0xff,0xff,
-0x0c,0x03,0x3c,0x60,0xa8,0x62,0x3c,0x60,0x60,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,
-0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0x16,0x00,0x0f,0x4e,0x44,0x45,0x64,0x46,
-0x3c,0x60,0xa8,0x62,0x00,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,
-0xff,0xff,0x2b,0xff,0xa2,0xff,0x1a,0x60,0x58,0x4f,0xa6,0x78,0xff,0xff,0xa3,0xff,
-0xd1,0xfe,0x0e,0x4f,0xb4,0x00,0x2f,0x58,0xff,0xff,0x02,0x64,0x01,0x00,0x01,0x64,
-0x40,0x55,0x3b,0xff,0x48,0x00,0xb2,0xfe,0xff,0xff,0xf9,0x05,0xb3,0xfe,0xff,0xff,
-0xf4,0x05,0xb0,0xfe,0xff,0xff,0x91,0x05,0xb1,0xfe,0xff,0xff,0x26,0x05,0x3b,0x00,
-0x48,0xf1,0x0f,0x4e,0x64,0x41,0x41,0x4d,0x40,0xa1,0xa2,0xff,0x19,0x60,0x58,0x4f,
-0xaa,0x78,0xff,0xff,0xa3,0xff,0x06,0x03,0x2d,0x41,0x19,0x60,0x58,0x4f,0xcc,0x78,
-0xff,0xff,0x08,0xfe,0x0e,0x4f,0x26,0x03,0x3c,0x60,0xa8,0x62,0x3c,0x60,0x84,0x64,
-0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0x22,0x41,
-0x00,0xb9,0x21,0x44,0x08,0x24,0x46,0x42,0x5c,0x81,0x3e,0x41,0x22,0x44,0x00,0xb9,
-0xac,0x86,0x09,0x02,0xd5,0x03,0x31,0x40,0x01,0x2a,0x05,0x00,0x09,0xf0,0x02,0x5e,
-0x44,0x42,0x21,0x44,0x4c,0x81,0x96,0xf3,0x21,0x45,0xd4,0x80,0xff,0xff,0xc8,0x07,
-0x58,0x4f,0x04,0x00,0x00,0x00,0xa1,0xff,0xff,0xff,0xbe,0x3f,0x3c,0x60,0x54,0x62,
-0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,0x40,0x03,0x46,0x48,0x03,0x60,0x3c,0x64,
-0x01,0xfa,0x02,0xf0,0x0f,0x4e,0x64,0x41,0x41,0x4d,0x40,0xa1,0xa2,0xff,0x19,0x60,
-0x58,0x4f,0xaa,0x78,0xff,0xff,0xa3,0xff,0x06,0x03,0x2d,0x41,0x19,0x60,0x58,0x4f,
-0xcc,0x78,0xff,0xff,0x08,0xfe,0x0e,0x4f,0x76,0x03,0x3c,0x60,0xa8,0x62,0x3c,0x60,
-0x5a,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,
-0x00,0xf2,0x00,0x63,0x00,0xfc,0x05,0xf0,0x06,0xfc,0x66,0x43,0x05,0xfc,0x28,0x46,
-0x00,0xfa,0x04,0xfa,0x04,0x64,0x03,0xfa,0x05,0xf8,0x06,0xf8,0x08,0x64,0x0e,0xfa,
-0x3c,0x60,0xa8,0x62,0x3c,0x60,0x60,0x64,0xa2,0xdb,0x28,0x44,0x5a,0xdb,0x0a,0x64,
-0x5a,0xdb,0xff,0xff,0x2b,0xff,0xd1,0xfe,0x4b,0x00,0x20,0x44,0x01,0x2a,0x4b,0x00,
-0x02,0x2a,0x22,0x00,0x0f,0x4e,0x00,0x60,0x3c,0x61,0x41,0x4d,0x40,0xa1,0xa2,0xff,
-0x19,0x60,0x58,0x4f,0xaa,0x78,0xff,0xff,0xa3,0xff,0x06,0x03,0x2d,0x41,0x19,0x60,
-0x58,0x4f,0xcc,0x78,0xff,0xff,0x08,0xfe,0x0e,0x4f,0x35,0x03,0x3c,0x60,0xa8,0x62,
-0x3c,0x60,0x5a,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,
-0x2b,0xff,0x20,0x44,0xfd,0xb4,0x40,0x40,0x91,0xf1,0x0f,0x4e,0x64,0x41,0x41,0x4d,
-0x40,0xa1,0xa2,0xff,0x19,0x60,0x58,0x4f,0xaa,0x78,0xff,0xff,0xa3,0xff,0x06,0x03,
-0x2d,0x41,0x19,0x60,0x58,0x4f,0xcc,0x78,0xff,0xff,0x08,0xfe,0x0e,0x4f,0x13,0x03,
-0x3c,0x60,0xa8,0x62,0x3c,0x60,0x60,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,
-0x5a,0xdb,0xff,0xff,0x2b,0xff,0x08,0x64,0x0e,0xfa,0x20,0x44,0xfe,0xb4,0x40,0x40,
-0x04,0x64,0x40,0x55,0x3b,0xff,0x2f,0x58,0xff,0xff,0xb8,0xfe,0xff,0xff,0x02,0x24,
-0x97,0xf7,0xff,0xff,0xff,0xff,0xba,0xfe,0xff,0xff,0x05,0x05,0xb9,0xfe,0xbb,0xfe,
-0x30,0x60,0x61,0x78,0xff,0xff,0x36,0x44,0x00,0x7f,0xfc,0xa0,0x60,0x45,0x05,0x05,
-0x0e,0x60,0xd4,0x64,0x44,0xd7,0xff,0xff,0xff,0xff,0x30,0x60,0x61,0x78,0xff,0xff,
-0x7f,0x60,0xc0,0x64,0x24,0x45,0xa4,0x80,0x7f,0x67,0x02,0x61,0x13,0x02,0x20,0x44,
-0x01,0x2a,0x03,0x00,0x7f,0x67,0x07,0x61,0x0d,0x00,0x48,0xf1,0x25,0x44,0x64,0x45,
-0x91,0xfb,0xd4,0x80,0x7f,0x67,0x05,0x61,0x05,0x07,0x20,0x44,0x03,0xbc,0x40,0x40,
-0xd1,0xfe,0x00,0x67,0x23,0x58,0xff,0xff,0x24,0x44,0x36,0x60,0x58,0x4f,0x0d,0x78,
-0xff,0xff,0x03,0x61,0x03,0x03,0x31,0x60,0xdc,0x78,0xff,0xff,0x24,0x44,0x40,0xb0,
-0xff,0xff,0x48,0x03,0x25,0x46,0x66,0x5c,0xd1,0xf9,0x0e,0xf0,0xff,0xff,0x64,0x40,
-0x08,0x2a,0x1f,0x00,0x3c,0x60,0x5a,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,
-0x18,0x03,0x0f,0x4e,0x46,0x45,0x3c,0x60,0xa8,0x62,0x00,0x64,0xa2,0xdb,0x66,0x44,
-0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xa2,0xff,0x1a,0x60,0x58,0x4f,
-0xa6,0x78,0xff,0xff,0xa3,0xff,0xd1,0xfe,0x0e,0x4f,0x0e,0xf2,0xff,0xff,0xf7,0xb4,
-0x0e,0xfa,0xd1,0xf5,0x22,0xf0,0xff,0x60,0xef,0x64,0xa0,0x84,0xa2,0xda,0x00,0x64,
-0x1c,0xfa,0x3c,0x60,0xa8,0x62,0x3c,0x60,0x66,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,
-0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0x0e,0xf2,0xff,0xff,0x02,0xbc,0x0e,0xfa,
-0x3c,0x60,0x66,0x64,0x40,0x47,0x2f,0x60,0x58,0x4f,0xc5,0x78,0xff,0xff,0x32,0x60,
-0xd2,0x78,0xff,0xff,0x5a,0x60,0x64,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
-0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x25,0x46,0x3c,0x60,
-0x48,0x65,0x08,0xf2,0xff,0xff,0xd4,0x80,0x03,0x61,0x40,0x03,0x3c,0x60,0xa8,0x62,
-0x00,0x64,0xa2,0xdb,0x25,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,
-0x28,0xf0,0xfd,0x7f,0x04,0x7e,0x64,0x40,0x02,0x26,0x40,0xbc,0x0e,0xf0,0x64,0x40,
-0x04,0x26,0x80,0xbc,0xc0,0x22,0xff,0x7f,0x64,0x40,0x08,0x26,0x08,0xbc,0x0e,0xfa,
-0x3f,0xf0,0xff,0xff,0x28,0xf2,0x38,0xf2,0x60,0x41,0x08,0x2a,0x64,0x47,0x38,0xfa,
-0x60,0x45,0x49,0xf3,0x00,0x63,0xd4,0x80,0x22,0xfc,0x01,0x04,0x07,0x00,0x22,0xf0,
-0x08,0x64,0xb0,0x84,0xa2,0xda,0x31,0x60,0xea,0x78,0xff,0xff,0x39,0x60,0x58,0x4f,
-0x90,0x78,0xff,0xff,0x05,0x04,0x22,0xf0,0x04,0x64,0xb0,0x84,0xa2,0xda,0x14,0x00,
-0x32,0x60,0x58,0x4f,0xd7,0x78,0xff,0xff,0x05,0x61,0x03,0x04,0x32,0x60,0xd4,0x78,
-0xff,0xff,0x25,0x46,0xcb,0xf3,0x95,0xf3,0xfe,0xa0,0x00,0xa0,0x05,0x07,0x04,0x02,
-0x22,0xf0,0x04,0x64,0xb0,0x84,0xa2,0xda,0x24,0x44,0x01,0x2b,0x3a,0x00,0x02,0x27,
-0x38,0x00,0x3c,0x60,0x5a,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,0x46,0x48,
-0x10,0x63,0x25,0x46,0xbf,0xd0,0x28,0x46,0xff,0xd8,0x25,0x46,0xfb,0x1d,0x64,0x44,
-0x00,0xa8,0x28,0x44,0x03,0x02,0x28,0x46,0x05,0xfa,0x06,0xfa,0x16,0x63,0x6a,0x61,
-0x25,0x46,0xa3,0xd0,0x28,0x46,0xc9,0x81,0xbd,0xd8,0xfa,0x02,0x0e,0xf0,0xff,0x60,
-0xfc,0x64,0xa0,0x84,0x0e,0xfa,0x00,0x64,0x0f,0xfa,0x00,0x64,0x25,0x46,0x00,0xfa,
-0x66,0x44,0x05,0xfa,0x3c,0x60,0xa8,0x62,0x3c,0x60,0x54,0x64,0xa2,0xdb,0x25,0x44,
-0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xd1,0xfe,0x00,0x64,0x0e,0xfa,
-0x28,0x46,0x0e,0xf0,0xff,0x60,0xfb,0x64,0xa0,0x84,0x0e,0xfa,0x22,0xf2,0x66,0x43,
-0x00,0xa8,0x60,0x5c,0x08,0x60,0x0a,0x64,0xa0,0xdd,0x64,0x44,0x69,0x02,0x95,0xf3,
-0xff,0xff,0x00,0xa0,0xff,0xff,0x44,0x03,0x26,0x44,0x0a,0x36,0x00,0x63,0x14,0x36,
-0x01,0x63,0x37,0x36,0x02,0x63,0x6e,0x36,0x03,0x63,0x13,0xfc,0x26,0x44,0xff,0x27,
-0x06,0x00,0x26,0xf2,0x26,0xf2,0x60,0x45,0x60,0x47,0xd4,0x84,0x01,0x00,0x60,0x47,
-0xff,0x65,0xa4,0x84,0x1d,0xfa,0x00,0x64,0x15,0xfa,0x27,0xf2,0xff,0xff,0x00,0xa0,
-0xff,0xff,0x15,0x02,0x1e,0x60,0xb8,0x65,0x25,0xf2,0xff,0xff,0x0f,0xb4,0xb8,0xf1,
-0x00,0x7f,0xd0,0x80,0x60,0x5c,0x06,0x05,0x67,0x60,0xe8,0x64,0xa0,0xd3,0xff,0xff,
-0xdc,0x84,0xa2,0xdb,0xa5,0xd9,0x64,0x40,0x00,0x3a,0xb8,0xf9,0x11,0x00,0x29,0xf0,
-0x08,0x67,0xb0,0x84,0xa2,0xda,0x1e,0x65,0x29,0xf2,0xff,0xff,0x60,0x40,0x03,0x2b,
-0x18,0x65,0x65,0x44,0x04,0xa4,0x64,0x40,0x40,0x27,0x08,0xa4,0x21,0xfa,0x08,0x00,
-0x3a,0x60,0x58,0x4e,0x14,0x78,0xff,0xff,0x3a,0x60,0x58,0x4e,0x72,0x78,0xff,0xff,
-0x95,0xf3,0xff,0xff,0x00,0xa0,0x47,0xf3,0x03,0x03,0x24,0x47,0x0f,0xb4,0x02,0x00,
-0xe8,0x84,0xe8,0x84,0x1c,0xfa,0x3c,0x60,0xa8,0x62,0x3c,0x60,0x48,0x64,0xa2,0xdb,
-0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xc1,0xfe,0x0c,0x00,
-0x3c,0x60,0xa8,0x62,0x3c,0x60,0x66,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,
-0x5a,0xdb,0xff,0xff,0x2b,0xff,0xd3,0xfe,0x0e,0xf0,0x24,0x44,0x02,0x27,0x02,0x00,
-0x01,0x27,0x22,0x00,0x64,0x40,0x08,0x2a,0x1f,0x00,0x3c,0x60,0x5a,0x62,0xa2,0xd3,
-0xff,0xff,0x00,0xa8,0x60,0x46,0x18,0x03,0x0f,0x4e,0x46,0x45,0x3c,0x60,0xa8,0x62,
-0x00,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,
-0xa2,0xff,0x1a,0x60,0x58,0x4f,0xa6,0x78,0xff,0xff,0xa3,0xff,0xd1,0xfe,0x0e,0x4f,
-0x0e,0xf2,0xff,0xff,0xf7,0xb4,0x0e,0xfa,0x00,0x67,0x01,0x00,0x7f,0x67,0x23,0x58,
-0xff,0xff,0x0f,0x4e,0x25,0x46,0x38,0xf2,0x05,0x48,0x00,0xa8,0x60,0x41,0x66,0x44,
-0x0a,0x03,0x00,0xf2,0x42,0xfe,0xac,0x86,0x01,0xf2,0x1e,0x03,0x7f,0xb5,0xd5,0x81,
-0x66,0x44,0xf7,0x07,0x25,0x46,0x05,0xf0,0x06,0xfa,0x05,0xfa,0xd0,0x80,0x64,0x43,
-0x12,0x03,0x60,0x46,0x01,0xf0,0x80,0x67,0xb0,0x84,0x01,0xfa,0x00,0xf0,0x00,0x64,
-0x00,0xfa,0x64,0x46,0x05,0xfc,0x46,0x45,0xa2,0xff,0x1a,0x60,0x58,0x4f,0xa6,0x78,
-0xff,0xff,0xa3,0xff,0x08,0x45,0x02,0xfe,0x2e,0x58,0xff,0xff,0x20,0x44,0x40,0xb0,
-0x7f,0x67,0x02,0x61,0x03,0x03,0x34,0x60,0x0f,0x78,0xff,0xff,0x00,0x64,0x24,0x45,
-0x80,0x26,0x01,0x64,0x95,0xfb,0x59,0x60,0xd4,0x62,0xa2,0xd3,0xff,0xff,0x01,0xa4,
-0xa2,0xdb,0x4a,0xf1,0x43,0xf1,0x64,0x40,0x01,0x2a,0x08,0x00,0x64,0x40,0x01,0x2a,
-0x05,0x00,0x1e,0x60,0xc0,0x63,0x09,0x60,0x2b,0x64,0x19,0x00,0xc7,0xf1,0x1e,0x60,
-0xc0,0x63,0x64,0x45,0x80,0x27,0x19,0x00,0x64,0x44,0x00,0xac,0xff,0xff,0x0d,0x02,
-0x02,0x60,0x52,0x64,0xbd,0xdb,0x03,0x60,0x1c,0x64,0xbd,0xdb,0x7f,0x60,0xff,0x64,
-0xbd,0xdb,0x7f,0x60,0xff,0x64,0xbd,0xdb,0x07,0x00,0xe8,0x84,0xe0,0x84,0xbd,0xdb,
-0xbd,0xdb,0xbd,0xdb,0xff,0xff,0xbd,0xdb,0x36,0x00,0x80,0x67,0x94,0x81,0x61,0x44,
-0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe0,0x84,0xbd,0xdb,0x61,0x44,0xe8,0x84,
-0xe8,0x84,0xe8,0x84,0xe0,0x84,0xbd,0xdb,0x0d,0x60,0x18,0x65,0x61,0x44,0xd4,0x80,
-0xff,0xff,0x01,0x06,0x65,0x44,0xe0,0x85,0xc4,0x85,0xe0,0x84,0xe0,0x84,0xe0,0x84,
-0xc4,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe0,0x84,0xbd,0xdb,
-0x06,0x60,0x8c,0x65,0x61,0x44,0xd4,0x80,0xff,0xff,0x01,0x06,0x65,0x44,0xe0,0x85,
-0xc4,0x85,0xe0,0x84,0xe0,0x84,0xe0,0x84,0xc4,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,
-0xe8,0x84,0xe0,0x84,0xbd,0xdb,0x1e,0x60,0xc0,0x63,0x04,0x61,0xbd,0xd1,0x90,0x65,
-0x64,0x44,0xd4,0x80,0x65,0x44,0x01,0x05,0xbf,0xdb,0x09,0x60,0x2b,0x65,0x64,0x44,
-0xd4,0x80,0xcd,0x81,0x02,0x06,0x65,0x44,0xbf,0xdb,0xf0,0x02,0x00,0x61,0x41,0x56,
-0xc7,0xfe,0x30,0x60,0x61,0x78,0xff,0xff,0x36,0x47,0xff,0x23,0x06,0x00,0x00,0x7f,
-0x60,0x41,0x2e,0x67,0x7e,0x00,0x00,0x10,0x7f,0x67,0x34,0x60,0x0f,0x78,0xff,0xff,
-0x99,0xff,0x00,0x60,0x00,0xeb,0x00,0x60,0x00,0xea,0x98,0xff,0x20,0x44,0x80,0xbc,
-0x40,0x40,0x59,0x60,0xea,0x63,0xc9,0xf3,0xa3,0xdb,0x00,0x63,0x60,0x40,0x01,0x26,
-0x09,0x00,0x01,0xa3,0x60,0x40,0x02,0x26,0x05,0x00,0x01,0xa3,0x60,0x40,0x04,0x26,
-0x01,0x00,0x01,0xa3,0x60,0x41,0x17,0x60,0xfc,0x65,0xa5,0xdd,0x61,0x44,0x08,0x2a,
-0x03,0x00,0x03,0x63,0x08,0x64,0x0c,0x00,0x04,0x2a,0x03,0x00,0x02,0x63,0x04,0x64,
-0x07,0x00,0x02,0x2a,0x03,0x00,0x01,0x63,0x02,0x64,0x02,0x00,0x00,0x63,0x01,0x64,
-0x50,0xfb,0x51,0xfd,0x95,0xf3,0xff,0xff,0x00,0xa0,0x00,0x64,0x2d,0x03,0xa1,0xfb,
-0xa2,0xfb,0xa3,0xfb,0xff,0xff,0x80,0xf3,0x88,0xff,0x00,0x75,0x00,0x72,0xe0,0x84,
-0xe0,0x84,0xe0,0x84,0xe0,0x84,0x60,0x53,0xed,0xe2,0xbf,0xf3,0xff,0xff,0xff,0xb4,
-0x60,0x52,0x8a,0xff,0xbd,0xf1,0x81,0xf9,0xbe,0xf1,0xff,0xff,0x82,0xf9,0xbf,0xf1,
-0x83,0xf9,0x17,0x60,0xfa,0x63,0xa3,0xd3,0x00,0x65,0x60,0x40,0x02,0x26,0x01,0x65,
-0x60,0x40,0x04,0x26,0x02,0x65,0x60,0x40,0x08,0x26,0x03,0x65,0x59,0x60,0xe8,0x62,
-0x65,0x44,0xa2,0xdb,0x00,0x67,0x10,0x00,0xc9,0xf3,0x00,0x65,0x60,0x40,0x02,0x26,
-0x01,0x65,0x60,0x40,0x04,0x26,0x02,0x65,0x60,0x40,0x08,0x26,0x03,0x65,0x59,0x60,
-0xe8,0x62,0x65,0x44,0xa2,0xdb,0x00,0x67,0x23,0x58,0xff,0xff,0x7f,0x60,0xc0,0x64,
-0x24,0x45,0xa4,0x80,0x7f,0x67,0x02,0x61,0x3a,0x02,0x59,0x60,0xd6,0x62,0xa2,0xd3,
-0xff,0xff,0x01,0xa4,0xa2,0xdb,0xff,0x60,0xfe,0x64,0x32,0x45,0x24,0x92,0x02,0x61,
-0x41,0x56,0xc7,0xfe,0x30,0x60,0x61,0x78,0xff,0xff,0x94,0xf1,0x20,0x44,0x64,0x40,
-0xff,0x26,0x24,0x00,0x7f,0xb4,0x40,0x40,0x00,0x64,0x40,0x5e,0x3c,0x60,0x84,0x62,
-0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,0x0f,0xf2,0x18,0x03,0x00,0xa8,0xff,0xff,
-0x15,0x03,0x0f,0x4e,0x46,0x45,0x3c,0x60,0xa8,0x62,0x00,0x64,0xa2,0xdb,0x66,0x44,
-0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xa2,0xff,0x1a,0x60,0x58,0x4f,
-0xa6,0x78,0xff,0xff,0xa3,0xff,0xd1,0xfe,0x0e,0x4f,0xe0,0x00,0x00,0x67,0x23,0x58,
-0xff,0xff,0x00,0x61,0x00,0x7c,0x08,0x60,0x0a,0x64,0xa0,0xd9,0x00,0x67,0x23,0x58,
-0xff,0xff,0x25,0x44,0xa0,0xd1,0x08,0x60,0x0a,0x64,0xa0,0xd9,0x00,0x67,0x23,0x58,
-0xff,0xff,0x7f,0x60,0xc0,0x64,0x24,0x45,0xa4,0x80,0x02,0x61,0x25,0x02,0x25,0x45,
-0x13,0x60,0x1a,0x63,0x05,0x61,0xbd,0xd3,0xbd,0xd1,0xd4,0x80,0xbd,0xd3,0xcd,0x81,
-0x02,0x03,0x19,0x03,0xf8,0x00,0x40,0x4c,0x0f,0x4e,0x64,0x41,0x41,0x4d,0x40,0xa1,
-0xa2,0xff,0x19,0x60,0x58,0x4f,0xaa,0x78,0xff,0xff,0xa3,0xff,0x06,0x03,0x2d,0x41,
-0x19,0x60,0x58,0x4f,0xcc,0x78,0xff,0xff,0x08,0xfe,0x0e,0x4f,0x01,0x03,0x2c,0x58,
-0x0c,0x61,0x05,0x67,0x02,0x00,0x04,0x61,0x7f,0x67,0x23,0x58,0xff,0xff,0x03,0x4e,
-0x0c,0x60,0x6e,0x62,0xa2,0xd7,0x58,0x43,0xff,0xff,0x0e,0x43,0x41,0x47,0x7e,0x60,
-0xc0,0x64,0x24,0x45,0xa4,0x80,0x02,0x61,0x26,0x02,0x25,0x45,0xfc,0x2b,0x22,0x00,
-0x0e,0x60,0xd8,0x63,0x6d,0x61,0x24,0x44,0x01,0x27,0x11,0x00,0xbd,0xd3,0xa3,0xd1,
-0xd4,0x80,0xcd,0x81,0x08,0x24,0x64,0x58,0x08,0xa3,0xf8,0x02,0x15,0xf5,0x22,0xf2,
-0xff,0xff,0x00,0xa8,0x00,0x61,0x01,0x02,0x04,0x61,0x00,0x67,0x0d,0x00,0x27,0x40,
-0x04,0x3a,0xfb,0x00,0xbd,0xd3,0xbe,0xd1,0xd4,0x80,0xcd,0x81,0x08,0x24,0x64,0x58,
-0x08,0xa3,0xf5,0x02,0x04,0x61,0x7f,0x67,0x23,0x58,0xff,0xff,0x4b,0xd3,0x15,0xf5,
-0x60,0x41,0x22,0xf0,0xe9,0x85,0x64,0x44,0xff,0x22,0xdc,0x84,0xc4,0x84,0x22,0xfa,
-0x64,0x44,0xc2,0x82,0x00,0xa8,0xc2,0x84,0x08,0x24,0xd8,0x84,0xbf,0xd1,0xd8,0x85,
-0x64,0x43,0x58,0x4f,0x61,0x00,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x67,0x60,
-0xe4,0x62,0x01,0x64,0xa2,0xdb,0x1e,0x60,0xe2,0x62,0xa2,0xd1,0x00,0x60,0x80,0x64,
-0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x05,0x00,0x01,0x64,0x90,0xfb,0x01,0x67,
-0x85,0xfb,0xff,0xff,0x15,0xf5,0xff,0xff,0x22,0xf2,0xbf,0xd1,0xff,0xff,0x62,0x43,
-0xcc,0x84,0xe0,0x85,0x09,0x06,0xbf,0xd1,0x64,0x41,0xd5,0x80,0x64,0x43,0x01,0x06,
-0x65,0x41,0x48,0x65,0x58,0x4f,0x55,0x00,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,
-0x58,0x60,0xda,0x63,0xa3,0xd3,0x15,0xf5,0x60,0x41,0xe8,0x84,0xdc,0x84,0x22,0xfa,
-0xfc,0x60,0x80,0x64,0x5a,0xda,0xda,0x85,0x04,0xa3,0x58,0x4f,0x25,0x00,0x00,0x67,
-0x00,0x61,0x23,0x58,0xff,0xff,0x15,0xf5,0x22,0xf2,0xbf,0xd1,0xff,0xff,0x62,0x43,
-0xcc,0x84,0xe0,0x81,0x15,0x06,0xbf,0xd1,0x64,0x45,0xd5,0x80,0x64,0x43,0xfc,0xa3,
-0x04,0x06,0x65,0x41,0xe9,0x84,0xdc,0x84,0x22,0xfa,0x44,0x65,0x04,0xa1,0x58,0x4f,
-0x28,0x00,0x58,0x60,0xda,0x62,0xa2,0xd3,0xff,0xff,0xcc,0x84,0xe0,0x84,0xa2,0xdb,
-0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x41,0x4d,0x00,0xa1,0x80,0x64,0x17,0x03,
-0x65,0x42,0xd4,0x85,0x2d,0x41,0x55,0x8d,0xff,0xff,0x02,0x04,0x65,0x41,0x02,0x00,
-0x00,0x64,0x40,0x4d,0xca,0x84,0xbd,0xd1,0xc9,0x81,0x58,0xd8,0xfc,0x02,0x2d,0x41,
-0x00,0xa1,0xd8,0x85,0x04,0x03,0x00,0xf4,0x7c,0x65,0x04,0x62,0xeb,0x00,0x2f,0x58,
-0xff,0xff,0x41,0x4d,0x01,0xf2,0x65,0x42,0x7f,0xb5,0x2d,0x41,0x00,0xa1,0x55,0x8d,
-0x0e,0x03,0x02,0x04,0x65,0x41,0x02,0x00,0x00,0x64,0x40,0x4d,0xca,0x84,0x58,0xd0,
-0xc9,0x81,0xbd,0xd9,0xfc,0x02,0x00,0xf4,0x01,0xf2,0x04,0x62,0xed,0x00,0x2f,0x58,
-0xff,0xff,0x66,0x44,0x93,0xfb,0x8a,0xf1,0x02,0x64,0xc0,0x84,0xe8,0x84,0x22,0xfa,
-0xf1,0x60,0x01,0x64,0x23,0xfa,0x5a,0x8d,0x89,0xf1,0x28,0x60,0x00,0x63,0x44,0x4b,
-0x43,0x4c,0x2b,0x45,0xd7,0x80,0xbe,0xd1,0x0b,0x05,0x2d,0x45,0x64,0x43,0x44,0x61,
-0x35,0x60,0x58,0x4f,0x3f,0x78,0xff,0xff,0x45,0x4d,0x2c,0x43,0x04,0xa3,0xf0,0x00,
-0x93,0xf1,0x3c,0x60,0xa8,0x62,0x3c,0x60,0x90,0x64,0xa2,0xdb,0x5a,0xd9,0x0a,0x64,
-0x5a,0xdb,0xff,0xff,0x2b,0xff,0x08,0x65,0x45,0x55,0x3b,0xff,0x00,0x67,0x00,0x61,
-0x23,0x58,0xff,0xff,0x66,0x44,0x92,0xfb,0xc6,0xfe,0x00,0x67,0x00,0x61,0x23,0x58,
-0xff,0xff,0x66,0x44,0x93,0xfb,0x72,0xf1,0x01,0x60,0x00,0x64,0xc0,0x81,0x29,0x60,
-0x02,0x63,0x00,0x64,0x40,0x4b,0xf1,0x60,0x02,0x64,0x23,0xfa,0xda,0x85,0xa3,0xd3,
-0xff,0xff,0xff,0xff,0x01,0x2a,0x0b,0x00,0x41,0x4c,0x10,0x61,0x35,0x60,0x58,0x4f,
-0x3f,0x78,0xff,0xff,0x2b,0x44,0xdc,0x84,0x40,0x4b,0x2c,0x41,0xf0,0xa3,0xcd,0x81,
-0x10,0xa3,0xed,0x02,0x93,0xf1,0xff,0xff,0x64,0x46,0x2b,0x44,0xe0,0x84,0xe0,0x84,
-0xe0,0x84,0xdc,0x84,0x22,0xfa,0x3c,0x60,0xa8,0x62,0x3c,0x60,0x90,0x64,0xa2,0xdb,
-0x5a,0xd9,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0x08,0x65,0x45,0x55,0x3b,0xff,
-0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x66,0x44,0x93,0xfb,0x3d,0x60,0xcc,0x64,
-0xa0,0xd1,0x02,0x64,0xc0,0x84,0xe8,0x84,0x22,0xfa,0xf1,0x60,0x04,0x64,0x23,0xfa,
-0xda,0x85,0x3d,0x60,0xce,0x63,0x64,0x41,0x35,0x60,0x58,0x4f,0x3f,0x78,0xff,0xff,
-0x93,0xf1,0x3c,0x60,0xa8,0x62,0x3c,0x60,0x90,0x64,0xa2,0xdb,0x5a,0xd9,0x0a,0x64,
-0x5a,0xdb,0xff,0xff,0x2b,0xff,0x08,0x65,0x45,0x55,0x3b,0xff,0x00,0x67,0x00,0x61,
-0x23,0x58,0xff,0xff,0x25,0x44,0x1a,0xf1,0x1b,0xf1,0xd0,0x80,0xd0,0x80,0x0e,0x04,
-0x08,0x06,0x1c,0xf1,0x1d,0xf1,0xd0,0x80,0xd0,0x80,0x08,0x04,0x02,0x06,0x48,0xfe,
-0x05,0x00,0x25,0x46,0x01,0xf0,0x03,0x67,0xa0,0x85,0x94,0x80,0x2f,0x58,0xff,0xff,
-0x15,0xf5,0x00,0x60,0xf1,0x64,0x22,0xfa,0x25,0x44,0x23,0xfa,0x01,0x60,0xa8,0x64,
-0x40,0x4d,0x46,0x4c,0xfc,0x60,0x00,0x64,0x40,0x4b,0xfe,0x60,0x00,0x64,0x36,0x63,
-0x46,0x61,0xc8,0x84,0x2b,0x46,0x58,0xd0,0x2c,0x46,0x59,0xd8,0xfb,0x1f,0x2d,0x41,
-0x00,0xb9,0x84,0xa1,0x08,0x03,0x04,0x24,0x00,0x61,0x41,0x4d,0x00,0xf4,0x02,0x61,
-0x7a,0x63,0x46,0x4c,0xef,0x00,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0xfc,0x60,
-0x00,0x64,0x40,0x4b,0x4b,0xd3,0x15,0xf5,0x60,0x41,0xd8,0x84,0xe8,0x84,0x22,0xfa,
-0x25,0x44,0x23,0xfa,0xbf,0xd3,0x66,0x45,0x48,0x63,0xc8,0x84,0x2b,0x46,0x58,0xd0,
-0x65,0x46,0xc9,0x81,0xbd,0xd8,0xfa,0x02,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,
-0xfc,0x60,0x00,0x64,0x40,0x4b,0x4b,0xd3,0x15,0xf5,0x60,0x41,0x22,0xf0,0xe9,0x85,
-0x64,0x44,0xff,0x22,0xdc,0x84,0xc4,0x84,0x22,0xfa,0x64,0x44,0xc2,0x82,0x00,0xa8,
-0xc2,0x84,0x08,0x24,0xd8,0x84,0xbf,0xd1,0xc9,0x83,0x64,0x41,0xc9,0x81,0x66,0x45,
-0x2b,0x46,0x59,0xd0,0x65,0x46,0x58,0xd8,0xfb,0x1f,0x00,0x67,0x00,0x61,0x23,0x58,
-0xff,0xff,0x15,0xf5,0x02,0x64,0x22,0xfa,0xfc,0xa3,0xa3,0xd3,0x25,0x43,0xa0,0xd3,
-0x23,0xfc,0xdc,0x84,0x24,0xfa,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x15,0xf5,
-0x02,0x64,0x22,0xfa,0x25,0x44,0x23,0xfa,0x65,0xf3,0xff,0xff,0x02,0xb4,0x01,0x64,
-0x08,0x24,0x02,0x64,0x24,0xfa,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x15,0xf5,
-0x02,0x64,0x22,0xfa,0x25,0x44,0x23,0xfa,0x50,0xf3,0x24,0xfa,0x00,0x67,0x00,0x61,
-0x23,0x58,0xff,0xff,0x15,0xf5,0x04,0x64,0x22,0xfa,0x25,0x44,0x23,0xfa,0x58,0xf3,
-0x24,0xfa,0xff,0xff,0x59,0xf3,0x5a,0xf1,0x80,0x65,0xc4,0x87,0x00,0x7f,0x25,0xfa,
-0x64,0x44,0xc4,0x87,0x00,0x7f,0x26,0xfa,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,
-0x15,0xf5,0x24,0xf0,0x17,0x60,0xe4,0x65,0x22,0xf2,0xa5,0xd9,0x02,0xa8,0x64,0x41,
-0x0f,0x02,0x00,0xb9,0xff,0xff,0x0c,0x03,0x16,0x60,0xda,0x62,0xa2,0xd9,0x7f,0xf3,
-0xff,0xff,0xd0,0x80,0xff,0xff,0x04,0x02,0x01,0x63,0x08,0x60,0x2a,0x64,0xa0,0xdd,
-0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x15,0xf5,0x20,0x63,0x17,0x60,0x2c,0x61,
-0x46,0x64,0x58,0xd0,0x59,0xd9,0xfd,0x1f,0x24,0xf0,0x20,0x64,0xd0,0x81,0x17,0x60,
-0x30,0x64,0x0d,0x06,0xc0,0x83,0x01,0x2a,0x06,0x00,0xcf,0x83,0xa3,0xd3,0xcd,0x81,
-0x00,0x7f,0xbd,0xdb,0x04,0x03,0x00,0x64,0xc9,0x81,0xbd,0xdb,0xfd,0x02,0x00,0x67,
-0x00,0x61,0x23,0x58,0xff,0xff,0x15,0xf5,0x22,0xf2,0x24,0xf0,0x02,0xa8,0x59,0x60,
-0x9e,0x62,0x09,0x02,0xa2,0xd9,0x64,0x41,0x32,0x44,0x02,0xb5,0x00,0xb9,0xd4,0x84,
-0x08,0x28,0x02,0xbc,0x40,0x52,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x15,0xf5,
-0x22,0xf2,0x24,0xf0,0x02,0xa8,0x01,0x60,0x92,0x65,0x37,0x02,0xa5,0xd9,0x17,0x60,
-0xf2,0x62,0x00,0x61,0x00,0x64,0x01,0x65,0x64,0x40,0x01,0x2a,0x02,0x00,0x01,0xa1,
-0x02,0x7e,0x64,0x40,0x02,0x2a,0x09,0x00,0x01,0xa1,0xa5,0x80,0xff,0xff,0x02,0x03,
-0x04,0x7e,0x03,0x00,0x04,0x7f,0xa2,0xdb,0x02,0xa2,0x64,0x40,0x04,0x2a,0x09,0x00,
-0x01,0xa1,0xa5,0x80,0xff,0xff,0x02,0x03,0x0b,0x7e,0x03,0x00,0x0b,0x7f,0xa2,0xdb,
-0x02,0xa2,0x64,0x40,0x08,0x2a,0x08,0x00,0x01,0xa1,0xa5,0x80,0xff,0xff,0x02,0x03,
-0x16,0x7e,0x02,0x00,0x16,0x7f,0xa2,0xdb,0xa5,0x80,0xff,0xff,0x02,0x03,0x00,0x7f,
-0xa2,0xdb,0x17,0x60,0xf0,0x62,0x61,0x43,0xa2,0xdd,0x00,0x67,0x00,0x61,0x23,0x58,
-0xff,0xff,0x5a,0x60,0x26,0x63,0x00,0x60,0xd5,0x61,0x00,0x64,0xcd,0x81,0xbd,0xdb,
-0xfd,0x02,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x15,0xf5,0x24,0xf0,0x3d,0x60,
-0xa0,0x62,0xa2,0xd9,0x17,0x60,0x24,0x62,0xa2,0xd9,0x00,0x67,0x00,0x61,0x23,0x58,
-0xff,0xff,0x15,0xf5,0x24,0xf0,0x67,0x60,0x34,0x65,0x03,0x60,0xe8,0x64,0x64,0x40,
-0x00,0x36,0x03,0x00,0xa5,0xdb,0x01,0x64,0x40,0x5a,0x17,0x60,0x92,0x64,0xa0,0xd9,
-0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x15,0xf5,0x24,0xf2,0x99,0xff,0x40,0x5b,
-0x98,0xff,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x15,0xf5,0x24,0xf2,0x99,0xff,
-0x40,0x5a,0x98,0xff,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x01,0x65,0x68,0x60,
-0x06,0x61,0x0b,0x00,0x02,0x65,0x68,0x60,0x14,0x61,0x07,0x00,0x04,0x65,0x68,0x60,
-0x22,0x61,0x03,0x00,0x08,0x65,0x68,0x60,0x30,0x61,0x41,0xf3,0xff,0xff,0xb4,0x84,
-0x41,0xfb,0x15,0xf5,0x46,0x64,0x00,0x60,0x0c,0x63,0x58,0xd0,0x59,0xd9,0xfd,0x1f,
-0x22,0xf2,0xff,0xff,0xf8,0xa0,0x0f,0x64,0x01,0x03,0x07,0x64,0x45,0xfb,0x67,0x44,
-0xd9,0xfb,0xda,0xfb,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x15,0xf5,0x02,0x64,
-0x22,0xfa,0x25,0x44,0x23,0xfa,0x43,0xf3,0x83,0xb4,0x24,0xfa,0x00,0x67,0x00,0x61,
-0x23,0x58,0xff,0xff,0xbc,0xf3,0xff,0xff,0x00,0xa4,0xff,0xff,0x16,0x03,0x15,0xf5,
-0x43,0xf3,0x24,0xf2,0x60,0x41,0x83,0xb5,0xff,0x60,0x7c,0x7c,0xa1,0x81,0xb5,0x84,
-0x43,0xfb,0xff,0xff,0x01,0x2a,0x09,0x00,0x1e,0x60,0xc0,0x63,0x09,0x60,0x2b,0x64,
-0xbd,0xdb,0xbd,0xdb,0xbd,0xdb,0xff,0xff,0xbd,0xdb,0x00,0x67,0x00,0x61,0x23,0x58,
-0xff,0xff,0x15,0xf5,0x22,0xf2,0x24,0xf0,0x02,0xa8,0xff,0xff,0x05,0x02,0x00,0x64,
-0x64,0x40,0x00,0x3a,0x03,0x64,0xd5,0xfb,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,
-0x67,0x60,0x58,0x62,0x01,0x64,0xa2,0xdb,0x17,0x60,0x24,0x62,0x05,0x64,0xa2,0xdb,
-0x01,0x60,0x7a,0x63,0x67,0x60,0x5a,0x65,0x03,0x61,0xbd,0xd1,0x00,0x7f,0x64,0x5e,
-0xa5,0xdb,0xda,0x85,0x64,0x47,0x00,0x7f,0xa5,0xdb,0xcd,0x81,0xda,0x85,0xf5,0x02,
-0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x15,0xf5,0x22,0xf2,0x24,0xf0,0x02,0xa8,
-0x1f,0xf3,0x14,0x02,0x60,0x40,0x10,0x2a,0x11,0x00,0x17,0x60,0x9c,0x62,0xa2,0xd9,
-0x00,0x64,0x64,0x40,0x01,0x26,0x20,0x64,0xc5,0xfb,0x16,0x60,0x60,0x62,0xa2,0xd3,
-0xff,0xff,0x03,0xa8,0xff,0xff,0x02,0x02,0xc5,0xf3,0x47,0xfb,0x00,0x67,0x00,0x61,
-0x23,0x58,0xff,0xff,0x15,0xf5,0x19,0x60,0x4a,0x65,0x26,0xf2,0x25,0xf0,0x60,0x41,
-0x64,0x43,0xeb,0x83,0x00,0x7f,0xe0,0x84,0x44,0xd1,0x61,0x47,0x93,0x83,0x00,0x7f,
-0xe0,0x84,0x44,0xd1,0xeb,0x83,0x93,0x83,0x0f,0x60,0xf0,0x65,0xa7,0x85,0x02,0x61,
-0x44,0x60,0xce,0x63,0xc7,0x83,0xa3,0xd3,0xff,0xff,0x60,0x40,0x80,0x2b,0x13,0x00,
-0x65,0x44,0xff,0xa1,0x08,0xa5,0xf4,0x02,0x00,0x65,0x7e,0x61,0x54,0x60,0xce,0x63,
-0xc7,0x83,0xa3,0xd3,0xff,0xff,0x60,0x40,0x80,0x2b,0x05,0x00,0x65,0x44,0xff,0xa1,
-0x08,0xa5,0xf4,0x02,0x2e,0x00,0x2d,0xf0,0xff,0xff,0x64,0x47,0x00,0x7f,0xe0,0x84,
-0x60,0x45,0xe0,0x84,0xe0,0x81,0xc4,0x85,0xc5,0x85,0x80,0x67,0xb4,0x84,0xbd,0xdb,
+0x01,0x03,0xcc,0x84,0xd0,0x84,0xa3,0xdb,0x52,0xf3,0xbd,0xf3,0x04,0xb0,0xff,0xff,
+0x35,0x03,0x03,0x3a,0x35,0x00,0x67,0xf3,0xff,0xff,0x60,0x40,0x04,0x26,0x30,0x00,
+0xa3,0xd3,0x4b,0xd1,0x4b,0xd3,0xc0,0x9c,0xc0,0x84,0x4b,0xd1,0x00,0xa0,0x03,0xa0,
+0x01,0x03,0x1f,0x02,0x80,0x60,0x00,0x65,0x64,0x44,0xa4,0x85,0xe8,0x84,0xb4,0x84,
+0xe8,0x84,0xb4,0x84,0xa3,0xdb,0x60,0x45,0xfa,0x64,0xd4,0x80,0xff,0x60,0x06,0x64,
+0xd4,0x80,0x14,0x07,0x13,0x04,0x69,0x60,0xfa,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,
+0xa2,0xdb,0x40,0xf3,0xff,0xff,0x60,0x40,0x00,0x3a,0x03,0x00,0x01,0x64,0x40,0xfb,
+0x07,0x00,0x69,0x60,0xf4,0x62,0x10,0x64,0xa2,0xdb,0x06,0x00,0x00,0x64,0x40,0xfb,
+0x01,0x64,0x22,0xfb,0xff,0xff,0x1a,0xff,0x52,0xf3,0xff,0xff,0x04,0xb0,0x08,0xb0,
+0x06,0x03,0x74,0x02,0x53,0xf3,0xff,0xff,0xff,0xa4,0x53,0xfb,0x71,0x02,0x26,0x46,
+0x00,0xf4,0x02,0xf2,0x5a,0xd2,0x40,0x48,0x40,0x4c,0x5a,0xd2,0x5a,0xd2,0x40,0x4d,
+0x60,0x41,0x5a,0xd0,0x74,0xf9,0x40,0x63,0xad,0x80,0xf0,0xa3,0x09,0x02,0x3c,0x03,
+0x2d,0x41,0x2c,0x44,0x40,0x4d,0x28,0x44,0x40,0x4c,0x00,0x64,0x40,0x48,0xf4,0x00,
+0xd1,0x80,0x01,0x02,0x31,0x04,0x10,0xa3,0x80,0x60,0x00,0x65,0xa5,0x80,0xcf,0x83,
+0x08,0x02,0x28,0x44,0x60,0x88,0x2c,0x44,0x70,0x8c,0x2d,0x44,0x70,0x8d,0xf1,0x81,
+0xf5,0x00,0xe7,0xa3,0x64,0x44,0x00,0xa0,0x00,0x62,0x02,0x02,0x00,0x61,0x1c,0x00,
+0xe0,0x84,0xde,0x82,0xfd,0x04,0x42,0xfe,0xf8,0x84,0x62,0x45,0xc7,0x83,0x60,0x45,
+0x02,0xfe,0xd5,0x84,0x02,0x05,0x01,0x05,0x61,0x44,0xcf,0x83,0x60,0x41,0x08,0x03,
+0x28,0x44,0x60,0x88,0x2c,0x44,0x70,0x8c,0x2d,0x44,0x70,0x8d,0xf1,0x81,0xf1,0x00,
+0xce,0x82,0xe9,0x81,0xfd,0x02,0xf1,0x81,0x02,0xf2,0xff,0xff,0x60,0x47,0xe8,0x84,
+0xe8,0x84,0x5a,0xd2,0x3f,0xb5,0xe0,0x84,0xe0,0x84,0xe0,0x84,0xe0,0x84,0xe0,0x84,
+0xe0,0x84,0xb4,0x84,0x61,0x45,0xd4,0x84,0xc0,0x84,0xe0,0x84,0xe0,0x84,0xe0,0x84,
+0xe0,0x84,0x60,0x53,0x74,0xf3,0x60,0x41,0xe0,0x84,0xe0,0x84,0xe0,0x84,0xe0,0x84,
+0x60,0x45,0x61,0x44,0xd4,0x84,0x9a,0xfb,0x04,0x60,0x00,0x71,0x05,0x64,0x53,0xfb,
+0x52,0xf3,0x26,0x46,0x0c,0xbc,0xa2,0xdb,0x80,0x60,0xf0,0x65,0x25,0xf2,0x4c,0xf1,
+0xa5,0xdb,0x60,0x47,0x00,0x7f,0x08,0xa4,0xd0,0x80,0xff,0x60,0x00,0x65,0x04,0x07,
+0x64,0x44,0xfd,0xa4,0x60,0x47,0x02,0x00,0x25,0xf2,0xff,0xff,0x24,0x88,0x60,0x47,
+0x24,0x8c,0x2c,0x60,0x58,0x4e,0x73,0x78,0xff,0xff,0x0c,0x48,0x2c,0x60,0x58,0x4e,
+0x83,0x78,0xff,0xff,0x2c,0x60,0x58,0x4e,0x99,0x78,0xff,0xff,0x21,0x60,0x98,0x62,
+0xa2,0xd1,0x00,0x60,0x40,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x3f,0x60,
+0x9a,0x62,0x2b,0x60,0xb6,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,
+0x21,0x60,0x98,0x62,0xa2,0xd1,0xff,0x60,0xdf,0x64,0xa0,0x84,0xa2,0xdb,0x26,0x46,
+0x2f,0x58,0xff,0xff,0x65,0x44,0x00,0xa0,0x40,0x48,0x13,0x03,0x69,0x60,0x84,0x62,
+0xa2,0xd3,0xff,0xff,0xdc,0x84,0xf6,0xa0,0xa2,0xdb,0x0f,0x04,0x00,0x64,0xa2,0xdb,
+0x21,0x60,0xaa,0x62,0xa2,0xd1,0x00,0x60,0x40,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,
+0xcf,0xfe,0x69,0x60,0x84,0x62,0x00,0x64,0xa2,0xdb,0x69,0x60,0x86,0x62,0xa2,0xd3,
+0x28,0x45,0xc4,0x84,0xa2,0xdb,0x69,0x60,0x88,0x62,0xa2,0xd3,0xff,0xff,0xdc,0x84,
+0xce,0xa0,0xa2,0xdb,0x14,0x06,0x32,0x64,0xa2,0xdb,0x69,0x60,0x8a,0x62,0xa2,0xd1,
+0x69,0x60,0x8c,0x64,0xc0,0x82,0xa2,0xd1,0x69,0x60,0x86,0x62,0xa2,0xd3,0xff,0xff,
+0xd0,0x84,0xa2,0xdb,0xe0,0x85,0x63,0x60,0x0e,0x62,0x65,0x44,0xa2,0xdb,0x69,0x60,
+0x8a,0x62,0xa2,0xd1,0x69,0x60,0x8c,0x64,0xc0,0x82,0x28,0x44,0xa2,0xdb,0x69,0x60,
+0x8a,0x62,0x64,0x44,0x9e,0xa0,0x02,0xa4,0x01,0x02,0x00,0x64,0xa2,0xdb,0x2e,0x58,
+0xff,0xff,0x6f,0xf5,0xff,0xff,0x75,0xf1,0x2b,0xf8,0x31,0xf8,0xff,0xff,0x76,0xf1,
+0x2c,0xf8,0x32,0xf8,0xff,0xff,0x77,0xf1,0x2d,0xf8,0x33,0xf8,0xff,0xff,0xb0,0xf1,
+0x2e,0xf8,0xb1,0xf1,0xff,0xff,0x2f,0xf8,0xb2,0xf1,0x30,0xf8,0xff,0xff,0x00,0x64,
+0x22,0xfa,0x06,0x60,0x20,0x64,0x0e,0xfa,0x65,0x44,0x29,0xfa,0x2e,0x58,0xff,0xff,
+0x6a,0x60,0x28,0x62,0x2e,0x44,0xa2,0xdb,0x21,0x60,0x98,0x62,0xa2,0xd1,0xff,0x60,
+0xfe,0x64,0xa0,0x84,0xa2,0xdb,0x3f,0x60,0x6a,0x62,0x3f,0x60,0x16,0x64,0xa2,0xdb,
+0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xc1,0xfe,0x21,0x60,
+0x9a,0x62,0x00,0x60,0x01,0x64,0xa2,0xdb,0x2e,0x60,0xdf,0x64,0x5a,0xdb,0xcf,0xfe,
+0x2f,0x58,0xff,0xff,0x21,0x60,0x98,0x62,0xa2,0xd1,0xff,0x60,0xfe,0x61,0xa1,0x84,
+0x5a,0xd1,0x4a,0xdb,0xa1,0x84,0x5a,0xdb,0x6a,0x60,0x28,0x62,0xa2,0xd3,0xff,0xff,
+0x40,0x4e,0x2e,0x58,0xff,0xff,0x27,0x42,0xa2,0xd3,0xa2,0xd1,0xac,0x86,0x0e,0xf2,
+0x61,0x03,0x60,0x40,0x02,0x2a,0x60,0x00,0x2b,0xf2,0x8b,0xf3,0x60,0x40,0x01,0x2a,
+0x02,0x00,0xcc,0x84,0x8b,0xfb,0x0b,0xf2,0xff,0xff,0x00,0xa4,0x44,0x45,0x3c,0x02,
+0x21,0x44,0xf7,0xa0,0xff,0xff,0x38,0x07,0x5c,0x81,0x22,0x44,0x00,0x7c,0xd0,0x80,
+0xff,0xff,0x01,0x02,0x46,0x42,0x3b,0xf3,0xff,0xff,0x60,0x41,0x02,0xfa,0x40,0xa1,
+0x7c,0x63,0x84,0xa1,0x00,0xf2,0x03,0x06,0x01,0xfc,0x60,0x46,0xfa,0x00,0x80,0x60,
+0x7c,0x64,0x01,0xfa,0x66,0x43,0x25,0x46,0x05,0xfc,0x06,0xfc,0x01,0xf0,0x03,0x67,
+0xb0,0x84,0x00,0xf0,0x3c,0x7e,0x01,0xfa,0x04,0x64,0x03,0xfa,0x04,0xf8,0x00,0x64,
+0x0b,0xfa,0x0c,0xfa,0xff,0xff,0x0e,0xfa,0x0f,0xfa,0x10,0xfa,0xff,0xff,0x11,0xfa,
+0x3f,0x60,0x70,0x62,0x3f,0x60,0x4c,0x64,0xa2,0xdb,0x25,0x44,0x5a,0xdb,0x0a,0x64,
+0x5a,0xdb,0xff,0xff,0x2b,0xff,0xaf,0x00,0x0f,0x4e,0x44,0x45,0x64,0x46,0x3f,0x60,
+0x70,0x62,0x00,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,
+0x2b,0xff,0xa2,0xff,0x1a,0x60,0x58,0x4f,0x37,0x78,0xff,0xff,0xa3,0xff,0xd1,0xfe,
+0x0e,0x4f,0x99,0x00,0x00,0x64,0x8b,0xfb,0x2f,0x58,0xff,0xff,0x3f,0x60,0x52,0x64,
+0x40,0x47,0x58,0x4f,0x90,0x00,0x3f,0x60,0x2e,0x64,0x40,0x47,0x58,0x4f,0x08,0x00,
+0x3f,0x60,0x58,0x64,0x40,0x47,0x58,0x4f,0x03,0x00,0x30,0x60,0x09,0x78,0xff,0xff,
+0x27,0x42,0xa2,0xd3,0xa2,0xd1,0xac,0x86,0x0e,0xf2,0x46,0x03,0x60,0x40,0x02,0x2a,
+0x43,0x00,0x89,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0x28,0x03,0x3f,0x60,0x2e,0x64,
+0x27,0x45,0xd4,0x80,0xff,0xff,0x22,0x02,0x00,0x64,0x13,0xfb,0x22,0xf2,0xff,0xff,
+0xff,0xff,0x10,0x26,0x0f,0x00,0x1c,0xf2,0xff,0xff,0x03,0xb4,0xff,0xff,0x00,0x36,
+0x15,0x00,0x01,0x36,0x13,0x00,0x02,0x36,0x05,0x00,0x22,0xf2,0xff,0xff,0x00,0xa8,
+0xff,0xff,0x0c,0x03,0x3f,0x60,0x70,0x62,0x3f,0x60,0x28,0x64,0xa2,0xdb,0x66,0x44,
+0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0x16,0x00,0x0f,0x4e,0x44,0x45,
+0x64,0x46,0x3f,0x60,0x70,0x62,0x00,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,
+0x5a,0xdb,0xff,0xff,0x2b,0xff,0xa2,0xff,0x1a,0x60,0x58,0x4f,0x37,0x78,0xff,0xff,
+0xa3,0xff,0xd1,0xfe,0x0e,0x4f,0xb4,0x00,0x2f,0x58,0xff,0xff,0x02,0x64,0x01,0x00,
+0x01,0x64,0x40,0x55,0x3b,0xff,0x48,0x00,0xb2,0xfe,0xff,0xff,0xf9,0x05,0xb3,0xfe,
+0xff,0xff,0xf4,0x05,0xb0,0xfe,0xff,0xff,0x91,0x05,0xb1,0xfe,0xff,0xff,0x26,0x05,
+0x3b,0x00,0x3b,0xf1,0x0f,0x4e,0x64,0x41,0x41,0x4d,0x40,0xa1,0xa2,0xff,0x19,0x60,
+0x58,0x4f,0x39,0x78,0xff,0xff,0xa3,0xff,0x06,0x03,0x2d,0x41,0x19,0x60,0x58,0x4f,
+0x5b,0x78,0xff,0xff,0x08,0xfe,0x0e,0x4f,0x26,0x03,0x3f,0x60,0x70,0x62,0x3f,0x60,
+0x4c,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,
+0x22,0x41,0x00,0xb9,0x21,0x44,0x08,0x24,0x46,0x42,0x5c,0x81,0x3e,0x41,0x22,0x44,
+0x00,0xb9,0xac,0x86,0x09,0x02,0xd5,0x03,0x31,0x40,0x01,0x2a,0x05,0x00,0x09,0xf0,
+0x02,0x5e,0x44,0x42,0x21,0x44,0x4c,0x81,0x8a,0xf3,0x21,0x45,0xd4,0x80,0xff,0xff,
+0xc8,0x07,0x58,0x4f,0x04,0x00,0x00,0x00,0xa1,0xff,0xff,0xff,0xbe,0x3f,0x3f,0x60,
+0x1c,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,0x40,0x03,0x46,0x48,0x03,0x60,
+0x3c,0x64,0x01,0xfa,0x02,0xf0,0x0f,0x4e,0x64,0x41,0x41,0x4d,0x40,0xa1,0xa2,0xff,
+0x19,0x60,0x58,0x4f,0x39,0x78,0xff,0xff,0xa3,0xff,0x06,0x03,0x2d,0x41,0x19,0x60,
+0x58,0x4f,0x5b,0x78,0xff,0xff,0x08,0xfe,0x0e,0x4f,0x76,0x03,0x3f,0x60,0x70,0x62,
+0x3f,0x60,0x22,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,
+0x2b,0xff,0x00,0xf2,0x00,0x63,0x00,0xfc,0x05,0xf0,0x06,0xfc,0x66,0x43,0x05,0xfc,
+0x28,0x46,0x00,0xfa,0x04,0xfa,0x04,0x64,0x03,0xfa,0x05,0xf8,0x06,0xf8,0x08,0x64,
+0x0e,0xfa,0x3f,0x60,0x70,0x62,0x3f,0x60,0x28,0x64,0xa2,0xdb,0x28,0x44,0x5a,0xdb,
+0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xd1,0xfe,0x4b,0x00,0x20,0x44,0x01,0x2a,
+0x4b,0x00,0x02,0x2a,0x22,0x00,0x0f,0x4e,0x00,0x60,0x3c,0x61,0x41,0x4d,0x40,0xa1,
+0xa2,0xff,0x19,0x60,0x58,0x4f,0x39,0x78,0xff,0xff,0xa3,0xff,0x06,0x03,0x2d,0x41,
+0x19,0x60,0x58,0x4f,0x5b,0x78,0xff,0xff,0x08,0xfe,0x0e,0x4f,0x35,0x03,0x3f,0x60,
+0x70,0x62,0x3f,0x60,0x22,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,
+0xff,0xff,0x2b,0xff,0x20,0x44,0xfd,0xb4,0x40,0x40,0x85,0xf1,0x0f,0x4e,0x64,0x41,
+0x41,0x4d,0x40,0xa1,0xa2,0xff,0x19,0x60,0x58,0x4f,0x39,0x78,0xff,0xff,0xa3,0xff,
+0x06,0x03,0x2d,0x41,0x19,0x60,0x58,0x4f,0x5b,0x78,0xff,0xff,0x08,0xfe,0x0e,0x4f,
+0x13,0x03,0x3f,0x60,0x70,0x62,0x3f,0x60,0x28,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,
+0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0x08,0x64,0x0e,0xfa,0x20,0x44,0xfe,0xb4,
+0x40,0x40,0x04,0x64,0x40,0x55,0x3b,0xff,0x2f,0x58,0xff,0xff,0xb8,0xfe,0xff,0xff,
+0x02,0x24,0x8d,0xf7,0xff,0xff,0xff,0xff,0xba,0xfe,0xff,0xff,0x05,0x05,0xb9,0xfe,
+0xbb,0xfe,0x30,0x60,0x09,0x78,0xff,0xff,0x36,0x44,0x00,0x7f,0xfc,0xa0,0x60,0x45,
+0x05,0x05,0x0e,0x60,0xd4,0x64,0x44,0xd7,0xff,0xff,0xff,0xff,0x30,0x60,0x09,0x78,
+0xff,0xff,0x7f,0x60,0xc0,0x64,0x24,0x45,0xa4,0x80,0x7f,0x67,0x02,0x61,0x13,0x02,
+0x20,0x44,0x01,0x2a,0x03,0x00,0x7f,0x67,0x07,0x61,0x0d,0x00,0x3b,0xf1,0x25,0x44,
+0x64,0x45,0x85,0xfb,0xd4,0x80,0x7f,0x67,0x05,0x61,0x05,0x07,0x20,0x44,0x03,0xbc,
+0x40,0x40,0xd1,0xfe,0x00,0x67,0x23,0x58,0xff,0xff,0x24,0x44,0x35,0x60,0x58,0x4f,
+0xc0,0x78,0xff,0xff,0x03,0x61,0x03,0x03,0x31,0x60,0x87,0x78,0xff,0xff,0x24,0x44,
+0x40,0xb0,0xff,0xff,0x48,0x03,0x25,0x46,0x66,0x5c,0xc1,0xf9,0x0e,0xf0,0xff,0xff,
+0x64,0x40,0x08,0x2a,0x1f,0x00,0x3f,0x60,0x22,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa8,
+0x60,0x46,0x18,0x03,0x0f,0x4e,0x46,0x45,0x3f,0x60,0x70,0x62,0x00,0x64,0xa2,0xdb,
+0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xa2,0xff,0x1a,0x60,
+0x58,0x4f,0x37,0x78,0xff,0xff,0xa3,0xff,0xd1,0xfe,0x0e,0x4f,0x0e,0xf2,0xff,0xff,
+0xf7,0xb4,0x0e,0xfa,0xc1,0xf5,0x22,0xf0,0xff,0x60,0xef,0x64,0xa0,0x84,0xa2,0xda,
+0x00,0x64,0x1c,0xfa,0x3f,0x60,0x70,0x62,0x3f,0x60,0x2e,0x64,0xa2,0xdb,0x66,0x44,
+0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0x0e,0xf2,0xff,0xff,0x02,0xbc,
+0x0e,0xfa,0x3f,0x60,0x2e,0x64,0x40,0x47,0x2f,0x60,0x58,0x4f,0x6d,0x78,0xff,0xff,
+0x32,0x60,0x77,0x78,0xff,0xff,0x63,0x60,0x56,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,
+0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x25,0x46,
+0x3f,0x60,0x10,0x65,0x08,0xf2,0xff,0xff,0xd4,0x80,0x03,0x61,0x43,0x03,0x3f,0x60,
+0x70,0x62,0x00,0x64,0xa2,0xdb,0x25,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,
+0x2b,0xff,0x28,0xf0,0xfd,0x7f,0x04,0x7e,0x64,0x40,0x02,0x26,0x40,0xbc,0x0e,0xf0,
+0x64,0x40,0x04,0x26,0x80,0xbc,0xc0,0x22,0xff,0x7f,0x64,0x40,0x08,0x26,0x08,0xbc,
+0x0e,0xfa,0x3f,0xf0,0xff,0xff,0x28,0xf2,0x38,0xf2,0x60,0x41,0x08,0x2a,0x64,0x47,
+0x38,0xfa,0x60,0x45,0x3c,0xf3,0x00,0x63,0xd4,0x80,0x22,0xfc,0x01,0x04,0x05,0x00,
+0x22,0xf0,0x08,0x64,0xb0,0x84,0xa2,0xda,0x1c,0x00,0x39,0x60,0x58,0x4f,0x72,0x78,
+0xff,0xff,0x05,0x04,0x22,0xf0,0x04,0x64,0xb0,0x84,0xa2,0xda,0x12,0x00,0x25,0x46,
+0xbd,0xf3,0x89,0xf3,0xfe,0xa0,0x00,0xa0,0x06,0x07,0x05,0x02,0x22,0xf0,0x04,0x64,
+0xb0,0x84,0xa2,0xda,0x06,0x00,0x32,0x60,0x58,0x4f,0x7c,0x78,0xff,0xff,0x05,0x61,
+0x00,0x04,0x25,0x46,0x24,0x44,0x01,0x2b,0x3a,0x00,0x02,0x27,0x38,0x00,0x3f,0x60,
+0x22,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,0x46,0x48,0x10,0x63,0x25,0x46,
+0xbf,0xd0,0x28,0x46,0xff,0xd8,0x25,0x46,0xfb,0x1d,0x64,0x44,0x00,0xa8,0x28,0x44,
+0x03,0x02,0x28,0x46,0x05,0xfa,0x06,0xfa,0x16,0x63,0x6a,0x61,0x25,0x46,0xa3,0xd0,
+0x28,0x46,0xc9,0x81,0xbd,0xd8,0xfa,0x02,0x0e,0xf0,0xff,0x60,0xfc,0x64,0xa0,0x84,
+0x0e,0xfa,0x00,0x64,0x0f,0xfa,0x00,0x64,0x25,0x46,0x00,0xfa,0x66,0x44,0x05,0xfa,
+0x3f,0x60,0x70,0x62,0x3f,0x60,0x1c,0x64,0xa2,0xdb,0x25,0x44,0x5a,0xdb,0x0a,0x64,
+0x5a,0xdb,0xff,0xff,0x2b,0xff,0xd1,0xfe,0x00,0x64,0x0e,0xfa,0x28,0x46,0x0e,0xf0,
+0xff,0x60,0xfb,0x64,0xa0,0x84,0x0e,0xfa,0x22,0xf2,0x66,0x43,0x00,0xa8,0x60,0x5c,
+0x08,0x60,0x0a,0x64,0xa0,0xdd,0x64,0x44,0x69,0x02,0x89,0xf3,0xff,0xff,0x00,0xa0,
+0xff,0xff,0x44,0x03,0x26,0x44,0x0a,0x36,0x00,0x63,0x14,0x36,0x01,0x63,0x37,0x36,
+0x02,0x63,0x6e,0x36,0x03,0x63,0x13,0xfc,0x26,0x44,0xff,0x27,0x06,0x00,0x26,0xf2,
+0x26,0xf2,0x60,0x45,0x60,0x47,0xd4,0x84,0x01,0x00,0x60,0x47,0xff,0x65,0xa4,0x84,
+0x1d,0xfa,0x00,0x64,0x15,0xfa,0x27,0xf2,0xff,0xff,0x00,0xa0,0xff,0xff,0x15,0x02,
+0x21,0x60,0x80,0x65,0x25,0xf2,0xff,0xff,0x0f,0xb4,0xab,0xf1,0x00,0x7f,0xd0,0x80,
+0x60,0x5c,0x06,0x05,0x6a,0x60,0xc4,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
+0xa5,0xd9,0x64,0x40,0x00,0x3a,0xab,0xf9,0x11,0x00,0x29,0xf0,0x08,0x67,0xb0,0x84,
+0xa2,0xda,0x1e,0x65,0x29,0xf2,0xff,0xff,0x60,0x40,0x03,0x2b,0x18,0x65,0x65,0x44,
+0x04,0xa4,0x64,0x40,0x40,0x27,0x08,0xa4,0x21,0xfa,0x08,0x00,0x39,0x60,0x58,0x4e,
+0xfe,0x78,0xff,0xff,0x3a,0x60,0x58,0x4e,0x79,0x78,0xff,0xff,0x89,0xf3,0xff,0xff,
+0x00,0xa0,0x3a,0xf3,0x03,0x03,0x24,0x47,0x0f,0xb4,0x02,0x00,0xe8,0x84,0xe8,0x84,
+0x1c,0xfa,0x3f,0x60,0x70,0x62,0x3f,0x60,0x10,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,
+0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xc1,0xfe,0x0c,0x00,0x3f,0x60,0x70,0x62,
+0x3f,0x60,0x2e,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,
+0x2b,0xff,0xd3,0xfe,0x0e,0xf0,0x24,0x44,0x02,0x27,0x02,0x00,0x01,0x27,0x22,0x00,
+0x64,0x40,0x08,0x2a,0x1f,0x00,0x3f,0x60,0x22,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa8,
+0x60,0x46,0x18,0x03,0x0f,0x4e,0x46,0x45,0x3f,0x60,0x70,0x62,0x00,0x64,0xa2,0xdb,
+0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xa2,0xff,0x1a,0x60,
+0x58,0x4f,0x37,0x78,0xff,0xff,0xa3,0xff,0xd1,0xfe,0x0e,0x4f,0x0e,0xf2,0xff,0xff,
+0xf7,0xb4,0x0e,0xfa,0x00,0x67,0x01,0x00,0x7f,0x67,0x23,0x58,0xff,0xff,0x0f,0x4e,
+0x25,0x46,0x38,0xf2,0x05,0x48,0x00,0xa8,0x60,0x41,0x66,0x44,0x0a,0x03,0x00,0xf2,
+0x42,0xfe,0xac,0x86,0x01,0xf2,0x1e,0x03,0x7f,0xb5,0xd5,0x81,0x66,0x44,0xf7,0x07,
+0x25,0x46,0x05,0xf0,0x06,0xfa,0x05,0xfa,0xd0,0x80,0x64,0x43,0x12,0x03,0x60,0x46,
+0x01,0xf0,0x80,0x67,0xb0,0x84,0x01,0xfa,0x00,0xf0,0x00,0x64,0x00,0xfa,0x64,0x46,
+0x05,0xfc,0x46,0x45,0xa2,0xff,0x1a,0x60,0x58,0x4f,0x37,0x78,0xff,0xff,0xa3,0xff,
+0x08,0x45,0x02,0xfe,0x2e,0x58,0xff,0xff,0x20,0x44,0x40,0xb0,0x7f,0x67,0x02,0x61,
+0x03,0x03,0x33,0x60,0xb4,0x78,0xff,0xff,0x00,0x64,0x24,0x45,0x80,0x26,0x01,0x64,
+0x89,0xfb,0x62,0x60,0xc6,0x62,0xa2,0xd3,0xff,0xff,0x01,0xa4,0xa2,0xdb,0x3d,0xf1,
+0x34,0xf1,0x64,0x40,0x01,0x2a,0x08,0x00,0x64,0x40,0x01,0x2a,0x05,0x00,0x21,0x60,
+0x88,0x63,0x09,0x60,0x2b,0x64,0x19,0x00,0xb9,0xf1,0x21,0x60,0x88,0x63,0x64,0x45,
+0x80,0x27,0x19,0x00,0x64,0x44,0x00,0xac,0xff,0xff,0x0d,0x02,0x02,0x60,0x52,0x64,
+0xbd,0xdb,0x03,0x60,0x1c,0x64,0xbd,0xdb,0x7f,0x60,0xff,0x64,0xbd,0xdb,0x7f,0x60,
+0xff,0x64,0xbd,0xdb,0x07,0x00,0xe8,0x84,0xe0,0x84,0xbd,0xdb,0xbd,0xdb,0xbd,0xdb,
+0xff,0xff,0xbd,0xdb,0x36,0x00,0x80,0x67,0x94,0x81,0x61,0x44,0xe8,0x84,0xe8,0x84,
+0xe8,0x84,0xe8,0x84,0xe0,0x84,0xbd,0xdb,0x61,0x44,0xe8,0x84,0xe8,0x84,0xe8,0x84,
+0xe0,0x84,0xbd,0xdb,0x0d,0x60,0x18,0x65,0x61,0x44,0xd4,0x80,0xff,0xff,0x01,0x06,
+0x65,0x44,0xe0,0x85,0xc4,0x85,0xe0,0x84,0xe0,0x84,0xe0,0x84,0x06,0x66,0x7e,0x00,
+0x00,0x10,0xc4,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe0,0x84,
+0xbd,0xdb,0x06,0x60,0x8c,0x65,0x61,0x44,0xd4,0x80,0xff,0xff,0x01,0x06,0x65,0x44,
+0xe0,0x85,0xc4,0x85,0xe0,0x84,0xe0,0x84,0xe0,0x84,0xc4,0x84,0xe8,0x84,0xe8,0x84,
+0xe8,0x84,0xe8,0x84,0xe0,0x84,0xbd,0xdb,0x21,0x60,0x88,0x63,0x04,0x61,0xbd,0xd1,
+0x90,0x65,0x64,0x44,0xd4,0x80,0x65,0x44,0x01,0x05,0xbf,0xdb,0x09,0x60,0x2b,0x65,
+0x64,0x44,0xd4,0x80,0xcd,0x81,0x02,0x06,0x65,0x44,0xbf,0xdb,0xf0,0x02,0x00,0x61,
+0x41,0x56,0xc7,0xfe,0x30,0x60,0x09,0x78,0xff,0xff,0x36,0x47,0xff,0x23,0x06,0x00,
+0x00,0x7f,0x60,0x41,0x7f,0x67,0x33,0x60,0xb4,0x78,0xff,0xff,0x99,0xff,0x00,0x60,
+0x00,0xeb,0x00,0x60,0x00,0xea,0x98,0xff,0x20,0x44,0x80,0xbc,0x40,0x40,0x62,0x60,
+0xdc,0x63,0xbb,0xf3,0xa3,0xdb,0x00,0x63,0x60,0x40,0x01,0x26,0x09,0x00,0x01,0xa3,
+0x60,0x40,0x02,0x26,0x05,0x00,0x01,0xa3,0x60,0x40,0x04,0x26,0x01,0x00,0x01,0xa3,
+0x60,0x41,0x18,0x60,0x74,0x65,0xa5,0xdd,0x61,0x44,0x08,0x2a,0x03,0x00,0x03,0x63,
+0x08,0x64,0x0c,0x00,0x04,0x2a,0x03,0x00,0x02,0x63,0x04,0x64,0x07,0x00,0x02,0x2a,
+0x03,0x00,0x01,0x63,0x02,0x64,0x02,0x00,0x00,0x63,0x01,0x64,0x43,0xfb,0x44,0xfd,
+0x89,0xf3,0xff,0xff,0x00,0xa0,0x00,0x64,0x2d,0x03,0x97,0xfb,0x98,0xfb,0x99,0xfb,
+0xff,0xff,0x74,0xf3,0x88,0xff,0x00,0x75,0x00,0x72,0xe0,0x84,0xe0,0x84,0xe0,0x84,
+0xe0,0x84,0x60,0x53,0xed,0xe2,0xb2,0xf3,0xff,0xff,0xff,0xb4,0x60,0x52,0x8a,0xff,
+0xb0,0xf1,0x75,0xf9,0xb1,0xf1,0xff,0xff,0x76,0xf9,0xb2,0xf1,0x77,0xf9,0x18,0x60,
+0x72,0x63,0xa3,0xd3,0x00,0x65,0x60,0x40,0x02,0x26,0x01,0x65,0x60,0x40,0x04,0x26,
+0x02,0x65,0x60,0x40,0x08,0x26,0x03,0x65,0x62,0x60,0xda,0x62,0x65,0x44,0xa2,0xdb,
+0x00,0x67,0x10,0x00,0xbb,0xf3,0x00,0x65,0x60,0x40,0x02,0x26,0x01,0x65,0x60,0x40,
+0x04,0x26,0x02,0x65,0x60,0x40,0x08,0x26,0x03,0x65,0x62,0x60,0xda,0x62,0x65,0x44,
+0xa2,0xdb,0x00,0x67,0x23,0x58,0xff,0xff,0x7f,0x60,0xc0,0x64,0x24,0x45,0xa4,0x80,
+0x7f,0x67,0x02,0x61,0x3a,0x02,0x62,0x60,0xc8,0x62,0xa2,0xd3,0xff,0xff,0x01,0xa4,
+0xa2,0xdb,0xff,0x60,0xfe,0x64,0x32,0x45,0x24,0x92,0x02,0x61,0x41,0x56,0xc7,0xfe,
+0x30,0x60,0x09,0x78,0xff,0xff,0x88,0xf1,0x20,0x44,0x64,0x40,0xff,0x26,0x24,0x00,
+0x7f,0xb4,0x40,0x40,0x00,0x64,0x40,0x5e,0x3f,0x60,0x4c,0x62,0xa2,0xd3,0xff,0xff,
+0x00,0xa8,0x60,0x46,0x0f,0xf2,0x18,0x03,0x00,0xa8,0xff,0xff,0x15,0x03,0x0f,0x4e,
+0x46,0x45,0x3f,0x60,0x70,0x62,0x00,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,
+0x5a,0xdb,0xff,0xff,0x2b,0xff,0xa2,0xff,0x1a,0x60,0x58,0x4f,0x37,0x78,0xff,0xff,
+0xa3,0xff,0xd1,0xfe,0x0e,0x4f,0xe0,0x00,0x00,0x67,0x23,0x58,0xff,0xff,0x00,0x61,
+0x00,0x7c,0x08,0x60,0x0a,0x64,0xa0,0xd9,0x00,0x67,0x23,0x58,0xff,0xff,0x25,0x44,
+0xa0,0xd1,0x08,0x60,0x0a,0x64,0xa0,0xd9,0x00,0x67,0x23,0x58,0xff,0xff,0x7f,0x60,
+0xc0,0x64,0x24,0x45,0xa4,0x80,0x02,0x61,0x25,0x02,0x25,0x45,0x13,0x60,0x92,0x63,
+0x05,0x61,0xbd,0xd3,0xbd,0xd1,0xd4,0x80,0xbd,0xd3,0xcd,0x81,0x02,0x03,0x19,0x03,
+0xf8,0x00,0x40,0x4c,0x0f,0x4e,0x64,0x41,0x41,0x4d,0x40,0xa1,0xa2,0xff,0x19,0x60,
+0x58,0x4f,0x39,0x78,0xff,0xff,0xa3,0xff,0x06,0x03,0x2d,0x41,0x19,0x60,0x58,0x4f,
+0x5b,0x78,0xff,0xff,0x08,0xfe,0x0e,0x4f,0x01,0x03,0x2c,0x58,0x0c,0x61,0x05,0x67,
+0x02,0x00,0x04,0x61,0x7f,0x67,0x23,0x58,0xff,0xff,0x03,0x4e,0x0c,0x60,0x6e,0x62,
+0xa2,0xd7,0x58,0x43,0xff,0xff,0x0e,0x43,0x41,0x47,0x7e,0x60,0xc0,0x64,0x24,0x45,
+0xa4,0x80,0x02,0x61,0x26,0x02,0x25,0x45,0xfc,0x2b,0x22,0x00,0x0e,0x60,0xd8,0x63,
+0x79,0x61,0x24,0x44,0x01,0x27,0x11,0x00,0xbd,0xd3,0xa3,0xd1,0xd4,0x80,0xcd,0x81,
+0x08,0x24,0x64,0x58,0x08,0xa3,0xf8,0x02,0x15,0xf5,0x22,0xf2,0xff,0xff,0x00,0xa8,
+0x00,0x61,0x01,0x02,0x04,0x61,0x00,0x67,0x0d,0x00,0x27,0x40,0x04,0x3a,0xfb,0x00,
+0xbd,0xd3,0xbe,0xd1,0xd4,0x80,0xcd,0x81,0x08,0x24,0x64,0x58,0x08,0xa3,0xf5,0x02,
+0x04,0x61,0x7f,0x67,0x23,0x58,0xff,0xff,0x4b,0xd3,0x15,0xf5,0x60,0x41,0x22,0xf0,
+0xe9,0x85,0x64,0x44,0xff,0x22,0xdc,0x84,0xc4,0x84,0x22,0xfa,0x64,0x44,0xc2,0x82,
+0x00,0xa8,0xc2,0x84,0x08,0x24,0xd8,0x84,0xbf,0xd1,0xd8,0x85,0x64,0x43,0x58,0x4f,
+0x6f,0x00,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x6a,0x60,0xc0,0x62,0x01,0x64,
+0xa2,0xdb,0x0d,0x00,0x80,0x60,0xc0,0x62,0x00,0x64,0xa2,0xdb,0x08,0x00,0x79,0x60,
+0x8e,0x64,0x00,0x7c,0x58,0xd9,0x58,0xd9,0x58,0xd9,0xff,0xff,0x58,0xd9,0x21,0x60,
+0xaa,0x62,0xa2,0xd1,0x00,0x60,0x80,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,
+0x05,0x00,0x01,0x64,0x84,0xfb,0x01,0x67,0x79,0xfb,0xff,0xff,0x15,0xf5,0xff,0xff,
+0x22,0xf2,0xbf,0xd1,0xff,0xff,0x62,0x43,0xcc,0x84,0xe0,0x85,0x09,0x06,0xbf,0xd1,
+0x64,0x41,0xd5,0x80,0x64,0x43,0x01,0x06,0x65,0x41,0x48,0x65,0x58,0x4f,0x55,0x00,
+0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x61,0x60,0xcc,0x63,0xa3,0xd3,0x15,0xf5,
+0x60,0x41,0xe8,0x84,0xdc,0x84,0x22,0xfa,0xfc,0x60,0x80,0x64,0x5a,0xda,0xda,0x85,
+0x04,0xa3,0x58,0x4f,0x25,0x00,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x15,0xf5,
+0x22,0xf2,0xbf,0xd1,0xff,0xff,0x62,0x43,0xcc,0x84,0xe0,0x81,0x15,0x06,0xbf,0xd1,
+0x64,0x45,0xd5,0x80,0x64,0x43,0xfc,0xa3,0x04,0x06,0x65,0x41,0xe9,0x84,0xdc,0x84,
+0x22,0xfa,0x44,0x65,0x04,0xa1,0x58,0x4f,0x28,0x00,0x61,0x60,0xcc,0x62,0xa2,0xd3,
+0xff,0xff,0xcc,0x84,0xe0,0x84,0xa2,0xdb,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,
+0x41,0x4d,0x00,0xa1,0x80,0x64,0x17,0x03,0x65,0x42,0xd4,0x85,0x2d,0x41,0x55,0x8d,
+0xff,0xff,0x02,0x04,0x65,0x41,0x02,0x00,0x00,0x64,0x40,0x4d,0xca,0x84,0xbd,0xd1,
+0xc9,0x81,0x58,0xd8,0xfc,0x02,0x2d,0x41,0x00,0xa1,0xd8,0x85,0x04,0x03,0x00,0xf4,
+0x7c,0x65,0x04,0x62,0xeb,0x00,0x2f,0x58,0xff,0xff,0x41,0x4d,0x01,0xf2,0x65,0x42,
+0x7f,0xb5,0x2d,0x41,0x00,0xa1,0x55,0x8d,0x0e,0x03,0x02,0x04,0x65,0x41,0x02,0x00,
+0x00,0x64,0x40,0x4d,0xca,0x84,0x58,0xd0,0xc9,0x81,0xbd,0xd9,0xfc,0x02,0x00,0xf4,
+0x01,0xf2,0x04,0x62,0xed,0x00,0x2f,0x58,0xff,0xff,0x66,0x44,0x87,0xfb,0x7e,0xf1,
+0x02,0x64,0xc0,0x84,0xe8,0x84,0x22,0xfa,0xf1,0x60,0x01,0x64,0x23,0xfa,0x5a,0x8d,
+0x7d,0xf1,0x2a,0x60,0xc8,0x63,0x44,0x4b,0x43,0x4c,0x2b,0x45,0xd7,0x80,0xbe,0xd1,
+0x0b,0x05,0x2d,0x45,0x64,0x43,0x44,0x61,0x34,0x60,0x58,0x4f,0xf2,0x78,0xff,0xff,
+0x45,0x4d,0x2c,0x43,0x04,0xa3,0xf0,0x00,0x87,0xf1,0x3f,0x60,0x70,0x62,0x3f,0x60,
+0x58,0x64,0xa2,0xdb,0x5a,0xd9,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0x08,0x65,
+0x45,0x55,0x3b,0xff,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x66,0x44,0x86,0xfb,
+0xc6,0xfe,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x66,0x44,0x87,0xfb,0x66,0xf1,
+0x01,0x60,0x00,0x64,0xc0,0x81,0x2b,0x60,0xca,0x63,0x00,0x64,0x40,0x4b,0xf1,0x60,
+0x02,0x64,0x23,0xfa,0xda,0x85,0xa3,0xd3,0xff,0xff,0xff,0xff,0x01,0x2a,0x0b,0x00,
+0x41,0x4c,0x10,0x61,0x34,0x60,0x58,0x4f,0xf2,0x78,0xff,0xff,0x2b,0x44,0xdc,0x84,
+0x40,0x4b,0x2c,0x41,0xf0,0xa3,0xcd,0x81,0x10,0xa3,0xed,0x02,0x87,0xf1,0xff,0xff,
+0x64,0x46,0x2b,0x44,0xe0,0x84,0xe0,0x84,0xe0,0x84,0xdc,0x84,0x22,0xfa,0x3f,0x60,
+0x70,0x62,0x3f,0x60,0x58,0x64,0xa2,0xdb,0x5a,0xd9,0x0a,0x64,0x5a,0xdb,0xff,0xff,
+0x2b,0xff,0x08,0x65,0x45,0x55,0x3b,0xff,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,
+0x66,0x44,0x87,0xfb,0x41,0x60,0x80,0x64,0xa0,0xd1,0x02,0x64,0xc0,0x84,0xe8,0x84,
+0x22,0xfa,0xf1,0x60,0x04,0x64,0x23,0xfa,0xda,0x85,0x41,0x60,0x82,0x63,0x64,0x41,
+0x34,0x60,0x58,0x4f,0xf2,0x78,0xff,0xff,0x87,0xf1,0x3f,0x60,0x70,0x62,0x3f,0x60,
+0x58,0x64,0xa2,0xdb,0x5a,0xd9,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0x08,0x65,
+0x45,0x55,0x3b,0xff,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x25,0x44,0x19,0xf1,
+0x1a,0xf1,0xd0,0x80,0xd0,0x80,0x0e,0x04,0x08,0x06,0x1b,0xf1,0x1c,0xf1,0xd0,0x80,
+0xd0,0x80,0x08,0x04,0x02,0x06,0x48,0xfe,0x05,0x00,0x25,0x46,0x01,0xf0,0x03,0x67,
+0xa0,0x85,0x94,0x80,0x2f,0x58,0xff,0xff,0x15,0xf5,0x00,0x60,0xf1,0x64,0x22,0xfa,
+0x25,0x44,0x23,0xfa,0x01,0x60,0xa8,0x64,0x40,0x4d,0x46,0x4c,0xfc,0x60,0x00,0x64,
+0x40,0x4b,0xfe,0x60,0x00,0x64,0x36,0x63,0x46,0x61,0xc8,0x84,0x2b,0x46,0x58,0xd0,
+0x2c,0x46,0x59,0xd8,0xfb,0x1f,0x2d,0x41,0x00,0xb9,0x84,0xa1,0x08,0x03,0x04,0x24,
+0x00,0x61,0x41,0x4d,0x00,0xf4,0x02,0x61,0x7a,0x63,0x46,0x4c,0xef,0x00,0x00,0x67,
+0x00,0x61,0x23,0x58,0xff,0xff,0xfc,0x60,0x00,0x64,0x40,0x4b,0x4b,0xd3,0x15,0xf5,
+0x60,0x41,0xd8,0x84,0xe8,0x84,0x22,0xfa,0x25,0x44,0x23,0xfa,0xbf,0xd3,0x66,0x45,
+0x48,0x63,0xc8,0x84,0x2b,0x46,0x58,0xd0,0x65,0x46,0xc9,0x81,0xbd,0xd8,0xfa,0x02,
+0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0xfc,0x60,0x00,0x64,0x40,0x4b,0x4b,0xd3,
+0x15,0xf5,0x60,0x41,0x22,0xf0,0xe9,0x85,0x64,0x44,0xff,0x22,0xdc,0x84,0xc4,0x84,
+0x22,0xfa,0x64,0x44,0xc2,0x82,0x00,0xa8,0xc2,0x84,0x08,0x24,0xd8,0x84,0xbf,0xd1,
+0xc9,0x83,0x64,0x41,0xc9,0x81,0x66,0x45,0x2b,0x46,0x59,0xd0,0x65,0x46,0x58,0xd8,
+0xfb,0x1f,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x15,0xf5,0x02,0x64,0x22,0xfa,
+0xfc,0xa3,0xa3,0xd3,0x25,0x43,0xa0,0xd3,0x23,0xfc,0xdc,0x84,0x24,0xfa,0x00,0x67,
+0x00,0x61,0x23,0x58,0xff,0xff,0x15,0xf5,0x02,0x64,0x22,0xfa,0x25,0x44,0x23,0xfa,
+0x59,0xf3,0xff,0xff,0x02,0xb4,0x01,0x64,0x08,0x24,0x02,0x64,0x24,0xfa,0x00,0x67,
+0x00,0x61,0x23,0x58,0xff,0xff,0x15,0xf5,0x02,0x64,0x22,0xfa,0x25,0x44,0x23,0xfa,
+0x43,0xf3,0x24,0xfa,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x15,0xf5,0x04,0x64,
+0x22,0xfa,0x25,0x44,0x23,0xfa,0x4c,0xf3,0x24,0xfa,0xff,0xff,0x4d,0xf3,0x4e,0xf1,
+0x80,0x65,0xc4,0x87,0x00,0x7f,0x25,0xfa,0x64,0x44,0xc4,0x87,0x00,0x7f,0x26,0xfa,
+0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x15,0xf5,0x24,0xf0,0x18,0x60,0x5c,0x65,
+0x22,0xf2,0xa5,0xd9,0x02,0xa8,0x64,0x41,0x0f,0x02,0x00,0xb9,0xff,0xff,0x0c,0x03,
+0x17,0x60,0x52,0x62,0xa2,0xd9,0x73,0xf3,0xff,0xff,0xd0,0x80,0xff,0xff,0x04,0x02,
+0x01,0x63,0x08,0x60,0x2a,0x64,0xa0,0xdd,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,
+0x15,0xf5,0x20,0x63,0x17,0x60,0xa4,0x61,0x46,0x64,0x58,0xd0,0x59,0xd9,0xfd,0x1f,
+0x24,0xf0,0x20,0x64,0xd0,0x81,0x17,0x60,0xa8,0x64,0x0d,0x06,0xc0,0x83,0x01,0x2a,
+0x06,0x00,0xcf,0x83,0xa3,0xd3,0xcd,0x81,0x00,0x7f,0xbd,0xdb,0x04,0x03,0x00,0x64,
+0xc9,0x81,0xbd,0xdb,0xfd,0x02,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x15,0xf5,
+0x22,0xf2,0x24,0xf0,0x02,0xa8,0x62,0x60,0x90,0x62,0x09,0x02,0xa2,0xd9,0x64,0x41,
+0x32,0x44,0x02,0xb5,0x00,0xb9,0xd4,0x84,0x08,0x28,0x02,0xbc,0x40,0x52,0x00,0x67,
+0x00,0x61,0x23,0x58,0xff,0xff,0x15,0xf5,0x22,0xf2,0x24,0xf0,0x02,0xa8,0x01,0x60,
+0x76,0x65,0x37,0x02,0xa5,0xd9,0x18,0x60,0x6a,0x62,0x00,0x61,0x00,0x64,0x01,0x65,
+0x64,0x40,0x01,0x2a,0x02,0x00,0x01,0xa1,0x02,0x7e,0x64,0x40,0x02,0x2a,0x09,0x00,
+0x01,0xa1,0xa5,0x80,0xff,0xff,0x02,0x03,0x04,0x7e,0x03,0x00,0x04,0x7f,0xa2,0xdb,
+0x02,0xa2,0x64,0x40,0x04,0x2a,0x09,0x00,0x01,0xa1,0xa5,0x80,0xff,0xff,0x02,0x03,
+0x0b,0x7e,0x03,0x00,0x0b,0x7f,0xa2,0xdb,0x02,0xa2,0x64,0x40,0x08,0x2a,0x08,0x00,
+0x01,0xa1,0xa5,0x80,0xff,0xff,0x02,0x03,0x16,0x7e,0x02,0x00,0x16,0x7f,0xa2,0xdb,
+0xa5,0x80,0xff,0xff,0x02,0x03,0x00,0x7f,0xa2,0xdb,0x18,0x60,0x68,0x62,0x61,0x43,
+0xa2,0xdd,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x63,0x60,0x18,0x63,0x00,0x60,
+0xd5,0x61,0x00,0x64,0xcd,0x81,0xbd,0xdb,0xfd,0x02,0x00,0x67,0x00,0x61,0x23,0x58,
+0xff,0xff,0x15,0xf5,0x24,0xf0,0x40,0x60,0x20,0x62,0xa2,0xd9,0x17,0x60,0x9c,0x62,
+0xa2,0xd9,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x15,0xf5,0x24,0xf0,0x6a,0x60,
+0x0e,0x65,0x03,0x60,0xe8,0x64,0x64,0x40,0x00,0x36,0x03,0x00,0xa5,0xdb,0x01,0x64,
+0x40,0x5a,0x18,0x60,0x0a,0x64,0xa0,0xd9,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,
+0x15,0xf5,0x24,0xf2,0x99,0xff,0x40,0x5b,0x98,0xff,0x00,0x67,0x00,0x61,0x23,0x58,
+0xff,0xff,0x15,0xf5,0x24,0xf2,0x99,0xff,0x40,0x5a,0x98,0xff,0x00,0x67,0x00,0x61,
+0x23,0x58,0xff,0xff,0x01,0x65,0x00,0x7c,0x6a,0x60,0xe6,0x61,0x0e,0x00,0x02,0x65,
+0x02,0x7c,0x6a,0x60,0xf6,0x61,0x09,0x00,0x04,0x65,0x04,0x7c,0x6b,0x60,0x06,0x61,
+0x04,0x00,0x08,0x65,0x06,0x7c,0x6b,0x60,0x16,0x61,0x32,0xf3,0x15,0xf5,0xb4,0x85,
+0x22,0xf2,0x07,0x63,0x60,0x40,0x04,0x36,0x06,0x00,0x0f,0x63,0x60,0x40,0x08,0x36,
+0x02,0x00,0x09,0x3a,0x23,0x00,0x36,0xfd,0x37,0xfd,0x38,0xfd,0x63,0x40,0x07,0x3a,
+0x03,0x00,0x00,0x63,0xd5,0xfd,0xd7,0xfd,0x65,0x43,0x32,0xfd,0x60,0x43,0x79,0x60,
+0x90,0x62,0x7a,0x60,0xd8,0x64,0x64,0x45,0x00,0x7c,0x46,0xd9,0x44,0xd9,0x63,0x45,
+0xfe,0xa3,0xe3,0x83,0x46,0x64,0x58,0xd0,0x59,0xd9,0xfd,0x1f,0x65,0x40,0x08,0x3a,
+0x05,0x00,0x64,0x44,0x00,0x7f,0xa1,0xdb,0x00,0x64,0x59,0xdb,0x67,0x44,0xc8,0xfb,
+0xc9,0xfb,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x15,0xf5,0x02,0x64,0x22,0xfa,
+0x25,0x44,0x23,0xfa,0x34,0xf3,0x83,0xb4,0x24,0xfa,0x00,0x67,0x00,0x61,0x23,0x58,
+0xff,0xff,0xaf,0xf3,0xff,0xff,0x00,0xa4,0xff,0xff,0x16,0x03,0x15,0xf5,0x34,0xf3,
+0x24,0xf2,0x60,0x41,0x83,0xb5,0xff,0x60,0x7c,0x7c,0xa1,0x81,0xb5,0x84,0x34,0xfb,
+0xff,0xff,0x01,0x2a,0x09,0x00,0x21,0x60,0x88,0x63,0x09,0x60,0x2b,0x64,0xbd,0xdb,
+0xbd,0xdb,0xbd,0xdb,0xff,0xff,0xbd,0xdb,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,
+0x15,0xf5,0x22,0xf2,0x24,0xf0,0x02,0xa8,0xff,0xff,0x05,0x02,0x00,0x64,0x64,0x40,
+0x00,0x3a,0x03,0x64,0xc4,0xfb,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x6a,0x60,
+0x36,0x62,0x01,0x64,0xa2,0xdb,0x17,0x60,0x9c,0x62,0x05,0x64,0xa2,0xdb,0x01,0x60,
+0x60,0x63,0x6a,0x60,0x38,0x65,0x03,0x61,0xbd,0xd1,0x00,0x7f,0x64,0x5e,0xa5,0xdb,
+0xda,0x85,0x64,0x47,0x00,0x7f,0xa5,0xdb,0xcd,0x81,0xda,0x85,0xf5,0x02,0x00,0x67,
+0x00,0x61,0x23,0x58,0xff,0xff,0x15,0xf5,0x22,0xf2,0x24,0xf0,0x02,0xa8,0x1e,0xf3,
+0x14,0x02,0x60,0x40,0x10,0x2a,0x11,0x00,0x18,0x60,0x14,0x62,0xa2,0xd9,0x00,0x64,
+0x64,0x40,0x01,0x26,0x20,0x64,0xb8,0xfb,0x16,0x60,0xd8,0x62,0xa2,0xd3,0xff,0xff,
+0x03,0xa8,0xff,0xff,0x02,0x02,0xb8,0xf3,0x3a,0xfb,0x00,0x67,0x00,0x61,0x23,0x58,
+0xff,0xff,0x15,0xf5,0x78,0x60,0x50,0x63,0x79,0x60,0x98,0x61,0x2f,0xf2,0x00,0x7c,
+0x00,0x7f,0xe0,0x85,0x47,0xd9,0x45,0xd9,0x81,0xa0,0x00,0x61,0x31,0x07,0x1a,0x60,
+0x12,0x65,0x26,0xf2,0x25,0xf0,0x60,0x41,0x64,0x43,0xeb,0x83,0x00,0x7f,0xe0,0x84,
+0x44,0xd1,0x61,0x47,0x93,0x83,0x00,0x7f,0xe0,0x84,0x44,0xd1,0xeb,0x83,0x93,0x83,
+0x0f,0x60,0xf0,0x65,0xa7,0x85,0x02,0x61,0x4c,0x60,0xc2,0x63,0xc7,0x83,0xa3,0xd3,
+0xff,0xff,0x60,0x40,0x80,0x2b,0x13,0x00,0x65,0x44,0xff,0xa1,0x08,0xa5,0xf4,0x02,
+0x00,0x65,0x9e,0x61,0x5c,0x60,0xc2,0x63,0xc7,0x83,0xa3,0xd3,0xff,0xff,0x60,0x40,
+0x80,0x2b,0x05,0x00,0x65,0x44,0xff,0xa1,0x08,0xa5,0xf4,0x02,0x25,0x00,0x01,0x61,
+0x2f,0xf2,0xff,0xff,0x00,0x7f,0x60,0x5c,0xe0,0x84,0x60,0x45,0xe0,0x84,0xe0,0x84,
+0xc4,0x85,0xc4,0x85,0x61,0x40,0x01,0x2a,0x0b,0x00,0x80,0x67,0xb0,0x84,0xbd,0xdb,
 0x24,0xf2,0xbd,0xdb,0xff,0xff,0x25,0xf2,0xbd,0xdb,0x26,0xf0,0xff,0xff,0xa3,0xd9,
-0x3d,0x60,0xce,0x63,0x27,0xf2,0xc7,0x83,0xbd,0xdb,0x28,0xf2,0xbd,0xdb,0xff,0xff,
-0x29,0xf2,0xbd,0xdb,0x2a,0xf2,0xff,0xff,0xbd,0xdb,0x2b,0xf2,0xbd,0xdb,0xff,0xff,
-0x2c,0xf2,0xbd,0xdb,0x2d,0xf2,0xff,0xff,0xbd,0xdb,0x41,0xf3,0x04,0x65,0xb4,0x84,
-0x41,0xfb,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x15,0xf5,0x19,0x60,0x4a,0x65,
-0x26,0xf2,0x25,0xf0,0x60,0x41,0x64,0x43,0xeb,0x83,0x00,0x7f,0xe0,0x84,0x44,0xd1,
-0x61,0x47,0x93,0x83,0x00,0x7f,0xe0,0x84,0x44,0xd1,0xeb,0x83,0x93,0x83,0x0f,0x60,
-0xf0,0x65,0xa7,0x85,0x02,0x61,0x44,0x60,0xce,0x63,0xc7,0x83,0xa3,0xd3,0x02,0xa3,
-0x60,0x40,0x80,0x2b,0x0d,0x00,0x24,0xf0,0xbd,0xd3,0x50,0xfe,0x25,0xf0,0xd0,0x80,
-0xbd,0xd3,0x26,0xf0,0xd0,0x80,0xa3,0xd3,0xff,0xff,0xd0,0x80,0xff,0xff,0x20,0x01,
-0x65,0x44,0xff,0xa1,0x08,0xa5,0xe7,0x02,0x00,0x65,0x7e,0x61,0x54,0x60,0xce,0x63,
+0x41,0x60,0x80,0x61,0xc5,0x81,0x4c,0x64,0x10,0x63,0x58,0xd0,0x59,0xd9,0xfd,0x1f,
+0x32,0xf3,0x0f,0x7c,0xb0,0x84,0x32,0xfb,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,
+0x15,0xf5,0x1a,0x60,0x12,0x65,0x26,0xf2,0x25,0xf0,0x60,0x41,0x64,0x43,0xeb,0x83,
+0x00,0x7f,0xe0,0x84,0x44,0xd1,0x61,0x47,0x93,0x83,0x00,0x7f,0xe0,0x84,0x44,0xd1,
+0xeb,0x83,0x93,0x83,0x0f,0x60,0xf0,0x65,0xa7,0x85,0x02,0x61,0x4c,0x60,0xc2,0x63,
 0xc7,0x83,0xa3,0xd3,0x02,0xa3,0x60,0x40,0x80,0x2b,0x0d,0x00,0x24,0xf0,0xbd,0xd3,
 0x50,0xfe,0x25,0xf0,0xd0,0x80,0xbd,0xd3,0x26,0xf0,0xd0,0x80,0xa3,0xd3,0xff,0xff,
-0xd0,0x80,0xff,0xff,0x05,0x01,0x65,0x44,0xff,0xa1,0x08,0xa5,0xe7,0x02,0x06,0x00,
-0xfa,0xa3,0xa3,0xd3,0xff,0xff,0xe0,0x84,0xe8,0x84,0xa3,0xdb,0x00,0x67,0x00,0x61,
-0x23,0x58,0xff,0xff,0x66,0x44,0x93,0xfb,0x00,0x60,0x92,0x64,0x22,0xfa,0xf1,0x60,
-0x03,0x64,0x23,0xfa,0x48,0x65,0x38,0x64,0x40,0x4c,0x1d,0x60,0xb0,0x63,0xbd,0xd3,
-0xff,0xff,0x00,0xa0,0xbd,0xd1,0x12,0x03,0x43,0x48,0x60,0x43,0x64,0x41,0xbd,0xd3,
-0xa5,0xda,0x2c,0x44,0xc8,0x84,0x40,0x4c,0x04,0x02,0x00,0xf4,0x78,0x64,0x40,0x4c,
-0x02,0x62,0xcd,0x81,0xda,0x85,0xf3,0x02,0x28,0x43,0xe9,0x00,0x93,0xf1,0x3c,0x60,
-0xa8,0x62,0x3c,0x60,0x90,0x64,0xa2,0xdb,0x5a,0xd9,0x0a,0x64,0x5a,0xdb,0xff,0xff,
-0x2b,0xff,0x08,0x65,0x45,0x55,0x3b,0xff,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,
-0x1f,0xf3,0x15,0xf5,0x24,0xf0,0x60,0x40,0x20,0x2a,0x13,0x00,0x64,0x47,0x00,0x7f,
-0xfe,0xa4,0x82,0xa0,0x60,0x45,0x0d,0x05,0x14,0x60,0x5c,0x62,0x46,0xd9,0x67,0x60,
-0xec,0x62,0xa2,0xd3,0x64,0x40,0x12,0x37,0x01,0xbc,0x64,0x40,0x14,0x37,0x02,0xbc,
-0xa2,0xdb,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x28,0x60,0xfa,0x63,0x00,0x64,
-0xbd,0xdb,0xbd,0xdb,0xff,0xff,0xbd,0xdb,0xbd,0xdb,0x01,0x64,0x23,0xfb,0xff,0xff,
-0x1a,0xff,0x23,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0xfb,0x02,0x15,0xf5,0x05,0x64,
-0x22,0xfa,0x25,0x44,0x23,0xfa,0xd4,0xf3,0x24,0xfa,0xff,0xff,0xa1,0xf3,0x25,0xfa,
-0xa2,0xf3,0xff,0xff,0x26,0xfa,0xa3,0xf3,0x27,0xfa,0x00,0x67,0x00,0x61,0x23,0x58,
-0xff,0xff,0x15,0xf5,0x22,0xf2,0xff,0xff,0xfb,0xa0,0x28,0x60,0xfa,0x63,0x0b,0x02,
-0x24,0xf2,0xbd,0xdb,0x25,0xf2,0xff,0xff,0xbd,0xdb,0xbd,0xdb,0xbd,0xdb,0x01,0x64,
-0x23,0xfb,0xff,0xff,0x1a,0xff,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x69,0x60,
-0x48,0x65,0x15,0xf5,0x22,0xf2,0x24,0xf2,0x60,0x40,0x02,0x3a,0x06,0x00,0xa5,0xdb,
-0x60,0x40,0x00,0x36,0x02,0x00,0x10,0x60,0xdc,0xe0,0x00,0x67,0x00,0x61,0x23,0x58,
-0xff,0xff,0x15,0xf5,0x22,0xf2,0x24,0xf2,0x60,0x40,0x02,0x3a,0x02,0x00,0xe1,0xfb,
-0xe3,0xfb,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x38,0xf2,0xff,0xff,0xff,0xa0,
-0x02,0x64,0x03,0x02,0x38,0xfa,0x60,0x47,0x3f,0xfa,0x28,0xf2,0xff,0xff,0x08,0xb0,
-0x60,0x47,0x07,0xb5,0x20,0x02,0xa6,0xf3,0x71,0x02,0x02,0xa8,0x01,0xa8,0x1c,0x02,
-0x39,0xf0,0x2b,0xf8,0x3a,0xf0,0xff,0xff,0x2c,0xf8,0x3b,0xf0,0x2d,0xf8,0xff,0xff,
-0x81,0xf1,0x2e,0xf8,0x82,0xf1,0xff,0xff,0x2f,0xf8,0x83,0xf1,0x30,0xf8,0xff,0xff,
-0x3c,0xf0,0x31,0xf8,0x3d,0xf0,0xff,0xff,0x32,0xf8,0x3e,0xf0,0x85,0xf3,0xff,0xff,
-0x33,0xf8,0x08,0xbc,0x29,0xfa,0x52,0x00,0x50,0xfe,0x3c,0xf0,0xbd,0xf3,0x2e,0xf8,
-0xd0,0x80,0x3d,0xf0,0xbe,0xf3,0x2f,0xf8,0xd0,0x80,0x3e,0xf0,0xbf,0xf3,0x30,0xf8,
-0xd0,0x80,0x85,0xf3,0x07,0x01,0x90,0xf3,0x60,0x41,0x04,0xb0,0x61,0x44,0x02,0x02,
-0x42,0xfe,0x3d,0x00,0x4a,0xf1,0x43,0xf1,0x64,0x40,0x01,0x2a,0x0f,0x00,0x28,0xf0,
-0x64,0x40,0x01,0x2a,0x0b,0x00,0x64,0x40,0x81,0x26,0x08,0x00,0x38,0xf2,0x60,0x5c,
-0x00,0xa8,0x64,0x44,0x03,0x03,0x60,0x47,0x40,0xbc,0x60,0x47,0x08,0xbc,0x29,0xfa,
-0x90,0xf3,0xff,0xff,0x04,0xb0,0x39,0xf0,0x21,0x02,0x02,0xb0,0x39,0xf0,0x0f,0x03,
-0x2b,0xf8,0x3a,0xf0,0xff,0xff,0x2c,0xf8,0x3b,0xf0,0x2d,0xf8,0xff,0xff,0x81,0xf1,
-0x31,0xf8,0x82,0xf1,0xff,0xff,0x32,0xf8,0x83,0xf1,0x33,0xf8,0x0f,0x00,0x31,0xf8,
-0x3a,0xf0,0xff,0xff,0x32,0xf8,0x3b,0xf0,0x33,0xf8,0xff,0xff,0x81,0xf1,0x2b,0xf8,
-0x82,0xf1,0xff,0xff,0x2c,0xf8,0x83,0xf1,0x2d,0xf8,0x00,0x00,0x02,0xfe,0x2f,0x58,
-0xff,0xff,0x00,0x64,0x15,0xfa,0x16,0xfa,0x1c,0xfa,0xff,0xff,0x07,0xfa,0x19,0xfa,
-0x1e,0x60,0xc0,0x65,0x95,0xf1,0x51,0xf3,0x64,0x40,0x01,0x2a,0x02,0x00,0x13,0xf2,
-0xff,0xff,0xe0,0x84,0x44,0xd1,0xca,0xf9,0x1e,0x63,0x29,0xf0,0x73,0x60,0xff,0x64,
-0xa0,0x84,0x03,0x2b,0x18,0x63,0x29,0xfa,0x04,0xa3,0x64,0x40,0x40,0x27,0x08,0xa3,
-0x43,0x4b,0x21,0xfc,0x56,0x61,0x64,0x40,0x01,0x27,0x62,0x61,0x38,0xf0,0xa1,0xd2,
-0x44,0x4d,0x60,0x40,0x01,0x26,0x22,0x00,0xca,0xf1,0xc3,0x81,0xd1,0x80,0x63,0x45,
-0x20,0x06,0x64,0x43,0xd7,0x85,0x45,0x4c,0xc8,0xf1,0x0f,0xf2,0xd3,0x80,0x01,0x65,
-0x01,0x05,0x00,0x65,0xb4,0x84,0x0f,0xfa,0x00,0x63,0x2d,0x44,0x2c,0x45,0x60,0x41,
-0xd4,0x84,0xdf,0x83,0xfc,0x07,0x14,0xfc,0x61,0x44,0x17,0xfa,0x29,0xf0,0x04,0x64,
-0x60,0x47,0xb0,0x84,0x29,0xfa,0x2c,0x43,0x16,0xfc,0x0f,0x00,0x2d,0x44,0x17,0xfa,
-0x0a,0x00,0x2d,0x44,0x17,0xfa,0x2b,0x45,0xc8,0xf1,0xc4,0x81,0xd1,0x80,0x0f,0xf2,
-0x01,0x04,0x01,0xbc,0x0f,0xfa,0x01,0x64,0x14,0xfa,0x2e,0x58,0xff,0xff,0xcb,0xf3,
+0xd0,0x80,0xff,0xff,0x20,0x01,0x65,0x44,0xff,0xa1,0x08,0xa5,0xe7,0x02,0x00,0x65,
+0x9e,0x61,0x5c,0x60,0xc2,0x63,0xc7,0x83,0xa3,0xd3,0x02,0xa3,0x60,0x40,0x80,0x2b,
+0x0d,0x00,0x24,0xf0,0xbd,0xd3,0x50,0xfe,0x25,0xf0,0xd0,0x80,0xbd,0xd3,0x26,0xf0,
+0xd0,0x80,0xa3,0xd3,0xff,0xff,0xd0,0x80,0xff,0xff,0x05,0x01,0x65,0x44,0xff,0xa1,
+0x08,0xa5,0xe7,0x02,0x0e,0x00,0xfa,0xa3,0xa3,0xd3,0xff,0xff,0xe0,0x84,0xe8,0x84,
+0xa3,0xdb,0xe0,0x85,0x78,0x60,0x50,0x63,0x79,0x60,0x98,0x61,0x00,0x7c,0x47,0xd9,
+0x45,0xd9,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x66,0x44,0x87,0xfb,0x00,0x60,
+0x92,0x64,0x22,0xfa,0xf1,0x60,0x03,0x64,0x23,0xfa,0x48,0x65,0x38,0x64,0x40,0x4c,
+0x20,0x60,0x78,0x63,0xbd,0xd3,0xff,0xff,0x00,0xa0,0xbd,0xd1,0x12,0x03,0x43,0x48,
+0x60,0x43,0x64,0x41,0xbd,0xd3,0xa5,0xda,0x2c,0x44,0xc8,0x84,0x40,0x4c,0x04,0x02,
+0x00,0xf4,0x78,0x64,0x40,0x4c,0x02,0x62,0xcd,0x81,0xda,0x85,0xf3,0x02,0x28,0x43,
+0xe9,0x00,0x87,0xf1,0x3f,0x60,0x70,0x62,0x3f,0x60,0x58,0x64,0xa2,0xdb,0x5a,0xd9,
+0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0x08,0x65,0x45,0x55,0x3b,0xff,0x00,0x67,
+0x00,0x61,0x23,0x58,0xff,0xff,0x1e,0xf3,0x15,0xf5,0x24,0xf0,0x60,0x40,0x20,0x2a,
+0x13,0x00,0x64,0x47,0x00,0x7f,0xfe,0xa4,0x82,0xa0,0x60,0x45,0x0d,0x05,0x14,0x60,
+0xd4,0x62,0x46,0xd9,0x6a,0x60,0xc8,0x62,0xa2,0xd3,0x64,0x40,0x12,0x37,0x01,0xbc,
+0x64,0x40,0x14,0x37,0x02,0xbc,0xa2,0xdb,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,
+0x2b,0x60,0xc2,0x63,0x00,0x64,0xbd,0xdb,0xbd,0xdb,0xff,0xff,0xbd,0xdb,0xbd,0xdb,
+0x01,0x64,0x22,0xfb,0xff,0xff,0x1a,0xff,0x22,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,
+0xfb,0x02,0x15,0xf5,0x05,0x64,0x22,0xfa,0x25,0x44,0x23,0xfa,0xc3,0xf3,0x24,0xfa,
+0xff,0xff,0x97,0xf3,0x25,0xfa,0x98,0xf3,0xff,0xff,0x26,0xfa,0x99,0xf3,0x27,0xfa,
+0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x15,0xf5,0x22,0xf2,0xff,0xff,0xfb,0xa0,
+0x2b,0x60,0xc2,0x63,0x0b,0x02,0x24,0xf2,0xbd,0xdb,0x25,0xf2,0xff,0xff,0xbd,0xdb,
+0xbd,0xdb,0xbd,0xdb,0x01,0x64,0x22,0xfb,0xff,0xff,0x1a,0xff,0x00,0x67,0x00,0x61,
+0x23,0x58,0xff,0xff,0x6b,0x60,0x30,0x65,0x15,0xf5,0x22,0xf2,0x24,0xf2,0x60,0x40,
+0x02,0x3a,0x06,0x00,0xa5,0xdb,0x60,0x40,0x00,0x36,0x02,0x00,0x10,0x60,0xdc,0xe0,
+0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,0x15,0xf5,0x22,0xf2,0x24,0xf2,0x60,0x40,
+0x02,0x3a,0x02,0x00,0xd0,0xfb,0xd2,0xfb,0x00,0x67,0x00,0x61,0x23,0x58,0xff,0xff,
+0x38,0xf2,0xff,0xff,0xff,0xa0,0x02,0x64,0x03,0x02,0x38,0xfa,0x60,0x47,0x3f,0xfa,
+0x28,0xf2,0xff,0xff,0x08,0xb0,0x60,0x47,0x07,0xb5,0x20,0x02,0x9c,0xf3,0x79,0x02,
+0x02,0xa8,0x01,0xa8,0x1c,0x02,0x39,0xf0,0x2b,0xf8,0x3a,0xf0,0xff,0xff,0x2c,0xf8,
+0x3b,0xf0,0x2d,0xf8,0xff,0xff,0x75,0xf1,0x2e,0xf8,0x76,0xf1,0xff,0xff,0x2f,0xf8,
+0x77,0xf1,0x30,0xf8,0xff,0xff,0x3c,0xf0,0x31,0xf8,0x3d,0xf0,0xff,0xff,0x32,0xf8,
+0x3e,0xf0,0x79,0xf3,0xff,0xff,0x33,0xf8,0x08,0xbc,0x29,0xfa,0x5a,0x00,0x50,0xfe,
+0x3c,0xf0,0xb0,0xf3,0x2e,0xf8,0xd0,0x80,0x3d,0xf0,0xb1,0xf3,0x2f,0xf8,0xd0,0x80,
+0x3e,0xf0,0xb2,0xf3,0x30,0xf8,0xd0,0x80,0x79,0xf3,0x07,0x01,0x84,0xf3,0x60,0x41,
+0x04,0xb0,0x61,0x44,0x02,0x02,0x42,0xfe,0x45,0x00,0x3d,0xf1,0x34,0xf1,0x64,0x40,
+0x01,0x2a,0x17,0x00,0x28,0xf0,0x64,0x40,0x01,0x2a,0x13,0x00,0x64,0x40,0x81,0x26,
+0x10,0x00,0x38,0xf2,0x60,0x5c,0x00,0xa8,0x64,0x44,0x0b,0x03,0x39,0xf0,0xe7,0xf1,
+0x64,0x40,0x01,0x2a,0x03,0x00,0x64,0x40,0x01,0x26,0x03,0x00,0x60,0x47,0x40,0xbc,
+0x60,0x47,0x08,0xbc,0x29,0xfa,0x84,0xf3,0xff,0xff,0x04,0xb0,0x39,0xf0,0x21,0x02,
+0x02,0xb0,0x39,0xf0,0x0f,0x03,0x2b,0xf8,0x3a,0xf0,0xff,0xff,0x2c,0xf8,0x3b,0xf0,
+0x2d,0xf8,0xff,0xff,0x75,0xf1,0x31,0xf8,0x76,0xf1,0xff,0xff,0x32,0xf8,0x77,0xf1,
+0x33,0xf8,0x0f,0x00,0x31,0xf8,0x3a,0xf0,0xff,0xff,0x32,0xf8,0x3b,0xf0,0x33,0xf8,
+0xff,0xff,0x75,0xf1,0x2b,0xf8,0x76,0xf1,0xff,0xff,0x2c,0xf8,0x77,0xf1,0x2d,0xf8,
+0x00,0x00,0x02,0xfe,0x2f,0x58,0xff,0xff,0x00,0x64,0x15,0xfa,0x16,0xfa,0x1c,0xfa,
+0xff,0xff,0x07,0xfa,0x19,0xfa,0x21,0x60,0x88,0x65,0x89,0xf1,0x44,0xf3,0x64,0x40,
+0x01,0x2a,0x02,0x00,0x13,0xf2,0xff,0xff,0xe0,0x84,0x44,0xd1,0xbc,0xf9,0x1e,0x63,
+0x29,0xf0,0x73,0x60,0xff,0x64,0xa0,0x84,0x03,0x2b,0x18,0x63,0x29,0xfa,0x04,0xa3,
+0x64,0x40,0x40,0x27,0x08,0xa3,0x43,0x4b,0x21,0xfc,0x56,0x61,0x64,0x40,0x01,0x27,
+0x62,0x61,0x38,0xf0,0xa1,0xd2,0x44,0x4d,0x60,0x40,0x01,0x26,0x22,0x00,0xbc,0xf1,
+0xc3,0x81,0xd1,0x80,0x63,0x45,0x20,0x06,0x64,0x43,0xd7,0x85,0x45,0x4c,0xba,0xf1,
+0x0f,0xf2,0xd3,0x80,0x01,0x65,0x01,0x05,0x00,0x65,0xb4,0x84,0x0f,0xfa,0x00,0x63,
+0x2d,0x44,0x2c,0x45,0x60,0x41,0xd4,0x84,0xdf,0x83,0xfc,0x07,0x14,0xfc,0x61,0x44,
+0x17,0xfa,0x29,0xf0,0x04,0x64,0x60,0x47,0xb0,0x84,0x29,0xfa,0x2c,0x43,0x16,0xfc,
+0x2c,0x00,0x2d,0x44,0x17,0xfa,0x0a,0x00,0x2d,0x44,0x17,0xfa,0x2b,0x45,0xba,0xf1,
+0xc4,0x81,0xd1,0x80,0x0f,0xf2,0x01,0x04,0x01,0xbc,0x0f,0xfa,0x01,0x64,0x14,0xfa,
+0x66,0x41,0x00,0xf4,0x6a,0x60,0xd0,0x64,0xa0,0xd1,0x05,0xf2,0x64,0x40,0x00,0x36,
+0x13,0x00,0x10,0xf2,0xf8,0xa0,0x90,0x84,0x0f,0x02,0x60,0x40,0x00,0x3a,0x0c,0x00,
+0x0a,0xf2,0xff,0xff,0x60,0x40,0x11,0x3b,0x07,0x00,0x61,0x46,0x0f,0xf2,0xff,0xff,
+0x02,0xbc,0x0f,0xfa,0x0a,0x64,0x15,0xfa,0x61,0x46,0x2e,0x58,0xff,0xff,0xbd,0xf3,
 0x2b,0xf2,0xfd,0xa0,0xff,0xff,0x4c,0x02,0x60,0x40,0x01,0x26,0x39,0x00,0x2b,0xf2,
 0xff,0xff,0x60,0x41,0xe1,0x81,0xf0,0x84,0xe1,0x81,0xf0,0x84,0xe1,0x81,0x5a,0xd2,
 0xf0,0x85,0x94,0x84,0x60,0x41,0xe1,0x81,0xf0,0x84,0xe1,0x81,0xf0,0x84,0xe1,0x81,
 0x5a,0xd2,0xf0,0x85,0x94,0x84,0x60,0x41,0xe1,0x81,0xf0,0x84,0xe1,0x81,0xf0,0x84,
-0xe1,0x81,0xf0,0x84,0x0e,0x4c,0x3a,0x60,0x58,0x4e,0xc5,0x78,0xff,0xff,0x0c,0x4e,
+0xe1,0x81,0xf0,0x84,0x0e,0x4c,0x3a,0x60,0x58,0x4e,0xcc,0x78,0xff,0xff,0x0c,0x4e,
 0x14,0x03,0x19,0xfc,0x0a,0xa3,0x3c,0x64,0xa3,0xdb,0xfe,0xa3,0xa3,0xd3,0xff,0xff,
 0xff,0xff,0x01,0x26,0x00,0x7f,0x02,0x26,0x01,0x7f,0x04,0x26,0x02,0x7f,0x08,0x26,
-0x03,0x7f,0x1d,0xfa,0x00,0x64,0x0d,0xfa,0x13,0x00,0x19,0xfc,0x50,0xf3,0xf1,0x00,
-0x17,0x60,0xfa,0x64,0xa0,0xd1,0x3a,0x60,0x02,0x64,0x19,0xfa,0x64,0x44,0x08,0x26,
+0x03,0x7f,0x1d,0xfa,0x00,0x64,0x0d,0xfa,0x13,0x00,0x19,0xfc,0x43,0xf3,0xf1,0x00,
+0x18,0x60,0x72,0x64,0xa0,0xd1,0x3c,0x60,0xca,0x64,0x19,0xfa,0x64,0x44,0x08,0x26,
 0x03,0x7f,0x04,0x26,0x02,0x7f,0x02,0x26,0x01,0x7f,0x01,0x26,0x00,0x7f,0xe9,0x00,
-0x2e,0x58,0xff,0xff,0x29,0x60,0x02,0x65,0x00,0x7f,0xe0,0x84,0xe0,0x84,0xe0,0x84,
+0x2e,0x58,0xff,0xff,0x2b,0x60,0xca,0x65,0x00,0x7f,0xe0,0x84,0xe0,0x84,0xe0,0x84,
 0xe0,0x84,0x44,0xd3,0x62,0x43,0x60,0x40,0x01,0x2a,0x10,0x00,0x02,0xa3,0x2b,0xf2,
 0x50,0xfe,0xbd,0xd1,0x2c,0xf2,0xd0,0x80,0xbd,0xd1,0x2d,0xf2,0xd0,0x80,0xbd,0xd1,
-0xff,0xff,0xd0,0x80,0xff,0xff,0x02,0x02,0xf8,0xa3,0x1e,0x00,0x72,0xf1,0x39,0x60,
-0x02,0x63,0x64,0x41,0xff,0x22,0x17,0x00,0xbd,0xd1,0x2b,0xf2,0x50,0xfe,0x64,0x40,
+0xff,0xff,0xd0,0x80,0xff,0xff,0x02,0x02,0xf8,0xa3,0x1e,0x00,0x66,0xf1,0x3b,0x60,
+0xca,0x63,0x64,0x41,0xff,0x22,0x17,0x00,0xbd,0xd1,0x2b,0xf2,0x50,0xfe,0x64,0x40,
 0x01,0x26,0x04,0x00,0xcd,0x81,0x0e,0xa3,0xf7,0x02,0x0d,0x00,0xbd,0xd1,0x2c,0xf2,
 0xd0,0x80,0xbd,0xd1,0x2d,0xf2,0xd0,0x80,0xbd,0xd1,0xff,0xff,0xd0,0x80,0xcd,0x81,
-0xe3,0x01,0x08,0xa3,0xe9,0x02,0x00,0x63,0x00,0xbb,0x2e,0x58,0xff,0xff,0x0f,0xf3,
-0x2c,0x65,0x60,0x47,0xff,0xb4,0xd4,0x80,0xff,0xff,0x04,0x28,0x06,0x00,0xe0,0x85,
-0x15,0x60,0xbe,0x64,0x44,0xd7,0xff,0xff,0xff,0xff,0xff,0x67,0x23,0x58,0xff,0xff,
-0x3b,0x60,0x2d,0x64,0x97,0xfb,0xff,0xff,0x2d,0xff,0x30,0x60,0x61,0x78,0xff,0xff,
-0x10,0xf3,0x7f,0xfb,0x02,0x7f,0x99,0xfb,0x02,0x60,0xee,0x64,0x98,0xfb,0x07,0x64,
-0x9a,0xfb,0x3b,0x60,0x2d,0x64,0x97,0xfb,0xdf,0xfe,0x00,0x64,0x19,0xff,0x30,0x60,
-0x61,0x78,0xff,0xff,0x00,0x67,0x23,0x58,0xff,0xff,0x69,0x60,0x56,0x61,0x11,0xf3,
-0xff,0xff,0xa1,0xdb,0x69,0x60,0x4c,0x61,0x10,0xf3,0xff,0xff,0xa1,0xdb,0x69,0x60,
-0x4e,0x61,0xff,0xff,0x02,0x36,0x06,0x00,0x03,0x36,0x06,0x00,0x04,0x36,0x13,0x00,
-0x00,0x64,0x16,0x00,0x00,0x64,0x14,0x00,0x16,0x60,0xd4,0x63,0xbd,0xd3,0x81,0xfb,
-0xbd,0xd3,0xff,0xff,0x82,0xfb,0xa3,0xd3,0x83,0xfb,0x69,0x60,0x54,0x62,0xff,0x64,
-0xa2,0xdb,0x01,0x64,0x05,0x00,0x69,0x60,0x54,0x62,0xff,0x64,0xa2,0xdb,0x01,0x64,
-0xa1,0xdb,0x00,0x60,0x01,0x64,0x32,0x45,0x34,0x92,0x00,0x67,0x23,0x58,0xff,0xff,
-0x00,0x60,0x02,0xe8,0x3c,0x60,0x6b,0x63,0x0e,0x60,0xac,0x64,0xa0,0xdd,0xff,0xff,
-0x62,0xff,0xff,0xff,0x1a,0xff,0x00,0x67,0x23,0x58,0xff,0xff,0x99,0xff,0x3e,0x44,
-0xfc,0xb4,0x00,0x7f,0x40,0x5e,0x98,0xff,0xbc,0xff,0x0d,0x63,0x58,0x4f,0x46,0x00,
-0x99,0xff,0x3d,0x44,0xf7,0xb4,0x40,0x5d,0x98,0xff,0x0d,0x63,0x58,0x4f,0x3e,0x00,
-0x99,0xff,0x3e,0x44,0x77,0xb4,0x08,0xbc,0x00,0x7f,0x40,0x5e,0x98,0xff,0x0d,0x63,
-0x58,0x4f,0x34,0x00,0x99,0xff,0x3c,0x44,0x10,0xbc,0x00,0x7f,0x40,0x5c,0x98,0xff,
-0x99,0xff,0x3d,0x44,0xef,0xb4,0x40,0x5d,0x2e,0x77,0x7e,0x00,0x00,0x10,0x98,0xff,
+0xe3,0x01,0x06,0x76,0x7e,0x00,0x00,0x10,0x08,0xa3,0xe9,0x02,0x00,0x63,0x00,0xbb,
+0x2e,0x58,0xff,0xff,0x0f,0xf3,0x2c,0x65,0x60,0x47,0xff,0xb4,0xd4,0x80,0xff,0xff,
+0x04,0x28,0x06,0x00,0xe0,0x85,0x16,0x60,0x36,0x64,0x44,0xd7,0xff,0xff,0xff,0xff,
+0xff,0x67,0x23,0x58,0xff,0xff,0x3b,0x60,0x34,0x64,0x8d,0xfb,0xff,0xff,0x2d,0xff,
+0x30,0x60,0x09,0x78,0xff,0xff,0x10,0xf3,0x73,0xfb,0x02,0x7f,0x8f,0xfb,0x02,0x60,
+0xee,0x64,0x8e,0xfb,0x07,0x64,0x90,0xfb,0x3b,0x60,0x34,0x64,0x8d,0xfb,0xdf,0xfe,
+0x00,0x64,0x19,0xff,0x30,0x60,0x09,0x78,0xff,0xff,0x00,0x67,0x23,0x58,0xff,0xff,
+0x6b,0x60,0x3e,0x61,0x11,0xf3,0xff,0xff,0xa1,0xdb,0x6b,0x60,0x34,0x61,0x10,0xf3,
+0xff,0xff,0xa1,0xdb,0x6b,0x60,0x36,0x61,0xff,0xff,0x02,0x36,0x06,0x00,0x03,0x36,
+0x06,0x00,0x04,0x36,0x13,0x00,0x00,0x64,0x16,0x00,0x00,0x64,0x14,0x00,0x17,0x60,
+0x4c,0x63,0xbd,0xd3,0x75,0xfb,0xbd,0xd3,0xff,0xff,0x76,0xfb,0xa3,0xd3,0x77,0xfb,
+0x6b,0x60,0x3c,0x62,0xff,0x64,0xa2,0xdb,0x01,0x64,0x05,0x00,0x6b,0x60,0x3c,0x62,
+0xff,0x64,0xa2,0xdb,0x01,0x64,0xa1,0xdb,0x00,0x60,0x01,0x64,0x32,0x45,0x34,0x92,
+0x00,0x67,0x23,0x58,0xff,0xff,0x00,0x60,0x02,0xe8,0x3c,0x60,0x72,0x63,0x0e,0x60,
+0xac,0x64,0xa0,0xdd,0xff,0xff,0x62,0xff,0xff,0xff,0x1a,0xff,0x00,0x67,0x23,0x58,
+0xff,0xff,0x99,0xff,0x3e,0x44,0xfc,0xb4,0x00,0x7f,0x40,0x5e,0x98,0xff,0xbc,0xff,
+0x0d,0x63,0x58,0x4f,0x46,0x00,0x99,0xff,0x3d,0x44,0xf7,0xb4,0x40,0x5d,0x98,0xff,
+0x0d,0x63,0x58,0x4f,0x3e,0x00,0x99,0xff,0x3e,0x44,0x77,0xb4,0x08,0xbc,0x00,0x7f,
+0x40,0x5e,0x98,0xff,0x0d,0x63,0x58,0x4f,0x34,0x00,0x99,0xff,0x3c,0x44,0x10,0xbc,
+0x00,0x7f,0x40,0x5c,0x98,0xff,0x99,0xff,0x3d,0x44,0xef,0xb4,0x40,0x5d,0x98,0xff,
 0xb5,0xff,0xff,0xff,0x6c,0x40,0x11,0x60,0x03,0xe8,0x01,0x60,0x03,0xe8,0xff,0xff,
 0xff,0xff,0xff,0xff,0x0e,0x60,0x00,0x6b,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
 0x46,0xff,0x47,0xff,0xf9,0x60,0xfe,0x64,0x32,0x45,0x24,0x92,0x99,0xff,0x35,0x47,
 0xff,0xb4,0x60,0x5c,0x08,0x60,0x0e,0x64,0xa0,0xd9,0x64,0x44,0x98,0xff,0x11,0x60,
-0x8e,0x63,0x0e,0x60,0xac,0x64,0xa0,0xdd,0xff,0xff,0x62,0xff,0x00,0x67,0x23,0x58,
+0x50,0x63,0x0e,0x60,0xac,0x64,0xa0,0xdd,0xff,0xff,0x62,0xff,0x00,0x67,0x23,0x58,
 0xff,0xff,0xff,0xff,0xfe,0x1f,0x2f,0x58,0xff,0xff,0x99,0xff,0x1e,0x65,0x3d,0x44,
 0xe1,0x81,0xf9,0xb4,0x02,0x24,0x04,0xbc,0x00,0x7f,0x40,0x5d,0x02,0x63,0xff,0xff,
 0xfe,0x1f,0x02,0xbc,0x40,0x5d,0xf4,0x1f,0x98,0xff,0x99,0xff,0x10,0xf3,0xff,0xff,
@@ -2125,15 +2209,15 @@
 0x60,0x47,0xa4,0x81,0x65,0x44,0xff,0xad,0x04,0x60,0xff,0xe5,0x3e,0x44,0x04,0x60,
 0xff,0xe5,0xa4,0x85,0xb5,0x84,0x00,0x7f,0x40,0x5e,0x00,0x6b,0x04,0x60,0xff,0xe5,
 0x3e,0x44,0x04,0x60,0xff,0xe5,0x00,0x7f,0x60,0x5c,0x08,0x60,0x0e,0x64,0xa0,0xd9,
-0x98,0xff,0x00,0x67,0x23,0x58,0xff,0xff,0x10,0xf1,0x3c,0x60,0xc8,0x62,0xa2,0xd9,
-0xca,0x82,0x22,0x64,0xa2,0xdb,0x3b,0x60,0x13,0x78,0xff,0xff,0x10,0xf1,0xff,0xff,
-0x7f,0xf9,0x3c,0x60,0xc6,0x62,0x08,0x64,0xa2,0xdb,0x3b,0x60,0x13,0x78,0xff,0xff,
-0x10,0xf1,0x3c,0x60,0xc8,0x62,0xa2,0xd9,0xca,0x82,0x1e,0x64,0xa2,0xdb,0x3b,0x60,
-0x13,0x78,0xff,0xff,0x3c,0x60,0xc6,0x62,0x02,0x64,0xa2,0xdb,0x3b,0x60,0x13,0x78,
-0xff,0xff,0x01,0x65,0x01,0x00,0x00,0x65,0x10,0xf1,0x15,0x60,0x64,0x63,0xbd,0xd9,
+0x98,0xff,0x00,0x67,0x23,0x58,0xff,0xff,0x10,0xf1,0x3f,0x60,0x90,0x62,0xa2,0xd9,
+0xca,0x82,0x22,0x64,0xa2,0xdb,0x3b,0x60,0x1a,0x78,0xff,0xff,0x10,0xf1,0xff,0xff,
+0x73,0xf9,0x3f,0x60,0x8e,0x62,0x08,0x64,0xa2,0xdb,0x3b,0x60,0x1a,0x78,0xff,0xff,
+0x10,0xf1,0x3f,0x60,0x90,0x62,0xa2,0xd9,0xca,0x82,0x1e,0x64,0xa2,0xdb,0x3b,0x60,
+0x1a,0x78,0xff,0xff,0x3f,0x60,0x8e,0x62,0x02,0x64,0xa2,0xdb,0x3b,0x60,0x1a,0x78,
+0xff,0xff,0x01,0x65,0x01,0x00,0x00,0x65,0x10,0xf1,0x15,0x60,0xdc,0x63,0xbd,0xd9,
 0x11,0xf1,0xbd,0xd9,0xff,0xff,0x12,0xf1,0xa3,0xd9,0x65,0x40,0x01,0x2a,0x06,0x00,
-0x00,0x64,0x10,0xfb,0xff,0xff,0x3b,0x60,0x1b,0x78,0xff,0xff,0x00,0x67,0x23,0x58,
-0xff,0xff,0x10,0xf1,0x67,0x60,0xca,0x62,0xa2,0xd9,0x00,0x67,0x23,0x58,0xff,0xff,
+0x00,0x64,0x10,0xfb,0xff,0xff,0x3b,0x60,0x22,0x78,0xff,0xff,0x00,0x67,0x23,0x58,
+0xff,0xff,0x10,0xf1,0x6a,0x60,0xa2,0x62,0xa2,0xd9,0x00,0x67,0x23,0x58,0xff,0xff,
 0x00,0x67,0x23,0x58,0xff,0xff,0x08,0xe1,0xa1,0xff,0xff,0xff,0x43,0xff,0x01,0xe1,
 0x99,0xff,0x3c,0x44,0x7f,0xb4,0x10,0xbc,0x40,0x5c,0x98,0xff,0x99,0xff,0x3d,0x44,
 0xef,0xb4,0x40,0x5d,0x98,0xff,0x0d,0x63,0x58,0x4f,0x76,0x00,0x99,0xff,0x3e,0x44,
@@ -2152,1976 +2236,2110 @@
 0x04,0x62,0xa4,0x81,0xe2,0xd2,0xff,0xff,0xa1,0xff,0xda,0x82,0xc9,0x81,0x60,0x4c,
 0xf9,0x1c,0xf4,0x1d,0xf1,0x1e,0x02,0x02,0x00,0xf4,0x04,0x62,0xa2,0xd2,0xff,0xff,
 0xa1,0xff,0xff,0xff,0x60,0x4d,0xe8,0x00,0xff,0xff,0xfe,0x1f,0x2f,0x58,0xff,0xff,
-0x6a,0x60,0x6e,0x78,0xff,0xff,0x1e,0x60,0xc8,0x62,0xa2,0xd1,0x80,0x60,0x00,0x64,
-0xb0,0x84,0xa2,0xdb,0xcf,0xfe,0x2b,0x00,0x74,0xf3,0x60,0xf1,0x00,0xa0,0xb0,0x84,
-0x0c,0x03,0x60,0xfb,0x1e,0x60,0xf4,0x62,0xa2,0xd1,0x00,0x60,0x20,0x64,0xb0,0x84,
-0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x00,0x64,0x74,0xfb,0x75,0xf3,0xff,0xff,0x00,0xa0,
-0x00,0x64,0x15,0x03,0x75,0xfb,0x1e,0x60,0xe2,0x62,0xa2,0xd1,0x00,0x60,0x02,0x64,
+0x6e,0x60,0x9f,0x78,0xff,0xff,0x21,0x60,0x90,0x62,0xa2,0xd1,0x80,0x60,0x00,0x64,
+0xb0,0x84,0xa2,0xdb,0xcf,0xfe,0x2b,0x00,0x68,0xf3,0x54,0xf1,0x00,0xa0,0xb0,0x84,
+0x0c,0x03,0x54,0xfb,0x21,0x60,0xbc,0x62,0xa2,0xd1,0x00,0x60,0x20,0x64,0xb0,0x84,
+0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x00,0x64,0x68,0xfb,0x69,0xf3,0xff,0xff,0x00,0xa0,
+0x00,0x64,0x15,0x03,0x69,0xfb,0x21,0x60,0xaa,0x62,0xa2,0xd1,0x00,0x60,0x02,0x64,
 0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x0a,0x00,0xab,0xfe,0xff,0xff,0xd0,0x05,
 0xaa,0xfe,0xff,0xff,0xd0,0x05,0xa9,0xfe,0xff,0xff,0xd6,0x05,0xff,0xff,0xa1,0xff,
-0xff,0xff,0xbd,0x3f,0x0e,0x57,0x68,0x60,0x42,0x62,0xa2,0xd3,0xff,0xff,0xff,0xff,
+0xff,0xff,0xbd,0x3f,0x0e,0x57,0x6b,0x60,0x2a,0x62,0xa2,0xd3,0xff,0xff,0xff,0xff,
 0x01,0x26,0x0c,0x65,0x45,0x48,0x0f,0x4e,0x00,0x60,0x06,0x61,0x41,0x4d,0x40,0xa1,
-0xa2,0xff,0x19,0x60,0x58,0x4f,0xaa,0x78,0xff,0xff,0xa3,0xff,0x06,0x03,0x2d,0x41,
-0x19,0x60,0x58,0x4f,0xcc,0x78,0xff,0xff,0x08,0xfe,0x0e,0x4f,0x15,0x03,0x02,0x64,
-0x22,0xfa,0xf2,0x60,0x00,0x64,0x5a,0xda,0x28,0x44,0x5a,0xda,0x08,0x65,0x3c,0x60,
-0xa2,0x62,0x3c,0x60,0x90,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,
-0xff,0xff,0x2b,0xff,0x45,0x54,0x3b,0xff,0x37,0x58,0xff,0xff,0x92,0xf3,0x15,0x61,
+0xa2,0xff,0x19,0x60,0x58,0x4f,0x39,0x78,0xff,0xff,0xa3,0xff,0x06,0x03,0x2d,0x41,
+0x19,0x60,0x58,0x4f,0x5b,0x78,0xff,0xff,0x08,0xfe,0x0e,0x4f,0x15,0x03,0x02,0x64,
+0x22,0xfa,0xf2,0x60,0x00,0x64,0x5a,0xda,0x28,0x44,0x5a,0xda,0x08,0x65,0x3f,0x60,
+0x6a,0x62,0x3f,0x60,0x58,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,
+0xff,0xff,0x2b,0xff,0x45,0x54,0x3b,0xff,0x37,0x58,0xff,0xff,0x86,0xf3,0x15,0x61,
 0x00,0xa8,0x60,0x46,0x15,0x02,0x0f,0x4e,0x00,0x60,0x2e,0x61,0x41,0x4d,0x40,0xa1,
-0xa2,0xff,0x19,0x60,0x58,0x4f,0xaa,0x78,0xff,0xff,0xa3,0xff,0x06,0x03,0x2d,0x41,
-0x19,0x60,0x58,0x4f,0xcc,0x78,0xff,0xff,0x08,0xfe,0x0e,0x4f,0x21,0x03,0x15,0x61,
-0x00,0x64,0x92,0xfb,0x58,0x60,0xae,0x63,0x16,0x64,0x22,0xfa,0xf1,0x60,0x00,0x64,
+0xa2,0xff,0x19,0x60,0x58,0x4f,0x39,0x78,0xff,0xff,0xa3,0xff,0x06,0x03,0x2d,0x41,
+0x19,0x60,0x58,0x4f,0x5b,0x78,0xff,0xff,0x08,0xfe,0x0e,0x4f,0x21,0x03,0x15,0x61,
+0x00,0x64,0x86,0xfb,0x61,0x60,0xa2,0x63,0x16,0x64,0x22,0xfa,0xf1,0x60,0x00,0x64,
 0x23,0xfa,0x48,0x65,0x00,0x64,0xa3,0xd1,0xbd,0xdb,0xa5,0xd8,0xcd,0x81,0xda,0x85,
-0xfa,0x02,0x3c,0x60,0xa2,0x62,0x3c,0x60,0x90,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,
+0xfa,0x02,0x3f,0x60,0x6a,0x62,0x3f,0x60,0x58,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,
 0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0x08,0x65,0x45,0x54,0x3b,0xff,0xa6,0xfe,
 0x8e,0x00,0xa6,0xfe,0xff,0xff,0xc2,0x05,0xa7,0xfe,0xff,0xff,0x08,0x05,0xa5,0xfe,
 0xff,0xff,0x1f,0x05,0xa4,0xfe,0xff,0xff,0x01,0x05,0x81,0x00,0x80,0x00,0x36,0x45,
-0x0e,0x60,0xd0,0x64,0x44,0xd7,0xff,0xff,0xff,0xff,0x94,0xf3,0xff,0xff,0x01,0xb0,
-0x00,0x64,0x0f,0x03,0x94,0xfb,0x31,0x44,0xfe,0xb4,0x40,0x51,0x1f,0x60,0x00,0x62,
-0xa2,0xd1,0x00,0x60,0x20,0x64,0xb0,0x84,0xa2,0xdb,0xcf,0xfe,0x3d,0x60,0x2f,0x78,
-0xff,0xff,0x3e,0x60,0x8d,0x78,0xff,0xff,0x16,0x60,0xd4,0x63,0xbd,0xd3,0xbd,0xd1,
-0xbd,0xd1,0xb0,0x84,0xb0,0x84,0xff,0xff,0x0b,0x02,0x8c,0xfb,0x31,0x44,0xfe,0xb4,
-0x40,0x51,0x0d,0x7c,0x08,0x60,0x0a,0x64,0xa0,0xd9,0x3e,0x60,0x8d,0x78,0xff,0xff,
-0x0f,0xf3,0x94,0xf1,0x60,0x47,0x07,0xb4,0x01,0x61,0x03,0x03,0xcc,0x84,0xe1,0x81,
-0xfd,0x02,0xa1,0x80,0xb1,0x83,0x03,0x03,0x3e,0x60,0x8d,0x78,0xff,0xff,0x94,0xfd,
-0x31,0x44,0x01,0xbc,0x40,0x51,0xd1,0xfe,0x1f,0xf3,0xff,0xff,0xff,0xff,0x20,0x26,
-0x18,0x00,0x17,0x60,0x9a,0x62,0xa2,0xd3,0xff,0xff,0x60,0x40,0x01,0x3a,0x03,0x00,
+0x0e,0x60,0xd0,0x64,0x44,0xd7,0xff,0xff,0xff,0xff,0x88,0xf3,0xff,0xff,0x01,0xb0,
+0x00,0x64,0x0f,0x03,0x88,0xfb,0x31,0x44,0xfe,0xb4,0x40,0x51,0x21,0x60,0xc8,0x62,
+0xa2,0xd1,0x00,0x60,0x20,0x64,0xb0,0x84,0xa2,0xdb,0xcf,0xfe,0x3d,0x60,0x36,0x78,
+0xff,0xff,0x3e,0x60,0x9e,0x78,0xff,0xff,0x17,0x60,0x4c,0x63,0xbd,0xd3,0xbd,0xd1,
+0xbd,0xd1,0xb0,0x84,0xb0,0x84,0xff,0xff,0x0b,0x02,0x80,0xfb,0x31,0x44,0xfe,0xb4,
+0x40,0x51,0x0d,0x7c,0x08,0x60,0x0a,0x64,0xa0,0xd9,0x3e,0x60,0x9e,0x78,0xff,0xff,
+0x0f,0xf3,0x88,0xf1,0x60,0x47,0x07,0xb4,0x01,0x61,0x03,0x03,0xcc,0x84,0xe1,0x81,
+0xfd,0x02,0xa1,0x80,0xb1,0x83,0x03,0x03,0x3e,0x60,0x9e,0x78,0xff,0xff,0x88,0xfd,
+0x31,0x44,0x01,0xbc,0x40,0x51,0xd1,0xfe,0x1e,0xf3,0xff,0xff,0xff,0xff,0x20,0x26,
+0x18,0x00,0x18,0x60,0x12,0x62,0xa2,0xd3,0xff,0xff,0x60,0x40,0x01,0x3a,0x03,0x00,
 0xe4,0x65,0xbb,0x63,0x0b,0x00,0x60,0x40,0x02,0x3a,0x03,0x00,0xe0,0x65,0xb9,0x63,
-0x05,0x00,0xb8,0x63,0xe6,0x65,0x60,0x40,0x03,0x36,0xe4,0x65,0x13,0x60,0x8a,0x62,
-0x15,0x00,0x17,0x60,0x9a,0x62,0xa2,0xd3,0xff,0xff,0x60,0x40,0x01,0x3a,0x03,0x00,
+0x05,0x00,0xb8,0x63,0xe6,0x65,0x60,0x40,0x03,0x36,0xe4,0x65,0x14,0x60,0x02,0x62,
+0x15,0x00,0x18,0x60,0x12,0x62,0xa2,0xd3,0xff,0xff,0x60,0x40,0x01,0x3a,0x03,0x00,
 0xe4,0x65,0xcb,0x63,0x0b,0x00,0x60,0x40,0x02,0x3a,0x03,0x00,0xe0,0x65,0xc9,0x63,
-0x05,0x00,0xc8,0x63,0xe6,0x65,0x60,0x40,0x03,0x36,0xe4,0x65,0x67,0x60,0xec,0x62,
-0xa2,0xd3,0xff,0xff,0x14,0x60,0x6c,0x62,0x60,0x41,0x01,0x26,0x03,0x00,0x65,0x5e,
+0x05,0x00,0xc8,0x63,0xe6,0x65,0x60,0x40,0x03,0x36,0xe4,0x65,0x6a,0x60,0xc8,0x62,
+0xa2,0xd3,0xff,0xff,0x14,0x60,0xe4,0x62,0x60,0x41,0x01,0x26,0x03,0x00,0x65,0x5e,
 0x12,0x7f,0xa2,0xdb,0x61,0x40,0x02,0x26,0x03,0x00,0x63,0x5e,0x14,0x7f,0x5a,0xdb,
-0x00,0x64,0x65,0xfb,0x17,0x60,0x62,0x62,0xa2,0xd3,0xff,0xff,0xfc,0xa0,0xff,0xff,
-0x01,0x06,0x04,0x64,0xa2,0xdb,0x3e,0x60,0x58,0x4e,0xae,0x78,0xff,0xff,0x95,0xf3,
-0xff,0xff,0x00,0xa0,0xff,0xff,0x26,0x03,0x00,0x60,0x08,0x63,0x01,0x60,0x78,0x61,
-0x16,0x60,0xd2,0x64,0x58,0xd1,0x59,0xd9,0xfd,0x1f,0x00,0x60,0x72,0x63,0x16,0x60,
-0x5e,0x61,0x16,0x60,0xdc,0x64,0x58,0xd1,0x59,0xd9,0xfd,0x1f,0x00,0x60,0x1a,0x63,
-0x01,0x60,0x00,0x61,0x00,0x64,0x59,0xdb,0xfe,0x1f,0x00,0x60,0xfa,0x64,0xe4,0xfb,
-0xc0,0xf1,0x3c,0x60,0xc2,0x62,0xa2,0xd9,0xca,0x82,0x1e,0x64,0xa2,0xdb,0xff,0xff,
-0x2d,0xff,0x1b,0x00,0x0d,0x60,0xac,0x64,0xe4,0xfb,0x32,0x40,0x01,0x26,0x0f,0x00,
-0x16,0x60,0xda,0x62,0xa2,0xd3,0xa5,0xf3,0x60,0x41,0x00,0x36,0x04,0x00,0xcd,0x81,
-0xe8,0x84,0xfd,0x02,0x04,0x05,0xc0,0xf1,0x16,0x60,0xda,0x62,0xa2,0xd9,0x0f,0x4e,
-0x42,0x60,0x58,0x4f,0x60,0x78,0xff,0xff,0x0e,0x4f,0xda,0xfe,0x3d,0x60,0x2f,0x78,
-0xff,0xff,0x66,0x44,0x00,0xa8,0x0e,0x57,0x17,0x03,0x00,0x64,0x40,0x46,0xcb,0xfe,
-0x0f,0x4e,0x46,0x45,0x3c,0x60,0xa2,0x62,0x00,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,
-0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xa2,0xff,0x1a,0x60,0x58,0x4f,0xa6,0x78,
-0xff,0xff,0xa3,0xff,0xd1,0xfe,0x0e,0x4f,0x37,0x58,0xff,0xff,0x1f,0xf3,0xff,0xff,
-0xff,0xff,0x10,0x2a,0x34,0x00,0x17,0x60,0x62,0x62,0xa2,0xd3,0xff,0xff,0x60,0x45,
-0xd5,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0x19,0x03,0x17,0x60,0x9e,0x62,0xa2,0xd3,
-0xff,0xff,0x60,0x45,0x17,0x60,0x66,0x63,0xff,0x60,0xff,0x61,0xbd,0xd3,0xdd,0x81,
-0xd4,0x80,0x61,0x44,0x03,0x06,0xfc,0xa0,0xff,0xff,0xf8,0x02,0x17,0x60,0x62,0x62,
-0xa2,0xd3,0x61,0x45,0xd4,0x80,0xff,0xff,0x01,0x06,0x60,0x45,0x67,0x60,0x54,0x62,
-0x65,0x44,0xa2,0xdb,0xe0,0x85,0x17,0x60,0x58,0x64,0x44,0xd3,0xff,0xff,0x13,0x60,
-0xb6,0x62,0x3e,0x7f,0xa2,0xdb,0x14,0x60,0x98,0x62,0x3e,0x7f,0xa2,0xdb,0x2e,0x58,
-0xff,0xff,0x3c,0x60,0x6c,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,0x0e,0xf2,
-0x62,0x03,0x60,0x47,0xfd,0x37,0x3a,0x00,0xff,0x36,0x17,0x00,0xf0,0x36,0x0a,0x00,
-0xff,0xb5,0x1e,0x60,0xca,0x62,0x46,0xd1,0x00,0x60,0x01,0x64,0xb0,0x84,0xa2,0xdb,
-0xff,0xff,0xcf,0xfe,0x3c,0x60,0xa2,0x62,0x00,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,
-0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xdc,0x00,0x0f,0x4e,0x46,0x45,0x3c,0x60,
-0xa2,0x62,0x00,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,
-0x2b,0xff,0xa2,0xff,0x1a,0x60,0x58,0x4f,0xa6,0x78,0xff,0xff,0xa3,0xff,0xd1,0xfe,
-0x0e,0x4f,0x5a,0x60,0x68,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,
-0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0xbb,0x00,0x3c,0x60,0xa2,0x62,
-0x3c,0x60,0x66,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,
-0x2b,0xff,0xd3,0xfe,0x5a,0x60,0x68,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
-0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0xa2,0x00,0xac,0xfe,
-0xff,0xff,0x0c,0x05,0xad,0xfe,0xff,0xff,0x12,0x05,0xae,0xfe,0xff,0xff,0x99,0x05,
-0xaf,0xfe,0xff,0xff,0x3a,0x05,0x3d,0x60,0x2f,0x78,0xff,0xff,0x1e,0x60,0xc8,0x62,
-0xa2,0xd1,0x20,0x60,0x00,0x64,0xb0,0x84,0xa2,0xdb,0xcf,0xfe,0xf4,0x00,0x1f,0x60,
-0x14,0x65,0x0a,0x61,0x07,0x00,0xa2,0xdd,0x58,0x4f,0x64,0x58,0xff,0xff,0x00,0xb9,
-0xff,0xff,0x08,0x03,0x00,0x63,0xa5,0xd1,0x5a,0xd3,0xda,0x85,0x00,0xa8,0xcd,0x81,
-0xf2,0x02,0xf8,0x02,0xe0,0x00,0x1e,0x60,0xc6,0x62,0x1e,0x60,0xfe,0x65,0x3f,0x60,
-0x8b,0x63,0x00,0x64,0x5a,0xdb,0xd6,0x80,0xff,0xff,0x04,0x03,0x5a,0xdb,0x5a,0xdb,
-0x5a,0xdd,0xf9,0x00,0x1f,0x60,0x12,0x65,0x00,0x64,0x5a,0xdb,0xd6,0x80,0xff,0xff,
-0x02,0x03,0x5a,0xdd,0xfb,0x00,0x2f,0x58,0xff,0xff,0x1e,0x60,0xca,0x64,0x40,0x41,
-0x1e,0x60,0xc8,0x63,0xa3,0xd1,0x00,0x64,0xd0,0x80,0x09,0x61,0x08,0x03,0xbd,0xdb,
-0xa3,0xd3,0xff,0xff,0xb0,0x84,0xcd,0x81,0xa3,0xdb,0x06,0xa3,0xf9,0x02,0x1f,0x60,
-0x00,0x63,0xa3,0xd1,0x00,0x64,0xd0,0x80,0x0a,0x61,0x16,0x03,0xbd,0xdb,0x64,0x44,
-0xfe,0xa3,0x02,0xa3,0xcd,0x81,0xe8,0x84,0xe3,0x03,0x02,0x05,0xe1,0x03,0xf9,0x00,
-0x40,0x42,0xa3,0xd3,0x43,0x44,0x00,0xa8,0x41,0x43,0x02,0x03,0x58,0x4f,0x60,0x58,
-0x22,0x44,0x23,0x41,0x24,0x43,0xed,0x00,0x21,0x43,0x1f,0x60,0x00,0x65,0xd7,0x80,
-0xbd,0xd1,0xbd,0xd3,0x01,0x02,0x8f,0x00,0xa0,0x84,0xbd,0xd1,0x43,0x41,0xf7,0x03,
-0x3f,0x60,0x90,0x64,0x64,0x58,0x40,0x4f,0x29,0xf2,0xff,0xff,0x60,0x40,0x08,0x26,
-0x03,0x00,0x40,0x60,0x2e,0x78,0xff,0xff,0x60,0x40,0x18,0x36,0x17,0x00,0x0c,0x60,
-0x44,0x64,0xa0,0xd7,0x58,0x4f,0xff,0xff,0x0f,0xf0,0xbd,0xf1,0x64,0x44,0x60,0x22,
-0x10,0x00,0x31,0xf2,0x32,0xf2,0xd0,0x80,0xbe,0xf1,0x0b,0x02,0xd0,0x80,0x33,0xf2,
-0x08,0x02,0xbf,0xf1,0xff,0xff,0xd0,0x80,0x0f,0xf0,0x03,0x02,0x41,0x60,0x76,0x78,
-0xff,0xff,0x00,0xf4,0xaa,0x60,0xaa,0x65,0x02,0xf2,0x03,0xf0,0xd4,0x80,0x03,0x64,
+0x00,0x64,0x59,0xfb,0x17,0x60,0xda,0x62,0xa2,0xd3,0xff,0xff,0xfc,0xa0,0xff,0xff,
+0x01,0x06,0x04,0x64,0xa2,0xdb,0x3e,0x60,0x58,0x4e,0xbf,0x78,0xff,0xff,0x89,0xf3,
+0xff,0xff,0x00,0xa0,0xff,0xff,0x30,0x03,0x00,0x60,0x08,0x63,0x01,0x60,0x5e,0x61,
+0x17,0x60,0x4a,0x64,0x58,0xd1,0x59,0xd9,0xfd,0x1f,0x00,0x60,0x72,0x63,0x16,0x60,
+0xd6,0x61,0x17,0x60,0x54,0x64,0x58,0xd1,0x59,0xd9,0xfd,0x1f,0x00,0x60,0x1a,0x63,
+0x00,0x60,0xe8,0x61,0x00,0x64,0x59,0xdb,0xfe,0x1f,0x01,0x60,0xa0,0x62,0xa2,0xd3,
+0xff,0xff,0x00,0xa0,0x19,0x60,0x92,0x62,0x02,0x02,0x00,0x64,0xa2,0xdb,0x00,0x60,
+0xfa,0x64,0xd3,0xfb,0xb3,0xf1,0x3f,0x60,0x8a,0x62,0xa2,0xd9,0xca,0x82,0x1e,0x64,
+0xa2,0xdb,0xff,0xff,0x2d,0xff,0x1b,0x00,0x0d,0x60,0xac,0x64,0xd3,0xfb,0x32,0x40,
+0x01,0x26,0x0f,0x00,0x17,0x60,0x52,0x62,0xa2,0xd3,0x9b,0xf3,0x60,0x41,0x00,0x36,
+0x04,0x00,0xcd,0x81,0xe8,0x84,0xfd,0x02,0x04,0x05,0xb3,0xf1,0x17,0x60,0x52,0x62,
+0xa2,0xd9,0x0f,0x4e,0x42,0x60,0x58,0x4f,0x7b,0x78,0xff,0xff,0x0e,0x4f,0xda,0xfe,
+0x3d,0x60,0x36,0x78,0xff,0xff,0x66,0x44,0x00,0xa8,0x0e,0x57,0x17,0x03,0x00,0x64,
+0x40,0x46,0xcb,0xfe,0x0f,0x4e,0x46,0x45,0x3f,0x60,0x6a,0x62,0x00,0x64,0xa2,0xdb,
+0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xa2,0xff,0x1a,0x60,
+0x58,0x4f,0x37,0x78,0xff,0xff,0xa3,0xff,0xd1,0xfe,0x0e,0x4f,0x37,0x58,0xff,0xff,
+0x1e,0xf3,0xff,0xff,0xff,0xff,0x10,0x2a,0x34,0x00,0x17,0x60,0xda,0x62,0xa2,0xd3,
+0xff,0xff,0x60,0x45,0xc4,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0x19,0x03,0x18,0x60,
+0x16,0x62,0xa2,0xd3,0xff,0xff,0x60,0x45,0x17,0x60,0xde,0x63,0xff,0x60,0xff,0x61,
+0xbd,0xd3,0xdd,0x81,0xd4,0x80,0x61,0x44,0x03,0x06,0xfc,0xa0,0xff,0xff,0xf8,0x02,
+0x17,0x60,0xda,0x62,0xa2,0xd3,0x61,0x45,0xd4,0x80,0xff,0xff,0x01,0x06,0x60,0x45,
+0x6a,0x60,0x32,0x62,0x65,0x44,0xa2,0xdb,0xe0,0x85,0x17,0x60,0xd0,0x64,0x44,0xd3,
+0xff,0xff,0x14,0x60,0x2e,0x62,0x3e,0x7f,0xa2,0xdb,0x15,0x60,0x10,0x62,0x3e,0x7f,
+0xa2,0xdb,0x2e,0x58,0xff,0xff,0x3f,0x60,0x34,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa8,
+0x60,0x46,0x0e,0xf2,0x69,0x03,0x60,0x47,0xfd,0x37,0x3a,0x00,0xff,0x36,0x17,0x00,
+0xf0,0x36,0x0a,0x00,0xff,0xb5,0x21,0x60,0x92,0x62,0x46,0xd1,0x00,0x60,0x01,0x64,
+0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x3f,0x60,0x6a,0x62,0x00,0x64,0xa2,0xdb,
+0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xdc,0x00,0x0f,0x4e,
+0x46,0x45,0x3f,0x60,0x6a,0x62,0x00,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,
+0x5a,0xdb,0xff,0xff,0x2b,0xff,0xa2,0xff,0x1a,0x60,0x58,0x4f,0x37,0x78,0xff,0xff,
+0xa3,0xff,0xd1,0xfe,0x0e,0x4f,0x63,0x60,0x5a,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,
+0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0xbb,0x00,
+0x0f,0xf0,0x15,0xf2,0x64,0x40,0x02,0x2a,0x02,0x00,0xf6,0xa4,0x15,0xfa,0x3f,0x60,
+0x6a,0x62,0x3f,0x60,0x2e,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,
+0xff,0xff,0x2b,0xff,0xd3,0xfe,0x63,0x60,0x5a,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,
+0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x9b,0x00,
+0xac,0xfe,0xff,0xff,0x0c,0x05,0xad,0xfe,0xff,0xff,0x12,0x05,0xae,0xfe,0xff,0xff,
+0x92,0x05,0xaf,0xfe,0xff,0xff,0x3a,0x05,0x3d,0x60,0x36,0x78,0xff,0xff,0x21,0x60,
+0x90,0x62,0xa2,0xd1,0x20,0x60,0x00,0x64,0xb0,0x84,0xa2,0xdb,0xcf,0xfe,0xf4,0x00,
+0x21,0x60,0xdc,0x65,0x0a,0x61,0x07,0x00,0xa2,0xdd,0x58,0x4f,0x64,0x58,0xff,0xff,
+0x00,0xb9,0xff,0xff,0x08,0x03,0x00,0x63,0xa5,0xd1,0x5a,0xd3,0xda,0x85,0x00,0xa8,
+0xcd,0x81,0xf2,0x02,0xf8,0x02,0xe0,0x00,0x21,0x60,0x8e,0x62,0x21,0x60,0xc6,0x65,
+0x3f,0x60,0xa3,0x63,0x00,0x64,0x5a,0xdb,0xd6,0x80,0xff,0xff,0x04,0x03,0x5a,0xdb,
+0x5a,0xdb,0x5a,0xdd,0xf9,0x00,0x21,0x60,0xda,0x65,0x00,0x64,0x5a,0xdb,0xd6,0x80,
+0xff,0xff,0x02,0x03,0x5a,0xdd,0xfb,0x00,0x2f,0x58,0xff,0xff,0x21,0x60,0x92,0x64,
+0x40,0x41,0x21,0x60,0x90,0x63,0xa3,0xd1,0x00,0x64,0xd0,0x80,0x09,0x61,0x08,0x03,
+0xbd,0xdb,0xa3,0xd3,0xff,0xff,0xb0,0x84,0xcd,0x81,0xa3,0xdb,0x06,0xa3,0xf9,0x02,
+0x21,0x60,0xc8,0x63,0xa3,0xd1,0x00,0x64,0xd0,0x80,0x0a,0x61,0x16,0x03,0xbd,0xdb,
+0x64,0x44,0xfe,0xa3,0x02,0xa3,0xcd,0x81,0xe8,0x84,0xe3,0x03,0x02,0x05,0xe1,0x03,
+0xf9,0x00,0x40,0x42,0xa3,0xd3,0x43,0x44,0x00,0xa8,0x41,0x43,0x02,0x03,0x58,0x4f,
+0x60,0x58,0x22,0x44,0x23,0x41,0x24,0x43,0xed,0x00,0x21,0x43,0x21,0x60,0xc8,0x65,
+0xd7,0x80,0xbd,0xd1,0xbd,0xd3,0x01,0x02,0x8f,0x00,0xa0,0x84,0xbd,0xd1,0x43,0x41,
+0xf7,0x03,0x3f,0x60,0xa8,0x64,0x64,0x58,0x40,0x4f,0x29,0xf2,0xff,0xff,0x60,0x40,
+0x08,0x26,0x03,0x00,0x40,0x60,0x4d,0x78,0xff,0xff,0x60,0x40,0x18,0x36,0x17,0x00,
+0x0c,0x60,0x44,0x64,0xa0,0xd7,0x58,0x4f,0xff,0xff,0x0f,0xf0,0xb0,0xf1,0x64,0x44,
+0x60,0x22,0x17,0x00,0x31,0xf2,0x32,0xf2,0xd0,0x80,0xb1,0xf1,0x0b,0x02,0xd0,0x80,
+0x33,0xf2,0x08,0x02,0xb2,0xf1,0xff,0xff,0xd0,0x80,0x0f,0xf0,0x03,0x02,0x41,0x60,
+0x91,0x78,0xff,0xff,0x8c,0xf3,0x8b,0xf3,0x60,0x45,0xd4,0x80,0xdc,0x84,0xf7,0x07,
+0x8b,0xfb,0x00,0xf4,0xaa,0x60,0xaa,0x65,0x02,0xf2,0x03,0xf0,0xd4,0x80,0x03,0x64,
 0x16,0x02,0xd0,0x80,0x00,0x64,0x04,0xf0,0x12,0x02,0xd0,0x80,0xf8,0x7f,0x06,0x02,
 0x26,0x46,0x22,0xf0,0x20,0x67,0xb0,0x84,0xa2,0xda,0x09,0x00,0xd0,0x80,0xff,0xff,
 0x06,0x02,0x26,0x46,0x22,0xf0,0x40,0x67,0xb0,0x84,0xa2,0xda,0x00,0x00,0x26,0x46,
-0x0f,0xf2,0x81,0xf1,0x29,0xf2,0x60,0x40,0x20,0x2a,0x11,0x00,0x5c,0x63,0x60,0x40,
-0x02,0x2b,0x62,0x63,0xbd,0xd2,0xbd,0xd2,0xd0,0x80,0x82,0xf1,0x5c,0x02,0xd0,0x80,
-0xa3,0xd2,0x83,0xf1,0x58,0x02,0xd0,0x80,0xff,0xff,0x55,0x02,0x00,0x00,0x64,0x60,
-0x58,0x4f,0xbc,0x78,0xff,0xff,0x41,0x60,0x4c,0x78,0xff,0xff,0x26,0x46,0x29,0xf2,
-0xff,0xff,0xff,0xff,0x0c,0x26,0x47,0x00,0x95,0xf1,0x00,0x63,0xd3,0x80,0xff,0xff,
-0xf2,0x02,0x60,0x40,0xb0,0x3a,0x07,0x00,0x5b,0x60,0x28,0x64,0xa0,0xd3,0xff,0xff,
-0xdc,0x84,0xa2,0xdb,0x23,0x00,0x10,0x3a,0x07,0x00,0x5b,0x60,0x2c,0x64,0xa0,0xd3,
-0xff,0xff,0xdc,0x84,0xa2,0xdb,0x1a,0x00,0x30,0x3a,0x07,0x00,0x5b,0x60,0x2c,0x64,
-0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x11,0x00,0xc0,0x3a,0x07,0x00,0x5b,0x60,
-0x2e,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x08,0x00,0xa0,0x3a,0x1e,0x00,
-0x5b,0x60,0x30,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x0c,0x60,0x48,0x64,
-0xa0,0xd7,0x58,0x4f,0xff,0xff,0x2d,0x00,0xcb,0xf3,0xff,0xff,0x60,0x40,0x03,0x3a,
-0x0a,0x00,0x68,0x60,0x58,0x4e,0xeb,0x78,0xff,0xff,0x26,0x46,0x04,0x02,0x41,0x60,
-0x58,0x4e,0x8c,0x78,0xff,0xff,0x41,0x60,0x76,0x78,0xff,0xff,0x50,0x3a,0x0c,0x00,
-0x5b,0x60,0x36,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x0c,0x60,0x50,0x64,
-0xa0,0xd7,0x58,0x4f,0xff,0xff,0x0d,0x00,0x40,0x3a,0x0e,0x00,0x5b,0x60,0x32,0x64,
+0x0f,0xf2,0x75,0xf1,0x29,0xf2,0x60,0x40,0x20,0x2a,0x11,0x00,0x5c,0x63,0x60,0x40,
+0x02,0x2b,0x62,0x63,0xbd,0xd2,0xbd,0xd2,0xd0,0x80,0x76,0xf1,0x5c,0x02,0xd0,0x80,
+0xa3,0xd2,0x77,0xf1,0x58,0x02,0xd0,0x80,0xff,0xff,0x55,0x02,0x00,0x00,0x68,0x60,
+0x58,0x4f,0xf3,0x78,0xff,0xff,0x41,0x60,0x67,0x78,0xff,0xff,0x26,0x46,0x29,0xf2,
+0xff,0xff,0xff,0xff,0x0c,0x26,0x47,0x00,0x89,0xf1,0x00,0x63,0xd3,0x80,0xff,0xff,
+0xf2,0x02,0x60,0x40,0xb0,0x3a,0x07,0x00,0x64,0x60,0x1a,0x64,0xa0,0xd3,0xff,0xff,
+0xdc,0x84,0xa2,0xdb,0x23,0x00,0x10,0x3a,0x07,0x00,0x64,0x60,0x1e,0x64,0xa0,0xd3,
+0xff,0xff,0xdc,0x84,0xa2,0xdb,0x1a,0x00,0x30,0x3a,0x07,0x00,0x64,0x60,0x1e,0x64,
+0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x11,0x00,0xc0,0x3a,0x07,0x00,0x64,0x60,
+0x20,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x08,0x00,0xa0,0x3a,0x1e,0x00,
+0x64,0x60,0x22,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x0c,0x60,0x48,0x64,
+0xa0,0xd7,0x58,0x4f,0xff,0xff,0x2d,0x00,0xbd,0xf3,0xff,0xff,0x60,0x40,0x03,0x3a,
+0x0a,0x00,0x6d,0x60,0x58,0x4e,0x1c,0x78,0xff,0xff,0x26,0x46,0x04,0x02,0x41,0x60,
+0x58,0x4e,0xa7,0x78,0xff,0xff,0x41,0x60,0x91,0x78,0xff,0xff,0x50,0x3a,0x0c,0x00,
+0x64,0x60,0x28,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x0c,0x60,0x50,0x64,
+0xa0,0xd7,0x58,0x4f,0xff,0xff,0x0d,0x00,0x40,0x3a,0x0e,0x00,0x64,0x60,0x24,0x64,
 0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x0c,0x60,0x4a,0x64,0xa0,0xd7,0x58,0x4f,
-0xff,0xff,0x41,0x60,0x72,0x78,0xff,0xff,0x90,0x3a,0x10,0x00,0x41,0x60,0x58,0x4e,
-0x7d,0x78,0xff,0xff,0x0c,0x60,0x52,0x64,0xa0,0xd7,0x58,0x4f,0xff,0xff,0x5b,0x60,
-0x24,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0xeb,0x00,0x80,0x3a,0x6e,0x00,
-0xcb,0xf3,0x20,0x40,0x40,0x26,0x32,0x00,0xfd,0xa0,0xfc,0xa0,0x01,0x03,0x29,0x02,
-0x81,0xf1,0x31,0xf2,0x32,0xf2,0xd0,0x80,0x82,0xf1,0xae,0x02,0xd0,0x80,0x33,0xf2,
-0x83,0xf1,0xaa,0x02,0xd0,0x80,0x70,0xf3,0xa7,0x02,0xdc,0x84,0xcb,0xf1,0x70,0xfb,
-0x00,0x64,0x71,0xfb,0x0a,0x60,0x02,0x64,0x6e,0xfb,0x64,0x40,0x03,0x36,0x50,0x00,
-0x5b,0x60,0x1c,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x0c,0x60,0x4c,0x64,
-0xa0,0xd7,0x58,0x4f,0xff,0xff,0x0c,0x60,0x4e,0x64,0xa0,0xd7,0x58,0x4f,0xff,0xff,
-0x3d,0x00,0xd5,0xf3,0xff,0xff,0xfd,0xa0,0xff,0xff,0x08,0x04,0x0c,0x60,0x50,0x64,
-0xa0,0xd7,0x58,0x4f,0xff,0xff,0x41,0x60,0x72,0x78,0xff,0xff,0x16,0x60,0x60,0x62,
-0xa2,0xd3,0xff,0xff,0xfc,0xa0,0x81,0xf3,0x29,0x02,0x00,0xa0,0x31,0xf0,0x13,0x03,
-0xd0,0x80,0x82,0xf3,0x32,0xf0,0x0f,0x02,0xd0,0x80,0x83,0xf3,0x33,0xf0,0x0b,0x02,
-0xd0,0x80,0x70,0xf3,0x08,0x02,0xdc,0x84,0x70,0xfb,0x00,0x64,0x71,0xfb,0x0a,0x60,
-0x02,0x64,0x6e,0xfb,0x13,0x00,0x59,0x60,0xa0,0x64,0xa0,0xd3,0xff,0xff,0x60,0x40,
-0xff,0x22,0x0c,0x00,0x68,0x60,0x58,0x4e,0xeb,0x78,0xff,0xff,0x07,0x02,0x0f,0x4e,
-0x26,0x46,0x67,0x60,0x58,0x4f,0x75,0x78,0xff,0xff,0x0e,0x4f,0x26,0x46,0x56,0x00,
-0x29,0xf0,0x3d,0x60,0x8e,0x65,0x0a,0x64,0x64,0x40,0x10,0x2b,0xa5,0xdb,0x69,0x60,
-0x44,0x62,0x90,0x60,0x30,0x64,0xa2,0xdb,0x41,0x60,0x58,0x4e,0x7d,0x78,0xff,0xff,
-0xa4,0xf3,0x5e,0xf1,0x60,0x45,0x73,0x44,0x64,0x40,0x04,0x2a,0x04,0x00,0xd4,0x84,
-0xe7,0xa0,0x96,0x0e,0x95,0x04,0x5b,0x60,0x1c,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,
-0xa2,0xdb,0x0c,0x60,0x4c,0x64,0xa0,0xd7,0x58,0x4f,0xff,0xff,0x0c,0x60,0x4e,0x64,
-0xa0,0xd7,0x58,0x4f,0xff,0xff,0xd2,0x00,0x67,0x60,0x58,0x62,0xa2,0xd3,0xff,0xff,
-0x81,0xa0,0xff,0xa0,0x23,0x03,0x0f,0x02,0x41,0x60,0x58,0x4e,0xee,0x78,0xff,0xff,
-0xff,0xa1,0x26,0x46,0x1b,0x02,0x67,0x60,0x58,0x62,0x7f,0x64,0xa2,0xdb,0xba,0xff,
-0xff,0xff,0xaf,0xff,0x13,0x00,0x3c,0x60,0xa2,0x62,0x3c,0x60,0x8a,0x64,0xa2,0xdb,
-0x26,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0x00,0x64,0x40,0x46,
-0xd2,0xfe,0x08,0x00,0x66,0x44,0x00,0xbc,0xff,0xff,0x04,0x03,0x3e,0x60,0x58,0x4e,
-0x91,0x78,0xff,0xff,0x56,0xf7,0xff,0xff,0xff,0xff,0x76,0xf3,0x3c,0x45,0xd4,0x80,
-0x28,0x60,0x80,0x62,0x07,0x02,0x80,0x64,0xa2,0xdb,0xff,0xff,0xc0,0xfe,0x00,0x64,
-0xa2,0xdb,0x71,0xfb,0x2e,0x58,0xff,0xff,0x26,0x46,0x28,0x60,0xfa,0x63,0x00,0xf4,
-0x02,0xf2,0xbd,0xdb,0xff,0xff,0x03,0xf2,0xbd,0xdb,0x04,0xf2,0xff,0xff,0xbd,0xdb,
-0x05,0xf2,0xa3,0xdb,0xfa,0xa3,0x26,0x46,0x00,0x60,0x00,0x65,0xa3,0xd3,0x23,0xf0,
-0x00,0x61,0xd0,0x84,0xf1,0x81,0xd4,0x84,0xf1,0x81,0xbd,0xdb,0xa3,0xd3,0x03,0xb1,
-0x03,0xa9,0x24,0xf0,0x42,0xfe,0x01,0x03,0xcc,0x84,0xf1,0x81,0xd0,0x84,0xf1,0x81,
-0xbd,0xdb,0xa3,0xd3,0x03,0xb1,0x03,0xa9,0x27,0xf0,0x42,0xfe,0x01,0x03,0xcc,0x84,
-0xf1,0x81,0xd0,0x84,0xf1,0x81,0xbd,0xdb,0xa3,0xd3,0x03,0xb1,0x03,0xa9,0x28,0xf0,
-0x01,0x03,0xcc,0x84,0xd0,0x84,0xa3,0xdb,0x26,0x0e,0x28,0x60,0xfa,0x63,0xbd,0xd3,
-0x00,0x65,0x00,0x61,0xd4,0x84,0xbd,0xd3,0xf1,0x81,0x01,0xa9,0x42,0xfe,0x01,0x03,
-0xcc,0x84,0xf1,0x81,0x01,0x65,0xd4,0x84,0xf1,0x81,0xbd,0xd3,0x03,0xb1,0x03,0xa9,
-0x42,0xfe,0x01,0x03,0xcc,0x84,0xf1,0x81,0x00,0x65,0xd4,0x84,0xf1,0x81,0xa3,0xd3,
-0x03,0xb1,0x03,0xa9,0x42,0xfe,0x01,0x03,0xcc,0x84,0xd4,0x84,0x04,0x0e,0x67,0x60,
-0x1a,0x62,0x01,0x64,0xa2,0xdb,0x26,0x46,0x2e,0x58,0xff,0xff,0x67,0x60,0x56,0x62,
-0x2e,0x44,0xa2,0xdb,0x00,0x64,0x38,0xf2,0x40,0x48,0x40,0x4c,0xa0,0xa0,0xff,0xff,
-0x43,0x04,0x00,0xf4,0x01,0xf2,0x04,0x63,0x60,0x41,0x67,0x60,0x66,0x62,0x00,0x64,
-0xa2,0xdb,0x42,0x60,0x58,0x4e,0x44,0x78,0xff,0xff,0x36,0x03,0xff,0x65,0xd4,0x80,
-0xff,0xff,0xf7,0x02,0x00,0x64,0xdc,0x84,0x40,0x4d,0x42,0x60,0x58,0x4e,0x44,0x78,
-0xff,0xff,0x2a,0x03,0xff,0x65,0xd4,0x80,0x60,0x42,0x2d,0x44,0xf4,0x03,0xfa,0xa0,
-0xff,0xff,0xe3,0x04,0x06,0x64,0x40,0x4d,0x67,0x60,0x5a,0x65,0x62,0x44,0x05,0x00,
-0x42,0x60,0x58,0x4e,0x44,0x78,0xff,0xff,0x17,0x03,0xa5,0xd1,0xda,0x85,0xd0,0x80,
-0xff,0xff,0xdc,0x02,0x2d,0x44,0xcc,0x84,0x40,0x4d,0xf2,0x02,0x06,0x64,0x40,0x4d,
-0x67,0x60,0x5a,0x65,0x67,0x60,0x66,0x62,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xf0,0xa0,
-0xa2,0xdb,0xe6,0x02,0x01,0x61,0x01,0x00,0x00,0x61,0x67,0x60,0x56,0x62,0xa2,0xd3,
-0xff,0xff,0x40,0x4e,0x2e,0x58,0xff,0xff,0x2c,0x44,0xcc,0x84,0x40,0x4c,0x11,0x0e,
-0xcd,0x81,0xff,0xff,0x05,0x0d,0x00,0xf4,0x01,0xf2,0x04,0x63,0xcc,0x84,0x60,0x41,
-0x28,0x44,0x01,0xac,0x40,0x48,0x07,0x02,0xbd,0xd2,0x01,0xb8,0x60,0x47,0x00,0x7f,
-0x05,0x00,0xdc,0x84,0x03,0x00,0xa3,0xd2,0xff,0xff,0x00,0x7f,0x2e,0x58,0xff,0xff,
-0x01,0x64,0xcb,0xfb,0x1e,0x60,0xe8,0x62,0x00,0x64,0xa2,0xdb,0x00,0x60,0x08,0x63,
-0x01,0x60,0x78,0x61,0x16,0x60,0xd2,0x64,0x58,0xd1,0x59,0xd9,0xfd,0x1f,0x00,0x60,
-0x72,0x63,0x16,0x60,0x5e,0x61,0x16,0x60,0xdc,0x64,0x58,0xd1,0x59,0xd9,0xfd,0x1f,
-0xd5,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0x15,0x03,0x18,0x60,0xee,0x63,0x17,0x60,
-0xa0,0x61,0x13,0x64,0xbd,0xd1,0xa1,0xd9,0xff,0xa4,0x02,0xa1,0xfb,0x02,0x1f,0x60,
-0x58,0x63,0x05,0x64,0xa3,0xdb,0x0a,0xa3,0xa3,0xdb,0x0a,0xa3,0xa3,0xdb,0x06,0xa3,
-0xa3,0xdb,0x29,0x00,0x1f,0x60,0x76,0x62,0x00,0x64,0xa2,0xdb,0x1f,0x60,0x3c,0x63,
-0x19,0x60,0x16,0x64,0xa0,0xd3,0xa5,0xf3,0x60,0x45,0xa4,0x85,0x01,0x61,0x65,0x44,
-0xe8,0x85,0x05,0x64,0x02,0x28,0x00,0x64,0xbd,0xdb,0x00,0xa0,0xff,0xff,0x0d,0x03,
-0x1f,0x60,0x76,0x62,0xa2,0xd3,0xff,0xff,0x01,0xa4,0xa2,0xdb,0xff,0xa0,0xff,0xff,
-0x04,0x02,0x1f,0x60,0x74,0x62,0x61,0x44,0xa2,0xdb,0xdd,0x81,0xff,0xff,0x61,0x44,
-0xf2,0xa0,0xff,0xff,0xe4,0x06,0x59,0x60,0x9e,0x61,0x16,0x60,0x60,0x64,0x20,0x63,
-0x58,0xd1,0x59,0xd9,0xfd,0x1f,0xa8,0xf1,0x80,0xf9,0x1f,0xf1,0x67,0x60,0x76,0x65,
-0x0a,0x64,0x64,0x40,0x10,0x2a,0x04,0x64,0xa5,0xdb,0x32,0x40,0x01,0x26,0x07,0x00,
-0x00,0x60,0x1a,0x63,0x01,0x60,0x00,0x61,0x00,0x64,0x59,0xdb,0xfe,0x1f,0x40,0x40,
-0xc0,0xf3,0xff,0xff,0x40,0x4a,0x1e,0x60,0xe8,0x62,0x00,0x64,0xa2,0xdb,0xde,0xfe,
-0xff,0xff,0x0b,0x04,0x1e,0x60,0xea,0x62,0x40,0x60,0x00,0x64,0xa2,0xdb,0x42,0x60,
-0xdb,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x3c,0x60,0xc2,0x62,0x2a,0x44,
-0xa2,0xdb,0xca,0x82,0x08,0x64,0xa2,0xdb,0xff,0xff,0x2d,0xff,0x1e,0x60,0xea,0x62,
-0x20,0x60,0x00,0x64,0xa2,0xdb,0x43,0x60,0x01,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,
-0xff,0xff,0x1e,0x60,0xe8,0x62,0x00,0x64,0xa2,0xdb,0xbe,0xfe,0x1e,0x60,0xc8,0x62,
-0xa2,0xd1,0x40,0x60,0x00,0x64,0xb0,0x84,0xa2,0xdb,0xcf,0xfe,0x62,0x60,0x48,0x62,
-0x0c,0x64,0xa2,0xdb,0x64,0x60,0xd8,0x62,0x01,0x64,0xa2,0xdb,0xd5,0xf1,0x03,0x64,
-0x64,0x40,0x00,0x3a,0xd5,0xfb,0x95,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0x02,0x02,
-0x00,0x64,0x62,0xfb,0x67,0x60,0xee,0x62,0xa2,0xd3,0xff,0xff,0x60,0x40,0x00,0x3a,
-0x2b,0x00,0x01,0x64,0xa2,0xdb,0x12,0x60,0x34,0x65,0x72,0x44,0xb4,0x83,0x00,0x7f,
+0xff,0xff,0x41,0x60,0x8d,0x78,0xff,0xff,0x90,0x3a,0x10,0x00,0x41,0x60,0x58,0x4e,
+0x98,0x78,0xff,0xff,0x0c,0x60,0x52,0x64,0xa0,0xd7,0x58,0x4f,0xff,0xff,0x64,0x60,
+0x16,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0xeb,0x00,0x80,0x3a,0x6f,0x00,
+0xe9,0xf3,0xbd,0xf3,0x60,0x40,0x40,0x26,0x32,0x00,0xfd,0xa0,0xfc,0xa0,0x01,0x03,
+0x29,0x02,0x75,0xf1,0x31,0xf2,0x32,0xf2,0xd0,0x80,0x76,0xf1,0xad,0x02,0xd0,0x80,
+0x33,0xf2,0x77,0xf1,0xa9,0x02,0xd0,0x80,0x64,0xf3,0xa6,0x02,0xdc,0x84,0xbd,0xf1,
+0x64,0xfb,0x00,0x64,0x65,0xfb,0x0a,0x60,0x02,0x64,0x62,0xfb,0x64,0x40,0x03,0x36,
+0x50,0x00,0x64,0x60,0x0e,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x0c,0x60,
+0x4c,0x64,0xa0,0xd7,0x58,0x4f,0xff,0xff,0x0c,0x60,0x4e,0x64,0xa0,0xd7,0x58,0x4f,
+0xff,0xff,0x3d,0x00,0xc4,0xf3,0xff,0xff,0xfd,0xa0,0xff,0xff,0x08,0x04,0x0c,0x60,
+0x50,0x64,0xa0,0xd7,0x58,0x4f,0xff,0xff,0x41,0x60,0x8d,0x78,0xff,0xff,0x16,0x60,
+0xd8,0x62,0xa2,0xd3,0xff,0xff,0xfc,0xa0,0x75,0xf3,0x29,0x02,0x00,0xa0,0x31,0xf0,
+0x13,0x03,0xd0,0x80,0x76,0xf3,0x32,0xf0,0x0f,0x02,0xd0,0x80,0x77,0xf3,0x33,0xf0,
+0x0b,0x02,0xd0,0x80,0x64,0xf3,0x08,0x02,0xdc,0x84,0x64,0xfb,0x00,0x64,0x65,0xfb,
+0x0a,0x60,0x02,0x64,0x62,0xfb,0x13,0x00,0x62,0x60,0x92,0x64,0xa0,0xd3,0xff,0xff,
+0x60,0x40,0xff,0x22,0x0c,0x00,0x6d,0x60,0x58,0x4e,0x1c,0x78,0xff,0xff,0x07,0x02,
+0x0f,0x4e,0x26,0x46,0x6b,0x60,0x58,0x4f,0xac,0x78,0xff,0xff,0x0e,0x4f,0x26,0x46,
+0x51,0x00,0x29,0xf0,0x40,0x60,0x0e,0x65,0x0a,0x64,0x64,0x40,0x10,0x2b,0xa5,0xdb,
+0x41,0x60,0x58,0x4e,0x98,0x78,0xff,0xff,0x9a,0xf3,0x52,0xf1,0x60,0x45,0x73,0x44,
+0x64,0x40,0x04,0x2a,0x04,0x00,0xd4,0x84,0xe7,0xa0,0x9b,0x0e,0x9a,0x04,0x64,0x60,
+0x0e,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x0c,0x60,0x4c,0x64,0xa0,0xd7,
+0x58,0x4f,0xff,0xff,0x0c,0x60,0x4e,0x64,0xa0,0xd7,0x58,0x4f,0xff,0xff,0xd7,0x00,
+0x6a,0x60,0x36,0x62,0xa2,0xd3,0xff,0xff,0x81,0xa0,0xff,0xa0,0x23,0x03,0x0f,0x02,
+0x42,0x60,0x58,0x4e,0x09,0x78,0xff,0xff,0xff,0xa1,0x26,0x46,0x1b,0x02,0x6a,0x60,
+0x36,0x62,0x7f,0x64,0xa2,0xdb,0xba,0xff,0xff,0xff,0xaf,0xff,0x13,0x00,0x3f,0x60,
+0x6a,0x62,0x3f,0x60,0x52,0x64,0xa2,0xdb,0x26,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,
+0xff,0xff,0x2b,0xff,0x00,0x64,0x40,0x46,0xd2,0xfe,0x08,0x00,0x66,0x44,0x00,0xbc,
+0xff,0xff,0x04,0x03,0x3e,0x60,0x58,0x4e,0xa2,0x78,0xff,0xff,0x49,0xf7,0xff,0xff,
+0xff,0xff,0x6a,0xf3,0x3c,0x45,0xd4,0x80,0x2b,0x60,0x48,0x62,0x07,0x02,0x80,0x64,
+0xa2,0xdb,0xff,0xff,0xc0,0xfe,0x00,0x64,0xa2,0xdb,0x65,0xfb,0x2e,0x58,0xff,0xff,
+0x26,0x46,0x2b,0x60,0xc2,0x63,0x00,0xf4,0x02,0xf2,0xbd,0xdb,0xff,0xff,0x03,0xf2,
+0xbd,0xdb,0x04,0xf2,0xff,0xff,0xbd,0xdb,0x05,0xf2,0xa3,0xdb,0xfa,0xa3,0x26,0x46,
+0x00,0x60,0x00,0x65,0xa3,0xd3,0x23,0xf0,0x00,0x61,0xd0,0x84,0xf1,0x81,0xd4,0x84,
+0xf1,0x81,0xbd,0xdb,0xa3,0xd3,0x03,0xb1,0x03,0xa9,0x24,0xf0,0x42,0xfe,0x01,0x03,
+0xcc,0x84,0xf1,0x81,0xd0,0x84,0xf1,0x81,0xbd,0xdb,0xa3,0xd3,0x03,0xb1,0x03,0xa9,
+0x27,0xf0,0x42,0xfe,0x01,0x03,0xcc,0x84,0xf1,0x81,0xd0,0x84,0xf1,0x81,0xbd,0xdb,
+0xa3,0xd3,0x03,0xb1,0x03,0xa9,0x28,0xf0,0x01,0x03,0xcc,0x84,0xd0,0x84,0xa3,0xdb,
+0x26,0x0e,0x2b,0x60,0xc2,0x63,0xbd,0xd3,0x00,0x65,0x00,0x61,0xd4,0x84,0xbd,0xd3,
+0xf1,0x81,0x01,0xa9,0x42,0xfe,0x01,0x03,0xcc,0x84,0xf1,0x81,0x01,0x65,0xd4,0x84,
+0xf1,0x81,0xbd,0xd3,0x03,0xb1,0x03,0xa9,0x42,0xfe,0x01,0x03,0xcc,0x84,0xf1,0x81,
+0x00,0x65,0xd4,0x84,0xf1,0x81,0xa3,0xd3,0x03,0xb1,0x03,0xa9,0x42,0xfe,0x01,0x03,
+0xcc,0x84,0xd4,0x84,0x04,0x0e,0x69,0x60,0xf4,0x62,0x01,0x64,0xa2,0xdb,0x26,0x46,
+0x2e,0x58,0xff,0xff,0x6a,0x60,0x34,0x62,0x2e,0x44,0xa2,0xdb,0x00,0x64,0x38,0xf2,
+0x40,0x48,0x40,0x4c,0xa0,0xa0,0xff,0xff,0x43,0x04,0x00,0xf4,0x01,0xf2,0x04,0x63,
+0x60,0x41,0x6a,0x60,0x44,0x62,0x00,0x64,0xa2,0xdb,0x42,0x60,0x58,0x4e,0x5f,0x78,
+0xff,0xff,0x36,0x03,0xff,0x65,0xd4,0x80,0xff,0xff,0xf7,0x02,0x00,0x64,0xdc,0x84,
+0x40,0x4d,0x42,0x60,0x58,0x4e,0x5f,0x78,0xff,0xff,0x2a,0x03,0xff,0x65,0xd4,0x80,
+0x60,0x42,0x2d,0x44,0xf4,0x03,0xfa,0xa0,0xff,0xff,0xe3,0x04,0x06,0x64,0x40,0x4d,
+0x6a,0x60,0x38,0x65,0x62,0x44,0x05,0x00,0x42,0x60,0x58,0x4e,0x5f,0x78,0xff,0xff,
+0x17,0x03,0xa5,0xd1,0xda,0x85,0xd0,0x80,0xff,0xff,0xdc,0x02,0x2d,0x44,0xcc,0x84,
+0x40,0x4d,0xf2,0x02,0x06,0x64,0x40,0x4d,0x6a,0x60,0x38,0x65,0x6a,0x60,0x44,0x62,
+0xa2,0xd3,0xff,0xff,0xdc,0x84,0xf0,0xa0,0xa2,0xdb,0xe6,0x02,0x01,0x61,0x01,0x00,
+0x00,0x61,0x6a,0x60,0x34,0x62,0xa2,0xd3,0xff,0xff,0x40,0x4e,0x2e,0x58,0xff,0xff,
+0x2c,0x44,0xcc,0x84,0x40,0x4c,0x11,0x0e,0xcd,0x81,0xff,0xff,0x05,0x0d,0x00,0xf4,
+0x01,0xf2,0x04,0x63,0xcc,0x84,0x60,0x41,0x28,0x44,0x01,0xac,0x40,0x48,0x07,0x02,
+0xbd,0xd2,0x01,0xb8,0x60,0x47,0x00,0x7f,0x05,0x00,0xdc,0x84,0x03,0x00,0xa3,0xd2,
+0xff,0xff,0x00,0x7f,0x2e,0x58,0xff,0xff,0x01,0x64,0xbd,0xfb,0x21,0x60,0xb0,0x62,
+0x00,0x64,0xa2,0xdb,0x00,0x60,0x08,0x63,0x01,0x60,0x5e,0x61,0x17,0x60,0x4a,0x64,
+0x58,0xd1,0x59,0xd9,0xfd,0x1f,0x00,0x60,0x72,0x63,0x16,0x60,0xd6,0x61,0x17,0x60,
+0x54,0x64,0x58,0xd1,0x59,0xd9,0xfd,0x1f,0xc4,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,
+0x15,0x03,0x19,0x60,0x66,0x63,0x18,0x60,0x18,0x61,0x13,0x64,0xbd,0xd1,0xa1,0xd9,
+0xff,0xa4,0x02,0xa1,0xfb,0x02,0x22,0x60,0x20,0x63,0x05,0x64,0xa3,0xdb,0x0a,0xa3,
+0xa3,0xdb,0x0a,0xa3,0xa3,0xdb,0x06,0xa3,0xa3,0xdb,0x29,0x00,0x22,0x60,0x3e,0x62,
+0x00,0x64,0xa2,0xdb,0x22,0x60,0x04,0x63,0x19,0x60,0x8e,0x64,0xa0,0xd3,0x9b,0xf3,
+0x60,0x45,0xa4,0x85,0x01,0x61,0x65,0x44,0xe8,0x85,0x05,0x64,0x02,0x28,0x00,0x64,
+0xbd,0xdb,0x00,0xa0,0xff,0xff,0x0d,0x03,0x22,0x60,0x3e,0x62,0xa2,0xd3,0xff,0xff,
+0x01,0xa4,0xa2,0xdb,0xff,0xa0,0xff,0xff,0x04,0x02,0x22,0x60,0x3c,0x62,0x61,0x44,
+0xa2,0xdb,0xdd,0x81,0xff,0xff,0x61,0x44,0xf2,0xa0,0xff,0xff,0xe4,0x06,0x62,0x60,
+0x90,0x61,0x16,0x60,0xd8,0x64,0x20,0x63,0x58,0xd1,0x59,0xd9,0xfd,0x1f,0x9e,0xf1,
+0x74,0xf9,0x1e,0xf1,0x6a,0x60,0x56,0x65,0x0a,0x64,0x64,0x40,0x10,0x2a,0x04,0x64,
+0xa5,0xdb,0x32,0x40,0x01,0x26,0x07,0x00,0x00,0x60,0x1a,0x63,0x00,0x60,0xe8,0x61,
+0x00,0x64,0x59,0xdb,0xfe,0x1f,0x00,0x64,0xe9,0xfb,0xb3,0xf3,0xff,0xff,0x40,0x4a,
+0x21,0x60,0xb0,0x62,0x00,0x64,0xa2,0xdb,0xde,0xfe,0xff,0xff,0x0b,0x04,0x21,0x60,
+0xb2,0x62,0x40,0x60,0x00,0x64,0xa2,0xdb,0x06,0x86,0x7e,0x00,0x00,0x10,0x42,0x60,
+0xf7,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x3f,0x60,0x8a,0x62,0x2a,0x44,
+0xa2,0xdb,0xca,0x82,0x08,0x64,0xa2,0xdb,0xff,0xff,0x2d,0xff,0x21,0x60,0xb2,0x62,
+0x20,0x60,0x00,0x64,0xa2,0xdb,0x43,0x60,0x1d,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,
+0xff,0xff,0x21,0x60,0xb0,0x62,0x00,0x64,0xa2,0xdb,0xbe,0xfe,0x21,0x60,0x90,0x62,
+0xa2,0xd1,0x40,0x60,0x00,0x64,0xb0,0x84,0xa2,0xdb,0xcf,0xfe,0x64,0x60,0xe4,0x62,
+0x0c,0x64,0xa2,0xdb,0x67,0x60,0x74,0x62,0x01,0x64,0xa2,0xdb,0xc4,0xf1,0x03,0x64,
+0x64,0x40,0x00,0x3a,0xc4,0xfb,0x89,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0x02,0x02,
+0x00,0x64,0x56,0xfb,0x6a,0x60,0xca,0x62,0xa2,0xd3,0xff,0xff,0x60,0x40,0x00,0x3a,
+0x32,0x00,0x01,0x64,0xa2,0xdb,0x12,0x60,0x34,0x65,0x72,0x44,0xb4,0x83,0x00,0x7f,
 0x60,0x5c,0x10,0x61,0x40,0x60,0x0b,0x65,0x63,0x44,0x00,0x63,0xe8,0x80,0xf8,0x84,
 0x02,0x24,0x94,0x84,0xf3,0x83,0xcd,0x81,0xff,0xff,0xf8,0x02,0x60,0x47,0x60,0x45,
-0x00,0x7f,0x39,0xfb,0x65,0x44,0x00,0x7e,0xb0,0x84,0x38,0xfb,0x67,0x60,0x2a,0x63,
-0xbd,0xf3,0xff,0xff,0x02,0xbc,0xbd,0xdb,0x39,0xf3,0xbe,0xf1,0x60,0x47,0x00,0x7e,
-0xb0,0x84,0xbd,0xdb,0x38,0xf3,0xa3,0xdb,0x0f,0x4e,0x5c,0x60,0x58,0x4f,0x7e,0x78,
-0xff,0xff,0x0e,0x4f,0x0f,0x4e,0x59,0x60,0x58,0x4f,0x3c,0x78,0xff,0xff,0x0e,0x4f,
-0x0f,0x4e,0x5e,0x60,0x58,0x4f,0xb5,0x78,0xff,0xff,0x0e,0x4f,0x0f,0x4e,0x44,0x60,
-0x58,0x4f,0x23,0x78,0xff,0xff,0x0e,0x4f,0x1e,0x60,0xe8,0x62,0x00,0x64,0xa2,0xdb,
-0x5a,0xdb,0x2f,0x58,0xff,0xff,0x1e,0x60,0xe8,0x62,0x00,0x64,0xa2,0xdb,0x02,0x64,
-0x8b,0xfb,0xff,0xff,0xc1,0xfe,0x1f,0x60,0x00,0x62,0xa2,0xd1,0x00,0x60,0x1f,0x64,
-0xb0,0x84,0xa2,0xdb,0xcf,0xfe,0x1e,0x60,0xe8,0x62,0xa2,0xd1,0x00,0x60,0x08,0x64,
-0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x1e,0x60,0xea,0x62,0x00,0x60,0x08,0x64,
-0xa2,0xdb,0x43,0x60,0x97,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x2e,0x87,
-0x7e,0x00,0x00,0x10,0x8b,0xf3,0x00,0x65,0xd4,0x80,0xff,0xff,0x0b,0x03,0x1e,0x60,
-0xea,0x62,0x80,0x60,0x00,0x64,0xa2,0xdb,0x43,0x60,0x97,0x64,0x5a,0xdb,0xcf,0xfe,
-0x2f,0x58,0xff,0xff,0x1e,0x60,0xe8,0x62,0x00,0x64,0xa2,0xdb,0xde,0xfe,0xff,0xff,
-0x0b,0x04,0x1e,0x60,0xea,0x62,0x20,0x60,0x00,0x64,0xa2,0xdb,0x43,0x60,0xb9,0x64,
-0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x3c,0x60,0xc2,0x62,0xca,0x82,0x06,0x64,
-0xa2,0xdb,0xff,0xff,0x2d,0xff,0x1e,0x60,0xe8,0x62,0x00,0x64,0xa2,0xdb,0x5a,0xdb,
-0xbe,0xfe,0x3c,0x60,0x48,0x61,0x43,0x60,0x58,0x4e,0xf4,0x78,0xff,0xff,0x3c,0x60,
-0x4e,0x61,0x43,0x60,0x58,0x4e,0xf4,0x78,0xff,0xff,0x3c,0x60,0x66,0x61,0x43,0x60,
-0x58,0x4e,0xf4,0x78,0xff,0xff,0x3c,0x60,0x8a,0x61,0x43,0x60,0x58,0x4e,0xf4,0x78,
-0xff,0xff,0x3c,0x60,0x6c,0x61,0x43,0x60,0x58,0x4e,0xf4,0x78,0xff,0xff,0x3c,0x60,
-0x96,0x61,0x43,0x60,0x58,0x4e,0xf4,0x78,0xff,0xff,0xc5,0xfe,0x01,0x64,0xcb,0xfb,
-0x02,0x65,0x3d,0x60,0x58,0x4e,0x32,0x78,0xff,0xff,0x2f,0x58,0xff,0xff,0xa1,0xd3,
-0x0e,0x57,0x00,0xa8,0x60,0x46,0x28,0x03,0x09,0xf0,0x0e,0xf2,0x44,0x4c,0x20,0xb0,
-0x01,0xb0,0x0b,0x03,0x3c,0x60,0xa2,0x62,0x00,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,
-0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0x15,0x00,0x14,0x02,0x0f,0x4e,0x46,0x45,
-0x3c,0x60,0xa2,0x62,0x00,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,
-0xff,0xff,0x2b,0xff,0xa2,0xff,0x1a,0x60,0x58,0x4f,0xa6,0x78,0xff,0xff,0xa3,0xff,
-0xd1,0xfe,0x0e,0x4f,0x2c,0x44,0xd5,0x00,0x37,0x58,0xff,0xff,0x1e,0x60,0xe2,0x62,
-0x00,0x64,0xa2,0xdb,0x1e,0x60,0xe2,0x62,0xa2,0xd1,0x00,0x60,0x02,0x64,0xb0,0x84,
-0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x1e,0x60,0xe4,0x62,0x00,0x60,0x02,0x64,0xa2,0xdb,
-0x44,0x60,0x3b,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,0xe2,0x62,
-0x00,0x64,0xa2,0xdb,0x16,0x60,0x60,0x62,0xa2,0xd3,0xff,0xff,0x03,0xa8,0x04,0xa8,
-0x02,0x03,0x04,0x03,0x06,0x00,0x45,0x60,0x2a,0x78,0xff,0xff,0x45,0x60,0x70,0x78,
-0xff,0xff,0x02,0x64,0xcb,0xfb,0x00,0x64,0x81,0xfb,0x82,0xfb,0x83,0xfb,0x67,0x60,
-0x40,0x62,0x01,0x64,0xa2,0xdb,0x16,0x60,0x62,0x64,0x5b,0xfb,0x0f,0x4e,0x52,0x60,
-0x58,0x4f,0x9e,0x78,0xff,0xff,0x0e,0x4f,0x1e,0x60,0xe4,0x62,0x10,0x60,0x00,0x64,
-0xa2,0xdb,0x44,0x60,0x6c,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,
-0xe2,0x62,0x00,0x64,0xa2,0xdb,0x5a,0x60,0x34,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,
-0xa2,0xdb,0x88,0xf1,0x28,0x60,0x00,0x63,0xd3,0x80,0xff,0xff,0x03,0x03,0x4b,0x60,
-0x4c,0x78,0xff,0xff,0xc0,0xf3,0xc6,0xf3,0x40,0x4a,0x00,0xa8,0xff,0xff,0x03,0x03,
-0x45,0x60,0x70,0x78,0xff,0xff,0x3e,0x60,0x58,0x4e,0xae,0x78,0xff,0xff,0x02,0x64,
-0xcb,0xfb,0x64,0x60,0xd8,0x62,0xa2,0xd3,0xff,0xff,0x9d,0xa0,0x01,0xa4,0x03,0x05,
-0xec,0xa0,0xa2,0xdb,0x18,0x06,0xa9,0xf1,0x28,0x60,0x9e,0x64,0xa0,0xd9,0x3c,0x60,
-0xd2,0x62,0x28,0x60,0x9a,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,
-0x1e,0x60,0xe4,0x62,0x00,0x60,0x04,0x64,0xa2,0xdb,0x44,0x60,0xcc,0x64,0x5a,0xdb,
-0xcf,0xfe,0x2f,0x58,0xff,0xff,0xe1,0xf3,0xff,0xff,0x00,0xa0,0x60,0x5c,0x17,0x03,
-0x28,0x60,0x9e,0x64,0xa0,0xd9,0x3c,0x60,0xd2,0x62,0x28,0x60,0x9a,0x64,0xa2,0xdb,
-0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x1e,0x60,0xe4,0x62,0x00,0x60,0x04,0x64,
-0xa2,0xdb,0x44,0x60,0xcc,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,
-0xe2,0x62,0x00,0x64,0xa2,0xdb,0xd5,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0x18,0x03,
-0x67,0x60,0x42,0x62,0xa2,0xd3,0xff,0xff,0xdc,0x84,0x88,0xa0,0xa2,0xdb,0x10,0x04,
-0x00,0x64,0xa2,0xdb,0x03,0x64,0xd5,0xfb,0x0a,0x65,0x3d,0x60,0x58,0x4e,0x32,0x78,
-0xff,0xff,0x1f,0x60,0x3c,0x63,0x0e,0x64,0x00,0x7c,0xcc,0x84,0xbd,0xd9,0xfd,0x02,
-0x67,0x60,0xf0,0x65,0xa5,0xd3,0xff,0xff,0x60,0x40,0x03,0x22,0x33,0x00,0x01,0x2a,
-0x0c,0x00,0x1e,0x60,0xb2,0x63,0xa3,0xd1,0x67,0x60,0x70,0x65,0xad,0xf3,0xa5,0xd3,
-0x60,0x45,0xc4,0x84,0xd0,0x80,0xff,0xff,0x25,0x0d,0x67,0x60,0xf0,0x65,0xa5,0xd3,
-0xff,0xff,0x60,0x45,0xfd,0xb4,0xa2,0xdb,0x20,0x44,0xb4,0x84,0x40,0x40,0x5a,0x60,
-0x3c,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x0f,0x4e,0x52,0x60,0x58,0x4f,
-0x9e,0x78,0xff,0xff,0x0e,0x4f,0x1e,0x60,0xe4,0x62,0x10,0x60,0x00,0x64,0xa2,0xdb,
-0x45,0x60,0x23,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,0xe2,0x62,
-0x00,0x64,0xa2,0xdb,0x44,0x60,0x4e,0x78,0xff,0xff,0x05,0x64,0xcb,0xfb,0xc5,0xf3,
-0x47,0xfb,0x00,0x64,0xc0,0xf1,0x85,0xfb,0x44,0x4a,0x1e,0x60,0xe2,0x62,0x00,0x64,
-0xa2,0xdb,0xde,0xfe,0xff,0xff,0x0b,0x04,0x1e,0x60,0xe4,0x62,0x40,0x60,0x00,0x64,
-0xa2,0xdb,0x45,0x60,0x32,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x3c,0x60,
-0xc2,0x62,0x2a,0x44,0xa2,0xdb,0xca,0x82,0x1e,0x64,0xa2,0xdb,0xff,0xff,0x2d,0xff,
-0x1e,0x60,0xe4,0x62,0x20,0x60,0x00,0x64,0xa2,0xdb,0x45,0x60,0x58,0x64,0x5a,0xdb,
-0xcf,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,0xe2,0x62,0x00,0x64,0xa2,0xdb,0xbe,0xfe,
-0x1e,0x60,0xc8,0x62,0xa2,0xd1,0x40,0x60,0x00,0x64,0xb0,0x84,0xa2,0xdb,0xcf,0xfe,
-0x01,0x64,0x8c,0xfb,0x02,0x64,0x90,0xfb,0x01,0x65,0x3d,0x60,0x58,0x4e,0x32,0x78,
-0xff,0xff,0x2f,0x58,0xff,0xff,0xd5,0xf3,0xff,0xff,0xfd,0xa0,0xff,0xff,0x05,0x05,
-0x0c,0x60,0x50,0x62,0x67,0x60,0x75,0x64,0xa2,0xdb,0x0c,0x60,0x48,0x62,0x68,0x60,
-0x38,0x64,0xa2,0xdb,0x59,0x60,0xf4,0x62,0x29,0x60,0x02,0x64,0xa2,0xdb,0x77,0xf5,
-0x00,0x64,0x22,0xfa,0x38,0xfa,0x08,0x64,0x28,0xfa,0x18,0x60,0x20,0x64,0x0e,0xfa,
-0x90,0x64,0x29,0xfa,0x67,0x60,0x24,0x62,0x12,0x60,0x34,0x65,0x72,0x44,0xb4,0x84,
-0xa2,0xdb,0xc0,0xf3,0x7f,0xfb,0x67,0x60,0x16,0x63,0x00,0x64,0xbd,0xdb,0xbd,0xdb,
-0xa3,0xdb,0xff,0xff,0x71,0xfb,0x70,0xfb,0x81,0xfb,0xff,0xff,0x82,0xfb,0x83,0xfb,
-0xff,0xff,0xc5,0xf3,0x47,0xfb,0x16,0x60,0xdc,0x64,0xa0,0xd3,0x86,0xfb,0x67,0x60,
-0x22,0x63,0x06,0x64,0xa3,0xdb,0x01,0x64,0x73,0xfb,0x3a,0x60,0x12,0x62,0x00,0x64,
-0xa2,0xdb,0x5e,0xfb,0x69,0x60,0x44,0x62,0x90,0x60,0x90,0x64,0xa2,0xdb,0x67,0x60,
-0x26,0x63,0x02,0x64,0xcb,0xfb,0xa3,0xdb,0x28,0x60,0xf2,0x63,0x39,0x60,0xd2,0x7c,
-0x10,0x65,0x00,0x64,0x47,0xdb,0xd3,0x80,0x47,0xdb,0xfc,0x04,0x16,0x60,0x62,0x64,
-0x5b,0xfb,0x0f,0x4e,0x52,0x60,0x58,0x4f,0x9e,0x78,0xff,0xff,0x0e,0x4f,0x1e,0x60,
-0xe4,0x62,0x10,0x60,0x00,0x64,0xa2,0xdb,0x45,0x60,0xdf,0x64,0x5a,0xdb,0xcf,0xfe,
-0x2f,0x58,0xff,0xff,0x1e,0x60,0xe2,0x62,0x00,0x64,0xa2,0xdb,0x5a,0x60,0x34,0x64,
-0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x3a,0x60,0x12,0x62,0xa2,0xd3,0xff,0xff,
-0x00,0xa0,0xff,0xff,0x09,0x03,0x4b,0x60,0x58,0x4e,0x30,0x78,0xff,0xff,0x04,0x02,
-0x46,0x60,0x9c,0x78,0xff,0xff,0xd2,0x00,0x59,0x60,0xa0,0x62,0xa2,0xd3,0x01,0x63,
-0x60,0x40,0x00,0x3a,0x6e,0xfd,0x0a,0x61,0x67,0x60,0x24,0x62,0x40,0x60,0x0b,0x65,
-0xa2,0xd3,0x00,0x63,0xe8,0x80,0xf8,0x84,0x02,0x24,0x94,0x84,0xf3,0x83,0xcd,0x81,
-0xff,0xff,0xf8,0x02,0xa2,0xdb,0x64,0xa3,0x28,0x60,0x9e,0x62,0xa2,0xdd,0x3c,0x60,
-0xd2,0x62,0x28,0x60,0x9a,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,
-0x1e,0x60,0xe4,0x62,0x00,0x60,0x04,0x64,0xa2,0xdb,0x46,0x60,0x28,0x64,0x5a,0xdb,
-0xcf,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,0xe2,0x62,0x00,0x64,0xa2,0xdb,0x00,0x64,
-0x6e,0xfb,0x3a,0x60,0x12,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0x60,0x45,0x67,0x02,
-0x67,0x60,0x22,0x62,0xa2,0xd3,0xff,0xff,0xcc,0x84,0xa2,0xdb,0xbc,0x02,0x59,0x60,
-0xa0,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0xff,0xff,0x10,0x03,0x67,0x60,0x28,0x62,
-0xa2,0xd1,0x73,0xf3,0xff,0xff,0xfd,0xa0,0xfe,0xa0,0x2e,0x03,0x07,0x03,0x64,0x44,
-0x00,0x3a,0x2a,0x00,0x65,0x44,0x00,0xa0,0xff,0xff,0x26,0x03,0x16,0x60,0xa6,0x62,
-0xa2,0xd1,0x04,0x7f,0x64,0x40,0xff,0x26,0x08,0x7f,0x60,0x43,0x28,0x60,0x9e,0x62,
-0xa2,0xdd,0x3c,0x60,0xd2,0x62,0x28,0x60,0x9a,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,
-0xff,0xff,0x1d,0xff,0x1e,0x60,0xe4,0x62,0x00,0x60,0x04,0x64,0xa2,0xdb,0x46,0x60,
-0x72,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,0xe2,0x62,0x00,0x64,
-0xa2,0xdb,0x45,0x60,0x98,0x78,0xff,0xff,0x67,0x60,0x2a,0x63,0xbd,0xd3,0x81,0xfb,
-0xbd,0xd3,0xff,0xff,0x82,0xfb,0xa3,0xd3,0xff,0xff,0xdc,0x84,0xa3,0xdb,0x83,0xfb,
-0xff,0xff,0xc1,0xf3,0x86,0xfb,0x73,0xf3,0xff,0xff,0x04,0xbc,0x73,0xfb,0x04,0x64,
-0x5e,0xfb,0x69,0x60,0x44,0x62,0x90,0x60,0x91,0x64,0xa2,0xdb,0x67,0x60,0x1e,0x64,
-0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x47,0x60,0x1f,0x78,0xff,0xff,0x3a,0x60,
-0x12,0x63,0xbd,0xd1,0x81,0xf9,0xbd,0xd1,0xff,0xff,0x82,0xf9,0xbd,0xd1,0x83,0xf9,
-0x08,0xa3,0xbd,0xd1,0x80,0xf9,0xff,0xff,0xbd,0xd1,0xbd,0xd1,0x59,0x60,0xa0,0x65,
-0xa5,0xd9,0x02,0xa2,0x62,0x45,0x64,0x41,0xdd,0x81,0xe9,0x81,0xbd,0xd1,0xa5,0xd9,
-0xda,0x82,0xcd,0x81,0x62,0x45,0xfa,0x02,0x3a,0x60,0x46,0x63,0xbd,0xd3,0x00,0x61,
-0x60,0x45,0xbd,0xd3,0xff,0xff,0x7f,0xb4,0x02,0x36,0x01,0xb9,0x04,0x36,0x02,0xb9,
-0x0b,0x36,0x04,0xb9,0x16,0x36,0x08,0xb9,0x65,0x44,0xcc,0x84,0x60,0x45,0xf1,0x02,
-0xc9,0xf1,0x61,0x44,0xa0,0x84,0xc9,0xfb,0x00,0x61,0x60,0x45,0x3a,0x60,0x48,0x63,
-0x65,0x40,0x01,0x2a,0x03,0x00,0x02,0x64,0xbd,0xdb,0xdd,0x81,0x65,0x40,0x02,0x2a,
-0x03,0x00,0x04,0x64,0xbd,0xdb,0xdd,0x81,0x65,0x40,0x04,0x2a,0x03,0x00,0x0b,0x64,
-0xbd,0xdb,0xdd,0x81,0x65,0x40,0x08,0x2a,0x03,0x00,0x16,0x64,0xbd,0xdb,0xdd,0x81,
-0x3a,0x60,0x46,0x63,0x61,0x44,0xbd,0xdb,0x17,0x60,0xf0,0x65,0x61,0x44,0xa5,0xdb,
-0xda,0x82,0x62,0x45,0xbd,0xd3,0xbd,0xd1,0x60,0x47,0xb0,0x87,0xa5,0xda,0xda,0x85,
-0xcd,0x81,0xcd,0x81,0x01,0x03,0xf6,0x02,0x3a,0x60,0x52,0x63,0xbd,0xd1,0x17,0x60,
-0xfa,0x62,0xa2,0xd3,0xff,0xff,0xa0,0x84,0xa2,0xdb,0x60,0x45,0xbd,0xd3,0x7f,0xfb,
-0xff,0xff,0xbd,0xd3,0x86,0xfb,0x65,0x44,0x00,0x65,0x60,0x40,0x02,0x26,0x01,0x65,
-0x60,0x40,0x04,0x26,0x02,0x65,0x60,0x40,0x08,0x26,0x03,0x65,0x59,0x60,0xe8,0x62,
-0x65,0x44,0xa2,0xdb,0x16,0x60,0xa6,0x63,0xa3,0xd1,0x17,0x60,0x24,0x63,0xa3,0xd9,
-0x86,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0x02,0x02,0xa3,0xdb,0x05,0x00,0xfd,0xa0,
-0xff,0xff,0x02,0x05,0x03,0x64,0x86,0xfb,0xff,0x60,0xff,0x64,0x62,0xfb,0x76,0xf5,
-0x66,0x60,0x58,0x4e,0x9c,0x78,0xff,0xff,0x17,0x60,0xfa,0x62,0xa2,0xd3,0xff,0xff,
-0xff,0xff,0x01,0x2a,0x02,0x00,0x00,0x64,0x09,0x00,0x02,0x2a,0x02,0x00,0x01,0x64,
-0x05,0x00,0x04,0x2a,0x02,0x00,0x02,0x64,0x01,0x00,0x03,0x64,0x13,0xfa,0x77,0xf5,
-0x13,0xfa,0xff,0xff,0xbd,0xf1,0x2e,0xf8,0xbe,0xf1,0xff,0xff,0x2f,0xf8,0xbf,0xf1,
-0x30,0xf8,0xff,0xff,0x81,0xf1,0x31,0xf8,0x82,0xf1,0xff,0xff,0x32,0xf8,0x83,0xf1,
-0x33,0xf8,0x67,0x60,0x26,0x63,0x03,0x64,0xcb,0xfb,0xa3,0xdb,0x00,0x64,0x7f,0xf1,
-0x85,0xfb,0x44,0x4a,0x1e,0x60,0xe2,0x62,0x00,0x64,0xa2,0xdb,0xde,0xfe,0xff,0xff,
-0x0b,0x04,0x1e,0x60,0xe4,0x62,0x40,0x60,0x00,0x64,0xa2,0xdb,0x47,0x60,0x67,0x64,
-0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x3c,0x60,0xc2,0x62,0x2a,0x44,0xa2,0xdb,
-0xca,0x82,0x1e,0x64,0xa2,0xdb,0xff,0xff,0x2d,0xff,0x1e,0x60,0xe4,0x62,0x20,0x60,
-0x00,0x64,0xa2,0xdb,0x47,0x60,0x8d,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,
-0x1e,0x60,0xe2,0x62,0x00,0x64,0xa2,0xdb,0xbe,0xfe,0x1e,0x60,0xc8,0x62,0xa2,0xd1,
-0x40,0x60,0x00,0x64,0xb0,0x84,0xa2,0xdb,0xcf,0xfe,0x01,0x64,0x8c,0xfb,0x02,0x64,
-0x90,0xfb,0x69,0x60,0x44,0x62,0x90,0x60,0x70,0x64,0xa2,0xdb,0x20,0x44,0x10,0x26,
-0x05,0x00,0x01,0x65,0x3d,0x60,0x58,0x4e,0x32,0x78,0xff,0xff,0x20,0x44,0xef,0xb4,
-0x40,0x40,0x1e,0x60,0xf4,0x62,0xa2,0xd1,0x00,0x60,0x80,0x64,0xb0,0x84,0xa2,0xdb,
-0xff,0xff,0xcf,0xfe,0x1e,0x60,0xe4,0x62,0x00,0x60,0x02,0x64,0xa2,0xdb,0x47,0x60,
-0xc2,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,0xe2,0x62,0x00,0x64,
-0xa2,0xdb,0x3d,0x60,0x9c,0x62,0xa2,0xd3,0x10,0x61,0x00,0x63,0x60,0x45,0xe0,0x84,
+0x00,0x7f,0x26,0xfb,0x29,0xfb,0x65,0x44,0x00,0x7e,0xb0,0x84,0x25,0xfb,0x2a,0xfb,
+0x60,0x45,0x34,0x60,0x56,0x64,0xb4,0x84,0x2c,0xfb,0x6a,0x60,0x04,0x63,0xb0,0xf3,
+0xff,0xff,0x02,0xbc,0xbd,0xdb,0x26,0xf3,0xb1,0xf1,0x60,0x47,0x00,0x7e,0xb0,0x84,
+0xbd,0xdb,0x25,0xf3,0xa3,0xdb,0x0f,0x4e,0x61,0x60,0x58,0x4f,0x02,0x78,0xff,0xff,
+0x0e,0x4f,0x0f,0x4e,0x5d,0x60,0x58,0x4f,0xb6,0x78,0xff,0xff,0x0e,0x4f,0x0f,0x4e,
+0x63,0x60,0x58,0x4f,0x39,0x78,0xff,0xff,0x0e,0x4f,0x0f,0x4e,0x44,0x60,0x58,0x4f,
+0x50,0x78,0xff,0xff,0x0e,0x4f,0x21,0x60,0xb0,0x62,0x00,0x64,0xa2,0xdb,0x5a,0xdb,
+0x2f,0x58,0xff,0xff,0x21,0x60,0xb0,0x62,0x00,0x64,0xa2,0xdb,0x02,0x64,0x7f,0xfb,
+0xff,0xff,0xc1,0xfe,0x7f,0xf3,0x00,0x65,0xd4,0x80,0xff,0xff,0x0b,0x03,0x21,0x60,
+0xb2,0x62,0x80,0x60,0x00,0x64,0xa2,0xdb,0x43,0x60,0x9e,0x64,0x5a,0xdb,0xcf,0xfe,
+0x2f,0x58,0xff,0xff,0x21,0x60,0xc8,0x62,0xa2,0xd1,0x00,0x60,0x1f,0x64,0xb0,0x84,
+0xa2,0xdb,0xcf,0xfe,0x21,0x60,0xb0,0x62,0xa2,0xd1,0x00,0x60,0x08,0x64,0xb0,0x84,
+0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x21,0x60,0xb2,0x62,0x00,0x60,0x08,0x64,0xa2,0xdb,
+0x43,0x60,0xca,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,0xb0,0x62,
+0x00,0x64,0xa2,0xdb,0xde,0xfe,0xff,0xff,0x0b,0x04,0x21,0x60,0xb2,0x62,0x20,0x60,
+0x00,0x64,0xa2,0xdb,0x43,0x60,0xdc,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,
+0x3f,0x60,0x8a,0x62,0xca,0x82,0x06,0x64,0xa2,0xdb,0xff,0xff,0x2d,0xff,0x21,0x60,
+0xb0,0x62,0x00,0x64,0xa2,0xdb,0x5a,0xdb,0xbe,0xfe,0x3f,0x60,0x10,0x61,0x44,0x60,
+0x58,0x4e,0x21,0x78,0xff,0xff,0x3f,0x60,0x16,0x61,0x44,0x60,0x58,0x4e,0x21,0x78,
+0xff,0xff,0x3f,0x60,0x2e,0x61,0x44,0x60,0x58,0x4e,0x21,0x78,0xff,0xff,0x3f,0x60,
+0x52,0x61,0x44,0x60,0x58,0x4e,0x21,0x78,0xff,0xff,0x3f,0x60,0x34,0x61,0x44,0x60,
+0x58,0x4e,0x21,0x78,0xff,0xff,0x3f,0x60,0x5e,0x61,0x44,0x60,0x58,0x4e,0x21,0x78,
+0xff,0xff,0x00,0x64,0x8b,0xfb,0xc5,0xfe,0x01,0x64,0xbd,0xfb,0x0e,0x7c,0x80,0x60,
+0xe6,0x62,0xa2,0xd9,0x00,0x64,0x06,0xa2,0xa2,0xdb,0x5a,0xdb,0x02,0x65,0x3d,0x60,
+0x58,0x4e,0x39,0x78,0xff,0xff,0x2f,0x58,0xff,0xff,0xa1,0xd3,0x0e,0x57,0x00,0xa8,
+0x60,0x46,0x28,0x03,0x09,0xf0,0x0e,0xf2,0x44,0x4c,0x20,0xb0,0x01,0xb0,0x0b,0x03,
+0x3f,0x60,0x6a,0x62,0x00,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,
+0xff,0xff,0x2b,0xff,0x15,0x00,0x14,0x02,0x0f,0x4e,0x46,0x45,0x3f,0x60,0x6a,0x62,
+0x00,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,
+0xa2,0xff,0x1a,0x60,0x58,0x4f,0x37,0x78,0xff,0xff,0xa3,0xff,0xd1,0xfe,0x0e,0x4f,
+0x2c,0x44,0xd5,0x00,0x37,0x58,0xff,0xff,0x21,0x60,0xaa,0x62,0x00,0x64,0xa2,0xdb,
+0x21,0x60,0xaa,0x62,0xa2,0xd1,0x00,0x60,0x02,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,
+0xcf,0xfe,0x21,0x60,0xac,0x62,0x00,0x60,0x02,0x64,0xa2,0xdb,0x44,0x60,0x68,0x64,
+0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,0xaa,0x62,0x00,0x64,0xa2,0xdb,
+0x16,0x60,0xd8,0x62,0xa2,0xd3,0xff,0xff,0x03,0xa8,0x04,0xa8,0x02,0x03,0x04,0x03,
+0x06,0x00,0x45,0x60,0x5d,0x78,0xff,0xff,0x45,0x60,0xa3,0x78,0xff,0xff,0x02,0x64,
+0xbd,0xfb,0x00,0x64,0x75,0xfb,0x76,0xfb,0x77,0xfb,0x00,0x64,0x7e,0xfb,0x2a,0x60,
+0xc8,0x64,0x7d,0xfb,0x6a,0x60,0x1a,0x62,0x01,0x64,0xa2,0xdb,0x16,0x60,0xda,0x64,
+0x4f,0xfb,0x0f,0x4e,0x53,0x60,0x58,0x4f,0xfe,0x78,0xff,0xff,0x0e,0x4f,0x21,0x60,
+0xac,0x62,0x10,0x60,0x00,0x64,0xa2,0xdb,0x44,0x60,0x9e,0x64,0x5a,0xdb,0xcf,0xfe,
+0x2f,0x58,0xff,0xff,0x21,0x60,0xaa,0x62,0x00,0x64,0xa2,0xdb,0x63,0x60,0x26,0x64,
+0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x7e,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,
+0x03,0x03,0x4b,0x60,0xb4,0x78,0xff,0xff,0x3e,0x60,0x58,0x4e,0xbf,0x78,0xff,0xff,
+0x02,0x64,0xbd,0xfb,0x67,0x60,0x74,0x62,0xa2,0xd3,0xff,0xff,0x9d,0xa0,0x01,0xa4,
+0x03,0x05,0xfb,0xa0,0xa2,0xdb,0x18,0x06,0x9f,0xf1,0x2b,0x60,0x66,0x64,0xa0,0xd9,
+0x3f,0x60,0x9a,0x62,0x2b,0x60,0x62,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,
+0x1d,0xff,0x21,0x60,0xac,0x62,0x00,0x60,0x04,0x64,0xa2,0xdb,0x44,0x60,0xf4,0x64,
+0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0xd0,0xf3,0xff,0xff,0x00,0xa0,0x60,0x5c,
+0x17,0x03,0x2b,0x60,0x66,0x64,0xa0,0xd9,0x3f,0x60,0x9a,0x62,0x2b,0x60,0x62,0x64,
+0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x21,0x60,0xac,0x62,0x00,0x60,
+0x04,0x64,0xa2,0xdb,0x44,0x60,0xf4,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,
+0x21,0x60,0xaa,0x62,0x00,0x64,0xa2,0xdb,0xc4,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,
+0x18,0x03,0x6a,0x60,0x1e,0x62,0xa2,0xd3,0xff,0xff,0xdc,0x84,0x88,0xa0,0xa2,0xdb,
+0x10,0x04,0x00,0x64,0xa2,0xdb,0x03,0x64,0xc4,0xfb,0x0a,0x65,0x3d,0x60,0x58,0x4e,
+0x39,0x78,0xff,0xff,0x22,0x60,0x04,0x63,0x0e,0x64,0x00,0x7c,0xcc,0x84,0xbd,0xd9,
+0xfd,0x02,0x6a,0x60,0xcc,0x65,0xa5,0xd3,0xff,0xff,0x60,0x40,0x03,0x22,0x3e,0x00,
+0x01,0x2a,0x0c,0x00,0x21,0x60,0x7a,0x63,0xa3,0xd1,0x6a,0x60,0x50,0x65,0xa2,0xf3,
+0xa5,0xd3,0x60,0x45,0xc4,0x84,0xd0,0x80,0xff,0xff,0x30,0x0d,0x6a,0x60,0xcc,0x65,
+0xa5,0xd3,0xff,0xff,0x60,0x45,0xfd,0xb4,0xa2,0xdb,0xe9,0xf3,0xff,0xff,0xb4,0x84,
+0xe9,0xfb,0x63,0x60,0x2e,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x0f,0x4e,
+0x53,0x60,0x58,0x4f,0xfe,0x78,0xff,0xff,0x0e,0x4f,0x21,0x60,0xac,0x62,0x10,0x60,
+0x00,0x64,0xa2,0xdb,0x45,0x60,0x4c,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,
+0xe9,0xf1,0xff,0x60,0xfc,0x64,0xa0,0x84,0xe9,0xfb,0x04,0x65,0x3d,0x60,0x58,0x4e,
+0x39,0x78,0xff,0xff,0x21,0x60,0xaa,0x62,0x00,0x64,0xa2,0xdb,0x44,0x60,0x86,0x78,
+0xff,0xff,0x05,0x64,0xbd,0xfb,0xb8,0xf3,0x3a,0xfb,0x00,0x64,0xb3,0xf1,0x79,0xfb,
+0x44,0x4a,0x21,0x60,0xaa,0x62,0x00,0x64,0xa2,0xdb,0xde,0xfe,0xff,0xff,0x0b,0x04,
+0x21,0x60,0xac,0x62,0x40,0x60,0x00,0x64,0xa2,0xdb,0x45,0x60,0x65,0x64,0x5a,0xdb,
+0xcf,0xfe,0x2f,0x58,0xff,0xff,0x3f,0x60,0x8a,0x62,0x2a,0x44,0xa2,0xdb,0xca,0x82,
+0x1e,0x64,0xa2,0xdb,0xff,0xff,0x2d,0xff,0x21,0x60,0xac,0x62,0x20,0x60,0x00,0x64,
+0xa2,0xdb,0x45,0x60,0x8b,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,
+0xaa,0x62,0x00,0x64,0xa2,0xdb,0xbe,0xfe,0x21,0x60,0x90,0x62,0xa2,0xd1,0x40,0x60,
+0x00,0x64,0xb0,0x84,0xa2,0xdb,0xcf,0xfe,0x01,0x64,0x80,0xfb,0x02,0x64,0x84,0xfb,
+0x01,0x65,0x3d,0x60,0x58,0x4e,0x39,0x78,0xff,0xff,0x2f,0x58,0xff,0xff,0xc4,0xf3,
+0xff,0xff,0xfd,0xa0,0xff,0xff,0x05,0x05,0x0c,0x60,0x50,0x62,0x6b,0x60,0xac,0x64,
+0xa2,0xdb,0x0c,0x60,0x48,0x62,0x6c,0x60,0x73,0x64,0xa2,0xdb,0x62,0x60,0xe6,0x62,
+0x2b,0x60,0xca,0x64,0xa2,0xdb,0x6b,0xf5,0x00,0x64,0x22,0xfa,0x38,0xfa,0x08,0x64,
+0x28,0xfa,0x18,0x60,0x20,0x64,0x0e,0xfa,0x90,0x64,0x29,0xfa,0x69,0x60,0xfe,0x62,
+0x12,0x60,0x34,0x65,0x72,0x44,0xb4,0x84,0xa2,0xdb,0xb3,0xf3,0x73,0xfb,0x69,0x60,
+0xf0,0x63,0x00,0x64,0xbd,0xdb,0xbd,0xdb,0xa3,0xdb,0xff,0xff,0x65,0xfb,0x64,0xfb,
+0x75,0xfb,0xff,0xff,0x76,0xfb,0x77,0xfb,0xff,0xff,0xb8,0xf3,0x3a,0xfb,0x17,0x60,
+0x54,0x64,0xa0,0xd3,0x7a,0xfb,0x69,0x60,0xfc,0x63,0x06,0x64,0xa3,0xdb,0x01,0x64,
+0x67,0xfb,0x3c,0x60,0xda,0x62,0x00,0x64,0xa2,0xdb,0x52,0xfb,0x6a,0x60,0x00,0x63,
+0x02,0x64,0xbd,0xfb,0xa3,0xdb,0x2b,0x60,0xba,0x63,0x3c,0x60,0x9a,0x7c,0x10,0x65,
+0x00,0x64,0x47,0xdb,0xd3,0x80,0x47,0xdb,0xfc,0x04,0x16,0x60,0xda,0x64,0x4f,0xfb,
+0x0f,0x4e,0x53,0x60,0x58,0x4f,0xfe,0x78,0xff,0xff,0x0e,0x4f,0x21,0x60,0xac,0x62,
+0x10,0x60,0x00,0x64,0xa2,0xdb,0x46,0x60,0x0d,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,
+0xff,0xff,0x21,0x60,0xaa,0x62,0x00,0x64,0xa2,0xdb,0x63,0x60,0x26,0x64,0xa0,0xd3,
+0xff,0xff,0xdc,0x84,0xa2,0xdb,0x3c,0x60,0xda,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,
+0xff,0xff,0x09,0x03,0x4b,0x60,0x58,0x4e,0x98,0x78,0xff,0xff,0x04,0x02,0x46,0x60,
+0xc5,0x78,0xff,0xff,0xd2,0x00,0x62,0x60,0x92,0x62,0xa2,0xd3,0x01,0x63,0x60,0x40,
+0x00,0x3a,0x62,0xfd,0x0a,0x61,0x69,0x60,0xfe,0x62,0x40,0x60,0x0b,0x65,0xa2,0xd3,
+0x00,0x63,0xe8,0x80,0xf8,0x84,0x02,0x24,0x94,0x84,0xf3,0x83,0xcd,0x81,0xff,0xff,
+0xf8,0x02,0xa2,0xdb,0x64,0xa3,0x2b,0x60,0x66,0x62,0xa2,0xdd,0x3f,0x60,0x9a,0x62,
+0x2b,0x60,0x62,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x21,0x60,
+0xac,0x62,0x00,0x60,0x04,0x64,0xa2,0xdb,0x46,0x60,0x56,0x64,0x5a,0xdb,0xcf,0xfe,
+0x2f,0x58,0xff,0xff,0x21,0x60,0xaa,0x62,0x00,0x64,0xa2,0xdb,0x00,0x64,0x62,0xfb,
+0x3c,0x60,0xda,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0x60,0x45,0x62,0x02,0x69,0x60,
+0xfc,0x62,0xa2,0xd3,0xff,0xff,0xcc,0x84,0xa2,0xdb,0xbc,0x02,0x62,0x60,0x92,0x62,
+0xa2,0xd3,0xff,0xff,0x00,0xa0,0xff,0xff,0x10,0x03,0x6a,0x60,0x02,0x62,0xa2,0xd1,
+0x67,0xf3,0xff,0xff,0xfd,0xa0,0xfe,0xa0,0x2e,0x03,0x07,0x03,0x64,0x44,0x00,0x3a,
+0x2a,0x00,0x65,0x44,0x00,0xa0,0xff,0xff,0x26,0x03,0x17,0x60,0x1e,0x62,0xa2,0xd1,
+0x04,0x7f,0x64,0x40,0xff,0x26,0x08,0x7f,0x60,0x43,0x2b,0x60,0x66,0x62,0xa2,0xdd,
+0x3f,0x60,0x9a,0x62,0x2b,0x60,0x62,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,
+0x1d,0xff,0x21,0x60,0xac,0x62,0x00,0x60,0x04,0x64,0xa2,0xdb,0x46,0x60,0xa0,0x64,
+0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,0xaa,0x62,0x00,0x64,0xa2,0xdb,
+0x45,0x60,0xcb,0x78,0xff,0xff,0x6a,0x60,0x04,0x63,0xbd,0xd3,0x75,0xfb,0xbd,0xd3,
+0xff,0xff,0x76,0xfb,0xa3,0xd3,0xff,0xff,0xdc,0x84,0xa3,0xdb,0x77,0xfb,0xff,0xff,
+0xb4,0xf3,0x7a,0xfb,0x67,0xf3,0xff,0xff,0x04,0xbc,0x67,0xfb,0x04,0x64,0x52,0xfb,
+0x69,0x60,0xf8,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x47,0x60,0x48,0x78,
+0xff,0xff,0x3c,0x60,0xda,0x63,0xbd,0xd1,0x75,0xf9,0xbd,0xd1,0xff,0xff,0x76,0xf9,
+0xbd,0xd1,0x77,0xf9,0x08,0xa3,0xbd,0xd1,0x74,0xf9,0xff,0xff,0xbd,0xd1,0xbd,0xd1,
+0x62,0x60,0x92,0x65,0xa5,0xd9,0x02,0xa2,0x62,0x45,0x64,0x41,0xdd,0x81,0xe9,0x81,
+0xbd,0xd1,0xa5,0xd9,0xda,0x82,0xcd,0x81,0x62,0x45,0xfa,0x02,0x3d,0x60,0x0e,0x63,
+0xbd,0xd3,0x00,0x61,0x60,0x45,0xbd,0xd3,0xff,0xff,0x7f,0xb4,0x02,0x36,0x01,0xb9,
+0x04,0x36,0x02,0xb9,0x0b,0x36,0x04,0xb9,0x16,0x36,0x08,0xb9,0x65,0x44,0xcc,0x84,
+0x60,0x45,0xf1,0x02,0xbb,0xf1,0x61,0x44,0xa0,0x84,0xbb,0xfb,0x00,0x61,0x60,0x45,
+0x3d,0x60,0x10,0x63,0x65,0x40,0x01,0x2a,0x03,0x00,0x02,0x64,0xbd,0xdb,0xdd,0x81,
+0x65,0x40,0x02,0x2a,0x03,0x00,0x04,0x64,0xbd,0xdb,0xdd,0x81,0x65,0x40,0x04,0x2a,
+0x03,0x00,0x0b,0x64,0xbd,0xdb,0xdd,0x81,0x65,0x40,0x08,0x2a,0x03,0x00,0x16,0x64,
+0xbd,0xdb,0xdd,0x81,0x3d,0x60,0x0e,0x63,0x61,0x44,0xbd,0xdb,0x18,0x60,0x68,0x65,
+0x61,0x44,0xa5,0xdb,0xda,0x82,0x62,0x45,0xbd,0xd3,0xbd,0xd1,0x60,0x47,0xb0,0x87,
+0xa5,0xda,0xda,0x85,0xcd,0x81,0xcd,0x81,0x01,0x03,0xf6,0x02,0x3d,0x60,0x1a,0x63,
+0xbd,0xd1,0x18,0x60,0x72,0x62,0xa2,0xd3,0xff,0xff,0xa0,0x84,0xa2,0xdb,0x60,0x45,
+0xbd,0xd3,0x73,0xfb,0xff,0xff,0xbd,0xd3,0x7a,0xfb,0x65,0x44,0x00,0x65,0x60,0x40,
+0x02,0x26,0x01,0x65,0x60,0x40,0x04,0x26,0x02,0x65,0x60,0x40,0x08,0x26,0x03,0x65,
+0x62,0x60,0xda,0x62,0x65,0x44,0xa2,0xdb,0x17,0x60,0x1e,0x63,0xa3,0xd1,0x17,0x60,
+0x9c,0x63,0xa3,0xd9,0x7a,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0x02,0x02,0xa3,0xdb,
+0x05,0x00,0xfd,0xa0,0xff,0xff,0x02,0x05,0x03,0x64,0x7a,0xfb,0xff,0x60,0xff,0x64,
+0x56,0xfb,0x6a,0xf5,0x6a,0x60,0x58,0x4e,0xd3,0x78,0xff,0xff,0x18,0x60,0x72,0x62,
+0xa2,0xd3,0xff,0xff,0xff,0xff,0x01,0x2a,0x02,0x00,0x00,0x64,0x09,0x00,0x02,0x2a,
+0x02,0x00,0x01,0x64,0x05,0x00,0x04,0x2a,0x02,0x00,0x02,0x64,0x01,0x00,0x03,0x64,
+0x13,0xfa,0x6b,0xf5,0x13,0xfa,0xff,0xff,0xb0,0xf1,0x2e,0xf8,0xb1,0xf1,0xff,0xff,
+0x2f,0xf8,0xb2,0xf1,0x30,0xf8,0xff,0xff,0x75,0xf1,0x31,0xf8,0x76,0xf1,0xff,0xff,
+0x32,0xf8,0x77,0xf1,0x33,0xf8,0x6a,0x60,0x00,0x63,0x03,0x64,0xbd,0xfb,0xa3,0xdb,
+0x00,0x64,0x73,0xf1,0x79,0xfb,0x44,0x4a,0x21,0x60,0xaa,0x62,0x00,0x64,0xa2,0xdb,
+0xde,0xfe,0xff,0xff,0x0b,0x04,0x21,0x60,0xac,0x62,0x40,0x60,0x00,0x64,0xa2,0xdb,
+0x47,0x60,0x90,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x3f,0x60,0x8a,0x62,
+0x2a,0x44,0xa2,0xdb,0xca,0x82,0x1e,0x64,0xa2,0xdb,0xff,0xff,0x2d,0xff,0x21,0x60,
+0xac,0x62,0x20,0x60,0x00,0x64,0xa2,0xdb,0x47,0x60,0xb6,0x64,0x5a,0xdb,0xcf,0xfe,
+0x2f,0x58,0xff,0xff,0x21,0x60,0xaa,0x62,0x00,0x64,0xa2,0xdb,0xbe,0xfe,0x21,0x60,
+0x90,0x62,0xa2,0xd1,0x40,0x60,0x00,0x64,0xb0,0x84,0xa2,0xdb,0xcf,0xfe,0x01,0x64,
+0x80,0xfb,0x02,0x64,0x84,0xfb,0xe9,0xf3,0xff,0xff,0x60,0x40,0x10,0x26,0x05,0x00,
+0x01,0x65,0x3d,0x60,0x58,0x4e,0x39,0x78,0xff,0xff,0xe9,0xf3,0xff,0xff,0xef,0xb4,
+0xe9,0xfb,0x21,0x60,0xbc,0x62,0xa2,0xd1,0x00,0x60,0x80,0x64,0xb0,0x84,0xa2,0xdb,
+0xff,0xff,0xcf,0xfe,0x21,0x60,0xac,0x62,0x00,0x60,0x02,0x64,0xa2,0xdb,0x47,0x60,
+0xe9,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,0xaa,0x62,0x00,0x64,
+0xa2,0xdb,0x40,0x60,0x1c,0x62,0xa2,0xd3,0x10,0x61,0x00,0x63,0x60,0x45,0xe0,0x84,
 0xa2,0xdb,0x65,0x44,0x01,0x26,0xdf,0x83,0xcd,0x81,0xe8,0x84,0xfb,0x02,0x63,0x44,
-0xfc,0xa0,0xff,0xff,0x0d,0x04,0x3d,0x60,0x9e,0x62,0x32,0x64,0xa2,0xdb,0x62,0xf3,
-0xff,0xff,0x60,0x40,0x00,0x36,0x13,0x00,0x17,0x60,0x24,0x62,0x00,0x64,0xa2,0xdb,
-0x3d,0x60,0x9e,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0xcc,0x84,0x08,0x03,0xa2,0xdb,
-0x06,0x02,0x3d,0x60,0xa0,0x62,0xa2,0xd1,0x17,0x60,0x24,0x62,0xa2,0xd9,0x65,0xf1,
-0x00,0x64,0x6a,0xfb,0x6b,0xfb,0xff,0xff,0x6d,0xfb,0x6f,0xfb,0x64,0x40,0x02,0x26,
-0x03,0x00,0x4b,0x60,0x01,0x78,0xff,0xff,0x1e,0x60,0xf4,0x62,0xa2,0xd1,0x00,0x60,
-0x08,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x67,0x60,0x32,0x65,0x86,0xf3,
-0xa4,0xf1,0xa5,0xdb,0xff,0xff,0xff,0x22,0x06,0x00,0xe0,0x84,0xe0,0x84,0xe0,0x84,
-0xe0,0x84,0xc0,0x84,0x6c,0xfb,0x5e,0xf3,0xff,0xff,0x04,0xb0,0xff,0xff,0x15,0x03,
-0x02,0x64,0x8c,0xfb,0x1e,0x60,0xe2,0x62,0xa2,0xd1,0x7f,0x60,0xff,0x64,0xa0,0x84,
-0xa2,0xdb,0x1e,0x60,0xe4,0x62,0x80,0x60,0x00,0x64,0xa2,0xdb,0x48,0x60,0x35,0x64,
-0x5a,0xdb,0xcf,0xfe,0xc1,0xfe,0x2f,0x58,0xff,0xff,0x49,0x60,0xd1,0x78,0xff,0xff,
-0x1e,0x60,0xe2,0x62,0xa2,0xd1,0x7f,0x60,0xff,0x64,0xa0,0x84,0xa2,0xdb,0x8c,0xf3,
-0xff,0xff,0x00,0xa0,0xff,0xff,0xef,0x02,0x1e,0x60,0xe2,0x62,0xa2,0xd1,0x7f,0x60,
-0xff,0x61,0xa1,0x84,0x5a,0xd1,0x4a,0xdb,0xa1,0x84,0x5a,0xdb,0x6e,0xf3,0x60,0x40,
-0x02,0x26,0x32,0x00,0x76,0xf5,0x80,0x64,0x29,0xfa,0x00,0x63,0x38,0xf2,0x22,0xfc,
-0x17,0xfa,0x1c,0x64,0x21,0xfa,0x15,0xfc,0x16,0xfc,0x01,0x64,0x14,0xfa,0x1e,0x60,
-0xe2,0x62,0x00,0x64,0xa2,0xdb,0x3c,0x60,0xa2,0x62,0x3c,0x60,0x4e,0x64,0xa2,0xdb,
-0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xc1,0xfe,0x1e,0x60,
-0xe4,0x62,0x00,0x60,0x01,0x64,0xa2,0xdb,0x48,0x60,0x77,0x64,0x5a,0xdb,0xcf,0xfe,
-0x2f,0x58,0xff,0xff,0x1e,0x60,0xe2,0x62,0xa2,0xd1,0xff,0x60,0xfe,0x61,0xa1,0x84,
-0x5a,0xd1,0x4a,0xdb,0xa1,0x84,0x5a,0xdb,0x86,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,
-0x2f,0x03,0x3c,0x60,0x48,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,0x25,0x03,
-0x40,0x48,0x00,0x64,0x40,0x4c,0x3c,0x60,0x4a,0x62,0xa2,0xd3,0x28,0x45,0xd4,0x80,
+0xfc,0xa0,0xff,0xff,0x0d,0x04,0x40,0x60,0x1e,0x62,0x32,0x64,0xa2,0xdb,0x56,0xf3,
+0xff,0xff,0x60,0x40,0x00,0x36,0x13,0x00,0x17,0x60,0x9c,0x62,0x00,0x64,0xa2,0xdb,
+0x40,0x60,0x1e,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0xcc,0x84,0x08,0x03,0xa2,0xdb,
+0x06,0x02,0x40,0x60,0x20,0x62,0xa2,0xd1,0x17,0x60,0x9c,0x62,0xa2,0xd9,0x59,0xf1,
+0x00,0x64,0x5e,0xfb,0x5f,0xfb,0xff,0xff,0x61,0xfb,0x63,0xfb,0x64,0x40,0x02,0x26,
+0x03,0x00,0x4b,0x60,0x69,0x78,0xff,0xff,0x21,0x60,0xbc,0x62,0xa2,0xd1,0x00,0x60,
+0x08,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x6a,0x60,0x0c,0x65,0x7a,0xf3,
+0x9a,0xf1,0xa5,0xdb,0xff,0xff,0xff,0x22,0x06,0x00,0xe0,0x84,0xe0,0x84,0xe0,0x84,
+0xe0,0x84,0xc0,0x84,0x60,0xfb,0x52,0xf3,0xff,0xff,0x04,0xb0,0xff,0xff,0x15,0x03,
+0x02,0x64,0x80,0xfb,0x21,0x60,0xaa,0x62,0xa2,0xd1,0x7f,0x60,0xff,0x64,0xa0,0x84,
+0xa2,0xdb,0x21,0x60,0xac,0x62,0x80,0x60,0x00,0x64,0xa2,0xdb,0x48,0x60,0x5c,0x64,
+0x5a,0xdb,0xcf,0xfe,0xc1,0xfe,0x2f,0x58,0xff,0xff,0x49,0x60,0xf8,0x78,0xff,0xff,
+0x21,0x60,0xaa,0x62,0xa2,0xd1,0x7f,0x60,0xff,0x64,0xa0,0x84,0xa2,0xdb,0x80,0xf3,
+0xff,0xff,0x00,0xa0,0xff,0xff,0xef,0x02,0x21,0x60,0xaa,0x62,0xa2,0xd1,0x7f,0x60,
+0xff,0x61,0xa1,0x84,0x5a,0xd1,0x4a,0xdb,0xa1,0x84,0x5a,0xdb,0x62,0xf3,0x60,0x40,
+0x02,0x26,0x32,0x00,0x6a,0xf5,0x80,0x64,0x29,0xfa,0x00,0x63,0x38,0xf2,0x22,0xfc,
+0x17,0xfa,0x1c,0x64,0x21,0xfa,0x15,0xfc,0x16,0xfc,0x01,0x64,0x14,0xfa,0x21,0x60,
+0xaa,0x62,0x00,0x64,0xa2,0xdb,0x3f,0x60,0x6a,0x62,0x3f,0x60,0x16,0x64,0xa2,0xdb,
+0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xc1,0xfe,0x21,0x60,
+0xac,0x62,0x00,0x60,0x01,0x64,0xa2,0xdb,0x48,0x60,0x9e,0x64,0x5a,0xdb,0xcf,0xfe,
+0x2f,0x58,0xff,0xff,0x21,0x60,0xaa,0x62,0xa2,0xd1,0xff,0x60,0xfe,0x61,0xa1,0x84,
+0x5a,0xd1,0x4a,0xdb,0xa1,0x84,0x5a,0xdb,0x7a,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,
+0x2f,0x03,0x3f,0x60,0x10,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,0x25,0x03,
+0x40,0x48,0x00,0x64,0x40,0x4c,0x3f,0x60,0x12,0x62,0xa2,0xd3,0x28,0x45,0xd4,0x80,
 0x60,0x46,0x23,0x03,0x2b,0xf2,0xff,0xff,0xff,0xff,0x01,0x2a,0x14,0x00,0x09,0xf2,
-0xff,0xff,0x40,0x4d,0x3c,0x60,0xa2,0x62,0x3c,0x60,0x48,0x64,0xa2,0xdb,0x66,0x44,
+0xff,0xff,0x40,0x4d,0x3f,0x60,0x6a,0x62,0x3f,0x60,0x10,0x64,0xa2,0xdb,0x66,0x44,
 0x5a,0xdb,0x0e,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0x01,0x64,0x40,0x4c,0x2d,0x44,
-0x00,0xbc,0x60,0x46,0xe0,0x03,0x0a,0xf2,0xe1,0x00,0x49,0x60,0x9e,0x78,0xff,0xff,
-0x01,0x64,0x6d,0xfb,0x49,0x60,0xc7,0x78,0xff,0xff,0x2c,0x44,0x01,0x2a,0x11,0x00,
-0x28,0x46,0x2b,0xf2,0xff,0xff,0xff,0xff,0x01,0x2a,0x0b,0x00,0x3c,0x60,0xa2,0x62,
-0x3c,0x60,0x48,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0e,0x64,0x5a,0xdb,0xff,0xff,
-0x2b,0xff,0x3c,0x60,0x48,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,0x2b,0xf2,
-0xff,0xff,0xff,0xff,0x01,0x2a,0x31,0x00,0x4b,0x60,0x58,0x4e,0x08,0x78,0xff,0xff,
-0x1e,0x60,0xe2,0x62,0x00,0x64,0xa2,0xdb,0x3c,0x60,0xa2,0x62,0x3c,0x60,0x4e,0x64,
+0x00,0xbc,0x60,0x46,0xe0,0x03,0x0a,0xf2,0xe1,0x00,0x49,0x60,0xc5,0x78,0xff,0xff,
+0x01,0x64,0x61,0xfb,0x49,0x60,0xee,0x78,0xff,0xff,0x2c,0x44,0x01,0x2a,0x11,0x00,
+0x28,0x46,0x2b,0xf2,0xff,0xff,0xff,0xff,0x01,0x2a,0x0b,0x00,0x3f,0x60,0x6a,0x62,
+0x3f,0x60,0x10,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0e,0x64,0x5a,0xdb,0xff,0xff,
+0x2b,0xff,0x3f,0x60,0x10,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,0x2b,0xf2,
+0xff,0xff,0xff,0xff,0x01,0x2a,0x31,0x00,0x4b,0x60,0x58,0x4e,0x70,0x78,0xff,0xff,
+0x21,0x60,0xaa,0x62,0x00,0x64,0xa2,0xdb,0x3f,0x60,0x6a,0x62,0x3f,0x60,0x16,0x64,
 0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xc1,0xfe,
-0x1e,0x60,0xe4,0x62,0x00,0x60,0x01,0x64,0xa2,0xdb,0x48,0x60,0xf8,0x64,0x5a,0xdb,
-0xcf,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,0xe2,0x62,0xa2,0xd1,0xff,0x60,0xfe,0x61,
-0xa1,0x84,0x5a,0xd1,0x4a,0xdb,0xa1,0x84,0x5a,0xdb,0x77,0xf5,0x22,0xf2,0xff,0xff,
-0xff,0xff,0x0f,0x26,0x02,0x00,0x01,0x64,0x6d,0xfb,0x01,0x64,0x6f,0xfb,0x3c,0x60,
-0x48,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,0x40,0x48,0x00,0xbc,0x60,0x46,
-0x03,0x02,0x49,0x60,0x9e,0x78,0xff,0xff,0x6c,0xf3,0xa4,0xf1,0xff,0xff,0xd0,0x80,
+0x21,0x60,0xac,0x62,0x00,0x60,0x01,0x64,0xa2,0xdb,0x49,0x60,0x1f,0x64,0x5a,0xdb,
+0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,0xaa,0x62,0xa2,0xd1,0xff,0x60,0xfe,0x61,
+0xa1,0x84,0x5a,0xd1,0x4a,0xdb,0xa1,0x84,0x5a,0xdb,0x6b,0xf5,0x22,0xf2,0xff,0xff,
+0xff,0xff,0x0f,0x26,0x02,0x00,0x01,0x64,0x61,0xfb,0x01,0x64,0x63,0xfb,0x3f,0x60,
+0x10,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,0x40,0x48,0x00,0xbc,0x60,0x46,
+0x03,0x02,0x49,0x60,0xc5,0x78,0xff,0xff,0x60,0xf3,0x9a,0xf1,0xff,0xff,0xd0,0x80,
 0xff,0xff,0x7f,0x0e,0x2b,0xf2,0xff,0xff,0x01,0xb0,0x19,0xf2,0x77,0x02,0x00,0xbc,
-0x60,0x43,0x6b,0x03,0xa3,0xd3,0xff,0xff,0xff,0xff,0x02,0x2a,0x63,0x00,0x69,0x60,
-0x58,0x4e,0xfd,0x78,0xff,0xff,0x6a,0x03,0x6a,0x60,0x58,0x4e,0x17,0x78,0xff,0xff,
-0x65,0x03,0x66,0x44,0x69,0xfb,0x4b,0x60,0x58,0x4e,0x0f,0x78,0xff,0xff,0x1e,0x60,
-0xe2,0x62,0x00,0x64,0xa2,0xdb,0x3c,0x60,0xa2,0x62,0x3c,0x60,0x4e,0x64,0xa2,0xdb,
-0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xc1,0xfe,0x1e,0x60,
-0xe4,0x62,0x00,0x60,0x01,0x64,0xa2,0xdb,0x49,0x60,0x57,0x64,0x5a,0xdb,0xcf,0xfe,
-0x2f,0x58,0xff,0xff,0x1e,0x60,0xe2,0x62,0xa2,0xd1,0xff,0x60,0xfe,0x61,0xa1,0x84,
-0x5a,0xd1,0x4a,0xdb,0xa1,0x84,0x5a,0xdb,0x77,0xf5,0x22,0xf2,0x69,0xf5,0x0f,0xb0,
-0x46,0x48,0x07,0x02,0x6a,0x60,0x58,0x4e,0x1b,0x78,0xff,0xff,0x00,0x64,0x15,0xfa,
-0x21,0x00,0x6a,0x60,0x58,0x4e,0x2e,0x78,0xff,0xff,0x15,0xf2,0xff,0xff,0x01,0xa4,
-0xe7,0xa0,0x15,0xfa,0x23,0x04,0x67,0x60,0x30,0x62,0xa2,0xd3,0xff,0xff,0xdc,0x84,
-0xa2,0xdb,0x09,0xf2,0xff,0xff,0x40,0x48,0x3c,0x60,0xa2,0x62,0x3c,0x60,0x6c,0x64,
+0x60,0x43,0x6b,0x03,0xa3,0xd3,0xff,0xff,0xff,0xff,0x02,0x2a,0x63,0x00,0x6e,0x60,
+0x58,0x4e,0x2e,0x78,0xff,0xff,0x6a,0x03,0x6e,0x60,0x58,0x4e,0x48,0x78,0xff,0xff,
+0x65,0x03,0x66,0x44,0x5d,0xfb,0x4b,0x60,0x58,0x4e,0x77,0x78,0xff,0xff,0x21,0x60,
+0xaa,0x62,0x00,0x64,0xa2,0xdb,0x3f,0x60,0x6a,0x62,0x3f,0x60,0x16,0x64,0xa2,0xdb,
+0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xc1,0xfe,0x21,0x60,
+0xac,0x62,0x00,0x60,0x01,0x64,0xa2,0xdb,0x49,0x60,0x7e,0x64,0x5a,0xdb,0xcf,0xfe,
+0x2f,0x58,0xff,0xff,0x21,0x60,0xaa,0x62,0xa2,0xd1,0xff,0x60,0xfe,0x61,0xa1,0x84,
+0x5a,0xd1,0x4a,0xdb,0xa1,0x84,0x5a,0xdb,0x6b,0xf5,0x22,0xf2,0x5d,0xf5,0x0f,0xb0,
+0x46,0x48,0x07,0x02,0x6e,0x60,0x58,0x4e,0x4c,0x78,0xff,0xff,0x00,0x64,0x15,0xfa,
+0x21,0x00,0x6e,0x60,0x58,0x4e,0x5f,0x78,0xff,0xff,0x15,0xf2,0xff,0xff,0x01,0xa4,
+0xe7,0xa0,0x15,0xfa,0x23,0x04,0x6a,0x60,0x0a,0x62,0xa2,0xd3,0xff,0xff,0xdc,0x84,
+0xa2,0xdb,0x09,0xf2,0xff,0xff,0x40,0x48,0x3f,0x60,0x6a,0x62,0x3f,0x60,0x34,0x64,
 0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xce,0xfe,
-0x28,0x44,0x83,0x00,0x01,0x64,0x6f,0xfb,0x09,0x00,0x69,0x60,0x58,0x4e,0xfd,0x78,
-0xff,0xff,0x04,0x03,0x6a,0x60,0x58,0x4e,0x1b,0x78,0xff,0xff,0x28,0x46,0x09,0xf2,
-0xf0,0x00,0x6c,0xf3,0xa4,0xf1,0xff,0xff,0xd0,0x84,0xff,0xff,0x23,0x0e,0xe8,0x84,
-0xe8,0x84,0xe8,0x84,0xe8,0x84,0x60,0x40,0xff,0x22,0x01,0x64,0x60,0x43,0x28,0x60,
-0x9e,0x62,0xa2,0xdd,0x3c,0x60,0xd2,0x62,0x28,0x60,0x9a,0x64,0xa2,0xdb,0x02,0x64,
-0x4a,0xdb,0xff,0xff,0x1d,0xff,0x1e,0x60,0xe4,0x62,0x00,0x60,0x04,0x64,0xa2,0xdb,
-0x49,0x60,0xc3,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,0xe2,0x62,
-0x00,0x64,0xa2,0xdb,0x6d,0xf3,0xff,0xff,0x02,0xbc,0x6d,0xfb,0x00,0x64,0x6a,0xfb,
-0x01,0x64,0x8c,0xfb,0xff,0xff,0xc1,0xfe,0x67,0x60,0x1a,0x62,0xa2,0xd3,0xff,0xff,
-0x00,0xa0,0xff,0xff,0x3c,0x03,0x10,0xb4,0x20,0x45,0xb4,0x84,0x40,0x40,0x67,0x60,
-0x1c,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x8c,0xf3,0xff,0xff,0x00,0xa0,
-0x02,0x64,0x2a,0x03,0x8c,0xfb,0x1e,0x60,0xe2,0x62,0xa2,0xd1,0x7f,0x60,0xff,0x64,
-0xa0,0x84,0xa2,0xdb,0x1e,0x60,0xe4,0x62,0x80,0x60,0x00,0x64,0xa2,0xdb,0x49,0x60,
-0xfb,0x64,0x5a,0xdb,0xcf,0xfe,0xc1,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,0xe2,0x62,
-0xa2,0xd1,0x7f,0x60,0xff,0x64,0xa0,0x84,0xa2,0xdb,0x8c,0xf3,0xff,0xff,0x00,0xa0,
-0xff,0xff,0xf2,0x02,0x1e,0x60,0xe2,0x62,0xa2,0xd1,0x7f,0x60,0xff,0x61,0xa1,0x84,
-0x5a,0xd1,0x4a,0xdb,0xa1,0x84,0x5a,0xdb,0x45,0x60,0x98,0x78,0xff,0xff,0x67,0x60,
-0xf0,0x65,0xa5,0xd3,0xff,0xff,0x60,0x40,0x03,0x22,0x3d,0x00,0x01,0x2a,0x0c,0x00,
-0x1e,0x60,0xb2,0x63,0xa3,0xd1,0x67,0x60,0x70,0x65,0xad,0xf3,0xa5,0xd3,0x60,0x45,
-0xc4,0x84,0xd0,0x80,0xff,0xff,0x26,0x0d,0x67,0x60,0xf0,0x65,0xa5,0xd3,0xff,0xff,
-0x60,0x45,0xfd,0xb4,0xa2,0xdb,0x20,0x44,0xb4,0x84,0x40,0x40,0x5a,0x60,0x3c,0x64,
-0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x0c,0x60,0x50,0x62,0x56,0x60,0x86,0x64,
-0xa2,0xdb,0x0f,0x4e,0x52,0x60,0x58,0x4f,0x9e,0x78,0xff,0xff,0x0e,0x4f,0x1e,0x60,
-0xe4,0x62,0x10,0x60,0x00,0x64,0xa2,0xdb,0x4a,0x60,0x4f,0x64,0x5a,0xdb,0xcf,0xfe,
-0x2f,0x58,0xff,0xff,0x1e,0x60,0xe2,0x62,0x00,0x64,0xa2,0xdb,0x0c,0x60,0x50,0x62,
-0x67,0x60,0x75,0x64,0xa2,0xdb,0x71,0xf3,0x70,0xf3,0x9c,0xa0,0xff,0xff,0x7f,0x04,
-0x64,0x64,0x71,0xfb,0x67,0x60,0x28,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0xff,0xff,
-0x76,0x02,0xcb,0xf3,0xff,0xff,0xfd,0xa0,0xff,0xff,0x44,0x02,0x8c,0xf3,0xff,0xff,
-0xff,0xa0,0x02,0x64,0x2a,0x02,0x8c,0xfb,0x1e,0x60,0xe2,0x62,0xa2,0xd1,0x7f,0x60,
-0xff,0x64,0xa0,0x84,0xa2,0xdb,0x1e,0x60,0xe4,0x62,0x80,0x60,0x00,0x64,0xa2,0xdb,
-0x4a,0x60,0x84,0x64,0x5a,0xdb,0xcf,0xfe,0xc1,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,
-0xe2,0x62,0xa2,0xd1,0x7f,0x60,0xff,0x64,0xa0,0x84,0xa2,0xdb,0x8c,0xf3,0xff,0xff,
-0x00,0xa0,0xff,0xff,0xf2,0x02,0x1e,0x60,0xe2,0x62,0xa2,0xd1,0x7f,0x60,0xff,0x61,
-0xa1,0x84,0x5a,0xd1,0x4a,0xdb,0xa1,0x84,0x5a,0xdb,0x69,0x60,0x44,0x62,0x90,0x60,
-0x71,0x64,0xa2,0xdb,0x67,0x60,0x26,0x64,0xa0,0xd3,0xff,0xff,0xfd,0xa0,0xff,0xff,
-0x09,0x02,0x02,0x64,0xa2,0xdb,0x00,0x64,0x70,0xfb,0x02,0x65,0x3d,0x60,0x58,0x4e,
-0x32,0x78,0xff,0xff,0x67,0x60,0x16,0x65,0xa5,0xd1,0x01,0x60,0xf4,0x64,0x64,0x43,
-0xdf,0x83,0xd0,0x80,0xa5,0xdd,0x48,0x05,0x67,0x60,0x18,0x62,0xa2,0xd3,0xff,0xff,
-0x00,0xa0,0x00,0x64,0xa5,0xdb,0x40,0x03,0xd5,0xf3,0x03,0x7c,0x00,0xa0,0xff,0xff,
-0x13,0x03,0xd5,0xf9,0x0a,0x65,0x3d,0x60,0x58,0x4e,0x32,0x78,0xff,0xff,0x0c,0x60,
-0x50,0x62,0x56,0x60,0x86,0x64,0xa2,0xdb,0x1f,0x60,0x3c,0x63,0x0e,0x64,0x00,0x7c,
-0xbd,0xd9,0xcc,0x84,0xff,0xff,0xfc,0x02,0x45,0x60,0x98,0x78,0xff,0xff,0xfd,0xa0,
-0xff,0xff,0x22,0x04,0x67,0x60,0x16,0x62,0x00,0x64,0xa2,0xdb,0x70,0xfb,0x67,0x60,
-0x18,0x62,0x01,0x64,0xa2,0xdb,0x67,0x60,0x26,0x64,0xa0,0xd3,0xff,0xff,0xfd,0xa0,
-0xff,0xff,0x12,0x03,0x03,0x64,0xa2,0xdb,0x03,0x64,0xcb,0xfb,0x01,0x64,0x8c,0xfb,
-0xff,0xff,0xc1,0xfe,0x69,0x60,0x44,0x62,0x90,0x60,0x70,0x64,0xa2,0xdb,0x01,0x65,
-0x3d,0x60,0x58,0x4e,0x32,0x78,0xff,0xff,0x69,0x60,0x58,0x4e,0xba,0x78,0xff,0xff,
-0x47,0x60,0xb7,0x78,0xff,0xff,0x77,0xf5,0xff,0x60,0xff,0x64,0x2b,0xfa,0x2c,0xfa,
-0x2d,0xfa,0x0b,0x00,0x77,0xf1,0x2b,0xf2,0x2c,0xf2,0x60,0x43,0x64,0x46,0x2c,0xfa,
-0x2b,0xfc,0x28,0x46,0x2d,0xf2,0x64,0x46,0x2d,0xfa,0x90,0x64,0x29,0xfa,0x47,0xf3,
-0xff,0xff,0xe8,0x84,0xe8,0x84,0x1c,0xfa,0x00,0x63,0x38,0xf2,0x22,0xfc,0xff,0xff,
-0x19,0xfc,0x16,0xfc,0x17,0xfa,0x1c,0x64,0x21,0xfa,0x0e,0x64,0x15,0xfa,0x01,0x64,
-0x14,0xfa,0x2e,0x58,0xff,0xff,0x3a,0x60,0x22,0x62,0xa2,0xd3,0x43,0xf1,0x60,0x41,
-0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0x90,0x84,0x01,0xb4,0xc5,0xf1,0x0d,0x02,
-0x61,0x44,0x90,0x84,0x20,0xb4,0xff,0xff,0x08,0x03,0x64,0x44,0x20,0x2a,0x04,0x00,
-0x00,0x64,0x47,0xfb,0x00,0xbc,0x01,0x00,0x01,0xbc,0x2e,0x58,0xff,0xff,0x4c,0x60,
-0x44,0x78,0xff,0xff,0x78,0xf5,0x51,0x60,0x58,0x4e,0x23,0x78,0xff,0xff,0x51,0x60,
-0x58,0x4e,0xad,0x78,0xff,0xff,0x85,0xf1,0x10,0x67,0xa0,0x84,0xb0,0xbc,0x29,0xfa,
-0x51,0x60,0x58,0x4e,0x9e,0x78,0xff,0xff,0x06,0x63,0x38,0xfc,0x00,0x64,0x22,0xfa,
-0x3a,0x60,0x58,0x4e,0x14,0x78,0xff,0xff,0x66,0x45,0x00,0xf4,0x04,0x61,0x7d,0xf1,
-0x00,0x64,0x64,0x40,0x02,0x26,0x01,0x64,0xa1,0xda,0x01,0x63,0x59,0xdc,0x00,0x64,
-0x59,0xda,0xa7,0xf1,0x28,0x60,0x9e,0x62,0xa2,0xd9,0x3c,0x60,0xa2,0x62,0x3c,0x60,
-0x4e,0x64,0xa2,0xdb,0x65,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,
-0xc1,0xfe,0x01,0x64,0x5d,0xfb,0x3c,0x60,0xd2,0x62,0x28,0x60,0x9a,0x64,0xa2,0xdb,
-0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x1e,0x60,0xe4,0x62,0x00,0x60,0x0c,0x64,
-0xa2,0xdb,0x4b,0x60,0x2e,0x97,0x7e,0x00,0x00,0x10,0x9c,0x64,0x5a,0xdb,0xcf,0xfe,
-0x2f,0x58,0xff,0xff,0x1e,0x60,0xe2,0x62,0xa2,0xd1,0x00,0x60,0x08,0x64,0xa0,0x80,
-0x9c,0x84,0x2e,0x03,0xa0,0x84,0xa2,0xdb,0x3c,0x60,0xd2,0x62,0x28,0x60,0x9a,0x64,
-0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x00,0x64,0x5d,0xfb,0x1e,0x60,
-0xe2,0x62,0x00,0x64,0xa2,0xdb,0x5a,0xdb,0x26,0x46,0x38,0xf2,0x00,0xf4,0x04,0xf2,
-0x60,0x41,0x00,0xa8,0xff,0xff,0x03,0x03,0x4c,0x60,0x35,0x78,0xff,0xff,0x7d,0xf3,
-0xff,0xff,0x02,0xb4,0x03,0xf2,0x03,0x02,0x4c,0x60,0x07,0x78,0xff,0xff,0x02,0xa8,
-0x88,0x65,0x38,0x02,0xd5,0x80,0xff,0xff,0x04,0x05,0x4c,0x60,0x35,0x78,0xff,0xff,
-0x43,0x00,0x26,0x46,0x51,0x60,0x58,0x4e,0x23,0x78,0xff,0xff,0xff,0x7f,0x00,0x7e,
-0x0e,0xfa,0x08,0x64,0x28,0xfa,0x85,0xf1,0x10,0x67,0xa0,0x84,0xb0,0xbd,0x40,0x67,
+0x28,0x44,0x83,0x00,0x01,0x64,0x63,0xfb,0x09,0x00,0x6e,0x60,0x58,0x4e,0x2e,0x78,
+0xff,0xff,0x04,0x03,0x6e,0x60,0x58,0x4e,0x4c,0x78,0xff,0xff,0x28,0x46,0x09,0xf2,
+0xf0,0x00,0x60,0xf3,0x9a,0xf1,0xff,0xff,0xd0,0x84,0xff,0xff,0x23,0x0e,0xe8,0x84,
+0xe8,0x84,0xe8,0x84,0xe8,0x84,0x60,0x40,0xff,0x22,0x01,0x64,0x60,0x43,0x2b,0x60,
+0x66,0x62,0xa2,0xdd,0x3f,0x60,0x9a,0x62,0x2b,0x60,0x62,0x64,0xa2,0xdb,0x02,0x64,
+0x4a,0xdb,0xff,0xff,0x1d,0xff,0x21,0x60,0xac,0x62,0x00,0x60,0x04,0x64,0xa2,0xdb,
+0x49,0x60,0xea,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,0xaa,0x62,
+0x00,0x64,0xa2,0xdb,0x61,0xf3,0xff,0xff,0x02,0xbc,0x61,0xfb,0x00,0x64,0x5e,0xfb,
+0x01,0x64,0x80,0xfb,0xff,0xff,0xc1,0xfe,0x69,0x60,0xf4,0x62,0xa2,0xd3,0xff,0xff,
+0x00,0xa0,0xff,0xff,0x40,0x03,0x10,0xb4,0xe9,0xf3,0x60,0x45,0xb4,0x84,0xe9,0xfb,
+0x69,0x60,0xf6,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x80,0xf3,0xff,0xff,
+0x00,0xa0,0x02,0x64,0x2a,0x03,0x80,0xfb,0x21,0x60,0xaa,0x62,0xa2,0xd1,0x7f,0x60,
+0xff,0x64,0xa0,0x84,0xa2,0xdb,0x21,0x60,0xac,0x62,0x80,0x60,0x00,0x64,0xa2,0xdb,
+0x4a,0x60,0x23,0x64,0x5a,0xdb,0xcf,0xfe,0xc1,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,
+0xaa,0x62,0xa2,0xd1,0x7f,0x60,0xff,0x64,0xa0,0x84,0xa2,0xdb,0x80,0xf3,0xff,0xff,
+0x00,0xa0,0xff,0xff,0xf2,0x02,0x21,0x60,0xaa,0x62,0xa2,0xd1,0x7f,0x60,0xff,0x61,
+0xa1,0x84,0x5a,0xd1,0x4a,0xdb,0xa1,0x84,0x5a,0xdb,0x45,0x60,0xcb,0x78,0xff,0xff,
+0x4a,0x60,0xc1,0x78,0xff,0xff,0x6a,0x60,0xcc,0x65,0xa5,0xd3,0xff,0xff,0x60,0x40,
+0x03,0x22,0xf6,0x00,0x01,0x2a,0x0c,0x00,0x21,0x60,0x7a,0x63,0xa3,0xd1,0x6a,0x60,
+0x50,0x65,0xa2,0xf3,0xa5,0xd3,0x60,0x45,0xc4,0x84,0xd0,0x80,0xff,0xff,0x64,0x0d,
+0x6a,0x60,0xcc,0x65,0xa5,0xd3,0xff,0xff,0x60,0x45,0xfd,0xb4,0xa2,0xdb,0xe9,0xf3,
+0xff,0xff,0xb4,0x84,0xe9,0xfb,0x63,0x60,0x2e,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,
+0xa2,0xdb,0x80,0xf3,0xff,0xff,0x00,0xa0,0x02,0x64,0x2a,0x03,0x80,0xfb,0x21,0x60,
+0xaa,0x62,0xa2,0xd1,0x7f,0x60,0xff,0x64,0xa0,0x84,0xa2,0xdb,0x21,0x60,0xac,0x62,
+0x80,0x60,0x00,0x64,0xa2,0xdb,0x4a,0x60,0x7e,0x64,0x5a,0xdb,0xcf,0xfe,0xc1,0xfe,
+0x2f,0x58,0xff,0xff,0x21,0x60,0xaa,0x62,0xa2,0xd1,0x7f,0x60,0xff,0x64,0xa0,0x84,
+0xa2,0xdb,0x80,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0xf2,0x02,0x21,0x60,0xaa,0x62,
+0xa2,0xd1,0x7f,0x60,0xff,0x61,0xa1,0x84,0x5a,0xd1,0x4a,0xdb,0xa1,0x84,0x5a,0xdb,
+0x0c,0x60,0x50,0x62,0x59,0x60,0xed,0x64,0xa2,0xdb,0x0f,0x4e,0x53,0x60,0x58,0x4f,
+0xfe,0x78,0xff,0xff,0x0e,0x4f,0x21,0x60,0xac,0x62,0x10,0x60,0x00,0x64,0xa2,0xdb,
+0x4a,0x60,0xaa,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0xe9,0xf1,0xff,0x60,
+0xfc,0x64,0xa0,0x84,0xe9,0xfb,0x04,0x65,0x3d,0x60,0x58,0x4e,0x39,0x78,0xff,0xff,
+0x01,0x64,0x80,0xfb,0xff,0xff,0xc1,0xfe,0x21,0x60,0xaa,0x62,0x00,0x64,0xa2,0xdb,
+0x0c,0x60,0x50,0x62,0x6b,0x60,0xac,0x64,0xa2,0xdb,0x65,0xf3,0x64,0xf3,0x9c,0xa0,
+0xff,0xff,0x27,0x04,0x64,0x64,0x65,0xfb,0x6a,0x60,0x02,0x62,0xa2,0xd3,0xff,0xff,
+0x00,0xa0,0xff,0xff,0x7a,0x02,0xbd,0xf3,0xff,0xff,0xfd,0xa0,0xff,0xff,0x48,0x02,
+0x80,0xf3,0xff,0xff,0xff,0xa0,0x02,0x64,0x2b,0x02,0x80,0xfb,0x21,0x60,0xaa,0x62,
+0xa2,0xd1,0x7f,0x60,0xff,0x64,0xa0,0x84,0xa2,0xdb,0x21,0x60,0xac,0x62,0x80,0x60,
+0x00,0x64,0xa2,0xdb,0x4a,0x60,0xee,0x64,0x5a,0xdb,0xcf,0xfe,0xc1,0xfe,0x2f,0x58,
+0xff,0xff,0x5b,0x00,0x21,0x60,0xaa,0x62,0xa2,0xd1,0x7f,0x60,0xff,0x64,0xa0,0x84,
+0xa2,0xdb,0x80,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0xf1,0x02,0x21,0x60,0xaa,0x62,
+0xa2,0xd1,0x7f,0x60,0xff,0x61,0xa1,0x84,0x5a,0xd1,0x4a,0xdb,0xa1,0x84,0x06,0x96,
+0x7e,0x00,0x00,0x10,0x5a,0xdb,0x6a,0x60,0x00,0x64,0xa0,0xd3,0xff,0xff,0xfd,0xa0,
+0xff,0xff,0x11,0x02,0x02,0x64,0xa2,0xdb,0x00,0x64,0x64,0xfb,0x12,0x7c,0x80,0x60,
+0xe6,0x62,0xa2,0xd9,0x00,0x64,0x06,0xa2,0xa2,0xdb,0x5a,0xdb,0x02,0x65,0x3d,0x60,
+0x58,0x4e,0x39,0x78,0xff,0xff,0x69,0x60,0xf0,0x65,0xa5,0xd1,0x01,0x60,0xf4,0x64,
+0x64,0x43,0xdf,0x83,0xd0,0x80,0xa5,0xdd,0x43,0x05,0x69,0x60,0xf2,0x62,0xa2,0xd3,
+0xff,0xff,0x00,0xa0,0x00,0x64,0xa5,0xdb,0x3b,0x03,0xc4,0xf3,0x03,0x7c,0x00,0xa0,
+0xff,0xff,0x13,0x03,0xc4,0xf9,0x0a,0x65,0x3d,0x60,0x58,0x4e,0x39,0x78,0xff,0xff,
+0x0c,0x60,0x50,0x62,0x59,0x60,0xed,0x64,0xa2,0xdb,0x22,0x60,0x04,0x63,0x0e,0x64,
+0x00,0x7c,0xbd,0xd9,0xcc,0x84,0xff,0xff,0xfc,0x02,0x45,0x60,0xcb,0x78,0xff,0xff,
+0xfd,0xa0,0xff,0xff,0x1d,0x04,0x69,0x60,0xf0,0x62,0x00,0x64,0xa2,0xdb,0x64,0xfb,
+0x69,0x60,0xf2,0x62,0x01,0x64,0xa2,0xdb,0x6a,0x60,0x00,0x64,0xa0,0xd3,0xff,0xff,
+0xfd,0xa0,0xff,0xff,0x0d,0x03,0x03,0x64,0xa2,0xdb,0x03,0x64,0xbd,0xfb,0x01,0x64,
+0x80,0xfb,0xff,0xff,0xc1,0xfe,0x01,0x65,0x3d,0x60,0x58,0x4e,0x39,0x78,0xff,0xff,
+0x6d,0x60,0x58,0x4e,0xeb,0x78,0xff,0xff,0x47,0x60,0xde,0x78,0xff,0xff,0x6b,0xf5,
+0xff,0x60,0xff,0x64,0x2b,0xfa,0x2c,0xfa,0x2d,0xfa,0x0b,0x00,0x6b,0xf1,0x2b,0xf2,
+0x2c,0xf2,0x60,0x43,0x64,0x46,0x2c,0xfa,0x2b,0xfc,0x28,0x46,0x2d,0xf2,0x64,0x46,
+0x2d,0xfa,0x90,0x64,0x29,0xfa,0x3a,0xf3,0xff,0xff,0xe8,0x84,0xe8,0x84,0x1c,0xfa,
+0x00,0x63,0x38,0xf2,0x22,0xfc,0xff,0xff,0x19,0xfc,0x16,0xfc,0x17,0xfa,0x1c,0x64,
+0x21,0xfa,0x0e,0x64,0x15,0xfa,0x01,0x64,0x14,0xfa,0x2e,0x58,0xff,0xff,0x3c,0x60,
+0xea,0x62,0xa2,0xd3,0x34,0xf1,0x60,0x41,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,
+0x90,0x84,0x01,0xb4,0xb8,0xf1,0x0d,0x02,0x61,0x44,0x90,0x84,0x20,0xb4,0xff,0xff,
+0x08,0x03,0x64,0x44,0x20,0x2a,0x04,0x00,0x00,0x64,0x3a,0xfb,0x00,0xbc,0x01,0x00,
+0x01,0xbc,0x2e,0x58,0xff,0xff,0x00,0x64,0xd5,0xfb,0x4c,0x60,0xb6,0x78,0xff,0xff,
+0x6c,0xf5,0x52,0x60,0x58,0x4e,0x52,0x78,0xff,0xff,0x52,0x60,0x58,0x4e,0xdc,0x78,
+0xff,0xff,0x79,0xf1,0x10,0x67,0xa0,0x84,0xb0,0xbc,0x29,0xfa,0x52,0x60,0x58,0x4e,
+0xcd,0x78,0xff,0xff,0x06,0x63,0x38,0xfc,0x00,0x64,0x22,0xfa,0x39,0x60,0x58,0x4e,
+0xfe,0x78,0xff,0xff,0x66,0x45,0x00,0xf4,0x04,0x61,0x71,0xf1,0x01,0x64,0x64,0x40,
+0x02,0x36,0x05,0x00,0x80,0x64,0x64,0x40,0x04,0x36,0x01,0x00,0x00,0x64,0xa1,0xda,
+0x01,0x63,0x59,0xdc,0x00,0x64,0x59,0xda,0x9d,0xf1,0x2b,0x60,0x66,0x62,0xa2,0xd9,
+0x3f,0x60,0x6a,0x62,0x3f,0x60,0x16,0x64,0xa2,0xdb,0x65,0x44,0x5a,0xdb,0x0a,0x64,
+0x5a,0xdb,0xff,0xff,0x2b,0xff,0xc1,0xfe,0x01,0x64,0x51,0xfb,0x3f,0x60,0x9a,0x62,
+0x2b,0x60,0x62,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x21,0x60,
+0xac,0x62,0x00,0x60,0x0c,0x64,0xa2,0xdb,0x4c,0x60,0x0b,0x64,0x5a,0xdb,0xcf,0xfe,
+0x2f,0x58,0xff,0xff,0x21,0x60,0xaa,0x62,0xa2,0xd1,0x00,0x60,0x08,0x64,0xa0,0x80,
+0x9c,0x84,0x2e,0x03,0xa0,0x84,0xa2,0xdb,0x3f,0x60,0x9a,0x62,0x2b,0x60,0x62,0x64,
+0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x00,0x64,0x51,0xfb,0x21,0x60,
+0xaa,0x62,0x00,0x64,0xa2,0xdb,0x5a,0xdb,0x26,0x46,0x38,0xf2,0x00,0xf4,0x04,0xf2,
+0x60,0x41,0x00,0xa8,0xff,0xff,0x03,0x03,0x4c,0x60,0xa6,0x78,0xff,0xff,0x71,0xf3,
+0xff,0xff,0x02,0xb4,0x03,0xf2,0x03,0x02,0x4c,0x60,0x76,0x78,0xff,0xff,0x02,0xa8,
+0x88,0x65,0x38,0x02,0xd5,0x80,0xff,0xff,0x04,0x05,0x4c,0x60,0xa6,0x78,0xff,0xff,
+0x44,0x00,0x26,0x46,0x52,0x60,0x58,0x4e,0x52,0x78,0xff,0xff,0xff,0x7f,0x00,0x7e,
+0x0e,0xfa,0x08,0x64,0x28,0xfa,0x79,0xf1,0x10,0x67,0xa0,0x84,0xb0,0xbd,0x40,0x67,
 0xb4,0x84,0x29,0xfa,0x2b,0xf0,0x2e,0xf2,0xff,0xff,0x2e,0xf8,0x2b,0xfa,0x2c,0xf0,
 0xff,0xff,0x2f,0xf2,0x2f,0xf8,0x2c,0xfa,0xff,0xff,0x2d,0xf0,0x30,0xf2,0x30,0xf8,
-0xff,0xff,0x2d,0xfa,0x00,0x64,0x22,0xfa,0x3a,0x60,0x58,0x4e,0x14,0x78,0xff,0xff,
+0xff,0xff,0x2d,0xfa,0x00,0x64,0x22,0xfa,0x39,0x60,0x58,0x4e,0xfe,0x78,0xff,0xff,
 0x66,0x45,0x00,0xf4,0x04,0x61,0x01,0x64,0xa1,0xda,0x03,0x63,0x59,0xdc,0x4b,0x60,
-0x76,0x78,0xff,0xff,0x04,0xa8,0xff,0xff,0x2e,0x02,0x26,0x46,0x3e,0x60,0x58,0x4e,
-0x91,0x78,0xff,0xff,0x20,0x44,0x08,0xb0,0xff,0xff,0x03,0x03,0x4c,0x60,0xd9,0x78,
-0xff,0xff,0x4f,0x60,0xb6,0x78,0xff,0xff,0x00,0x60,0x04,0x64,0xa0,0x80,0x9c,0x84,
-0x17,0x03,0xa0,0x84,0xa2,0xdb,0x00,0x64,0x5d,0xfb,0x1e,0x60,0xe2,0x62,0x00,0x64,
-0xa2,0xdb,0x5a,0xdb,0x51,0x60,0x58,0x4e,0xbc,0x78,0xff,0xff,0x20,0x44,0x08,0xb0,
-0xff,0xff,0x03,0x03,0x4c,0x60,0xd9,0x78,0xff,0xff,0x4f,0x60,0xb6,0x78,0xff,0xff,
-0x4b,0x60,0x9a,0x78,0xff,0xff,0x26,0x46,0x3e,0x60,0x58,0x4e,0x91,0x78,0xff,0xff,
-0x20,0x44,0x08,0xb0,0xff,0xff,0x03,0x03,0x4c,0x60,0x5e,0x78,0xff,0xff,0x4e,0x60,
-0xa7,0x78,0xff,0xff,0xa7,0xf1,0x28,0x60,0x9e,0x62,0xa2,0xd9,0x79,0xf5,0x51,0x60,
-0x58,0x4e,0xad,0x78,0xff,0xff,0x00,0x60,0xb8,0x63,0x27,0x60,0xfe,0x64,0xa3,0xdb,
-0x62,0x60,0x3c,0x63,0xbd,0xd3,0xbd,0xd1,0xff,0xff,0xb0,0x84,0xa3,0xd1,0xff,0xff,
-0xb0,0x83,0x62,0x60,0x3a,0x62,0xa2,0xdd,0x00,0x60,0xb8,0x63,0x01,0x60,0x10,0x65,
-0xa3,0xd3,0xa5,0xd1,0x04,0xa4,0xa3,0xdb,0xd0,0x80,0xa0,0xd3,0x07,0x07,0x40,0x47,
-0x52,0x60,0x58,0x4e,0x0c,0x78,0xff,0xff,0xef,0x02,0x0c,0x00,0x1e,0x60,0xe2,0x62,
-0x00,0x64,0xa2,0xdb,0x5a,0xdb,0x67,0x60,0x42,0x65,0x00,0x64,0xa5,0xdb,0x44,0x60,
-0x88,0x78,0xff,0xff,0x27,0x43,0x3c,0xa3,0xa3,0xd1,0x67,0x60,0xc2,0x63,0xc9,0xf3,
-0xa3,0xd9,0xa0,0x84,0xd0,0x80,0xff,0xff,0xd7,0x02,0x27,0x43,0x40,0xa3,0xa3,0xd3,
-0xff,0xff,0x01,0xa0,0x60,0x41,0x05,0x02,0x3e,0x60,0x58,0x4e,0xae,0x78,0xff,0xff,
-0x0d,0x00,0x17,0x60,0x64,0x62,0xa2,0xd3,0xff,0xff,0x60,0x45,0xd5,0x84,0x60,0x45,
-0x01,0x0d,0x00,0x65,0x3e,0x60,0x58,0x4e,0xd6,0x78,0xff,0xff,0x1e,0x60,0xe2,0x62,
-0x00,0x64,0xa2,0xdb,0xde,0xfe,0xff,0xff,0x0b,0x04,0x1e,0x60,0xe4,0x62,0x40,0x60,
-0x00,0x64,0xa2,0xdb,0x4c,0x60,0x7c,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,
-0x27,0xd1,0x3c,0x60,0xc2,0x62,0xa2,0xd9,0xca,0x82,0x1e,0x64,0xa2,0xdb,0xff,0xff,
-0x2d,0xff,0x1e,0x60,0xe4,0x62,0x20,0x60,0x00,0x64,0xa2,0xdb,0x4c,0x60,0xc6,0x64,
-0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,0xe2,0x62,0x00,0x64,0xa2,0xdb,
-0xbe,0xfe,0x1e,0x60,0xc8,0x62,0xa2,0xd1,0x40,0x60,0x00,0x64,0xb0,0x84,0xa2,0xdb,
-0xcf,0xfe,0x20,0x44,0x08,0xbc,0x40,0x40,0x4b,0x60,0x4f,0x78,0xff,0xff,0x79,0xf5,
-0x51,0x60,0x58,0x4e,0x23,0x78,0xff,0xff,0x00,0x64,0x29,0xfa,0x51,0x60,0x58,0x4e,
-0x9e,0x78,0xff,0xff,0xff,0xff,0x47,0xf1,0x00,0xf4,0x04,0x62,0x00,0x60,0x01,0x64,
-0xb0,0x84,0xa2,0xda,0x0f,0x63,0x04,0x61,0x59,0xdc,0x50,0x60,0x58,0x4e,0xea,0x78,
-0xff,0xff,0x79,0xf5,0x2d,0x44,0x08,0xa4,0x38,0xfa,0x00,0x64,0x22,0xfa,0x3a,0x60,
-0x58,0x4e,0x14,0x78,0xff,0xff,0x3c,0x60,0xa2,0x62,0x3c,0x60,0x4e,0x64,0xa2,0xdb,
+0xe5,0x78,0xff,0xff,0x04,0xa8,0xff,0xff,0x30,0x02,0x26,0x46,0x3e,0x60,0x58,0x4e,
+0xa2,0x78,0xff,0xff,0xe9,0xf3,0xff,0xff,0x08,0xb0,0xff,0xff,0x03,0x03,0x4d,0x60,
+0x50,0x78,0xff,0xff,0x50,0x60,0x46,0x78,0xff,0xff,0x00,0x60,0x04,0x64,0xa0,0x80,
+0x9c,0x84,0x18,0x03,0xa0,0x84,0xa2,0xdb,0x00,0x64,0x51,0xfb,0x21,0x60,0xaa,0x62,
+0x00,0x64,0xa2,0xdb,0x5a,0xdb,0x52,0x60,0x58,0x4e,0xeb,0x78,0xff,0xff,0xe9,0xf3,
+0xff,0xff,0x08,0xb0,0xff,0xff,0x03,0x03,0x4d,0x60,0x50,0x78,0xff,0xff,0x50,0x60,
+0x46,0x78,0xff,0xff,0x4c,0x60,0x09,0x78,0xff,0xff,0x26,0x46,0x3e,0x60,0x58,0x4e,
+0xa2,0x78,0xff,0xff,0xe9,0xf3,0xff,0xff,0x08,0xb0,0xff,0xff,0x03,0x03,0x4c,0x60,
+0xd0,0x78,0xff,0xff,0x4f,0x60,0x33,0x78,0xff,0xff,0x9d,0xf1,0x2b,0x60,0x66,0x62,
+0xa2,0xd9,0x6d,0xf5,0x52,0x60,0x58,0x4e,0xdc,0x78,0xff,0xff,0x00,0x60,0xa0,0x63,
+0x2a,0x60,0xc6,0x64,0xa3,0xdb,0x64,0x60,0xd8,0x63,0xbd,0xd3,0xbd,0xd1,0xff,0xff,
+0xb0,0x84,0xa3,0xd1,0xff,0xff,0xb0,0x83,0x64,0x60,0xd6,0x62,0xa2,0xdd,0x00,0x60,
+0xa0,0x63,0x00,0x60,0xf8,0x65,0xa3,0xd3,0xa5,0xd1,0x04,0xa4,0xa3,0xdb,0xd0,0x80,
+0xa0,0xd3,0x07,0x07,0x40,0x47,0x53,0x60,0x58,0x4e,0x3e,0x78,0xff,0xff,0xef,0x02,
+0x0c,0x00,0x21,0x60,0xaa,0x62,0x00,0x64,0xa2,0xdb,0x5a,0xdb,0x6a,0x60,0x1e,0x65,
+0x00,0x64,0xa5,0xdb,0x44,0x60,0xb0,0x78,0xff,0xff,0x27,0x43,0x3c,0xa3,0xa3,0xd1,
+0x6a,0x60,0x9a,0x63,0xbb,0xf3,0xa3,0xd9,0xa0,0x84,0xd0,0x80,0xff,0xff,0xd7,0x02,
+0x27,0x43,0x40,0xa3,0xa3,0xd3,0xff,0xff,0x01,0xa0,0x60,0x41,0x05,0x02,0x3e,0x60,
+0x58,0x4e,0xbf,0x78,0xff,0xff,0x0d,0x00,0x17,0x60,0xdc,0x62,0xa2,0xd3,0xff,0xff,
+0x60,0x45,0xd5,0x84,0x60,0x45,0x01,0x0d,0x00,0x65,0x3e,0x60,0x58,0x4e,0xe7,0x78,
+0xff,0xff,0x21,0x60,0xaa,0x62,0x00,0x64,0xa2,0xdb,0xde,0xfe,0xff,0xff,0x0b,0x04,
+0x21,0x60,0xac,0x62,0x40,0x60,0x00,0x64,0xa2,0xdb,0x4c,0x60,0xee,0x64,0x5a,0xdb,
+0xcf,0xfe,0x2f,0x58,0xff,0xff,0x27,0x44,0xa0,0xd3,0xff,0xff,0x00,0x7f,0x60,0x5c,
+0x3f,0x60,0x8a,0x62,0xa2,0xd9,0xca,0x82,0x1e,0x64,0xa2,0xdb,0xff,0xff,0x2d,0xff,
+0x21,0x60,0xac,0x62,0x20,0x60,0x00,0x64,0xa2,0xdb,0x4d,0x60,0x3c,0x64,0x5a,0xdb,
+0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,0xaa,0x62,0x00,0x64,0xa2,0xdb,0xbe,0xfe,
+0x21,0x60,0x90,0x62,0xa2,0xd1,0x40,0x60,0x00,0x64,0xb0,0x84,0xa2,0xdb,0xcf,0xfe,
+0xe9,0xf3,0xff,0xff,0x08,0xbc,0xe9,0xfb,0x4b,0x60,0xb9,0x78,0xff,0xff,0x6d,0xf5,
+0x52,0x60,0x58,0x4e,0x52,0x78,0xff,0xff,0x00,0x64,0x29,0xfa,0x52,0x60,0x58,0x4e,
+0xcd,0x78,0xff,0xff,0xff,0xff,0x3a,0xf1,0x00,0xf4,0x04,0x62,0x00,0x60,0x01,0x64,
+0xb0,0x84,0xa2,0xda,0x0f,0x63,0x04,0x61,0x59,0xdc,0x51,0x60,0x58,0x4e,0x9e,0x78,
+0xff,0xff,0x6d,0xf5,0x2d,0x44,0x08,0xa4,0x38,0xfa,0x00,0x64,0x22,0xfa,0x39,0x60,
+0x58,0x4e,0xfe,0x78,0xff,0xff,0x3f,0x60,0x6a,0x62,0x3f,0x60,0x16,0x64,0xa2,0xdb,
 0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xc1,0xfe,0x06,0x64,
-0x5d,0xfb,0x3c,0x60,0xd2,0x62,0x28,0x60,0x9a,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,
-0xff,0xff,0x1d,0xff,0x1e,0x60,0xe4,0x62,0x00,0x60,0x1c,0x64,0xa2,0xdb,0x4d,0x60,
-0x1f,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,0xe2,0x62,0xa2,0xd1,
-0x00,0x60,0x08,0x64,0xa0,0x80,0x9c,0x84,0x21,0x03,0xa0,0x84,0xa2,0xdb,0x3c,0x60,
-0xd2,0x62,0x28,0x60,0x9a,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,
-0x00,0x63,0x5d,0xfd,0x1e,0x60,0xe2,0x62,0x00,0x64,0xa2,0xdb,0x5a,0xdb,0x26,0x46,
+0x51,0xfb,0x3f,0x60,0x9a,0x62,0x2b,0x60,0x62,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,
+0xff,0xff,0x1d,0xff,0x21,0x60,0xac,0x62,0x00,0x60,0x1c,0x64,0xa2,0xdb,0x4d,0x60,
+0x96,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,0xaa,0x62,0xa2,0xd1,
+0x00,0x60,0x08,0x64,0xa0,0x80,0x9c,0x84,0x21,0x03,0xa0,0x84,0xa2,0xdb,0x3f,0x60,
+0x9a,0x62,0x2b,0x60,0x62,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,
+0x00,0x63,0x51,0xfd,0x21,0x60,0xaa,0x62,0x00,0x64,0xa2,0xdb,0x5a,0xdb,0x26,0x46,
 0x00,0xf4,0x03,0xf2,0xff,0xff,0x00,0xb8,0xff,0xff,0x3d,0x03,0x26,0x46,0x3e,0x60,
-0x58,0x4e,0x91,0x78,0xff,0xff,0x4c,0x60,0x5e,0x78,0xff,0xff,0x00,0x60,0x10,0x64,
-0xa0,0x80,0x9c,0x84,0x1a,0x03,0xa0,0x84,0xa2,0xdb,0x3c,0x60,0xd2,0x62,0x28,0x60,
-0x9a,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x26,0x46,0x3e,0x60,
-0x58,0x4e,0x91,0x78,0xff,0xff,0x00,0x64,0x5d,0xfb,0x1e,0x60,0xe2,0x62,0x00,0x64,
-0xa2,0xdb,0x5a,0xdb,0x4c,0x60,0xd3,0x78,0xff,0xff,0x00,0x60,0x04,0x64,0xa0,0x80,
-0x9c,0x84,0x10,0x03,0xa0,0x84,0xa2,0xdb,0x00,0x64,0x5d,0xfb,0x1e,0x60,0xe2,0x62,
-0x00,0x64,0xa2,0xdb,0x5a,0xdb,0x51,0x60,0x58,0x4e,0xbc,0x78,0xff,0xff,0x4c,0x60,
-0x5e,0x78,0xff,0xff,0xa0,0x00,0x1e,0x60,0xfa,0x62,0xa2,0xd1,0x00,0x60,0x08,0x64,
-0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x51,0x60,0x58,0x4e,0x38,0x78,0xff,0xff,
-0x51,0x60,0x58,0x4e,0x4f,0x78,0xff,0xff,0x5b,0x60,0x58,0x4e,0x3a,0x78,0xff,0xff,
-0x52,0x60,0x58,0x4e,0x43,0x78,0xff,0xff,0x51,0x60,0x58,0x4e,0xcf,0x78,0xff,0xff,
-0x27,0x43,0x11,0x61,0x10,0x65,0xc7,0x83,0x59,0x60,0x9e,0x64,0xbd,0xd1,0xcd,0x81,
-0x58,0xd9,0xfc,0x02,0x26,0x46,0x3e,0x60,0x58,0x4e,0x91,0x78,0xff,0xff,0x01,0x64,
-0x8c,0xfb,0xff,0xff,0xc1,0xfe,0x01,0x64,0x90,0xfb,0x01,0x67,0x85,0xfb,0x04,0x64,
-0xcb,0xfb,0x01,0x65,0x3d,0x60,0x58,0x4e,0x32,0x78,0xff,0xff,0x52,0x60,0x58,0x4e,
-0x68,0x78,0xff,0xff,0x1e,0x60,0xd0,0x62,0xa2,0xd1,0x00,0x60,0x02,0x64,0xb0,0x84,
-0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x1e,0x60,0xf4,0x62,0xa2,0xd1,0x00,0x60,0x80,0x64,
-0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x0c,0x64,0x5d,0xfb,0x1e,0x60,0xe4,0x62,
-0x00,0x60,0xf0,0x64,0xa2,0xdb,0x4d,0x60,0xdb,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,
-0xff,0xff,0x1e,0x60,0xe2,0x62,0xa2,0xd1,0x00,0x60,0x80,0x64,0xa0,0x80,0x9c,0x84,
-0x07,0x03,0xa0,0x84,0xa2,0xdb,0x62,0x60,0x48,0x62,0x0e,0x64,0xa2,0xdb,0x17,0x00,
-0x00,0x60,0x40,0x64,0xa0,0x80,0x9c,0x84,0x07,0x03,0xa0,0x84,0xa2,0xdb,0x62,0x60,
-0x48,0x62,0x00,0x64,0xa2,0xdb,0x0b,0x00,0x00,0x60,0x10,0x64,0xa0,0x80,0x9c,0x84,
-0x49,0x03,0xa0,0x84,0xa2,0xdb,0x62,0x60,0x48,0x62,0x0a,0x64,0xa2,0xdb,0x5e,0xf3,
-0xff,0xff,0x01,0xb0,0xff,0xff,0x14,0x03,0x1e,0x60,0xd0,0x62,0xa2,0xd1,0x00,0x60,
-0x04,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x1e,0x60,0xe4,0x62,0x08,0x60,
-0x00,0x64,0xa2,0xdb,0x4e,0x60,0x1a,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,
-0x1e,0x60,0xe2,0x62,0x00,0x64,0xa2,0xdb,0x5a,0xdb,0x00,0x64,0x5d,0xfb,0x1e,0x60,
-0xb2,0x62,0xa2,0xd1,0x62,0x60,0x52,0x62,0xa2,0xd9,0x1e,0x60,0xb4,0x62,0xa2,0xd1,
-0x62,0x60,0x54,0x62,0xa2,0xd9,0x4e,0x60,0x58,0x4e,0x58,0x78,0xff,0xff,0x02,0x64,
-0x8c,0xfb,0xff,0xff,0xc1,0xfe,0x02,0x65,0x3d,0x60,0x58,0x4e,0x32,0x78,0xff,0xff,
-0x67,0x60,0x42,0x65,0x64,0x60,0xd8,0x62,0x00,0x64,0xa2,0xdb,0xa5,0xdb,0x44,0x60,
-0x88,0x78,0xff,0xff,0x00,0x60,0x20,0x64,0xa0,0x80,0x9c,0x84,0x0a,0x03,0xa0,0x84,
-0xa2,0xdb,0x00,0x63,0x5d,0xfd,0x1e,0x60,0xe2,0x62,0x00,0x64,0xa2,0xdb,0x5a,0xdb,
-0x1b,0x00,0x4d,0x60,0xd9,0x78,0xff,0xff,0x2f,0x58,0xff,0xff,0x3c,0x60,0xd2,0x62,
-0x28,0x60,0x9a,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x00,0x64,
-0x5d,0xfb,0x1e,0x60,0xe2,0x62,0x00,0x64,0xa2,0xdb,0x5a,0xdb,0x01,0x64,0x8c,0xfb,
-0xff,0xff,0xc1,0xfe,0x2e,0x58,0xff,0xff,0x02,0x64,0x8c,0xfb,0x47,0xf3,0x46,0xfb,
-0x00,0x60,0xfe,0x65,0x00,0x60,0xfc,0x63,0xa5,0xd3,0xa3,0xdb,0xa7,0xf1,0x28,0x60,
-0x9e,0x62,0xa2,0xd9,0x8c,0xf3,0x00,0x65,0xd4,0x80,0xff,0xff,0x0c,0x03,0x1e,0x60,
-0xe4,0x62,0x80,0x60,0x00,0x64,0xa2,0xdb,0x4e,0x60,0x7c,0x64,0x5a,0xdb,0xcf,0xfe,
-0xc1,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,0xe2,0x62,0x00,0x64,0xa2,0xdb,0x5a,0xdb,
-0x00,0x60,0xb8,0x63,0x27,0x60,0xfe,0x64,0xa3,0xdb,0x64,0x60,0xda,0x62,0x00,0x64,
-0xa2,0xdb,0x62,0x60,0x3c,0x63,0xbd,0xd3,0xbd,0xd1,0xff,0xff,0xb0,0x84,0xa3,0xd1,
-0xff,0xff,0xb0,0x83,0x62,0x60,0x3a,0x62,0xa2,0xdd,0x00,0x60,0xb8,0x63,0x01,0x60,
-0x10,0x65,0xa3,0xd3,0xff,0xff,0x02,0xa4,0xa0,0xd1,0xff,0xff,0x64,0x41,0xa5,0xd1,
-0x02,0xa4,0xa3,0xdb,0xd0,0x80,0xa0,0xd3,0x49,0x07,0x40,0x47,0xc4,0xf1,0x58,0xf3,
-0xff,0xff,0xc0,0x85,0xd5,0x80,0x60,0x45,0x0e,0x05,0x62,0x60,0x48,0x62,0xa2,0xd3,
-0x1f,0xf1,0xfc,0xa0,0x65,0x44,0x3a,0x02,0x64,0x40,0x10,0x2a,0x37,0x00,0x03,0xa5,
-0xd5,0x80,0x34,0x04,0x07,0x00,0x62,0x60,0x48,0x62,0xa2,0xd3,0xff,0xff,0xfc,0xa0,
-0xff,0xff,0x13,0x02,0x67,0x60,0x3e,0x62,0xa2,0xd1,0x27,0x44,0x3e,0xa4,0xa0,0xd3,
-0xff,0xff,0x60,0x41,0x02,0xa4,0xd0,0x80,0xff,0xff,0xc7,0x07,0xe1,0x85,0xc5,0x85,
-0x64,0x44,0xe0,0x84,0xd4,0x80,0xff,0xff,0xc0,0x04,0x52,0x60,0x58,0x4e,0x0c,0x78,
-0xff,0xff,0xbb,0x02,0x27,0x44,0x06,0xa4,0x60,0x41,0xa1,0xd1,0x81,0xf3,0xff,0xff,
-0xd0,0x80,0x82,0xf1,0x59,0xd3,0x68,0x02,0xd0,0x80,0x83,0xf3,0x59,0xd1,0x64,0x02,
-0xd0,0x80,0xff,0xff,0x61,0x02,0x4e,0x60,0xa7,0x78,0xff,0xff,0x1e,0x60,0xe2,0x62,
-0x00,0x64,0xa2,0xdb,0xde,0xfe,0xff,0xff,0x0b,0x04,0x1e,0x60,0xe4,0x62,0x40,0x60,
-0x00,0x64,0xa2,0xdb,0x4f,0x60,0x00,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,
-0x46,0xf3,0x47,0xfb,0x00,0x60,0xfc,0x63,0xa3,0xd1,0x3c,0x60,0xc2,0x62,0xa2,0xd9,
-0xca,0x82,0x1e,0x64,0xa2,0xdb,0xff,0xff,0x2d,0xff,0x1e,0x60,0xe4,0x62,0x20,0x60,
-0x00,0x64,0xa2,0xdb,0x4f,0x60,0x2a,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,
-0x1e,0x60,0xe2,0x62,0x00,0x64,0xa2,0xdb,0xbe,0xfe,0x1e,0x60,0xc8,0x62,0xa2,0xd1,
-0x40,0x60,0x00,0x64,0xb0,0x84,0xa2,0xdb,0xcf,0xfe,0x64,0x60,0xda,0x62,0xa2,0xd3,
-0xff,0xff,0xff,0xa0,0xff,0xff,0x10,0x02,0x3c,0x60,0x48,0x62,0xa2,0xd3,0xff,0xff,
-0x00,0xa8,0x60,0x46,0x09,0x02,0x1e,0x60,0xfa,0x62,0xa2,0xd1,0x00,0x60,0x08,0x64,
-0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x01,0x63,0x8c,0xfd,0xff,0xff,0xc1,0xfe,
-0x1e,0x60,0xd0,0x62,0xa2,0xd1,0x00,0x60,0x02,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,
-0xcf,0xfe,0x4d,0x60,0xce,0x78,0xff,0xff,0x27,0x43,0x3c,0xa3,0xa3,0xd1,0xc9,0xf3,
-0xff,0xff,0xa0,0x84,0xd0,0x80,0xff,0xff,0x03,0x03,0x4e,0x60,0xa7,0x78,0xff,0xff,
-0x27,0x43,0x40,0xa3,0xa3,0xd3,0xff,0xff,0x01,0xa0,0x60,0x41,0x05,0x02,0x3e,0x60,
-0x58,0x4e,0xae,0x78,0xff,0xff,0x0d,0x00,0x17,0x60,0x64,0x62,0xa2,0xd3,0xff,0xff,
-0x60,0x45,0xd5,0x84,0x60,0x45,0x01,0x0d,0x00,0x65,0x3e,0x60,0x58,0x4e,0xd6,0x78,
-0xff,0xff,0x1e,0x60,0xe2,0x62,0x00,0x64,0xa2,0xdb,0xde,0xfe,0xff,0xff,0x0b,0x04,
-0x1e,0x60,0xe4,0x62,0x40,0x60,0x00,0x64,0xa2,0xdb,0x4f,0x60,0x6a,0x64,0x5a,0xdb,
-0xcf,0xfe,0x2f,0x58,0xff,0xff,0x27,0xd1,0x3c,0x60,0xc2,0x62,0xa2,0xd9,0xca,0x82,
-0x1e,0x64,0xa2,0xdb,0xff,0xff,0x2d,0xff,0x1e,0x60,0xe4,0x62,0x20,0x60,0x00,0x64,
-0xa2,0xdb,0x4f,0x60,0xa9,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,
-0xe2,0x62,0x00,0x64,0xa2,0xdb,0xbe,0xfe,0x1e,0x60,0xc8,0x62,0xa2,0xd1,0x40,0x60,
-0x00,0x64,0xb0,0x84,0xa2,0xdb,0xcf,0xfe,0x79,0xf5,0x51,0x60,0x58,0x4e,0x23,0x78,
-0xff,0xff,0x00,0x60,0x20,0x64,0x29,0xfa,0x51,0x60,0x58,0x4e,0x9e,0x78,0xff,0xff,
-0x51,0x60,0x58,0x4e,0xad,0x78,0xff,0xff,0x00,0xf4,0x04,0x61,0x47,0xf1,0x01,0x64,
-0xb0,0x84,0xa1,0xda,0x0f,0x64,0x59,0xda,0x81,0xf1,0xff,0xff,0x59,0xd8,0x82,0xf1,
-0x59,0xd8,0xff,0xff,0x83,0xf1,0x59,0xd8,0x50,0x60,0x58,0x4e,0xea,0x78,0xff,0xff,
-0x79,0xf5,0x2d,0x44,0x0e,0xa4,0x38,0xfa,0x00,0x64,0x22,0xfa,0x3a,0x60,0x58,0x4e,
-0x14,0x78,0xff,0xff,0x3c,0x60,0xa2,0x62,0x3c,0x60,0x4e,0x64,0xa2,0xdb,0x66,0x44,
-0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xc1,0xfe,0x14,0x64,0x5d,0xfb,
-0x3c,0x60,0xd2,0x62,0x28,0x60,0x9a,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,
-0x1d,0xff,0x1e,0x60,0xe4,0x62,0x00,0x60,0x1c,0x64,0xa2,0xdb,0x50,0x60,0x06,0x64,
-0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,0xe2,0x62,0xa2,0xd1,0x00,0x60,
-0x04,0x64,0xa0,0x80,0x9c,0x84,0x14,0x03,0xa0,0x84,0xa2,0xdb,0x00,0x64,0x5d,0xfb,
-0x1e,0x60,0xe2,0x62,0x00,0x64,0xa2,0xdb,0x5a,0xdb,0x51,0x60,0x58,0x4e,0xbc,0x78,
-0xff,0xff,0x64,0x60,0xda,0x62,0x01,0x64,0xa2,0xdb,0x4e,0x60,0xa7,0x78,0xff,0xff,
-0x00,0x60,0x10,0x64,0xa0,0x80,0x9c,0x84,0x15,0x03,0xa0,0x84,0xa2,0xdb,0x3c,0x60,
-0xd2,0x62,0x28,0x60,0x9a,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,
-0x00,0x64,0x5d,0xfb,0x1e,0x60,0xe2,0x62,0x00,0x64,0xa2,0xdb,0x5a,0xdb,0x50,0x60,
-0xa8,0x78,0xff,0xff,0x00,0x60,0x08,0x64,0xa0,0x80,0x9c,0x84,0x22,0x03,0xa0,0x84,
-0xa2,0xdb,0x3c,0x60,0xd2,0x62,0x28,0x60,0x9a,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,
-0xff,0xff,0x1d,0xff,0x00,0x64,0x5d,0xfb,0x1e,0x60,0xe2,0x62,0x00,0x64,0xa2,0xdb,
-0x5a,0xdb,0x26,0x46,0x00,0xf4,0xff,0xff,0x03,0xf2,0xff,0xff,0x00,0xb8,0xff,0xff,
-0x09,0x03,0x26,0x46,0x3e,0x60,0x58,0x4e,0x91,0x78,0xff,0xff,0x4e,0x60,0xa7,0x78,
-0xff,0xff,0xa0,0x00,0x1e,0x60,0xfa,0x62,0xa2,0xd1,0x00,0x60,0x08,0x64,0xb0,0x84,
-0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x51,0x60,0x58,0x4e,0x38,0x78,0xff,0xff,0x51,0x60,
-0x58,0x4e,0x4f,0x78,0xff,0xff,0x5b,0x60,0x58,0x4e,0x3a,0x78,0xff,0xff,0x52,0x60,
-0x58,0x4e,0x43,0x78,0xff,0xff,0x51,0x60,0x58,0x4e,0xcf,0x78,0xff,0xff,0x26,0x46,
-0x3e,0x60,0x58,0x4e,0x91,0x78,0xff,0xff,0x03,0x65,0x3d,0x60,0x58,0x4e,0x32,0x78,
-0xff,0xff,0x52,0x60,0x58,0x4e,0x68,0x78,0xff,0xff,0x01,0x63,0x8c,0xfd,0xff,0xff,
-0xc1,0xfe,0x1e,0x60,0xd0,0x62,0xa2,0xd1,0x00,0x60,0x02,0x64,0xb0,0x84,0xa2,0xdb,
-0xff,0xff,0xcf,0xfe,0x1e,0x60,0xf4,0x62,0xa2,0xd1,0x00,0x60,0x80,0x64,0xb0,0x84,
-0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x4d,0x60,0xce,0x78,0xff,0xff,0x20,0x44,0xf7,0xb4,
-0x40,0x40,0x4b,0x60,0x4f,0x78,0xff,0xff,0x5d,0xf1,0x29,0xf2,0x64,0x41,0x60,0x40,
-0xa0,0x3a,0x0d,0x00,0x08,0xb1,0xff,0xff,0x31,0x03,0x1e,0x60,0xe2,0x62,0xa2,0xd1,
-0x00,0x60,0x10,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x27,0x00,0xc0,0x3a,
-0x0d,0x00,0x04,0xb1,0xff,0xff,0x22,0x03,0x1e,0x60,0xe2,0x62,0xa2,0xd1,0x00,0x60,
-0x10,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x18,0x00,0xb0,0x3a,0x02,0x00,
-0x01,0x65,0x07,0x00,0x10,0x3a,0x02,0x00,0x02,0x65,0x03,0x00,0x30,0x3a,0x0e,0x00,
-0x10,0x65,0xa5,0x80,0xff,0xff,0x0a,0x03,0x1e,0x60,0xe2,0x62,0xa2,0xd1,0x00,0x60,
-0x08,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x00,0x66,0x2f,0x58,0xff,0xff,
-0x27,0x43,0x12,0xa3,0xbf,0xd1,0xff,0xff,0x64,0x47,0x59,0xda,0x64,0x41,0xdd,0x81,
-0xe9,0x81,0x62,0x44,0x04,0x03,0xbd,0xd1,0xcd,0x81,0x58,0xd8,0xfc,0x02,0x58,0x8d,
-0x17,0x60,0xf0,0x63,0xa3,0xd1,0x2d,0x44,0xc8,0x84,0x64,0x45,0x64,0x41,0x03,0xa1,
-0xe9,0x81,0x41,0x4c,0xbd,0xd1,0xcd,0x81,0x58,0xd8,0xfc,0x02,0x2d,0xd2,0x2d,0x43,
-0x60,0x47,0x01,0x7e,0xa3,0xda,0x27,0x44,0x10,0xa4,0xa0,0xd3,0xcb,0x83,0x44,0x8d,
-0xf8,0x84,0x2c,0x41,0x0c,0x04,0xbe,0xd2,0xff,0xff,0x60,0x47,0xbe,0xda,0x00,0x7e,
-0xa3,0xd2,0x60,0x45,0x00,0x7f,0xb4,0x84,0xcd,0x81,0xbd,0xda,0xf4,0x02,0x2e,0x58,
-0xff,0xff,0x67,0x60,0xc2,0x62,0xa2,0xd3,0xff,0xff,0xff,0xff,0x01,0x2a,0x02,0x00,
+0x58,0x4e,0xa2,0x78,0xff,0xff,0x4c,0x60,0xd0,0x78,0xff,0xff,0x00,0x60,0x10,0x64,
+0xa0,0x80,0x9c,0x84,0x1a,0x03,0xa0,0x84,0xa2,0xdb,0x3f,0x60,0x9a,0x62,0x2b,0x60,
+0x62,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x26,0x46,0x3e,0x60,
+0x58,0x4e,0xa2,0x78,0xff,0xff,0x00,0x64,0x51,0xfb,0x21,0x60,0xaa,0x62,0x00,0x64,
+0xa2,0xdb,0x5a,0xdb,0x4d,0x60,0x49,0x78,0xff,0xff,0x00,0x60,0x04,0x64,0xa0,0x80,
+0x9c,0x84,0x10,0x03,0xa0,0x84,0xa2,0xdb,0x00,0x64,0x51,0xfb,0x21,0x60,0xaa,0x62,
+0x00,0x64,0xa2,0xdb,0x5a,0xdb,0x52,0x60,0x58,0x4e,0xeb,0x78,0xff,0xff,0x4c,0x60,
+0xd0,0x78,0xff,0xff,0xa0,0x00,0x53,0x60,0x58,0x4e,0xab,0x78,0xff,0xff,0x21,0x60,
+0xc2,0x62,0xa2,0xd1,0x00,0x60,0x08,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,
+0x52,0x60,0x58,0x4e,0x67,0x78,0xff,0xff,0x52,0x60,0x58,0x4e,0x7e,0x78,0xff,0xff,
+0x5f,0x60,0x58,0x4e,0xbe,0x78,0xff,0xff,0x53,0x60,0x58,0x4e,0x75,0x78,0xff,0xff,
+0x52,0x60,0x58,0x4e,0xfe,0x78,0xff,0xff,0x27,0x43,0x11,0x61,0x10,0x65,0xc7,0x83,
+0x62,0x60,0x90,0x64,0xbd,0xd1,0xcd,0x81,0x58,0xd9,0xfc,0x02,0x26,0x46,0x3e,0x60,
+0x58,0x4e,0xa2,0x78,0xff,0xff,0x01,0x64,0x80,0xfb,0xff,0xff,0xc1,0xfe,0x01,0x64,
+0x84,0xfb,0x01,0x67,0x79,0xfb,0x04,0x64,0xbd,0xfb,0x01,0x65,0x3d,0x60,0x58,0x4e,
+0x39,0x78,0xff,0xff,0x53,0x60,0x58,0x4e,0x9a,0x78,0xff,0xff,0x21,0x60,0x98,0x62,
+0xa2,0xd1,0x00,0x60,0x02,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x21,0x60,
+0xbc,0x62,0xa2,0xd1,0x00,0x60,0x80,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,
+0x0c,0x64,0x51,0xfb,0x21,0x60,0xac,0x62,0x00,0x60,0xf0,0x64,0xa2,0xdb,0x4e,0x60,
+0x56,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,0xaa,0x62,0xa2,0xd1,
+0x00,0x60,0x80,0x64,0xa0,0x80,0x9c,0x84,0x07,0x03,0xa0,0x84,0xa2,0xdb,0x64,0x60,
+0xe4,0x62,0x0e,0x64,0xa2,0xdb,0x17,0x00,0x00,0x60,0x40,0x64,0xa0,0x80,0x9c,0x84,
+0x07,0x03,0xa0,0x84,0xa2,0xdb,0x64,0x60,0xe4,0x62,0x00,0x64,0xa2,0xdb,0x0b,0x00,
+0x00,0x60,0x10,0x64,0xa0,0x80,0x9c,0x84,0x5a,0x03,0xa0,0x84,0xa2,0xdb,0x64,0x60,
+0xe4,0x62,0x0a,0x64,0xa2,0xdb,0x52,0xf3,0xff,0xff,0x01,0xb0,0xff,0xff,0x14,0x03,
+0x21,0x60,0x98,0x62,0xa2,0xd1,0x00,0x60,0x04,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,
+0xcf,0xfe,0x21,0x60,0xac,0x62,0x08,0x60,0x00,0x64,0xa2,0xdb,0x4e,0x60,0x95,0x64,
+0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,0xaa,0x62,0x00,0x64,0xa2,0xdb,
+0x5a,0xdb,0x00,0x64,0x51,0xfb,0x21,0x60,0x7a,0x62,0xa2,0xd1,0x64,0x60,0xee,0x62,
+0xa2,0xd9,0x21,0x60,0x7c,0x62,0xa2,0xd1,0x64,0x60,0xf0,0x62,0xa2,0xd9,0x4e,0x60,
+0x58,0x4e,0xe4,0x78,0xff,0xff,0x02,0x64,0x80,0xfb,0xff,0xff,0xc1,0xfe,0x64,0x60,
+0xe4,0x62,0xa2,0xd1,0x80,0x60,0xe6,0x62,0xa2,0xd9,0x64,0x40,0x0a,0x36,0x04,0x00,
+0x06,0xa2,0x00,0x64,0xa2,0xdb,0x5a,0xdb,0x6a,0x60,0x1c,0x62,0x00,0x64,0xa2,0xdb,
+0x02,0x65,0x3d,0x60,0x58,0x4e,0x39,0x78,0xff,0xff,0x6a,0x60,0x1e,0x65,0x67,0x60,
+0x74,0x62,0x00,0x64,0xa2,0xdb,0xa5,0xdb,0x44,0x60,0xb0,0x78,0xff,0xff,0x00,0x60,
+0x20,0x64,0xa0,0x80,0x9c,0x84,0x0a,0x03,0xa0,0x84,0xa2,0xdb,0x00,0x63,0x51,0xfd,
+0x21,0x60,0xaa,0x62,0x00,0x64,0xa2,0xdb,0x5a,0xdb,0x1b,0x00,0x4e,0x60,0x54,0x78,
+0xff,0xff,0x2f,0x58,0xff,0xff,0x3f,0x60,0x9a,0x62,0x2b,0x60,0x62,0x64,0xa2,0xdb,
+0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x00,0x64,0x51,0xfb,0x21,0x60,0xaa,0x62,
+0x00,0x64,0xa2,0xdb,0x5a,0xdb,0x01,0x64,0x80,0xfb,0xff,0xff,0xc1,0xfe,0x2e,0x58,
+0xff,0xff,0x02,0x64,0x80,0xfb,0x3a,0xf3,0x39,0xfb,0x00,0x60,0xe6,0x65,0x00,0x60,
+0xe4,0x63,0xa5,0xd3,0xa3,0xdb,0x9d,0xf1,0x2b,0x60,0x66,0x62,0xa2,0xd9,0x80,0xf3,
+0x00,0x65,0xd4,0x80,0xff,0xff,0x0c,0x03,0x21,0x60,0xac,0x62,0x80,0x60,0x00,0x64,
+0xa2,0xdb,0x4f,0x60,0x08,0x64,0x5a,0xdb,0xcf,0xfe,0xc1,0xfe,0x2f,0x58,0xff,0xff,
+0x21,0x60,0xaa,0x62,0x00,0x64,0xa2,0xdb,0x5a,0xdb,0x00,0x60,0xa0,0x63,0x2a,0x60,
+0xc6,0x64,0xa3,0xdb,0x67,0x60,0x76,0x62,0x00,0x64,0xa2,0xdb,0x64,0x60,0xd8,0x63,
+0xbd,0xd3,0xbd,0xd1,0xff,0xff,0xb0,0x84,0xa3,0xd1,0xff,0xff,0xb0,0x83,0x64,0x60,
+0xd6,0x62,0xa2,0xdd,0x00,0x60,0xa0,0x63,0x00,0x60,0xf8,0x65,0xa3,0xd3,0xff,0xff,
+0x02,0xa4,0xa0,0xd1,0xff,0xff,0x64,0x41,0xa5,0xd1,0x02,0xa4,0xa3,0xdb,0xd0,0x80,
+0xa0,0xd3,0x49,0x07,0x40,0x47,0xb7,0xf1,0x4c,0xf3,0xff,0xff,0xc0,0x85,0xd5,0x80,
+0x60,0x45,0x0e,0x05,0x64,0x60,0xe4,0x62,0xa2,0xd3,0x1e,0xf1,0xfc,0xa0,0x65,0x44,
+0x3a,0x02,0x64,0x40,0x10,0x2a,0x37,0x00,0x03,0xa5,0xd5,0x80,0x34,0x04,0x07,0x00,
+0x64,0x60,0xe4,0x62,0xa2,0xd3,0xff,0xff,0xfc,0xa0,0xff,0xff,0x13,0x02,0x6a,0x60,
+0x18,0x62,0xa2,0xd1,0x27,0x44,0x3e,0xa4,0xa0,0xd3,0xff,0xff,0x60,0x41,0x02,0xa4,
+0xd0,0x80,0xff,0xff,0xc7,0x07,0xe1,0x85,0xc5,0x85,0x64,0x44,0xe0,0x84,0xd4,0x80,
+0xff,0xff,0xc0,0x04,0x53,0x60,0x58,0x4e,0x3e,0x78,0xff,0xff,0xbb,0x02,0x27,0x44,
+0x06,0xa4,0x60,0x41,0xa1,0xd1,0x75,0xf3,0xff,0xff,0xd0,0x80,0x76,0xf1,0x59,0xd3,
+0x68,0x02,0xd0,0x80,0x77,0xf3,0x59,0xd1,0x64,0x02,0xd0,0x80,0xff,0xff,0x61,0x02,
+0x4f,0x60,0x33,0x78,0xff,0xff,0x21,0x60,0xaa,0x62,0x00,0x64,0xa2,0xdb,0xde,0xfe,
+0xff,0xff,0x0b,0x04,0x21,0x60,0xac,0x62,0x40,0x60,0x00,0x64,0xa2,0xdb,0x4f,0x60,
+0x8c,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x39,0xf3,0x3a,0xfb,0x00,0x60,
+0xe4,0x63,0xa3,0xd1,0x3f,0x60,0x8a,0x62,0xa2,0xd9,0xca,0x82,0x1e,0x64,0xa2,0xdb,
+0xff,0xff,0x2d,0xff,0x21,0x60,0xac,0x62,0x20,0x60,0x00,0x64,0xa2,0xdb,0x4f,0x60,
+0xb6,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,0xaa,0x62,0x00,0x64,
+0xa2,0xdb,0xbe,0xfe,0x21,0x60,0x90,0x62,0xa2,0xd1,0x40,0x60,0x00,0x64,0xb0,0x84,
+0xa2,0xdb,0xcf,0xfe,0x67,0x60,0x76,0x62,0xa2,0xd3,0xff,0xff,0xff,0xa0,0xff,0xff,
+0x10,0x02,0x3f,0x60,0x10,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,0x09,0x02,
+0x21,0x60,0xc2,0x62,0xa2,0xd1,0x00,0x60,0x08,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,
+0xcf,0xfe,0x01,0x63,0x80,0xfd,0xff,0xff,0xc1,0xfe,0x21,0x60,0x98,0x62,0xa2,0xd1,
+0x00,0x60,0x02,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x4e,0x60,0x49,0x78,
+0xff,0xff,0x27,0x43,0x3c,0xa3,0xa3,0xd1,0xbb,0xf3,0xff,0xff,0xa0,0x84,0xd0,0x80,
+0xff,0xff,0x03,0x03,0x4f,0x60,0x33,0x78,0xff,0xff,0x27,0x43,0x40,0xa3,0xa3,0xd3,
+0xff,0xff,0x01,0xa0,0x60,0x41,0x05,0x02,0x3e,0x60,0x58,0x4e,0xbf,0x78,0xff,0xff,
+0x0d,0x00,0x17,0x60,0xdc,0x62,0xa2,0xd3,0xff,0xff,0x60,0x45,0xd5,0x84,0x60,0x45,
+0x01,0x0d,0x00,0x65,0x3e,0x60,0x58,0x4e,0xe7,0x78,0xff,0xff,0x21,0x60,0xaa,0x62,
+0x00,0x64,0xa2,0xdb,0xde,0xfe,0xff,0xff,0x0b,0x04,0x21,0x60,0xac,0x62,0x40,0x60,
+0x00,0x64,0xa2,0xdb,0x4f,0x60,0xf6,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,
+0x27,0x44,0xa0,0xd3,0xff,0xff,0x00,0x7f,0x60,0x5c,0x3f,0x60,0x8a,0x62,0xa2,0xd9,
+0xca,0x82,0x1e,0x64,0xa2,0xdb,0xff,0xff,0x2d,0xff,0x21,0x60,0xac,0x62,0x20,0x60,
+0x00,0x64,0xa2,0xdb,0x50,0x60,0x39,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,
+0x21,0x60,0xaa,0x62,0x00,0x64,0xa2,0xdb,0xbe,0xfe,0x21,0x60,0x90,0x62,0xa2,0xd1,
+0x40,0x60,0x00,0x64,0xb0,0x84,0xa2,0xdb,0xcf,0xfe,0x6d,0xf5,0x52,0x60,0x58,0x4e,
+0x52,0x78,0xff,0xff,0x00,0x60,0x20,0x64,0x29,0xfa,0x52,0x60,0x58,0x4e,0xcd,0x78,
+0xff,0xff,0x52,0x60,0x58,0x4e,0xdc,0x78,0xff,0xff,0x00,0xf4,0x04,0x61,0x3a,0xf1,
+0x01,0x64,0xb0,0x84,0xa1,0xda,0x0f,0x64,0x59,0xda,0x75,0xf1,0xff,0xff,0x59,0xd8,
+0x76,0xf1,0x59,0xd8,0xff,0xff,0x77,0xf1,0x59,0xd8,0x51,0x60,0x58,0x4e,0x9e,0x78,
+0xff,0xff,0x6d,0xf5,0x2d,0x44,0x0e,0xa4,0x38,0xfa,0x00,0x64,0x22,0xfa,0x39,0x60,
+0x58,0x4e,0xfe,0x78,0xff,0xff,0x3f,0x60,0x6a,0x62,0x3f,0x60,0x16,0x64,0xa2,0xdb,
+0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xc1,0xfe,0x14,0x64,
+0x51,0xfb,0x3f,0x60,0x9a,0x62,0x2b,0x60,0x62,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,
+0xff,0xff,0x1d,0xff,0x21,0x60,0xac,0x62,0x00,0x60,0x1c,0x64,0xa2,0xdb,0x50,0x60,
+0x96,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,0xaa,0x62,0xa2,0xd1,
+0x00,0x60,0x04,0x64,0xa0,0x80,0x9c,0x84,0x14,0x03,0xa0,0x84,0xa2,0xdb,0x00,0x64,
+0x51,0xfb,0x21,0x60,0xaa,0x62,0x00,0x64,0xa2,0xdb,0x5a,0xdb,0x52,0x60,0x58,0x4e,
+0xeb,0x78,0xff,0xff,0x67,0x60,0x76,0x62,0x01,0x64,0xa2,0xdb,0x4f,0x60,0x33,0x78,
+0xff,0xff,0x00,0x60,0x10,0x64,0xa0,0x80,0x9c,0x84,0x15,0x03,0xa0,0x84,0xa2,0xdb,
+0x3f,0x60,0x9a,0x62,0x2b,0x60,0x62,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,
+0x1d,0xff,0x00,0x64,0x51,0xfb,0x21,0x60,0xaa,0x62,0x00,0x64,0xa2,0xdb,0x5a,0xdb,
+0x51,0x60,0x4d,0x78,0xff,0xff,0x00,0x60,0x08,0x64,0xa0,0x80,0x9c,0x84,0x22,0x03,
+0xa0,0x84,0xa2,0xdb,0x3f,0x60,0x9a,0x62,0x2b,0x60,0x62,0x64,0xa2,0xdb,0x03,0x64,
+0x4a,0xdb,0xff,0xff,0x1d,0xff,0x00,0x64,0x51,0xfb,0x21,0x60,0xaa,0x62,0x00,0x64,
+0xa2,0xdb,0x5a,0xdb,0x26,0x46,0x00,0xf4,0xff,0xff,0x03,0xf2,0xff,0xff,0x00,0xb8,
+0xff,0xff,0x09,0x03,0x26,0x46,0x3e,0x60,0x58,0x4e,0xa2,0x78,0xff,0xff,0x4f,0x60,
+0x33,0x78,0xff,0xff,0xa0,0x00,0x53,0x60,0x58,0x4e,0xab,0x78,0xff,0xff,0x21,0x60,
+0xc2,0x62,0xa2,0xd1,0x00,0x60,0x08,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,
+0x52,0x60,0x58,0x4e,0x67,0x78,0xff,0xff,0x52,0x60,0x58,0x4e,0x7e,0x78,0xff,0xff,
+0x5f,0x60,0x58,0x4e,0xbe,0x78,0xff,0xff,0x53,0x60,0x58,0x4e,0x75,0x78,0xff,0xff,
+0x52,0x60,0x58,0x4e,0xfe,0x78,0xff,0xff,0x26,0x46,0x3e,0x60,0x58,0x4e,0xa2,0x78,
+0xff,0xff,0x18,0x60,0x0a,0x64,0xa0,0xd3,0xff,0xff,0x00,0xa0,0xff,0xff,0x0f,0x02,
+0x64,0x60,0xe4,0x62,0xa2,0xd1,0x80,0x60,0xe6,0x62,0xa2,0xd9,0x00,0x64,0x06,0xa2,
+0xa2,0xdb,0x5a,0xdb,0x03,0x65,0x3d,0x60,0x58,0x4e,0x39,0x78,0xff,0xff,0x53,0x60,
+0x58,0x4e,0x9a,0x78,0xff,0xff,0x01,0x63,0x80,0xfd,0xff,0xff,0xc1,0xfe,0x21,0x60,
+0x98,0x62,0xa2,0xd1,0x00,0x60,0x02,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,
+0x21,0x60,0xbc,0x62,0xa2,0xd1,0x00,0x60,0x80,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,
+0xcf,0xfe,0x4e,0x60,0x49,0x78,0xff,0xff,0xe9,0xf3,0xff,0xff,0xf7,0xb4,0xe9,0xfb,
+0x4b,0x60,0xb9,0x78,0xff,0xff,0x51,0xf1,0x29,0xf2,0x64,0x41,0x60,0x40,0xa0,0x3a,
+0x14,0x00,0x08,0xb1,0xff,0xff,0x3f,0x03,0x66,0x45,0x00,0xf4,0x80,0x60,0xee,0x64,
+0x02,0xf0,0xa0,0xd9,0x65,0x46,0x21,0x60,0xaa,0x62,0xa2,0xd1,0x00,0x60,0x10,0x64,
+0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x2e,0x00,0xc0,0x3a,0x14,0x00,0x04,0xb1,
+0xff,0xff,0x29,0x03,0x66,0x45,0x00,0xf4,0x80,0x60,0xec,0x64,0x02,0xf0,0xa0,0xd9,
+0x65,0x46,0x21,0x60,0xaa,0x62,0xa2,0xd1,0x00,0x60,0x10,0x64,0xb0,0x84,0xa2,0xdb,
+0xff,0xff,0xcf,0xfe,0x18,0x00,0xb0,0x3a,0x02,0x00,0x01,0x65,0x07,0x00,0x10,0x3a,
+0x02,0x00,0x02,0x65,0x03,0x00,0x30,0x3a,0x0e,0x00,0x10,0x65,0xa5,0x80,0xff,0xff,
+0x0a,0x03,0x21,0x60,0xaa,0x62,0xa2,0xd1,0x00,0x60,0x08,0x64,0xb0,0x84,0xa2,0xdb,
+0xff,0xff,0xcf,0xfe,0x00,0x66,0x2f,0x58,0xff,0xff,0x27,0x43,0x12,0xa3,0xbf,0xd1,
+0xff,0xff,0x64,0x47,0x59,0xda,0x64,0x41,0xdd,0x81,0xe9,0x81,0x62,0x44,0x04,0x03,
+0xbd,0xd1,0xcd,0x81,0x58,0xd8,0xfc,0x02,0x58,0x8d,0x18,0x60,0x68,0x63,0xa3,0xd1,
+0x2d,0x44,0xc8,0x84,0x64,0x45,0x64,0x41,0x03,0xa1,0xe9,0x81,0x41,0x4c,0xbd,0xd1,
+0xcd,0x81,0x58,0xd8,0xfc,0x02,0x2d,0x44,0xa0,0xd2,0x2d,0x43,0x60,0x47,0x01,0x7e,
+0xa3,0xda,0x2d,0x41,0x27,0x44,0x10,0xa4,0xa0,0xd3,0xcb,0x83,0xc5,0x81,0x02,0xa1,
+0x61,0x5c,0x44,0x8d,0xf8,0x84,0x2c,0x41,0x0f,0x04,0x64,0x44,0xff,0xa4,0x60,0x5c,
+0xbe,0xd2,0xff,0xff,0x60,0x47,0xbe,0xda,0x00,0x7e,0xa3,0xd2,0x60,0x45,0x00,0x7f,
+0xb4,0x84,0xcd,0x81,0xbd,0xda,0xf4,0x02,0xe1,0xf3,0x64,0x41,0x60,0x40,0x01,0x3a,
+0x24,0x00,0x64,0x44,0x07,0xa4,0x60,0x5c,0x01,0xa1,0x05,0x60,0xb0,0x64,0xa1,0xda,
+0xa0,0x60,0x00,0x64,0x59,0xda,0x01,0x60,0xf8,0x64,0x59,0xda,0x00,0xb4,0x59,0xda,
+0x2d,0x40,0x01,0x2a,0x0f,0x00,0xf8,0xa1,0x61,0x43,0x04,0x61,0xbe,0xd2,0xff,0xff,
+0x60,0x47,0xbe,0xda,0x00,0x7e,0xa3,0xd2,0x60,0x45,0x00,0x7f,0xb4,0x84,0xcd,0x81,
+0xbd,0xda,0xf4,0x02,0x2d,0x44,0x07,0xa4,0x40,0x4d,0x27,0x44,0x42,0xa4,0x64,0x41,
+0xa0,0xd1,0x01,0xa1,0x36,0xf3,0x64,0x40,0x01,0x2a,0x41,0x00,0x0f,0x3a,0x3f,0x00,
+0x34,0xf3,0xff,0xff,0x60,0x40,0x01,0x2a,0x3a,0x00,0x12,0x65,0xdd,0x64,0x65,0x5f,
+0xa1,0xda,0x50,0x60,0x00,0x64,0x59,0xda,0x01,0x60,0xf2,0x64,0x59,0xda,0x01,0x64,
+0x59,0xda,0x50,0x60,0x00,0x64,0x59,0xda,0x00,0x60,0xf2,0x64,0x59,0xda,0x00,0x64,
+0x59,0xda,0x01,0x64,0x59,0xda,0xa0,0x60,0x00,0x64,0x59,0xda,0xd6,0xf1,0x64,0x47,
+0xfe,0xb4,0x64,0x40,0x01,0x26,0x01,0xbc,0x60,0x47,0xf8,0x7e,0x59,0xda,0x65,0x44,
+0x02,0xa5,0x2d,0x40,0x01,0x2a,0x10,0x00,0xd5,0x81,0x61,0x43,0x65,0x41,0xe9,0x81,
+0xbe,0xd2,0xff,0xff,0x60,0x47,0xbe,0xda,0x00,0x7e,0xa3,0xd2,0x60,0x5c,0x00,0x7f,
+0xb0,0x84,0xcd,0x81,0xbd,0xda,0xf4,0x02,0x2d,0x44,0xc4,0x84,0x40,0x4d,0x2e,0x58,
+0xff,0xff,0x6a,0x60,0x9a,0x62,0xa2,0xd3,0xff,0xff,0xff,0xff,0x01,0x2a,0x02,0x00,
 0x00,0x64,0x09,0x00,0x02,0x2a,0x02,0x00,0x01,0x64,0x05,0x00,0x04,0x2a,0x02,0x00,
 0x02,0x64,0x01,0x00,0x03,0x64,0x13,0xfa,0x2e,0x58,0xff,0xff,0xff,0x60,0xff,0x65,
-0x67,0x60,0x3e,0x63,0x27,0x42,0x3e,0xa2,0xa2,0xd3,0x7f,0x7c,0xa3,0xdb,0xd4,0x80,
-0x01,0x61,0x02,0x02,0x00,0x61,0x65,0x5c,0x67,0x60,0x40,0x62,0x61,0x44,0xa2,0xdb,
-0x67,0x60,0x3c,0x62,0xa2,0xd9,0x2e,0x58,0xff,0xff,0x27,0x42,0x32,0xa2,0x00,0x61,
+0x6a,0x60,0x18,0x63,0x27,0x42,0x3e,0xa2,0xa2,0xd3,0x7f,0x7c,0xa3,0xdb,0xd4,0x80,
+0x01,0x61,0x02,0x02,0x00,0x61,0x65,0x5c,0x6a,0x60,0x1a,0x62,0x61,0x44,0xa2,0xdb,
+0x6a,0x60,0x16,0x62,0xa2,0xd9,0x2e,0x58,0xff,0xff,0x27,0x42,0x32,0xa2,0x00,0x61,
 0x00,0x63,0xa2,0xd3,0xff,0xff,0x00,0xbc,0xe0,0x84,0x24,0x03,0x04,0x3a,0x02,0x00,
 0x01,0xb9,0x1e,0x00,0x08,0x3a,0x0a,0x00,0x02,0xb9,0x60,0x40,0x01,0x2b,0x18,0x00,
 0x01,0x65,0xd7,0x80,0xff,0xff,0x14,0x05,0x01,0x63,0x12,0x00,0x16,0x3a,0x0a,0x00,
 0x04,0xb9,0x60,0x40,0x01,0x2b,0x0c,0x00,0x02,0x65,0xd7,0x80,0xff,0xff,0x08,0x05,
 0x02,0x63,0x06,0x00,0x2c,0x3a,0x04,0x00,0x08,0xb9,0x60,0x40,0x01,0x27,0x03,0x63,
-0x02,0xa2,0xd7,0x00,0x59,0x60,0xe8,0x62,0xa2,0xdd,0xc9,0xf1,0x59,0x60,0xea,0x63,
+0x02,0xa2,0xd7,0x00,0x62,0x60,0xda,0x62,0xa2,0xdd,0xbb,0xf1,0x62,0x60,0xdc,0x63,
 0xa1,0x84,0xa3,0xdb,0x60,0x40,0x08,0x2a,0x03,0x00,0x03,0x63,0x08,0x64,0x0c,0x00,
 0x04,0x2a,0x03,0x00,0x02,0x63,0x04,0x64,0x07,0x00,0x02,0x2a,0x03,0x00,0x01,0x63,
-0x02,0x64,0x02,0x00,0x00,0x63,0x01,0x64,0x50,0xfb,0x51,0xf1,0x62,0x60,0x50,0x62,
-0xa2,0xd9,0x51,0xfd,0x2e,0x58,0xff,0xff,0x27,0x43,0x06,0xa3,0xbd,0xd1,0x2b,0xf8,
+0x02,0x64,0x02,0x00,0x00,0x63,0x01,0x64,0x43,0xfb,0x44,0xf1,0x64,0x60,0xec,0x62,
+0xa2,0xd9,0x44,0xfd,0x2e,0x58,0xff,0xff,0x27,0x43,0x06,0xa3,0xbd,0xd1,0x2b,0xf8,
 0x31,0xf8,0xff,0xff,0xbd,0xd1,0x2c,0xf8,0x32,0xf8,0xff,0xff,0xa3,0xd1,0x2d,0xf8,
-0x33,0xf8,0x2e,0x58,0xff,0xff,0xbd,0xf1,0xff,0xff,0x2e,0xf8,0xbe,0xf1,0x2f,0xf8,
-0xff,0xff,0xbf,0xf1,0x30,0xf8,0xf0,0x60,0x20,0x64,0x0e,0xfa,0x08,0x64,0x28,0xfa,
-0x2e,0x58,0xff,0xff,0x67,0x60,0xe0,0x62,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xff,0xff,
-0xa2,0xdb,0x28,0x60,0x80,0x62,0x01,0x64,0xa2,0xdb,0xff,0xff,0xc0,0xfe,0x28,0x60,
-0x80,0x62,0x00,0x64,0xa2,0xdb,0x2e,0x58,0xff,0xff,0x27,0x43,0x02,0x65,0xc7,0x85,
-0xa5,0xd3,0xff,0xff,0x60,0x47,0x5a,0xfb,0x04,0x65,0xc7,0x85,0xa5,0xd3,0xff,0xff,
-0x60,0x47,0x59,0xfb,0x0c,0x65,0xc7,0x85,0xa5,0xd3,0x80,0xfb,0xf1,0xa4,0xab,0xfb,
-0xab,0xf1,0x28,0x60,0xf2,0x62,0xa2,0xd9,0x3c,0x60,0xf2,0x65,0x04,0xf0,0x3f,0x60,
-0xff,0x64,0x84,0xf9,0xa0,0x84,0x60,0x41,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xa5,0xdb,
-0x3c,0x60,0xf0,0x65,0x01,0x64,0x07,0xb1,0x03,0x00,0xe0,0x84,0xcd,0x81,0xff,0xff,
-0xfc,0x02,0xa5,0xdb,0x62,0x60,0x4a,0x63,0x26,0x46,0x31,0xf0,0x81,0xf9,0xbd,0xd9,
-0xff,0xff,0x32,0xf0,0x82,0xf9,0xbd,0xd9,0xff,0xff,0x33,0xf0,0x83,0xf9,0xa3,0xd9,
-0x2e,0x58,0xff,0xff,0x27,0x44,0x0e,0xa4,0xa0,0xd3,0xff,0xff,0x60,0x41,0xe8,0x84,
-0xe8,0x84,0xe8,0x84,0x43,0xf3,0xe8,0x85,0x94,0x84,0x01,0x26,0x26,0x00,0xc5,0xf1,
-0x1f,0xf3,0x91,0x80,0x20,0x2a,0x05,0x00,0x60,0x40,0x10,0x2a,0x1e,0x00,0x20,0xb1,
-0x61,0x5c,0x47,0xf9,0x62,0x60,0x3a,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0xff,0xff,
-0x12,0x03,0x50,0xfe,0x27,0x41,0x06,0xa1,0x62,0x60,0x3c,0x63,0xa1,0xd3,0xbd,0xd1,
-0x59,0xd3,0xd0,0x80,0xbd,0xd1,0x59,0xd3,0xd0,0x80,0xbd,0xd1,0xff,0xff,0xd0,0x80,
-0xff,0xff,0x01,0x01,0x02,0x00,0x00,0x64,0x01,0x00,0x01,0x64,0x00,0xbc,0x2e,0x58,
-0xff,0xff,0x67,0x60,0x7a,0x63,0x00,0x64,0xbd,0xdb,0x01,0x64,0xbd,0xdb,0xa3,0xdb,
-0x27,0x44,0x02,0xa4,0xa0,0xd1,0x27,0x44,0x04,0xa4,0xa0,0xd3,0xff,0xff,0xd0,0x81,
-0xff,0xff,0x01,0x05,0x00,0x61,0x67,0x60,0x72,0x63,0x61,0x44,0xbd,0xdb,0xa3,0xdb,
-0x67,0x60,0x76,0x62,0xa2,0xd1,0xff,0xff,0xd1,0x81,0xff,0xff,0x01,0x05,0x00,0x61,
-0x67,0x60,0x78,0x62,0x61,0x44,0xa2,0xdb,0x2e,0x58,0xff,0xff,0x5a,0x60,0x1c,0x62,
-0x66,0x60,0xaa,0x63,0x00,0x64,0xa2,0xdb,0xbd,0xdb,0xff,0xff,0xbd,0xdb,0xbd,0xdb,
-0xbd,0xdb,0x67,0x60,0xfc,0x62,0x00,0x64,0xa2,0xdb,0x2e,0x58,0xff,0xff,0x00,0x64,
-0x5d,0xfb,0x3c,0x60,0xd0,0x63,0x21,0x44,0xbd,0xdb,0xff,0xff,0x1d,0xff,0x01,0x64,
-0xcb,0xfb,0x1e,0x60,0xe2,0x62,0x00,0x64,0xa2,0xdb,0x5a,0xdb,0x00,0x60,0x2a,0x63,
-0x0c,0x60,0x40,0x61,0x0e,0x60,0x7e,0x64,0x58,0xd1,0x59,0xd9,0xfd,0x1f,0x2f,0x58,
-0xff,0xff,0x1e,0x60,0xe2,0x62,0xa2,0xd1,0x00,0x60,0x04,0x64,0xb0,0x84,0xa2,0xdb,
-0xff,0xff,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x7a,0xf5,0xbd,0xf1,0x2e,0xf8,0xff,0xff,
-0xbe,0xf1,0x2f,0xf8,0xbf,0xf1,0xff,0xff,0x30,0xf8,0x7f,0xf3,0x00,0x65,0x7e,0xfb,
-0xe1,0xf3,0x14,0x7c,0x00,0xa0,0x0f,0x64,0x0f,0x02,0xcb,0xf3,0x14,0x7c,0xfc,0xa0,
-0x0f,0x64,0x0a,0x03,0xd5,0xf3,0x28,0x7c,0xfd,0xa0,0x60,0x45,0x2d,0x64,0x04,0x04,
-0x01,0x60,0x86,0x64,0x01,0x03,0x78,0x64,0xaf,0xf9,0xb1,0xfb,0x1e,0x60,0xdc,0x62,
-0x00,0x64,0xa2,0xdb,0x20,0x44,0x03,0x26,0x07,0x00,0x00,0x64,0x8a,0xfb,0x28,0x60,
-0x00,0x64,0x88,0xfb,0x89,0xfb,0x0a,0x00,0x40,0x2a,0x04,0x00,0x19,0x60,0x14,0x62,
-0xa2,0xd3,0xb1,0xfb,0x3d,0x60,0xcc,0x62,0x00,0x64,0xa2,0xdb,0x65,0x44,0xfd,0xa0,
-0xff,0xff,0x71,0x05,0x20,0x40,0x40,0x26,0x6e,0x00,0x10,0x60,0x00,0x65,0x85,0xf3,
-0x7a,0xf5,0xa4,0x84,0x40,0x7e,0x29,0xfa,0x17,0x60,0xfc,0x64,0xa0,0xd1,0x13,0xf8,
-0xff,0xff,0x5b,0xf3,0x00,0xf4,0x60,0x43,0xbd,0xd1,0x04,0x65,0x20,0x40,0x80,0x26,
-0x00,0x7c,0x64,0x47,0xa5,0xda,0x64,0x41,0xdd,0x81,0xe9,0x81,0x62,0x44,0x04,0x03,
-0xbd,0xd1,0xcd,0x81,0x58,0xd8,0xfc,0x02,0x58,0x8d,0x17,0x60,0xf0,0x63,0xa3,0xd1,
-0x2d,0x44,0xc8,0x84,0x64,0x45,0x64,0x41,0x03,0xa1,0xe9,0x81,0x41,0x4c,0xbd,0xd1,
-0xcd,0x81,0x58,0xd8,0xfc,0x02,0x2d,0xd2,0x2d,0x43,0x60,0x47,0x01,0x7e,0x5b,0xf1,
-0xa3,0xda,0xa4,0xd3,0xcb,0x83,0x20,0x40,0x80,0x26,0x00,0x64,0x44,0x8d,0xf8,0x84,
+0x33,0xf8,0x2e,0x58,0xff,0xff,0xb0,0xf1,0xff,0xff,0x2e,0xf8,0xb1,0xf1,0x2f,0xf8,
+0xff,0xff,0xb2,0xf1,0x30,0xf8,0xf0,0x60,0x20,0x64,0x0e,0xfa,0x08,0x64,0x28,0xfa,
+0x2e,0x58,0xff,0xff,0x6a,0x60,0xbc,0x62,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xff,0xff,
+0xa2,0xdb,0x2b,0x60,0x48,0x62,0x01,0x64,0xa2,0xdb,0xff,0xff,0xc0,0xfe,0x2b,0x60,
+0x48,0x62,0x00,0x64,0xa2,0xdb,0x2e,0x58,0xff,0xff,0x6a,0x60,0x1c,0x62,0x27,0x43,
+0xa2,0xdd,0x02,0x65,0x06,0xa6,0x7e,0x00,0x00,0x10,0xc7,0x85,0xa5,0xd3,0xff,0xff,
+0x60,0x47,0x4e,0xfb,0x04,0x65,0xc7,0x85,0xa5,0xd3,0xff,0xff,0x60,0x47,0x4d,0xfb,
+0x0c,0x65,0xc7,0x85,0xa5,0xd3,0x74,0xfb,0xf1,0xa4,0xa0,0xfb,0xa0,0xf1,0x2b,0x60,
+0xba,0x62,0xa2,0xd9,0x3f,0x60,0xba,0x65,0x04,0xf0,0x3f,0x60,0xff,0x64,0x78,0xf9,
+0xa0,0x84,0x60,0x41,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xa5,0xdb,0x3f,0x60,0xb8,0x65,
+0x01,0x64,0x07,0xb1,0x03,0x00,0xe0,0x84,0xcd,0x81,0xff,0xff,0xfc,0x02,0xa5,0xdb,
+0x64,0x60,0xe6,0x63,0x26,0x46,0x31,0xf0,0x75,0xf9,0xbd,0xd9,0xff,0xff,0x32,0xf0,
+0x76,0xf9,0xbd,0xd9,0xff,0xff,0x33,0xf0,0x77,0xf9,0xa3,0xd9,0x2e,0x58,0xff,0xff,
+0x27,0x44,0x0e,0xa4,0xa0,0xd3,0xff,0xff,0x60,0x41,0xe8,0x84,0xe8,0x84,0xe8,0x84,
+0x34,0xf3,0xe8,0x85,0x94,0x84,0x01,0x26,0x26,0x00,0xb8,0xf1,0x1e,0xf3,0x91,0x80,
+0x20,0x2a,0x05,0x00,0x60,0x40,0x10,0x2a,0x1e,0x00,0x20,0xb1,0x61,0x5c,0x3a,0xf9,
+0x64,0x60,0xd6,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0xff,0xff,0x12,0x03,0x50,0xfe,
+0x27,0x41,0x06,0xa1,0x64,0x60,0xd8,0x63,0xa1,0xd3,0xbd,0xd1,0x59,0xd3,0xd0,0x80,
+0xbd,0xd1,0x59,0xd3,0xd0,0x80,0xbd,0xd1,0xff,0xff,0xd0,0x80,0xff,0xff,0x01,0x01,
+0x02,0x00,0x00,0x64,0x01,0x00,0x01,0x64,0x00,0xbc,0x2e,0x58,0xff,0xff,0x6a,0x60,
+0x5a,0x63,0x00,0x64,0xbd,0xdb,0x01,0x64,0xbd,0xdb,0xa3,0xdb,0x27,0x44,0x02,0xa4,
+0xa0,0xd1,0x27,0x44,0x04,0xa4,0xa0,0xd3,0xff,0xff,0xd0,0x81,0xff,0xff,0x01,0x05,
+0x00,0x61,0x6a,0x60,0x52,0x63,0x61,0x44,0xbd,0xdb,0xa3,0xdb,0x6a,0x60,0x56,0x62,
+0xa2,0xd1,0xff,0xff,0xd1,0x81,0xff,0xff,0x01,0x05,0x00,0x61,0x6a,0x60,0x58,0x62,
+0x61,0x44,0xa2,0xdb,0x2e,0x58,0xff,0xff,0x63,0x60,0x0e,0x62,0x69,0x60,0x84,0x63,
+0x00,0x64,0xa2,0xdb,0xbd,0xdb,0xff,0xff,0xbd,0xdb,0xbd,0xdb,0xbd,0xdb,0x6a,0x60,
+0xdc,0x62,0x00,0x64,0xa2,0xdb,0x2e,0x58,0xff,0xff,0x7a,0x60,0xd6,0x64,0x00,0x7c,
+0x58,0xd9,0x58,0xd9,0x58,0xd9,0xff,0xff,0x58,0xd9,0xd5,0xf9,0xd7,0xf9,0x27,0x44,
+0x42,0xa4,0xa0,0xd1,0x00,0x64,0x64,0x40,0x04,0x27,0x01,0x64,0xe7,0xfb,0x64,0x40,
+0x01,0x2a,0x17,0x00,0x36,0xf3,0xff,0xff,0x60,0x40,0x0f,0x3a,0x12,0x00,0x34,0xf3,
+0xff,0xff,0x60,0x40,0x01,0x2a,0x0d,0x00,0x64,0x47,0x01,0xb4,0x02,0xbc,0xd7,0xfb,
+0x02,0x64,0xd6,0xf1,0x64,0x40,0x01,0x27,0x04,0xbc,0x64,0x40,0x01,0x26,0x08,0xbc,
+0xd5,0xfb,0x2e,0x58,0xff,0xff,0x00,0x64,0x51,0xfb,0x3f,0x60,0x98,0x63,0x21,0x44,
+0xbd,0xdb,0xff,0xff,0x1d,0xff,0x01,0x64,0xbd,0xfb,0x21,0x60,0xaa,0x62,0x00,0x64,
+0xa2,0xdb,0x5a,0xdb,0x00,0x60,0x2a,0x63,0x0c,0x60,0x40,0x61,0x0e,0x60,0x7e,0x64,
+0x58,0xd1,0x59,0xd9,0xfd,0x1f,0x2f,0x58,0xff,0xff,0x21,0x60,0xaa,0x62,0xa2,0xd1,
+0x00,0x60,0x04,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x2f,0x58,0xff,0xff,
+0x6e,0xf5,0xb0,0xf1,0x2e,0xf8,0xff,0xff,0xb1,0xf1,0x2f,0xf8,0xb2,0xf1,0xff,0xff,
+0x30,0xf8,0x73,0xf3,0x72,0xfb,0xe9,0xf3,0xff,0xff,0x60,0x47,0x01,0xbc,0x60,0x47,
+0xe9,0xfb,0x6a,0x60,0x1a,0x62,0xa2,0xd1,0x6a,0x60,0x12,0x62,0xa2,0xd9,0xd0,0xf3,
+0x14,0x7c,0x00,0xa0,0x0f,0x64,0x0e,0x02,0xbd,0xf3,0x14,0x7c,0xfc,0xa0,0x0f,0x64,
+0x09,0x03,0xc4,0xf3,0x28,0x7c,0xfd,0xa0,0x0f,0x64,0x04,0x04,0x01,0x60,0x86,0x64,
+0x01,0x03,0x78,0x64,0xa3,0xf9,0xa5,0xfb,0x21,0x60,0xa4,0x62,0x00,0x64,0xa2,0xdb,
+0xe9,0xf3,0xff,0xff,0x60,0x40,0x03,0x26,0x4d,0x00,0xbd,0xf3,0xff,0xff,0xfc,0xa0,
+0x6a,0x60,0x1c,0x64,0x0e,0x02,0xa0,0xd3,0xff,0xff,0x00,0xa0,0x4e,0xf3,0x60,0x43,
+0x08,0x03,0x02,0xa3,0x60,0x47,0x00,0x7f,0x4d,0xf1,0xbd,0xdb,0x64,0x47,0x00,0x7f,
+0xa3,0xdb,0xe9,0xf3,0xff,0xff,0x60,0x40,0x04,0x2a,0x21,0x00,0x6b,0x60,0x2c,0x62,
+0x80,0x60,0x02,0x64,0xa2,0xdb,0x00,0x65,0x03,0x61,0x7c,0xf1,0x2a,0x60,0xca,0x63,
+0xd3,0x80,0xa3,0xd3,0x0f,0x05,0x04,0xa3,0xa0,0xd3,0x45,0x48,0x00,0x7f,0xe0,0x85,
+0x19,0x60,0xd2,0x64,0x44,0xd3,0x28,0x45,0xa4,0x80,0xb4,0x85,0xf1,0x02,0xcd,0x81,
+0xff,0xff,0xee,0x02,0x19,0x60,0x90,0x62,0x65,0x44,0xa2,0xdb,0x1d,0x00,0x6b,0x60,
+0x2c,0x62,0x80,0x60,0x01,0x64,0xa2,0xdb,0x6a,0x60,0x2a,0x62,0x2e,0x44,0xa2,0xdb,
+0x59,0x60,0x58,0x4e,0x64,0x78,0xff,0xff,0x6a,0x60,0x2a,0x62,0xa2,0xd3,0xff,0xff,
+0x40,0x4e,0x0a,0x00,0x40,0x2a,0x04,0x00,0x19,0x60,0x8c,0x62,0xa2,0xd3,0xa5,0xfb,
+0x41,0x60,0x80,0x62,0x00,0x64,0xa2,0xdb,0xc4,0xf3,0xff,0xff,0xfd,0xa0,0xff,0xff,
+0x74,0x05,0xe9,0xf3,0xff,0xff,0x60,0x40,0x40,0x26,0x6f,0x00,0x10,0x60,0x00,0x65,
+0x79,0xf3,0x6e,0xf5,0xa4,0x84,0x40,0x7e,0x29,0xfa,0x18,0x60,0x74,0x64,0xa0,0xd1,
+0x13,0xf8,0xff,0xff,0x4f,0xf3,0x00,0xf4,0x60,0x43,0xbd,0xd1,0x04,0x65,0xe9,0xf3,
+0x60,0x41,0x60,0x40,0x80,0x26,0x00,0x7c,0x61,0x44,0x64,0x47,0xa5,0xda,0x64,0x41,
+0xdd,0x81,0xe9,0x81,0x62,0x44,0x04,0x03,0xbd,0xd1,0xcd,0x81,0x58,0xd8,0xfc,0x02,
+0x58,0x8d,0x18,0x60,0x68,0x63,0xa3,0xd1,0x2d,0x44,0xc8,0x84,0x64,0x45,0x64,0x41,
+0x03,0xa1,0xe9,0x81,0x41,0x4c,0xbd,0xd1,0xcd,0x81,0x58,0xd8,0xfc,0x02,0x2d,0x44,
+0xa0,0xd2,0x2d,0x43,0x60,0x47,0x01,0x7e,0x4f,0xf1,0xa3,0xda,0xa4,0xd3,0xcb,0x83,
+0xe9,0xf3,0x60,0x41,0x60,0x40,0x80,0x26,0x00,0x61,0x61,0x44,0x44,0x8d,0xf8,0x84,
 0x2c,0x41,0x0c,0x04,0xbe,0xd2,0xff,0xff,0x60,0x47,0xbe,0xda,0x00,0x7e,0xa3,0xd2,
-0x60,0x45,0x00,0x7f,0xb4,0x84,0xcd,0x81,0xbd,0xda,0xf4,0x02,0x7a,0xf5,0x2d,0x44,
-0x04,0xa4,0x38,0xfa,0x67,0x60,0x40,0x62,0xa2,0xd1,0x67,0x60,0x38,0x62,0xa2,0xd9,
-0x1f,0x60,0x7a,0x63,0xbf,0xf3,0x71,0x5c,0x60,0x47,0xc0,0x84,0x1f,0xb5,0x01,0xb4,
-0xa3,0xdb,0x1f,0x60,0x76,0x62,0xa2,0xd3,0x65,0x41,0x60,0x45,0x61,0x44,0xd4,0x80,
-0xff,0xff,0x02,0x04,0xd4,0x84,0xfb,0x00,0x60,0x45,0x1f,0x60,0x74,0x62,0xa2,0xd3,
-0xff,0xff,0xc4,0x84,0x40,0x4a,0x1f,0x60,0x78,0x62,0x00,0x64,0xa2,0xdb,0x13,0x00,
-0xd5,0xf3,0xff,0xff,0xfd,0xa0,0xfc,0xa0,0x09,0x03,0x05,0x02,0x01,0x60,0x86,0x64,
-0xb1,0xfb,0x03,0x64,0xd5,0xfb,0x55,0x60,0x6c,0x78,0xff,0xff,0x04,0x64,0xd5,0xfb,
-0x52,0x60,0xa7,0x78,0xff,0xff,0xd5,0xf1,0x1f,0x60,0x78,0x62,0xa2,0xd3,0xff,0xff,
-0xf2,0xa0,0xff,0xff,0xe5,0x03,0x01,0xa4,0xa2,0xdb,0x1f,0x60,0x7a,0x62,0xa2,0xd3,
-0xff,0xff,0x00,0xa0,0xff,0xff,0x07,0x03,0x2a,0x44,0xdc,0x84,0xf2,0xa0,0xff,0xff,
-0x08,0x06,0x01,0x64,0x06,0x00,0x2a,0x44,0xcc,0x84,0xff,0xa0,0xff,0xff,0x01,0x05,
-0x0e,0x64,0x40,0x4a,0x1f,0x60,0x3a,0x63,0x20,0x40,0x40,0x26,0x0e,0x00,0x64,0x44,
-0x04,0x36,0x0b,0x00,0x03,0x3a,0x02,0x00,0x1f,0x60,0x56,0x63,0x2a,0x44,0xe0,0x85,
-0x47,0xd3,0xff,0xff,0x01,0xb0,0xff,0xff,0xce,0x03,0x2e,0xa7,0x7e,0x00,0x00,0x10,
-0xe1,0xf3,0xa4,0xf1,0x00,0xa0,0x73,0x44,0x24,0x03,0xd0,0x84,0xe8,0x84,0xe8,0x84,
-0xe8,0x84,0xe8,0x84,0xfe,0xa0,0x60,0x5c,0x01,0x05,0x02,0x7c,0x1e,0x60,0xdc,0x62,
-0x00,0x64,0xa2,0xdb,0x28,0x60,0x86,0x62,0xa2,0xd9,0x3c,0x60,0xda,0x62,0x28,0x60,
-0x82,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x1e,0x60,0xde,0x62,
-0x00,0x60,0x04,0x64,0xa2,0xdb,0x53,0x60,0xc0,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,
-0xff,0xff,0x1e,0x60,0xdc,0x62,0x00,0x64,0xa2,0xdb,0xde,0xfe,0xff,0xff,0x0b,0x04,
-0x1e,0x60,0xde,0x62,0x40,0x60,0x00,0x64,0xa2,0xdb,0x53,0x60,0xc0,0x64,0x5a,0xdb,
-0xcf,0xfe,0x2f,0x58,0xff,0xff,0x3c,0x60,0xc2,0x62,0x2a,0x44,0xa2,0xdb,0xca,0x82,
-0x1e,0x64,0xa2,0xdb,0xff,0xff,0x2d,0xff,0x1e,0x60,0xde,0x62,0x20,0x60,0x00,0x64,
-0xa2,0xdb,0x53,0x60,0xe6,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0xbe,0xfe,
-0x1e,0x60,0xc8,0x62,0xa2,0xd1,0x40,0x60,0x00,0x64,0xb0,0x84,0xa2,0xdb,0xcf,0xfe,
-0x02,0x0a,0x00,0x64,0x57,0xfb,0x20,0x44,0x40,0x2a,0x09,0x00,0x1e,0x60,0xf4,0x62,
-0xa2,0xd1,0x00,0x60,0x80,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x20,0x44,
-0x40,0x22,0x03,0x00,0x54,0x60,0xe3,0x78,0xff,0xff,0xd5,0xf3,0xff,0xff,0xfd,0xa0,
-0xff,0xff,0x3c,0x05,0xe1,0xf1,0x67,0x60,0xf6,0x62,0xa2,0xd3,0x64,0x40,0x00,0x36,
-0x06,0x00,0xec,0xa0,0xff,0xff,0x03,0x05,0x53,0x60,0x65,0x78,0xff,0xff,0x7a,0xf5,
-0x00,0x64,0x22,0xfa,0x3a,0x60,0x58,0x4e,0x14,0x78,0xff,0xff,0x3c,0x60,0xa2,0x62,
-0x3c,0x60,0x4e,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,
-0x2b,0xff,0x1e,0x60,0xdc,0x62,0x00,0x64,0xa2,0xdb,0xaf,0xf1,0x28,0x60,0x86,0x62,
-0xa2,0xd9,0x3c,0x60,0xda,0x62,0x28,0x60,0x82,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,
-0xff,0xff,0x1d,0xff,0xc1,0xfe,0x1e,0x60,0xde,0x62,0x00,0x60,0x05,0x64,0xa2,0xdb,
-0x54,0x60,0x48,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x54,0x60,0xe3,0x78,
-0xff,0xff,0xe1,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0x1f,0x02,0x1e,0x60,0xdc,0x62,
+0x60,0x45,0x00,0x7f,0xb4,0x84,0xcd,0x81,0xbd,0xda,0xf4,0x02,0x6e,0xf5,0x2d,0x44,
+0x04,0xa4,0x38,0xfa,0x22,0x60,0x42,0x63,0xb2,0xf3,0x71,0x5c,0x60,0x47,0xc0,0x84,
+0x1f,0xb5,0x01,0xb4,0xa3,0xdb,0x22,0x60,0x3e,0x62,0xa2,0xd3,0x65,0x41,0x60,0x45,
+0x61,0x44,0xd4,0x80,0xff,0xff,0x02,0x04,0xd4,0x84,0xfb,0x00,0x60,0x45,0x22,0x60,
+0x3c,0x62,0xa2,0xd3,0xff,0xff,0xc4,0x84,0x40,0x4a,0x22,0x60,0x40,0x62,0x00,0x64,
+0xa2,0xdb,0x18,0x00,0xc4,0xf3,0xff,0xff,0xfd,0xa0,0xfc,0xa0,0x0e,0x03,0x05,0x02,
+0x01,0x60,0x86,0x64,0xa5,0xfb,0x03,0x64,0xc4,0xfb,0xe9,0xf1,0xfe,0x60,0xff,0x64,
+0xa0,0x84,0xe9,0xfb,0x58,0x60,0x57,0x78,0xff,0xff,0x04,0x64,0xc4,0xfb,0x54,0x60,
+0x07,0x78,0xff,0xff,0x6b,0x60,0x2c,0x62,0x80,0x60,0x14,0x64,0xa2,0xdb,0xc4,0xf1,
+0x22,0x60,0x40,0x62,0xa2,0xd3,0xff,0xff,0xf2,0xa0,0xff,0xff,0xdb,0x03,0x01,0xa4,
+0xa2,0xdb,0x22,0x60,0x42,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0xff,0xff,0x07,0x03,
+0x2a,0x44,0xdc,0x84,0xf2,0xa0,0xff,0xff,0x08,0x06,0x01,0x64,0x06,0x00,0x2a,0x44,
+0xcc,0x84,0xff,0xa0,0xff,0xff,0x01,0x05,0x0e,0x64,0x40,0x4a,0x22,0x60,0x02,0x63,
+0xe9,0xf3,0xff,0xff,0x60,0x40,0x40,0x26,0x20,0x00,0x64,0x44,0x04,0x36,0x1d,0x00,
+0x03,0x3a,0x02,0x00,0x22,0x60,0x1e,0x63,0xe9,0xf3,0xff,0xff,0x60,0x40,0x04,0x26,
+0x08,0x00,0x2a,0x44,0xe0,0x85,0x47,0xd3,0xff,0xff,0x01,0xb0,0xff,0xff,0xc2,0x03,
+0x0c,0x00,0x19,0x60,0xd2,0x63,0x2a,0x44,0xe0,0x85,0x19,0x60,0x90,0x62,0xa2,0xd1,
+0x47,0xd3,0xff,0xff,0xa0,0x80,0xff,0xff,0xb5,0x03,0x56,0xf1,0xff,0xff,0x64,0x40,
+0x00,0x3a,0x0d,0x00,0x3f,0x60,0x10,0x64,0xa0,0xd3,0xff,0xff,0x00,0xa0,0x60,0x46,
+0x0f,0xf2,0x05,0x03,0x60,0x40,0x02,0x26,0x05,0x00,0x0a,0xf2,0xf7,0x00,0x56,0x60,
+0x4a,0x78,0xff,0xff,0x21,0x60,0xa4,0x62,0x00,0x64,0xa2,0xdb,0xde,0xfe,0xff,0xff,
+0x0b,0x04,0x21,0x60,0xa6,0x62,0x40,0x60,0x00,0x64,0xa2,0xdb,0x55,0x60,0x80,0x64,
+0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x72,0xf1,0x3f,0x60,0x8a,0x62,0xa2,0xd9,
+0xca,0x82,0x1e,0x64,0xa2,0xdb,0xff,0xff,0x2d,0xff,0x21,0x60,0xa6,0x62,0x20,0x60,
+0x00,0x64,0xa2,0xdb,0x55,0x60,0xa6,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,
+0xbe,0xfe,0x21,0x60,0x90,0x62,0xa2,0xd1,0x40,0x60,0x00,0x64,0xb0,0x84,0xa2,0xdb,
+0xcf,0xfe,0x3f,0x60,0x10,0x64,0xa0,0xd3,0xff,0xff,0x00,0xa0,0x60,0x46,0x0f,0xf2,
+0x45,0x03,0x60,0x40,0x02,0x26,0x02,0x00,0x0a,0xf2,0xf7,0x00,0x3f,0x60,0x6a,0x62,
+0x3f,0x60,0x16,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,
+0x2b,0xff,0xc1,0xfe,0x6a,0x60,0xac,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
+0x21,0x60,0xa4,0x62,0x00,0x64,0xa2,0xdb,0xa6,0xf1,0x2b,0x60,0x4e,0x62,0xa2,0xd9,
+0x3f,0x60,0xa2,0x62,0x2b,0x60,0x4a,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,
+0x1d,0xff,0x21,0x60,0xa6,0x62,0x00,0x60,0x04,0x64,0xa2,0xdb,0x55,0x60,0xea,0x64,
+0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,0xa4,0x62,0xa2,0xd1,0xff,0x60,
+0xfb,0x61,0xa1,0x84,0x5a,0xd1,0x4a,0xdb,0xa1,0x84,0x5a,0xdb,0x3f,0x60,0x16,0x62,
+0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,0xd3,0x02,0xb3,0x00,0x21,0x60,0xa4,0x62,
+0x00,0x64,0xa2,0xdb,0xa4,0xf1,0x2b,0x60,0x4e,0x62,0xa2,0xd9,0x3f,0x60,0xa2,0x62,
+0x2b,0x60,0x4a,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x21,0x60,
+0xa6,0x62,0x00,0x60,0x04,0x64,0xa2,0xdb,0x56,0x60,0x18,0x64,0x5a,0xdb,0xcf,0xfe,
+0x2f,0x58,0xff,0xff,0x21,0x60,0xa4,0x62,0x00,0x64,0xa2,0xdb,0x11,0x60,0x48,0x65,
+0x2e,0x60,0x58,0x4e,0x9e,0x78,0xff,0xff,0x12,0x60,0x20,0x64,0x0e,0xfa,0x39,0x60,
+0x58,0x4e,0xfe,0x78,0xff,0xff,0x3f,0x60,0x6a,0x62,0x3f,0x60,0x16,0x64,0xa2,0xdb,
+0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xc1,0xfe,0x21,0x60,
+0xa6,0x62,0x00,0x60,0x01,0x64,0xa2,0xdb,0x56,0x60,0x40,0x64,0x5a,0xdb,0xcf,0xfe,
+0x2f,0x58,0xff,0xff,0x21,0x60,0xa4,0x62,0xa2,0xd1,0xff,0x60,0xfe,0x61,0xa1,0x84,
+0x5a,0xd1,0x4a,0xdb,0xa1,0x84,0x5a,0xdb,0xd0,0xf3,0x9a,0xf1,0x00,0xa0,0x73,0x44,
+0x24,0x03,0xd0,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xfe,0xa0,0x60,0x5c,
+0x01,0x05,0x02,0x7c,0x21,0x60,0xa4,0x62,0x00,0x64,0xa2,0xdb,0x2b,0x60,0x4e,0x62,
+0xa2,0xd9,0x3f,0x60,0xa2,0x62,0x2b,0x60,0x4a,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,
+0xff,0xff,0x1d,0xff,0x21,0x60,0xa6,0x62,0x00,0x60,0x04,0x64,0xa2,0xdb,0x56,0x60,
+0x73,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,0xa4,0x62,0x00,0x64,
+0xa2,0xdb,0xde,0xfe,0xff,0xff,0x0b,0x04,0x21,0x60,0xa6,0x62,0x40,0x60,0x00,0x64,
+0xa2,0xdb,0x56,0x60,0x73,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x3f,0x60,
+0x8a,0x62,0x2a,0x44,0xa2,0xdb,0xca,0x82,0x1e,0x64,0xa2,0xdb,0xff,0xff,0x2d,0xff,
+0x21,0x60,0xa6,0x62,0x20,0x60,0x00,0x64,0xa2,0xdb,0x56,0x60,0x99,0x64,0x5a,0xdb,
+0xcf,0xfe,0x2f,0x58,0xff,0xff,0xbe,0xfe,0x21,0x60,0x90,0x62,0xa2,0xd1,0x40,0x60,
+0x00,0x64,0xb0,0x84,0xa2,0xdb,0xcf,0xfe,0x02,0x0a,0x00,0x64,0x4a,0xfb,0xe9,0xf3,
+0xff,0xff,0x60,0x40,0x40,0x2a,0x09,0x00,0x21,0x60,0xbc,0x62,0xa2,0xd1,0x00,0x60,
+0x80,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0xe9,0xf3,0xff,0xff,0x60,0x40,
+0x40,0x22,0x03,0x00,0x57,0x60,0xb3,0x78,0xff,0xff,0xc4,0xf3,0xff,0xff,0xfd,0xa0,
+0xff,0xff,0x47,0x05,0x6b,0x60,0x2c,0x62,0x80,0x60,0x21,0x64,0xa2,0xdb,0x21,0x60,
+0x7a,0x62,0xa2,0xd1,0x67,0x60,0x78,0x62,0xa2,0xd9,0xd0,0xf1,0x6a,0x60,0xd6,0x62,
+0xa2,0xd3,0x64,0x40,0x00,0x36,0x06,0x00,0xec,0xa0,0xff,0xff,0x03,0x05,0x55,0x60,
+0x20,0x78,0xff,0xff,0x6e,0xf5,0x00,0x64,0x22,0xfa,0x39,0x60,0x58,0x4e,0xfe,0x78,
+0xff,0xff,0x3f,0x60,0x6a,0x62,0x3f,0x60,0x16,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,
+0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0x21,0x60,0xa4,0x62,0x00,0x64,0xa2,0xdb,
+0xa3,0xf1,0x2b,0x60,0x4e,0x62,0xa2,0xd9,0x3f,0x60,0xa2,0x62,0x2b,0x60,0x4a,0x64,
+0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0xc1,0xfe,0x21,0x60,0xa6,0x62,
+0x00,0x60,0x05,0x64,0xa2,0xdb,0x57,0x60,0x0a,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,
+0xff,0xff,0x57,0x60,0xb3,0x78,0xff,0xff,0x6b,0x60,0x2c,0x62,0x80,0x60,0x22,0x64,
+0xa2,0xdb,0xd0,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0x1f,0x02,0x21,0x60,0xa4,0x62,
 0xa2,0xd1,0x00,0x60,0x01,0x64,0xa0,0x80,0x9c,0x84,0x0c,0x03,0xa0,0x84,0xa2,0xdb,
-0x3c,0x60,0xda,0x62,0x28,0x60,0x82,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,
-0x1d,0xff,0x5a,0x00,0x28,0x60,0x80,0x62,0x01,0x64,0xa2,0xdb,0xff,0xff,0xc0,0xfe,
-0x00,0x64,0xa2,0xdb,0x53,0x60,0x65,0x78,0xff,0xff,0x1e,0x60,0xdc,0x62,0xa2,0xd1,
-0x00,0x60,0x01,0x64,0xa0,0x80,0x9c,0x84,0x0d,0x03,0xa0,0x84,0xa2,0xdb,0x1e,0x60,
-0xde,0x62,0x00,0x60,0x04,0x64,0xa2,0xdb,0x54,0x60,0x09,0x64,0x5a,0xdb,0xcf,0xfe,
-0x2f,0x58,0xff,0xff,0xff,0x60,0xfb,0x64,0xa0,0x84,0xa2,0xdb,0x67,0x60,0xf6,0x62,
-0xa2,0xd3,0xff,0xff,0xfb,0xa0,0x60,0x5c,0x01,0x07,0x05,0x7c,0x28,0x60,0x86,0x62,
-0xa2,0xd9,0x3c,0x60,0xda,0x62,0x28,0x60,0x82,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,
-0xff,0xff,0x1d,0xff,0x1e,0x60,0xde,0x62,0x00,0x60,0x05,0x64,0xa2,0xdb,0x54,0x60,
-0xa4,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,0xdc,0x62,0xa2,0xd1,
-0x00,0x60,0x01,0x64,0xa0,0x80,0x9c,0x84,0x0e,0x03,0xa0,0x84,0xa2,0xdb,0x3c,0x60,
-0xda,0x62,0x28,0x60,0x82,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,
-0x54,0x60,0x09,0x78,0xff,0xff,0xa6,0x00,0x1e,0x60,0xdc,0x62,0x00,0x64,0xa2,0xdb,
-0xb1,0xf1,0x28,0x60,0x86,0x62,0xa2,0xd9,0x3c,0x60,0xda,0x62,0x28,0x60,0x82,0x64,
-0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x1e,0x60,0xde,0x62,0x00,0x60,
-0x04,0x64,0xa2,0xdb,0x54,0x60,0xd7,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,
-0x1e,0x60,0xdc,0x62,0x00,0x64,0xa2,0xdb,0x57,0xf3,0xff,0xff,0x00,0xa8,0xff,0xff,
-0x2e,0x02,0x53,0x60,0x65,0x78,0xff,0xff,0x1e,0x60,0xdc,0x62,0x00,0x64,0xa2,0xdb,
-0xb1,0xf1,0x28,0x60,0x86,0x62,0xa2,0xd9,0x3c,0x60,0xda,0x62,0x28,0x60,0x82,0x64,
-0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x1e,0x60,0xde,0x62,0x00,0x60,
-0x04,0x64,0xa2,0xdb,0x54,0x60,0xff,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,
-0x1e,0x60,0xdc,0x62,0x00,0x64,0xa2,0xdb,0xd5,0xf3,0xff,0xff,0xff,0xa0,0xff,0xff,
-0x03,0x03,0x53,0x60,0x65,0x78,0xff,0xff,0x52,0x60,0xa7,0x78,0xff,0xff,0xb1,0xf1,
-0x28,0x60,0x86,0x62,0xa2,0xd9,0xb2,0xf1,0x28,0x60,0x92,0x62,0xa2,0xd9,0x3c,0x60,
-0xda,0x62,0x28,0x60,0x82,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,
-0x3c,0x60,0xde,0x62,0x28,0x60,0x8e,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,
-0x1d,0xff,0x1e,0x60,0xde,0x62,0x00,0x60,0x0c,0x64,0xa2,0xdb,0x55,0x60,0x33,0x64,
-0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,0xdc,0x62,0xa2,0xd1,0x00,0x60,
-0x04,0x64,0xa0,0x80,0x9c,0x84,0x0e,0x03,0xa0,0x84,0xa2,0xdb,0x3c,0x60,0xde,0x62,
-0x28,0x60,0x8e,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x53,0x60,
-0x65,0x78,0xff,0xff,0x00,0x60,0x08,0x64,0xa0,0x80,0x9c,0x84,0xe3,0x03,0xa0,0x84,
-0xa2,0xdb,0x57,0xf3,0x10,0x0a,0x00,0xa0,0x00,0x64,0x0c,0x02,0x3c,0x60,0xda,0x62,
-0x28,0x60,0x82,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x53,0x60,
-0x65,0x78,0xff,0xff,0x57,0xfb,0x3c,0x60,0xde,0x62,0x28,0x60,0x8e,0x64,0xa2,0xdb,
-0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0xc5,0x00,0x1e,0x60,0xb4,0x62,0x67,0x60,
-0x36,0x63,0xa2,0xd3,0xff,0xff,0x0c,0xa4,0xa3,0xdb,0x5a,0x60,0x32,0x64,0xa0,0xd3,
-0xff,0xff,0xdc,0x84,0xa2,0xdb,0x1e,0x60,0xdc,0x62,0x00,0x64,0xa2,0xdb,0xde,0xfe,
-0xff,0xff,0x0b,0x04,0x1e,0x60,0xde,0x62,0x40,0x60,0x00,0x64,0xa2,0xdb,0x55,0x60,
-0x7a,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x7e,0xf1,0x3c,0x60,0xc2,0x62,
-0xa2,0xd9,0xca,0x82,0x1e,0x64,0xa2,0xdb,0xff,0xff,0x2d,0xff,0x1e,0x60,0xde,0x62,
-0x20,0x60,0x00,0x64,0xa2,0xdb,0x55,0x60,0xa0,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,
-0xff,0xff,0xbe,0xfe,0x1e,0x60,0xc8,0x62,0xa2,0xd1,0x40,0x60,0x00,0x64,0xb0,0x84,
-0xa2,0xdb,0xcf,0xfe,0x20,0x44,0x03,0x22,0x08,0x00,0x04,0x65,0x3d,0x60,0x58,0x4e,
-0x32,0x78,0xff,0xff,0x56,0x60,0x4e,0x78,0xff,0xff,0x8a,0xf1,0x1f,0x60,0x80,0x63,
-0xc3,0x85,0x45,0x4d,0x28,0x60,0x00,0x65,0x89,0xf3,0x45,0x4c,0x40,0x48,0x5a,0x60,
-0x0a,0x62,0x28,0x44,0xd4,0x84,0xe8,0x84,0xe8,0x84,0xa2,0xdb,0x2d,0x45,0xd7,0x80,
-0x02,0x65,0x18,0x05,0x47,0xd1,0x02,0x65,0x47,0xd3,0x0a,0x65,0xd0,0x81,0x47,0xd3,
-0x01,0x05,0x00,0x61,0xf2,0xa3,0x01,0xb0,0x61,0x44,0x06,0x03,0x2c,0x42,0xa2,0xdb,
-0x5a,0xdd,0x5a,0x8c,0x44,0xa3,0xea,0x00,0x28,0x42,0x4a,0xdd,0x4a,0xdb,0x42,0x48,
-0x44,0xa3,0xe4,0x00,0x28,0x44,0x88,0xfb,0x88,0xf1,0x28,0x60,0x00,0x63,0x44,0x48,
-0x28,0x45,0xd7,0x80,0xa3,0xd1,0x15,0x05,0x04,0x65,0x46,0xd3,0x28,0x45,0xd6,0x80,
-0xd0,0x80,0x02,0x04,0x04,0xa3,0xf5,0x00,0xf7,0x06,0x62,0x46,0xa2,0xd9,0xa3,0xdb,
-0x5b,0xd3,0x66,0x42,0x5a,0xd1,0xa2,0xdb,0xa3,0xd9,0xfe,0xa3,0xa3,0xd1,0x66,0x42,
-0xeb,0x00,0x67,0x60,0x38,0x62,0xa2,0xd3,0xff,0xff,0xff,0xa0,0x88,0xf1,0x47,0x02,
-0x28,0x60,0x00,0x63,0xd3,0x80,0xa3,0xd3,0x43,0x48,0xe4,0xa0,0x40,0x05,0x3f,0x04,
-0xfb,0xa4,0x60,0x45,0x04,0xa2,0xd2,0x80,0xa2,0xd3,0x05,0x05,0xd4,0x80,0xff,0xff,
-0x02,0x04,0x42,0x48,0xf7,0x00,0x28,0x45,0x43,0x4c,0xd7,0x80,0x63,0x42,0x5a,0xd3,
-0x2e,0x05,0x3e,0xa4,0xa0,0xd3,0x04,0xa3,0x63,0x42,0xd7,0x80,0x5a,0xd1,0x23,0x07,
-0x64,0x42,0x3e,0xa2,0xa2,0xd1,0xff,0xff,0x90,0x80,0x00,0x3a,0x0a,0x00,0x60,0x41,
-0x2c,0x42,0xa2,0xd3,0xa3,0xd1,0xff,0xff,0xd0,0x80,0x61,0x5c,0x06,0x04,0x61,0x44,
-0xea,0x00,0xd0,0x80,0xff,0xff,0x01,0x07,0xe6,0x00,0x64,0x41,0x5b,0xd3,0x2c,0x42,
-0x5a,0xd1,0xa2,0xdb,0xa3,0xd9,0xff,0xff,0x4b,0xd3,0x2c,0x42,0xa2,0xd1,0xa2,0xdb,
-0xa3,0xd9,0x61,0x44,0xd8,0x00,0x2c,0x43,0x04,0xa3,0x43,0x4c,0xce,0x00,0x20,0x44,
-0x3c,0xb4,0x40,0x40,0x1e,0x60,0xc8,0x62,0xa2,0xd1,0x10,0x60,0x00,0x64,0xb0,0x84,
-0xa2,0xdb,0xcf,0xfe,0x1e,0x60,0xdc,0x62,0x00,0x64,0xa2,0xdb,0x5a,0xdb,0x2f,0x58,
-0xff,0xff,0x3c,0x60,0xd2,0x62,0x28,0x60,0x82,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,
-0xff,0xff,0x1d,0xff,0x1e,0x60,0xdc,0x62,0x00,0x64,0xa2,0xdb,0x5a,0xdb,0x2f,0x58,
-0xff,0xff,0x1e,0x60,0xdc,0x62,0xa2,0xd1,0x00,0x60,0x04,0x64,0xb0,0x84,0xa2,0xdb,
-0xff,0xff,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,0xdc,0x62,0xa2,0xd1,0x00,0x60,
-0x08,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x2f,0x58,0xff,0xff,0xe1,0xf3,
-0x20,0x40,0x03,0x26,0x31,0x00,0x60,0x40,0x00,0x36,0x1c,0x00,0x1f,0x60,0x80,0x63,
-0x8a,0xf3,0xff,0xff,0x00,0xa0,0x60,0x45,0x15,0x03,0xc7,0x85,0x63,0x5c,0x04,0x64,
-0xc0,0x81,0x31,0xf2,0x50,0xfe,0x59,0xd1,0x32,0xf2,0xd0,0x80,0x59,0xd1,0x33,0xf2,
-0xd0,0x80,0x59,0xd1,0xff,0xff,0xd0,0x80,0xff,0xff,0x0a,0x03,0x44,0xa3,0xd7,0x80,
-0xff,0xff,0xec,0x02,0x1f,0x60,0x80,0x63,0x8a,0xf1,0x08,0x60,0x80,0x64,0x2f,0x00,
-0x04,0xa3,0x25,0xf2,0xa3,0xd1,0x60,0x47,0x00,0x7f,0xc0,0x84,0xdc,0x84,0xe8,0x84,
-0xa3,0xdb,0x57,0x60,0xb5,0x78,0xff,0xff,0x3d,0x60,0xcc,0x63,0xbd,0xd3,0xff,0xff,
-0x00,0xa0,0x60,0x45,0x15,0x03,0xc7,0x85,0x63,0x5c,0x04,0x64,0xc0,0x81,0x31,0xf2,
-0x50,0xfe,0x59,0xd1,0x32,0xf2,0xd0,0x80,0x59,0xd1,0x33,0xf2,0xd0,0x80,0x59,0xd1,
-0xff,0xff,0xd0,0x80,0xff,0xff,0x76,0x03,0x44,0xa3,0xd7,0x80,0xff,0xff,0xec,0x02,
-0x3d,0x60,0xce,0x63,0x3d,0x60,0xcc,0x62,0xa2,0xd1,0x1a,0x60,0x90,0x64,0xd0,0x80,
-0xff,0xff,0x68,0x06,0xc3,0x83,0x87,0xfd,0xff,0xff,0x7f,0xf3,0x25,0xf0,0xbd,0xdb,
-0x64,0x44,0x00,0x7f,0xbd,0xdb,0x64,0x47,0x00,0x7f,0xbd,0xdb,0x31,0xf0,0xbd,0xd9,
-0xff,0xff,0x32,0xf0,0xbd,0xd9,0x33,0xf0,0xff,0xff,0xbd,0xd9,0xff,0x60,0xff,0x7c,
-0x38,0xf2,0x00,0xf4,0x05,0xa4,0xa0,0xd8,0x06,0xf0,0xff,0xff,0xbd,0xd9,0x07,0xf0,
-0xbd,0xd9,0x20,0x44,0x03,0xb4,0xff,0xff,0x0a,0x02,0x16,0x60,0x60,0x62,0xa2,0xd3,
-0xff,0xff,0x60,0x40,0x01,0x3a,0x03,0x00,0x64,0x40,0x01,0x2a,0x3b,0x00,0x57,0x60,
-0x58,0x4e,0xb8,0x78,0xff,0xff,0xff,0x60,0xfe,0x64,0xd0,0x80,0xff,0xff,0x32,0x03,
-0xd5,0xf3,0xff,0xff,0xfd,0xa0,0xff,0xff,0x2d,0x05,0x00,0x36,0x12,0x00,0x67,0x60,
-0x44,0x64,0xa0,0xd3,0xff,0xff,0x00,0xa0,0x60,0x43,0x0b,0x03,0x59,0x60,0x58,0x4e,
-0x14,0x78,0xff,0xff,0x17,0x60,0xa0,0x64,0xa0,0xd1,0x65,0x44,0xd0,0x80,0xff,0xff,
-0x60,0x02,0x87,0xf3,0xff,0xff,0x3e,0xa4,0x60,0x43,0xbd,0xd9,0x61,0x44,0xbd,0xdb,
-0xff,0x60,0xff,0x64,0xd0,0x80,0xff,0xff,0x04,0x02,0x67,0x60,0x38,0x62,0x00,0x64,
-0xa2,0xdb,0x87,0xf3,0x10,0x65,0xc4,0x83,0x00,0x64,0x08,0xf0,0xa3,0xdb,0x64,0x47,
-0x60,0x45,0x00,0x3b,0x46,0x00,0xbd,0xdb,0xdc,0x84,0xe8,0x81,0x10,0x64,0x58,0xd0,
-0xcd,0x81,0xbd,0xd9,0xfc,0x02,0xd8,0x83,0x04,0x64,0x40,0x4d,0x07,0x61,0x65,0x40,
-0x01,0x2a,0xbd,0xd0,0xff,0xff,0x64,0x44,0x00,0x7f,0x2d,0xda,0x5a,0x8d,0x64,0x47,
-0x00,0x7f,0x2d,0xda,0xcd,0x81,0x5a,0x8d,0xf4,0x02,0x87,0xf1,0x32,0x63,0xc3,0x83,
-0x04,0x61,0x65,0x40,0x01,0x26,0x02,0xa1,0xa1,0xd2,0xff,0xff,0x01,0xa8,0x59,0xd2,
-0x20,0x02,0x59,0xd0,0xcc,0x84,0xbd,0xd9,0xfc,0x02,0x00,0x64,0xbd,0xdb,0x59,0xd2,
-0x59,0xd0,0x03,0xa8,0x7f,0xf3,0x15,0x02,0x59,0xd0,0xff,0xff,0xd0,0x80,0xff,0xff,
-0x10,0x02,0x87,0xf3,0x32,0x65,0xc4,0x83,0x00,0x61,0xa3,0xd3,0xff,0xff,0x60,0x40,
-0xff,0x22,0x14,0x00,0x80,0x2a,0x10,0x00,0x60,0x40,0x82,0x3a,0x03,0x00,0x01,0xb9,
-0x0b,0x00,0x24,0x00,0x84,0x3a,0x02,0x00,0x02,0xb9,0x06,0x00,0x8b,0x3a,0x02,0x00,
-0x04,0xb9,0x02,0x00,0x96,0x36,0x08,0xb9,0x02,0xa3,0xe7,0x00,0x87,0xf3,0x3c,0x65,
-0xc4,0x82,0x61,0x43,0xa2,0xdd,0x20,0x40,0x03,0x26,0x09,0x00,0x8a,0xf3,0xff,0xff,
-0x44,0xa4,0x8a,0xfb,0x89,0xf3,0xff,0xff,0x04,0xa4,0xa2,0xdb,0x07,0x00,0x3d,0x60,
-0xcc,0x62,0xa2,0xd3,0xff,0xff,0x44,0xa4,0xa2,0xdb,0xff,0xff,0x26,0x46,0x2f,0x58,
-0xff,0xff,0x67,0x60,0x4a,0x62,0x2e,0x44,0xa2,0xdb,0x67,0x60,0x4e,0x65,0x67,0x60,
-0x44,0x62,0x00,0x64,0xa2,0xdb,0xa5,0xdb,0x01,0xf2,0x10,0x63,0x00,0x7f,0xf4,0xa4,
+0x3f,0x60,0xa2,0x62,0x2b,0x60,0x4a,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,
+0x1d,0xff,0x5a,0x00,0x2b,0x60,0x48,0x62,0x01,0x64,0xa2,0xdb,0xff,0xff,0xc0,0xfe,
+0x00,0x64,0xa2,0xdb,0x55,0x60,0x20,0x78,0xff,0xff,0x21,0x60,0xa4,0x62,0xa2,0xd1,
+0x00,0x60,0x01,0x64,0xa0,0x80,0x9c,0x84,0x0d,0x03,0xa0,0x84,0xa2,0xdb,0x21,0x60,
+0xa6,0x62,0x00,0x60,0x04,0x64,0xa2,0xdb,0x56,0x60,0xcb,0x64,0x5a,0xdb,0xcf,0xfe,
+0x2f,0x58,0xff,0xff,0xff,0x60,0xfb,0x64,0xa0,0x84,0xa2,0xdb,0x6a,0x60,0xd6,0x62,
+0xa2,0xd3,0xff,0xff,0xfb,0xa0,0x60,0x5c,0x01,0x07,0x05,0x7c,0x2b,0x60,0x4e,0x62,
+0xa2,0xd9,0x3f,0x60,0xa2,0x62,0x2b,0x60,0x4a,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,
+0xff,0xff,0x1d,0xff,0x21,0x60,0xa6,0x62,0x00,0x60,0x05,0x64,0xa2,0xdb,0x57,0x60,
+0x6b,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,0xa4,0x62,0xa2,0xd1,
+0x00,0x60,0x01,0x64,0xa0,0x80,0x9c,0x84,0x0e,0x03,0xa0,0x84,0xa2,0xdb,0x3f,0x60,
+0xa2,0x62,0x2b,0x60,0x4a,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,
+0x56,0x60,0xcb,0x78,0xff,0xff,0xa6,0x00,0x6b,0x60,0x2c,0x62,0x80,0x60,0x12,0x64,
+0xa2,0xdb,0x21,0x60,0xa4,0x62,0x00,0x64,0xa2,0xdb,0xa4,0xf1,0x2b,0x60,0x4e,0x62,
+0xa2,0xd9,0x3f,0x60,0xa2,0x62,0x2b,0x60,0x4a,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,
+0xff,0xff,0x1d,0xff,0x21,0x60,0xa6,0x62,0x00,0x60,0x04,0x64,0xa2,0xdb,0x57,0x60,
+0xa3,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,0xa4,0x62,0x00,0x64,
+0xa2,0xdb,0x4a,0xf3,0x3d,0x0a,0x00,0xa8,0xff,0xff,0x3a,0x02,0x59,0x60,0x58,0x4e,
+0xb3,0x78,0xff,0xff,0x55,0x60,0x20,0x78,0xff,0xff,0x21,0x60,0xa4,0x62,0x00,0x64,
+0xa2,0xdb,0xa5,0xf1,0x2b,0x60,0x4e,0x62,0xa2,0xd9,0x3f,0x60,0xa2,0x62,0x2b,0x60,
+0x4a,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x21,0x60,0xa6,0x62,
+0x00,0x60,0x04,0x64,0xa2,0xdb,0x57,0x60,0xcf,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,
+0xff,0xff,0x21,0x60,0xa4,0x62,0x00,0x64,0xa2,0xdb,0xc4,0xf3,0xff,0xff,0xff,0xa0,
+0xff,0xff,0x03,0x03,0x55,0x60,0x20,0x78,0xff,0xff,0xe9,0xf3,0xff,0xff,0x60,0x40,
+0x03,0x26,0x03,0x00,0x54,0x60,0x07,0x78,0xff,0xff,0x55,0x60,0x20,0x78,0xff,0xff,
+0x6b,0x60,0x2c,0x62,0x80,0x60,0x13,0x64,0xa2,0xdb,0xa5,0xf1,0x2b,0x60,0x4e,0x62,
+0xa2,0xd9,0xa6,0xf1,0x2b,0x60,0x5a,0x62,0xa2,0xd9,0x3f,0x60,0xa2,0x62,0x2b,0x60,
+0x4a,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x3f,0x60,0xa6,0x62,
+0x2b,0x60,0x56,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x21,0x60,
+0xa6,0x62,0x00,0x60,0x0c,0x64,0xa2,0xdb,0x58,0x60,0x12,0x64,0x5a,0xdb,0xcf,0xfe,
+0x03,0x64,0x4b,0xfb,0x2f,0x58,0xff,0xff,0x21,0x60,0xa4,0x62,0xa2,0xd1,0x00,0x60,
+0x04,0x64,0xa0,0x80,0x9c,0x84,0x12,0x03,0xa0,0x84,0xa2,0xdb,0x3f,0x60,0xa6,0x62,
+0x2b,0x60,0x56,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x59,0x60,
+0x58,0x4e,0xb3,0x78,0xff,0xff,0x55,0x60,0x20,0x78,0xff,0xff,0x00,0x60,0x08,0x64,
+0xa0,0x80,0x9c,0x84,0xdf,0x03,0xa0,0x84,0xa2,0xdb,0x4a,0xf3,0x18,0x0a,0x00,0xa0,
+0x4b,0xf3,0x13,0x02,0xcc,0x84,0x4b,0xfb,0x12,0x02,0x3f,0x60,0xa2,0x62,0x2b,0x60,
+0x4a,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x59,0x60,0x58,0x4e,
+0xb3,0x78,0xff,0xff,0x55,0x60,0x20,0x78,0xff,0xff,0x00,0x64,0x4a,0xfb,0x3f,0x60,
+0xa6,0x62,0x2b,0x60,0x56,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,
+0xb9,0x00,0x21,0x60,0x7c,0x62,0x6a,0x60,0x10,0x63,0xa2,0xd3,0xff,0xff,0x04,0xa4,
+0xa3,0xdb,0x63,0x60,0x24,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x21,0x60,
+0xa4,0x62,0x00,0x64,0xa2,0xdb,0xde,0xfe,0xff,0xff,0x0b,0x04,0x21,0x60,0xa6,0x62,
+0x40,0x60,0x00,0x64,0xa2,0xdb,0x58,0x60,0x65,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,
+0xff,0xff,0x72,0xf1,0x3f,0x60,0x8a,0x62,0xa2,0xd9,0xca,0x82,0x1e,0x64,0xa2,0xdb,
+0xff,0xff,0x2d,0xff,0x21,0x60,0xa6,0x62,0x20,0x60,0x00,0x64,0xa2,0xdb,0x58,0x60,
+0x8b,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0xbe,0xfe,0x21,0x60,0x90,0x62,
+0xa2,0xd1,0x40,0x60,0x00,0x64,0xb0,0x84,0xa2,0xdb,0xcf,0xfe,0xe9,0xf3,0xff,0xff,
+0x60,0x40,0x03,0x22,0x03,0x00,0x59,0x60,0x50,0x78,0xff,0xff,0x6b,0x60,0x2c,0x62,
+0x80,0x60,0x03,0x64,0xa2,0xdb,0x6a,0x60,0xd0,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,
+0xff,0xff,0x01,0x03,0x01,0x64,0x40,0x47,0x7e,0xf1,0x22,0x60,0x48,0x63,0xc3,0x85,
+0x45,0x4d,0x2a,0x60,0xc8,0x65,0x7d,0xf3,0x45,0x4c,0x40,0x48,0x62,0x60,0xfc,0x62,
+0x28,0x44,0xd4,0x84,0xe8,0x84,0xe8,0x84,0xa2,0xdb,0x2d,0x45,0xd7,0x80,0x02,0x65,
+0x24,0x05,0x47,0xd1,0x02,0x65,0x47,0xd3,0x0a,0x65,0xd0,0x81,0x47,0xd3,0x01,0x05,
+0x00,0x61,0xf2,0xa3,0x01,0xb0,0xa3,0xd3,0x11,0x03,0x60,0x47,0x00,0x7f,0x27,0x40,
+0x01,0x2a,0x00,0x64,0xfc,0xa0,0xff,0xff,0x01,0x06,0x04,0x64,0x61,0x45,0xc4,0x84,
+0x2c,0x42,0xa2,0xdb,0x5a,0xdd,0x5a,0x8c,0x44,0xa3,0xdf,0x00,0x61,0x44,0x28,0x42,
+0x4a,0xdd,0x4a,0xdb,0x42,0x48,0x44,0xa3,0xd8,0x00,0x28,0x44,0x7c,0xfb,0x7c,0xf1,
+0x2a,0x60,0xc8,0x63,0x44,0x48,0x28,0x45,0xd7,0x80,0xa3,0xd1,0x15,0x05,0x04,0x65,
+0x46,0xd3,0x28,0x45,0xd6,0x80,0xd0,0x80,0x02,0x04,0x04,0xa3,0xf5,0x00,0xf7,0x06,
+0x62,0x46,0xa2,0xd9,0xa3,0xdb,0x5b,0xd3,0x66,0x42,0x5a,0xd1,0xa2,0xdb,0xa3,0xd9,
+0xfe,0xa3,0xa3,0xd1,0x66,0x42,0xeb,0x00,0x6a,0x60,0x12,0x62,0xa2,0xd3,0xff,0xff,
+0xff,0xa0,0x7c,0xf1,0x47,0x02,0x2a,0x60,0xc8,0x63,0xd3,0x80,0xa3,0xd3,0x43,0x48,
+0xe4,0xa0,0x40,0x05,0x3f,0x04,0xfb,0xa4,0x60,0x45,0x04,0xa2,0xd2,0x80,0xa2,0xd3,
+0x05,0x05,0xd4,0x80,0xff,0xff,0x02,0x04,0x42,0x48,0xf7,0x00,0x28,0x45,0x43,0x4c,
+0xd7,0x80,0x63,0x42,0x5a,0xd3,0x2e,0x05,0x3e,0xa4,0xa0,0xd3,0x04,0xa3,0x63,0x42,
+0xd7,0x80,0x5a,0xd1,0x23,0x07,0x64,0x42,0x3e,0xa2,0xa2,0xd1,0xff,0xff,0x90,0x80,
+0x00,0x3a,0x0a,0x00,0x60,0x41,0x2c,0x42,0xa2,0xd3,0xa3,0xd1,0xff,0xff,0xd0,0x80,
+0x61,0x5c,0x06,0x04,0x61,0x44,0xea,0x00,0xd0,0x80,0xff,0xff,0x01,0x07,0xe6,0x00,
+0x64,0x41,0x5b,0xd3,0x2c,0x42,0x5a,0xd1,0xa2,0xdb,0xa3,0xd9,0xff,0xff,0x4b,0xd3,
+0x2c,0x42,0xa2,0xd1,0xa2,0xdb,0xa3,0xd9,0x61,0x44,0xd8,0x00,0x2c,0x43,0x04,0xa3,
+0x43,0x4c,0xce,0x00,0xe9,0xf1,0xff,0x60,0x3f,0x64,0xa0,0x84,0xe9,0xfb,0x21,0x60,
+0x90,0x62,0xa2,0xd1,0x10,0x60,0x00,0x64,0xb0,0x84,0xa2,0xdb,0xcf,0xfe,0x21,0x60,
+0xa4,0x62,0x00,0x64,0xa2,0xdb,0x5a,0xdb,0x2f,0x58,0xff,0xff,0x6a,0x60,0x1c,0x62,
+0xa2,0xd3,0xff,0xff,0x00,0xa0,0xa0,0xd3,0x02,0x03,0x80,0xbc,0xa2,0xdb,0x22,0x60,
+0x48,0x63,0x63,0x45,0x2a,0x60,0xc8,0x64,0x7e,0xf3,0x40,0x48,0xc4,0x84,0x40,0x4c,
+0x2c,0x5c,0xd3,0x80,0xa3,0xd3,0x1f,0x05,0x60,0x47,0x80,0x2a,0x02,0x00,0x02,0x36,
+0x02,0xa4,0xfe,0xa4,0x60,0x47,0xa3,0xdb,0x60,0x40,0x00,0x3b,0x02,0x00,0x44,0xa3,
+0xef,0x00,0xd7,0x80,0xff,0xff,0x07,0x03,0x22,0x61,0xbd,0xd1,0xa5,0xd9,0xcd,0x81,
+0xda,0x85,0xfb,0x02,0x04,0x00,0x44,0xa3,0x65,0x44,0x44,0xa4,0x60,0x45,0x28,0x44,
+0x04,0xa4,0x40,0x48,0xdd,0x00,0x45,0x4c,0x22,0x60,0x48,0x65,0x2c,0x44,0xd4,0x84,
+0x7e,0xfb,0x65,0x43,0x2c,0x5c,0xd3,0x80,0xa3,0xd3,0x0b,0x05,0x60,0x40,0x80,0x26,
+0x02,0x00,0x44,0xa3,0xf8,0x00,0x80,0xac,0xa3,0xdb,0x6a,0x60,0x1c,0x65,0x63,0x44,
+0xa5,0xdb,0x28,0x44,0x7d,0xfb,0x2e,0x58,0xff,0xff,0x67,0x60,0x78,0x62,0xa2,0xd1,
+0x21,0x60,0x7a,0x62,0xa2,0xd3,0xff,0xff,0xd0,0x9c,0x67,0x60,0x7a,0x63,0x2a,0x44,
+0xe0,0x84,0xe0,0x85,0x47,0xd3,0xff,0xff,0xdc,0x84,0xbd,0xdb,0xa3,0xd9,0x2e,0x58,
+0xff,0xff,0x3f,0x60,0x9a,0x62,0x2b,0x60,0x4a,0x64,0xa2,0xdb,0x03,0x64,0x4a,0xdb,
+0xff,0xff,0x1d,0xff,0x21,0x60,0xa4,0x62,0x00,0x64,0xa2,0xdb,0x5a,0xdb,0x2f,0x58,
+0xff,0xff,0x21,0x60,0xa4,0x62,0xa2,0xd1,0x00,0x60,0x04,0x64,0xb0,0x84,0xa2,0xdb,
+0xff,0xff,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,0xa4,0x62,0xa2,0xd1,0x00,0x60,
+0x08,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x2f,0x58,0xff,0xff,0xe9,0xf3,
+0xff,0xff,0x60,0x40,0x03,0x26,0x37,0x00,0x6b,0x60,0x2c,0x62,0x80,0x60,0x23,0x64,
+0xa2,0xdb,0x22,0x60,0x48,0x63,0x7e,0xf3,0xff,0xff,0x00,0xa0,0x60,0x45,0x08,0x03,
+0xc7,0x85,0x5c,0x60,0x58,0x4e,0xd9,0x78,0xff,0xff,0x65,0x40,0x01,0x26,0x06,0x00,
+0x22,0x60,0x48,0x63,0x7e,0xf1,0x08,0x60,0x80,0x64,0x33,0x00,0x63,0x44,0x7b,0xfb,
+0xa3,0xd3,0xff,0xff,0x08,0x7f,0xa3,0xdb,0x25,0xf2,0x02,0xa3,0x60,0x45,0x00,0x7f,
+0xbd,0xdb,0x65,0x47,0x00,0x7f,0xa3,0xdb,0x5b,0x60,0x58,0x4e,0x51,0x78,0xff,0xff,
+0x64,0x44,0x00,0x3b,0x05,0x00,0x7b,0xf1,0xff,0xff,0x64,0x43,0x3e,0xa3,0xa3,0xdb,
+0x5b,0x60,0x4e,0x78,0xff,0xff,0x41,0x60,0x80,0x63,0xbd,0xd3,0xff,0xff,0x00,0xa0,
+0x60,0x45,0x08,0x03,0xc7,0x85,0x5c,0x60,0x58,0x4e,0xd9,0x78,0xff,0xff,0x65,0x40,
+0x01,0x26,0xee,0x00,0x41,0x60,0x82,0x63,0x41,0x60,0x80,0x62,0xa2,0xd1,0x1a,0x60,
+0x90,0x64,0xd0,0x80,0xff,0xff,0xe4,0x06,0xc3,0x83,0x7b,0xfd,0xff,0xff,0x73,0xf3,
+0x25,0xf0,0x08,0x7f,0xbd,0xdb,0x64,0x44,0x00,0x7f,0xbd,0xdb,0x64,0x47,0x00,0x7f,
+0xbd,0xdb,0x31,0xf0,0xbd,0xd9,0xff,0xff,0x32,0xf0,0xbd,0xd9,0x33,0xf0,0xff,0xff,
+0xbd,0xd9,0xff,0x60,0xff,0x7c,0x38,0xf2,0x00,0xf4,0x05,0xa4,0xa0,0xd8,0x06,0xf0,
+0xff,0xff,0xbd,0xd9,0x07,0xf0,0xff,0xff,0xbd,0xd9,0xe9,0xf3,0xff,0xff,0x03,0xb4,
+0xff,0xff,0x0a,0x02,0x16,0x60,0xd8,0x62,0xa2,0xd3,0xff,0xff,0x60,0x40,0x01,0x3a,
+0x03,0x00,0x64,0x40,0x01,0x2a,0xb4,0x00,0x00,0x64,0x32,0xa3,0xa3,0xdb,0x5b,0x60,
+0x58,0x4e,0x51,0x78,0xff,0xff,0xff,0x60,0xfe,0x64,0xd0,0x80,0xff,0xff,0xa8,0x03,
+0xc4,0xf3,0xff,0xff,0xfd,0xa0,0xff,0xff,0x58,0x05,0x00,0x36,0x13,0x00,0x6a,0x60,
+0x20,0x64,0xa0,0xd3,0xff,0xff,0x00,0xa0,0x60,0x43,0x0c,0x03,0x5c,0x60,0x58,0x4e,
+0xbe,0x78,0xff,0xff,0x64,0x43,0x18,0x60,0x18,0x64,0xa0,0xd1,0x65,0x44,0xd0,0x80,
+0x63,0x5c,0x8e,0x02,0x7b,0xf3,0xff,0xff,0x3e,0xa4,0x60,0x43,0xbd,0xd9,0x61,0x44,
+0xbd,0xdb,0xe9,0xf3,0xff,0xff,0x60,0x40,0x03,0x26,0x28,0x00,0xff,0x60,0xff,0x64,
+0xd0,0x80,0xff,0xff,0x04,0x02,0x6a,0x60,0x12,0x62,0x00,0x64,0xa2,0xdb,0x16,0x60,
+0xd8,0x62,0xa2,0xd1,0x80,0x60,0xc0,0x61,0xa1,0xd3,0x64,0x40,0x01,0x3a,0x16,0x00,
+0x60,0x43,0x00,0x36,0x13,0x00,0xff,0xa3,0xe3,0x83,0x66,0x45,0x26,0x46,0x50,0xfe,
+0x31,0xf2,0x59,0xd1,0x32,0xf2,0xd0,0x80,0x59,0xd1,0x33,0xf2,0xd0,0x80,0x59,0xd1,
+0xff,0xff,0xd0,0x80,0xff,0xff,0x11,0x01,0xf2,0x1f,0x65,0x46,0x5d,0x60,0x58,0x4e,
+0x12,0x78,0xff,0xff,0x7b,0xf3,0x42,0x65,0x44,0xd9,0xce,0xa4,0x60,0x43,0x00,0x64,
+0x08,0xf0,0xa3,0xdb,0x64,0x47,0x60,0x45,0x00,0x3b,0x4b,0x00,0x00,0x36,0x49,0x00,
+0xbd,0xdb,0xdc,0x84,0xe8,0x81,0x10,0x64,0x58,0xd0,0xcd,0x81,0xbd,0xd9,0xfc,0x02,
+0xd8,0x83,0x04,0x64,0x40,0x4d,0x07,0x61,0x65,0x40,0x01,0x2a,0xbd,0xd0,0xff,0xff,
+0x64,0x44,0x00,0x7f,0x2d,0x42,0xa2,0xda,0x5a,0x8d,0x64,0x47,0x00,0x7f,0x2d,0x42,
+0xa2,0xda,0xcd,0x81,0x5a,0x8d,0xf2,0x02,0x7b,0xf1,0x32,0x63,0xc3,0x83,0x04,0x61,
+0x65,0x40,0x01,0x26,0x02,0xa1,0xa1,0xd2,0xff,0xff,0x06,0xb6,0x7e,0x00,0x00,0x10,
+0x01,0xa8,0x59,0xd2,0x21,0x02,0x59,0xd0,0xcc,0x84,0xbd,0xd9,0xfc,0x02,0x00,0x64,
+0xbd,0xdb,0x59,0xd2,0x59,0xd0,0x03,0xa8,0x73,0xf3,0x16,0x02,0x59,0xd0,0xff,0xff,
+0x00,0x7f,0xd0,0x80,0xff,0xff,0x10,0x02,0x7b,0xf3,0x32,0x65,0xc4,0x83,0x00,0x61,
+0xa3,0xd3,0xff,0xff,0x60,0x40,0xff,0x22,0x14,0x00,0x80,0x2a,0x10,0x00,0x60,0x40,
+0x82,0x3a,0x03,0x00,0x01,0xb9,0x0b,0x00,0x26,0x00,0x84,0x3a,0x02,0x00,0x02,0xb9,
+0x06,0x00,0x8b,0x3a,0x02,0x00,0x04,0xb9,0x02,0x00,0x96,0x36,0x08,0xb9,0x02,0xa3,
+0xe7,0x00,0x7b,0xf3,0x3c,0x65,0xc4,0x82,0x61,0x43,0xa2,0xdd,0xe9,0xf3,0xff,0xff,
+0x60,0x40,0x03,0x26,0x09,0x00,0x7e,0xf3,0xff,0xff,0x44,0xa4,0x7e,0xfb,0x7d,0xf3,
+0xff,0xff,0x04,0xa4,0xa2,0xdb,0x07,0x00,0x41,0x60,0x80,0x62,0xa2,0xd3,0xff,0xff,
+0x44,0xa4,0xa2,0xdb,0xff,0xff,0x26,0x46,0x2f,0x58,0xff,0xff,0x6a,0x60,0x26,0x62,
+0x2e,0x44,0xa2,0xdb,0x6a,0x60,0x20,0x62,0x00,0x7c,0xa2,0xd9,0x6a,0x60,0x2c,0x62,
+0xa2,0xd9,0x80,0x60,0x8a,0x62,0xa2,0xd9,0x01,0xf2,0x10,0x63,0x00,0x7f,0xf4,0xa4,
 0x60,0x41,0x10,0x63,0x63,0x44,0x01,0x22,0x05,0x00,0x01,0xac,0xa0,0xd2,0x01,0xa3,
 0x60,0x47,0x02,0x00,0xa0,0xd2,0x01,0xa3,0x00,0x7f,0x60,0x5c,0x63,0x44,0x01,0x22,
 0x05,0x00,0x01,0xac,0xa0,0xd2,0x01,0xa3,0x60,0x47,0x02,0x00,0xa0,0xd2,0x01,0xa3,
-0x00,0x7f,0x60,0x45,0x64,0x44,0xad,0xa8,0x07,0xa8,0x0c,0x03,0x15,0x03,0xc9,0x81,
-0xd5,0x81,0x61,0x44,0x80,0x27,0x03,0x00,0xff,0xa0,0xc7,0x83,0xdb,0x07,0x58,0x60,
-0xc0,0x78,0xff,0xff,0x67,0x60,0x4c,0x62,0x5a,0xdd,0x65,0x44,0x5a,0xdb,0x61,0x44,
-0x5a,0xdb,0x58,0x60,0x7d,0x78,0xff,0xff,0x67,0x60,0x44,0x62,0xa2,0xdd,0xd5,0xf3,
-0xff,0xff,0xfd,0xa0,0xff,0xff,0xe3,0x04,0x17,0x60,0xa0,0x61,0x59,0x60,0x58,0x4e,
-0x14,0x78,0xff,0xff,0x65,0x44,0xa1,0xdb,0x08,0xa1,0xa1,0xdb,0x02,0xa1,0x63,0x44,
+0x00,0x7f,0x60,0x45,0x64,0x44,0xad,0xa8,0x07,0xa8,0x13,0x03,0xdd,0xa8,0x1b,0x03,
+0x05,0x02,0x80,0x60,0x88,0x62,0x5a,0xdd,0x65,0x44,0x5a,0xdb,0xc9,0x81,0xd5,0x81,
+0x61,0x44,0x80,0x27,0x03,0x00,0xff,0xa0,0xc7,0x83,0xd4,0x07,0x5c,0x60,0x68,0x78,
+0xff,0xff,0x6a,0x60,0x2a,0x62,0x5a,0xdd,0x65,0x44,0x5a,0xdb,0x61,0x44,0x5a,0xdb,
+0x5c,0x60,0x20,0x78,0xff,0xff,0x6a,0x60,0x20,0x62,0xa2,0xdd,0xc4,0xf3,0xff,0xff,
+0xfd,0xa0,0xff,0xff,0xe3,0x04,0x18,0x60,0x18,0x61,0x5c,0x60,0x58,0x4e,0xbe,0x78,
+0xff,0xff,0x65,0x44,0xa1,0xdb,0x08,0xa1,0xa1,0xdb,0x02,0xa1,0x63,0x44,0x01,0x22,
+0x05,0x00,0x01,0xac,0xa0,0xd2,0x01,0xa3,0x60,0x47,0x02,0x00,0xa0,0xd2,0x01,0xa3,
+0x00,0x7f,0xa1,0xdb,0x22,0x60,0x3c,0x61,0x63,0x44,0x01,0x22,0x05,0x00,0x01,0xac,
+0xa0,0xd2,0x01,0xa3,0x60,0x47,0x02,0x00,0xa0,0xd2,0x01,0xa3,0x00,0x7f,0xa1,0xdb,
+0x22,0x60,0x3e,0x61,0x63,0x44,0x01,0x22,0x05,0x00,0x01,0xac,0xa0,0xd2,0x01,0xa3,
+0x60,0x47,0x02,0x00,0xa0,0xd2,0x01,0xa3,0x00,0x7f,0xf2,0xa0,0xff,0xff,0x01,0x06,
+0x0e,0x64,0xa1,0xdb,0x18,0x60,0x16,0x61,0x63,0x44,0x01,0x22,0x05,0x00,0x01,0xac,
+0xa0,0xd2,0x01,0xa3,0x60,0x47,0x02,0x00,0xa0,0xd2,0x01,0xa3,0x00,0x7f,0xa1,0xdb,
+0x3e,0x60,0x58,0x4e,0xbf,0x78,0xff,0xff,0x22,0x60,0x3e,0x61,0xa1,0xd1,0x22,0x60,
+0x04,0x63,0x22,0x60,0x3c,0x62,0xa2,0xd3,0x01,0x61,0x00,0x65,0xff,0xa0,0xff,0xff,
+0x04,0x03,0xe1,0x81,0xcc,0x84,0x02,0xa3,0xf9,0x00,0x64,0x44,0x05,0x7c,0xb5,0x85,
+0xbd,0xd9,0xcc,0x84,0x00,0xa0,0xe1,0x81,0xfa,0x02,0x65,0x44,0x9b,0xfb,0x16,0x60,
+0xd8,0x62,0xa2,0xd3,0x01,0x7c,0x04,0xa8,0xc4,0xf9,0x05,0x02,0x0c,0x60,0x50,0x62,
+0x6b,0x60,0xac,0x64,0xa2,0xdb,0x0b,0x65,0x3d,0x60,0x58,0x4e,0x39,0x78,0xff,0xff,
+0xff,0x60,0xfe,0x7c,0x5c,0x60,0x6c,0x78,0xff,0xff,0x45,0x4d,0x5c,0x60,0x58,0x4e,
+0xbe,0x78,0xff,0xff,0xa0,0x60,0x00,0x64,0xd4,0x80,0xff,0xff,0x3e,0x02,0x63,0x44,
 0x01,0x22,0x05,0x00,0x01,0xac,0xa0,0xd2,0x01,0xa3,0x60,0x47,0x02,0x00,0xa0,0xd2,
-0x01,0xa3,0x00,0x7f,0xa1,0xdb,0x1f,0x60,0x74,0x61,0x63,0x44,0x01,0x22,0x05,0x00,
-0x01,0xac,0xa0,0xd2,0x01,0xa3,0x60,0x47,0x02,0x00,0xa0,0xd2,0x01,0xa3,0x00,0x7f,
-0xa1,0xdb,0x1f,0x60,0x76,0x61,0x63,0x44,0x01,0x22,0x05,0x00,0x01,0xac,0xa0,0xd2,
-0x01,0xa3,0x60,0x47,0x02,0x00,0xa0,0xd2,0x01,0xa3,0x00,0x7f,0xf2,0xa0,0xff,0xff,
-0x01,0x06,0x0e,0x64,0xa1,0xdb,0x17,0x60,0x9e,0x61,0x63,0x44,0x01,0x22,0x05,0x00,
-0x01,0xac,0xa0,0xd2,0x01,0xa3,0x60,0x47,0x02,0x00,0xa0,0xd2,0x01,0xa3,0x00,0x7f,
-0xa1,0xdb,0x3e,0x60,0x58,0x4e,0xae,0x78,0xff,0xff,0x1f,0x60,0x76,0x61,0xa1,0xd1,
-0x1f,0x60,0x3c,0x63,0x1f,0x60,0x74,0x62,0xa2,0xd3,0x01,0x61,0x00,0x65,0xff,0xa0,
-0xff,0xff,0x04,0x03,0xe1,0x81,0xcc,0x84,0x02,0xa3,0xf9,0x00,0x64,0x44,0x05,0x7c,
-0xb5,0x85,0xbd,0xd9,0xcc,0x84,0x00,0xa0,0xe1,0x81,0xfa,0x02,0x65,0x44,0xa5,0xfb,
-0x16,0x60,0x60,0x62,0xa2,0xd3,0x01,0x7c,0x04,0xa8,0xd5,0xf9,0x05,0x02,0x0c,0x60,
-0x50,0x62,0x67,0x60,0x75,0x64,0xa2,0xdb,0x0b,0x65,0x3d,0x60,0x58,0x4e,0x32,0x78,
-0xff,0xff,0xff,0x60,0xfe,0x7c,0x58,0x60,0xc4,0x78,0xff,0xff,0x45,0x4d,0x59,0x60,
-0x58,0x4e,0x14,0x78,0xff,0xff,0xa0,0x60,0x00,0x64,0xd4,0x80,0xff,0xff,0x39,0x02,
-0x63,0x44,0x01,0x22,0x05,0x00,0x01,0xac,0xa0,0xd2,0x01,0xa3,0x60,0x47,0x02,0x00,
-0xa0,0xd2,0x01,0xa3,0x00,0x7f,0xf8,0x65,0xd4,0x80,0xff,0xff,0x2a,0x02,0x59,0x60,
-0x58,0x4e,0x14,0x78,0xff,0xff,0x65,0x5c,0x59,0x60,0x58,0x4e,0x14,0x78,0xff,0xff,
-0x67,0x41,0x59,0x60,0x58,0x4e,0x14,0x78,0xff,0xff,0x2d,0x44,0xf1,0xa0,0xff,0xff,
-0x1c,0x04,0x45,0x4d,0x59,0x60,0x58,0x4e,0x14,0x78,0xff,0xff,0x65,0x41,0x59,0x60,
-0x58,0x4e,0x14,0x78,0xff,0xff,0x67,0x60,0x46,0x62,0x65,0x44,0xa2,0xdb,0x59,0x60,
-0x58,0x4e,0x14,0x78,0xff,0xff,0x67,0x60,0x48,0x62,0x65,0x44,0xa2,0xdb,0x2d,0x45,
-0x04,0x00,0xff,0x60,0xff,0x7c,0x64,0x41,0x00,0x65,0x67,0x60,0x4a,0x62,0xa2,0xd3,
-0xff,0xff,0x40,0x4e,0x2e,0x58,0xff,0xff,0x67,0x60,0x4a,0x62,0x2e,0x44,0xa2,0xdb,
-0x67,0x60,0x4c,0x62,0x5a,0xd3,0x5a,0xd1,0x00,0xa0,0x60,0x43,0x36,0x03,0x5a,0xd3,
-0x64,0x45,0x60,0x41,0x1c,0x00,0x63,0x44,0x01,0x22,0x05,0x00,0x01,0xac,0xa0,0xd2,
-0x01,0xa3,0x60,0x47,0x02,0x00,0xa0,0xd2,0x01,0xa3,0x00,0x7f,0x60,0x5c,0x63,0x44,
+0x01,0xa3,0x00,0x7f,0xf8,0x65,0xd4,0x80,0xff,0xff,0x2f,0x02,0x5c,0x60,0x58,0x4e,
+0xbe,0x78,0xff,0xff,0x65,0x5c,0x5c,0x60,0x58,0x4e,0xbe,0x78,0xff,0xff,0x67,0x41,
+0x5c,0x60,0x58,0x4e,0xbe,0x78,0xff,0xff,0x2d,0x44,0xf1,0xa0,0xff,0xff,0x21,0x04,
+0x45,0x4d,0x5c,0x60,0x58,0x4e,0xbe,0x78,0xff,0xff,0x65,0x41,0xe9,0xf3,0xff,0xff,
+0x60,0x40,0x03,0x26,0x10,0x00,0x5c,0x60,0x58,0x4e,0xbe,0x78,0xff,0xff,0x6a,0x60,
+0x22,0x62,0x65,0x44,0xa2,0xdb,0x5c,0x60,0x58,0x4e,0xbe,0x78,0xff,0xff,0x6a,0x60,
+0x24,0x62,0x65,0x44,0xa2,0xdb,0x2d,0x45,0x04,0x00,0xff,0x60,0xff,0x7c,0x64,0x41,
+0x00,0x65,0x6a,0x60,0x26,0x62,0xa2,0xd3,0xff,0xff,0x40,0x4e,0x2e,0x58,0xff,0xff,
+0x6a,0x60,0x26,0x62,0x2e,0x44,0xa2,0xdb,0x6a,0x60,0x2a,0x62,0x5a,0xd3,0x5a,0xd1,
+0x00,0xa0,0x60,0x43,0x38,0x03,0x5a,0xd3,0x64,0x45,0x60,0x41,0x1c,0x00,0x63,0x44,
 0x01,0x22,0x05,0x00,0x01,0xac,0xa0,0xd2,0x01,0xa3,0x60,0x47,0x02,0x00,0xa0,0xd2,
-0x01,0xa3,0x00,0x7f,0x60,0x45,0x64,0x44,0xae,0xa8,0xff,0xff,0x07,0x03,0xc9,0x81,
-0xd5,0x81,0x61,0x44,0xff,0xa0,0xc7,0x83,0xde,0x07,0x0f,0x00,0xdf,0x83,0x59,0x60,
-0x58,0x4e,0x14,0x78,0xff,0xff,0xf8,0x60,0xa0,0x64,0xd4,0x80,0xff,0xff,0x05,0x02,
-0x59,0x60,0x58,0x4e,0x14,0x78,0xff,0xff,0x01,0x00,0x00,0x65,0x67,0x60,0x4a,0x62,
-0xa2,0xd3,0xff,0xff,0x40,0x4e,0x2e,0x58,0xff,0xff,0x63,0x44,0x01,0x22,0x05,0x00,
-0x01,0xac,0xa0,0xd2,0x01,0xa3,0x60,0x47,0x02,0x00,0xa0,0xd2,0x01,0xa3,0x00,0x7f,
-0x60,0x45,0x63,0x44,0x01,0x22,0x05,0x00,0x01,0xac,0xa0,0xd2,0x01,0xa3,0x60,0x47,
-0x02,0x00,0xa0,0xd2,0x01,0xa3,0x00,0x7f,0x60,0x47,0xb4,0x85,0x2e,0x58,0xff,0xff,
-0x2f,0x58,0xff,0xff,0x1e,0x60,0xfa,0x62,0xa2,0xd1,0x00,0x60,0x04,0x64,0xb0,0x84,
-0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x2f,0x58,0xff,0xff,0xbb,0xf1,0x28,0x60,0xce,0x62,
-0xa2,0xd9,0x3c,0x60,0xe2,0x62,0x28,0x60,0xca,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,
-0xff,0xff,0x1d,0xff,0x1e,0x60,0xfc,0x62,0x00,0x60,0x0c,0x64,0xa2,0xdb,0x59,0x60,
-0x54,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,0xfa,0x62,0xa2,0xd1,
-0x00,0x60,0x08,0x64,0xa0,0x80,0x9c,0x84,0x0c,0x03,0xa0,0x84,0xa2,0xdb,0x0f,0x47,
-0x67,0x60,0xbc,0x62,0x6f,0x60,0x00,0x64,0xa2,0xdb,0x58,0x4f,0x29,0x00,0x07,0x4f,
-0xd4,0x00,0x1e,0x60,0xfa,0x62,0xa2,0xd1,0xff,0x60,0xfb,0x61,0xa1,0x84,0x5a,0xd1,
-0x4a,0xdb,0xa1,0x84,0x5a,0xdb,0xcb,0xf3,0xff,0xff,0xfc,0xa0,0xff,0xff,0xc5,0x02,
-0x17,0x60,0x98,0x62,0xa2,0xd3,0xff,0xff,0xff,0xff,0x02,0x2a,0xbe,0x00,0x0f,0x47,
-0x67,0x60,0xbc,0x62,0x66,0x60,0x00,0x64,0xa2,0xdb,0x58,0x4f,0x09,0x00,0x67,0x60,
-0xbc,0x62,0x69,0x60,0x00,0x64,0xa2,0xdb,0x58,0x4f,0x02,0x00,0x07,0x4f,0xad,0x00,
-0x48,0xf1,0x0f,0x4e,0x64,0x41,0x41,0x4d,0x40,0xa1,0xa2,0xff,0x19,0x60,0x58,0x4f,
-0xaa,0x78,0xff,0xff,0xa3,0xff,0x06,0x03,0x2d,0x41,0x19,0x60,0x58,0x4f,0xcc,0x78,
-0xff,0xff,0x08,0xfe,0x0e,0x4f,0x03,0x02,0x5b,0x60,0x38,0x78,0xff,0xff,0x67,0x60,
-0xbc,0x64,0xa0,0xd3,0xff,0xff,0x60,0x47,0xff,0xff,0x66,0x3a,0x59,0x00,0x50,0xf1,
-0x5b,0x60,0xb8,0x64,0xa0,0xd9,0x7f,0xf1,0x5b,0x60,0xba,0x64,0xa0,0xd9,0x84,0xf1,
-0x5b,0x60,0xc2,0x64,0xa0,0xd9,0xcb,0xf1,0x5b,0x60,0xc4,0x64,0xa0,0xd9,0xbd,0xf1,
-0x5b,0x60,0xc6,0x64,0xa0,0xd9,0xc7,0xf1,0x5b,0x60,0xcc,0x64,0xa0,0xd9,0xc8,0xf1,
-0x5b,0x60,0xce,0x64,0xa0,0xd9,0x5b,0x60,0xbc,0x63,0x81,0xf1,0xbd,0xd9,0x81,0xf1,
-0xff,0xff,0xbd,0xd9,0x81,0xf1,0xa3,0xd9,0x5a,0x60,0x26,0x65,0x5b,0x60,0xd0,0x64,
-0x65,0x41,0xd4,0x85,0xfe,0xa1,0x65,0x43,0x0a,0xa3,0x38,0xfc,0x46,0x48,0x00,0xf4,
-0x04,0x63,0x0a,0xa3,0x81,0x60,0x87,0x64,0x02,0xfa,0x67,0x60,0xbc,0x64,0xa0,0xd3,
-0xff,0xff,0x03,0xfa,0x65,0x47,0x05,0xfa,0x60,0x47,0x8e,0xa0,0xff,0xff,0x09,0x04,
+0x01,0xa3,0x00,0x7f,0x60,0x5c,0x63,0x44,0x01,0x22,0x05,0x00,0x01,0xac,0xa0,0xd2,
+0x01,0xa3,0x60,0x47,0x02,0x00,0xa0,0xd2,0x01,0xa3,0x00,0x7f,0x60,0x45,0x64,0x44,
+0xae,0xa8,0xff,0xff,0x09,0x03,0xc9,0x81,0xd5,0x81,0x61,0x44,0x80,0x27,0x13,0x00,
+0xff,0xa0,0xc7,0x83,0xdc,0x07,0x0f,0x00,0xdf,0x83,0x5c,0x60,0x58,0x4e,0xbe,0x78,
+0xff,0xff,0xf8,0x60,0xa0,0x64,0xd4,0x80,0xff,0xff,0x05,0x02,0x5c,0x60,0x58,0x4e,
+0xbe,0x78,0xff,0xff,0x01,0x00,0x00,0x65,0x6a,0x60,0x26,0x62,0xa2,0xd3,0xff,0xff,
+0x40,0x4e,0x2e,0x58,0xff,0xff,0x63,0x44,0x01,0x22,0x05,0x00,0x01,0xac,0xa0,0xd2,
+0x01,0xa3,0x60,0x47,0x02,0x00,0xa0,0xd2,0x01,0xa3,0x00,0x7f,0x60,0x45,0x63,0x44,
+0x01,0x22,0x05,0x00,0x01,0xac,0xa0,0xd2,0x01,0xa3,0x60,0x47,0x02,0x00,0xa0,0xd2,
+0x01,0xa3,0x00,0x7f,0x60,0x47,0xb4,0x85,0x2e,0x58,0xff,0xff,0x63,0x5c,0x04,0x64,
+0xc0,0x81,0x31,0xf2,0x50,0xfe,0x59,0xd1,0x32,0xf2,0xd0,0x80,0x59,0xd1,0x33,0xf2,
+0xd0,0x80,0x59,0xd1,0xff,0xff,0xd0,0x80,0xff,0xff,0x01,0x01,0x1e,0x00,0x00,0xf4,
+0x06,0xa1,0x08,0xf2,0xa1,0xd1,0x02,0xa1,0xc1,0x81,0x60,0x47,0xd0,0x80,0x12,0xa4,
+0x13,0x02,0x01,0x2a,0x09,0x00,0x01,0xac,0x01,0xa9,0xa1,0xd1,0xa0,0xd0,0x64,0x42,
+0x92,0x82,0x62,0x40,0x00,0x3a,0x08,0x00,0x48,0xd0,0x49,0xd1,0x64,0x42,0xf0,0xa0,
+0xd2,0x80,0x09,0x03,0x01,0x02,0xf8,0x00,0x26,0x46,0x44,0xa3,0xd7,0x80,0xff,0xff,
+0xcd,0x02,0x00,0x65,0x01,0x00,0x01,0x65,0x26,0x46,0x2e,0x58,0xff,0xff,0x6a,0x60,
+0x26,0x62,0x2e,0x44,0xa2,0xdb,0x80,0x60,0x88,0x62,0x5a,0xd3,0x5a,0xd1,0x00,0xa0,
+0x60,0x43,0x64,0x45,0x30,0x02,0x6a,0x60,0x2a,0x62,0x5a,0xd3,0x5a,0xd1,0x00,0xa0,
+0x60,0x43,0x7c,0x03,0x5a,0xd3,0x64,0x45,0x60,0x41,0x1c,0x00,0x63,0x44,0x01,0x22,
+0x05,0x00,0x01,0xac,0xa0,0xd2,0x01,0xa3,0x60,0x47,0x02,0x00,0xa0,0xd2,0x01,0xa3,
+0x00,0x7f,0x60,0x5c,0x63,0x44,0x01,0x22,0x05,0x00,0x01,0xac,0xa0,0xd2,0x01,0xa3,
+0x60,0x47,0x02,0x00,0xa0,0xd2,0x01,0xa3,0x00,0x7f,0x60,0x45,0x64,0x44,0xdd,0xa8,
+0xff,0xff,0x09,0x03,0xc9,0x81,0xd5,0x81,0x61,0x44,0x80,0x27,0x57,0x00,0xff,0xa0,
+0xc7,0x83,0xdc,0x07,0x53,0x00,0x45,0x4d,0x5c,0x60,0x58,0x4e,0xbe,0x78,0xff,0xff,
+0x50,0x60,0x00,0x64,0xd4,0x80,0xff,0xff,0x49,0x02,0x5c,0x60,0x58,0x4e,0xbe,0x78,
+0xff,0xff,0x01,0x60,0xf2,0x64,0xd4,0x80,0xff,0xff,0x40,0x02,0x5c,0x60,0x58,0x4e,
+0xbe,0x78,0xff,0xff,0x00,0x60,0x01,0x64,0xd4,0x80,0xff,0xff,0x37,0x02,0x2d,0x44,
+0xfa,0xa0,0xf6,0xa4,0x33,0x03,0x04,0xa3,0x40,0x4d,0x00,0x36,0x2f,0x00,0x5c,0x60,
+0x58,0x4e,0xbe,0x78,0xff,0xff,0x65,0x44,0xe0,0x84,0xe0,0x85,0x2d,0x44,0xfe,0xa4,
+0xd4,0x84,0x40,0x4d,0x00,0x36,0x22,0x00,0xc7,0x83,0x5c,0x60,0x58,0x4e,0xbe,0x78,
+0xff,0xff,0x65,0x41,0x00,0x36,0x1a,0x00,0xa0,0x60,0x00,0x7c,0x61,0x40,0x00,0x36,
+0x15,0x00,0x5c,0x60,0x58,0x4e,0xbe,0x78,0xff,0xff,0x65,0x44,0xd0,0x80,0xff,0xff,
+0x0a,0x02,0x5c,0x60,0x58,0x4e,0xbe,0x78,0xff,0xff,0x65,0x44,0xf8,0x3a,0x04,0x00,
+0x01,0x7e,0x60,0x5c,0x04,0x00,0x02,0xa3,0xcd,0x81,0xe8,0x00,0x00,0x7c,0x6a,0x60,
+0x26,0x62,0xa2,0xd3,0xff,0xff,0x40,0x4e,0x2e,0x58,0xff,0xff,0x2f,0x58,0xff,0xff,
+0x21,0x60,0xc2,0x62,0xa2,0xd1,0x00,0x60,0x04,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,
+0xcf,0xfe,0x2f,0x58,0xff,0xff,0xae,0xf1,0x2b,0x60,0x96,0x62,0xa2,0xd9,0x3f,0x60,
+0xaa,0x62,0x2b,0x60,0x92,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,
+0x21,0x60,0xc4,0x62,0x00,0x60,0x0c,0x64,0xa2,0xdb,0x5d,0x60,0xce,0x64,0x5a,0xdb,
+0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,0xc2,0x62,0xa2,0xd1,0x00,0x60,0x08,0x64,
+0xa0,0x80,0x9c,0x84,0x0c,0x03,0xa0,0x84,0xa2,0xdb,0x0f,0x47,0x6a,0x60,0x94,0x62,
+0x6f,0x60,0x00,0x64,0xa2,0xdb,0x58,0x4f,0x29,0x00,0x07,0x4f,0xd4,0x00,0x21,0x60,
+0xc2,0x62,0xa2,0xd1,0xff,0x60,0xfb,0x61,0xa1,0x84,0x5a,0xd1,0x4a,0xdb,0xa1,0x84,
+0x5a,0xdb,0xbd,0xf3,0xff,0xff,0xfc,0xa0,0xff,0xff,0xc5,0x02,0x18,0x60,0x10,0x62,
+0xa2,0xd3,0xff,0xff,0xff,0xff,0x02,0x2a,0xbe,0x00,0x0f,0x47,0x6a,0x60,0x94,0x62,
+0x66,0x60,0x00,0x64,0xa2,0xdb,0x58,0x4f,0x09,0x00,0x6a,0x60,0x94,0x62,0x69,0x60,
+0x00,0x64,0xa2,0xdb,0x58,0x4f,0x02,0x00,0x07,0x4f,0xad,0x00,0x3b,0xf1,0x0f,0x4e,
+0x64,0x41,0x41,0x4d,0x40,0xa1,0xa2,0xff,0x19,0x60,0x58,0x4f,0x39,0x78,0xff,0xff,
+0xa3,0xff,0x06,0x03,0x2d,0x41,0x19,0x60,0x58,0x4f,0x5b,0x78,0xff,0xff,0x08,0xfe,
+0x0e,0x4f,0x03,0x02,0x5f,0x60,0xbc,0x78,0xff,0xff,0x6a,0x60,0x94,0x64,0xa0,0xd3,
+0xff,0xff,0x60,0x47,0xff,0xff,0x66,0x3a,0x59,0x00,0x43,0xf1,0x64,0x60,0xaa,0x64,
+0xa0,0xd9,0x73,0xf1,0x64,0x60,0xac,0x64,0xa0,0xd9,0x78,0xf1,0x64,0x60,0xb4,0x64,
+0xa0,0xd9,0xbd,0xf1,0x64,0x60,0xb6,0x64,0xa0,0xd9,0xb0,0xf1,0x64,0x60,0xb8,0x64,
+0xa0,0xd9,0xb9,0xf1,0x64,0x60,0xbe,0x64,0xa0,0xd9,0xba,0xf1,0x64,0x60,0xc0,0x64,
+0xa0,0xd9,0x64,0x60,0xae,0x63,0x75,0xf1,0xbd,0xd9,0x75,0xf1,0xff,0xff,0xbd,0xd9,
+0x75,0xf1,0xa3,0xd9,0x63,0x60,0x18,0x65,0x64,0x60,0xc2,0x64,0x65,0x41,0xd4,0x85,
+0xfe,0xa1,0x65,0x43,0x0a,0xa3,0x38,0xfc,0x46,0x48,0x00,0xf4,0x04,0x63,0x0a,0xa3,
+0x81,0x60,0x87,0x64,0x02,0xfa,0x6a,0x60,0x94,0x64,0xa0,0xd3,0xff,0xff,0x03,0xfa,
+0x65,0x47,0x05,0xfa,0x60,0x47,0x8e,0xa0,0xff,0xff,0x09,0x04,0x8e,0xa5,0x72,0x64,
+0x07,0x00,0x84,0xa0,0xff,0xff,0x03,0x04,0x84,0xa5,0x7c,0x64,0x01,0x00,0x00,0x65,
+0x59,0xd1,0xbd,0xd8,0xfe,0xa4,0xff,0xff,0xfb,0x07,0x65,0x44,0x00,0xa0,0x00,0xf4,
+0x02,0x03,0x04,0x63,0xee,0x00,0x5f,0x60,0x67,0x78,0xff,0xff,0x6e,0x3a,0x00,0x00,
+0x67,0x3a,0x00,0x00,0x68,0x3a,0x00,0x00,0x69,0x36,0x03,0x00,0x5f,0x60,0x23,0x78,
+0xff,0xff,0x64,0x60,0xde,0x63,0x64,0x60,0xe2,0x62,0xa2,0xd3,0xa3,0xd1,0x00,0xa0,
+0xff,0xff,0x56,0x03,0x02,0x60,0x80,0x63,0x64,0x41,0x64,0x60,0xf4,0x65,0xc5,0x81,
+0xfe,0xa1,0xd3,0x85,0x0a,0xa3,0x38,0xfc,0x46,0x48,0x00,0xf4,0x81,0x60,0x87,0x64,
+0x02,0xfa,0x6a,0x60,0x94,0x64,0xa0,0xd3,0xff,0xff,0x03,0xfa,0x63,0x47,0x05,0xfa,
+0x04,0x63,0x0a,0xa3,0x65,0x44,0x8e,0xa0,0xff,0xff,0x09,0x04,0x8e,0xa5,0x72,0x64,
+0x08,0x00,0x84,0xa0,0xff,0xff,0x03,0x04,0x84,0xa5,0x7c,0x64,0x02,0x00,0x00,0x65,
+0x40,0x49,0x59,0xd1,0xbd,0xd8,0xfe,0xa4,0xff,0xff,0xfb,0x07,0x65,0x44,0x00,0xa0,
+0xff,0xff,0x03,0x03,0x00,0xf4,0x04,0x63,0xec,0x00,0x64,0x60,0xde,0x62,0x64,0x60,
+0xf4,0x61,0xfe,0xa1,0xa2,0xd3,0x29,0x45,0x00,0xa0,0x7c,0x62,0x4e,0x03,0xd6,0x85,
+0xd4,0x80,0x60,0x42,0x09,0x06,0x65,0x44,0xd6,0x85,0x07,0x00,0x84,0xa0,0xff,0xff,
+0x03,0x04,0x84,0xa5,0x7c,0x64,0x01,0x00,0x00,0x65,0x59,0xd1,0xbd,0xd8,0xfe,0xa4,
+0xff,0xff,0xfb,0x07,0x65,0x44,0x00,0xa0,0x00,0xf4,0x37,0x03,0x04,0x63,0xee,0x00,
+0x00,0x64,0xd0,0x80,0xff,0xff,0x03,0x02,0x5f,0x60,0xa8,0x78,0xff,0xff,0x64,0x45,
+0x64,0x44,0x0a,0xa4,0x38,0xfa,0x64,0x60,0xf4,0x61,0xfe,0xa1,0x46,0x48,0x00,0xf4,
+0x04,0x63,0x81,0x60,0x87,0x64,0x02,0xfa,0x6a,0x60,0x94,0x64,0xa0,0xd3,0xff,0xff,
+0x03,0xfa,0x65,0x47,0x05,0xfa,0x0a,0xa3,0x65,0x44,0x8e,0xa0,0xff,0xff,0x09,0x04,
 0x8e,0xa5,0x72,0x64,0x07,0x00,0x84,0xa0,0xff,0xff,0x03,0x04,0x84,0xa5,0x7c,0x64,
 0x01,0x00,0x00,0x65,0x59,0xd1,0xbd,0xd8,0xfe,0xa4,0xff,0xff,0xfb,0x07,0x65,0x44,
-0x00,0xa0,0x00,0xf4,0x02,0x03,0x04,0x63,0xee,0x00,0x5a,0x60,0xea,0x78,0xff,0xff,
-0x6e,0x3a,0x00,0x00,0x67,0x3a,0x00,0x00,0x68,0x3a,0x00,0x00,0x69,0x36,0x03,0x00,
-0x5a,0x60,0xa9,0x78,0xff,0xff,0x62,0x60,0x42,0x63,0x62,0x60,0x46,0x62,0xa2,0xd3,
-0xa3,0xd1,0x00,0xa0,0xff,0xff,0x56,0x03,0x02,0x60,0x80,0x63,0x64,0x41,0x62,0x60,
-0x58,0x65,0xc5,0x81,0xfe,0xa1,0xd3,0x85,0x0a,0xa3,0x38,0xfc,0x46,0x48,0x00,0xf4,
-0x81,0x60,0x87,0x64,0x02,0xfa,0x67,0x60,0xbc,0x64,0xa0,0xd3,0xff,0xff,0x03,0xfa,
-0x63,0x47,0x05,0xfa,0x04,0x63,0x0a,0xa3,0x65,0x44,0x8e,0xa0,0xff,0xff,0x09,0x04,
-0x8e,0xa5,0x72,0x64,0x08,0x00,0x84,0xa0,0xff,0xff,0x03,0x04,0x84,0xa5,0x7c,0x64,
-0x02,0x00,0x00,0x65,0x40,0x49,0x59,0xd1,0xbd,0xd8,0xfe,0xa4,0xff,0xff,0xfb,0x07,
-0x65,0x44,0x00,0xa0,0xff,0xff,0x03,0x03,0x00,0xf4,0x04,0x63,0xec,0x00,0x62,0x60,
-0x42,0x62,0x62,0x60,0x58,0x61,0xfe,0xa1,0xa2,0xd3,0x29,0x45,0x00,0xa0,0x7c,0x62,
-0x4e,0x03,0xd6,0x85,0xd4,0x80,0x60,0x42,0x09,0x06,0x65,0x44,0xd6,0x85,0x07,0x00,
-0x84,0xa0,0xff,0xff,0x03,0x04,0x84,0xa5,0x7c,0x64,0x01,0x00,0x00,0x65,0x59,0xd1,
-0xbd,0xd8,0xfe,0xa4,0xff,0xff,0xfb,0x07,0x65,0x44,0x00,0xa0,0x00,0xf4,0x37,0x03,
-0x04,0x63,0xee,0x00,0x00,0x64,0xd0,0x80,0xff,0xff,0x03,0x02,0x5b,0x60,0x24,0x78,
-0xff,0xff,0x64,0x45,0x64,0x44,0x0a,0xa4,0x38,0xfa,0x62,0x60,0x58,0x61,0xfe,0xa1,
-0x46,0x48,0x00,0xf4,0x04,0x63,0x81,0x60,0x87,0x64,0x02,0xfa,0x67,0x60,0xbc,0x64,
-0xa0,0xd3,0xff,0xff,0x03,0xfa,0x65,0x47,0x05,0xfa,0x0a,0xa3,0x65,0x44,0x8e,0xa0,
-0xff,0xff,0x09,0x04,0x8e,0xa5,0x72,0x64,0x07,0x00,0x84,0xa0,0xff,0xff,0x03,0x04,
-0x84,0xa5,0x7c,0x64,0x01,0x00,0x00,0x65,0x59,0xd1,0xbd,0xd8,0xfe,0xa4,0xff,0xff,
-0xfb,0x07,0x65,0x44,0x00,0xa0,0x00,0xf4,0x02,0x03,0x04,0x63,0xee,0x00,0x5a,0x60,
-0xea,0x78,0xff,0xff,0x6a,0x3a,0x00,0x00,0x64,0x3a,0x0f,0x00,0x0a,0x63,0x38,0xfc,
-0x46,0x48,0x00,0xf4,0x81,0x60,0x87,0x64,0x02,0xfa,0x67,0x60,0xbc,0x64,0xa0,0xd3,
-0xff,0xff,0x03,0xfa,0x63,0x47,0x05,0xfa,0x2e,0x00,0x6f,0x3a,0x66,0x00,0x12,0x63,
-0x38,0xfc,0xa0,0x60,0x01,0x64,0x31,0xfa,0xf0,0x60,0xf8,0x64,0x32,0xfa,0x04,0x60,
-0xf0,0x64,0x33,0xfa,0xff,0xff,0x81,0xf1,0x2b,0xf8,0x82,0xf1,0xff,0xff,0x2c,0xf8,
-0x83,0xf1,0x2d,0xf8,0x46,0x48,0x00,0xf4,0xaa,0x60,0xaa,0x64,0x02,0xfa,0x00,0x60,
-0x03,0x64,0x03,0xfa,0x00,0x60,0x00,0x64,0x04,0xfa,0x81,0x60,0x87,0x64,0x05,0xfa,
-0x00,0x64,0x0a,0xfa,0x67,0x60,0xbc,0x64,0xa0,0xd3,0xff,0xff,0x06,0xfa,0x63,0x47,
-0x08,0xfa,0x28,0x46,0x0d,0x00,0x28,0x46,0x81,0xf1,0x2b,0xf8,0x31,0xf8,0xff,0xff,
-0x82,0xf1,0x2c,0xf8,0x32,0xf8,0xff,0xff,0x83,0xf1,0x2d,0xf8,0x33,0xf8,0xff,0xff,
-0xbd,0xf1,0x2e,0xf8,0xbe,0xf1,0xff,0xff,0x2f,0xf8,0xbf,0xf1,0x30,0xf8,0xff,0xff,
-0x85,0xf3,0xff,0xff,0x08,0xbc,0x43,0xf1,0xff,0xff,0x64,0x40,0x01,0x2a,0x03,0x00,
-0x60,0x47,0x40,0xbc,0x60,0x47,0x29,0xfa,0x00,0x63,0x28,0xfc,0x22,0xfc,0x3a,0x60,
-0x58,0x4e,0x14,0x78,0xff,0xff,0xff,0x64,0x23,0xfa,0xff,0x7f,0x00,0x7e,0x0e,0xfa,
-0x3c,0x60,0xa2,0x62,0x3c,0x60,0x48,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,
-0x5a,0xdb,0xff,0xff,0x2b,0xff,0xc1,0xfe,0x14,0x00,0x0f,0x4e,0x46,0x45,0x3c,0x60,
-0xa2,0x62,0x00,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,
-0x2b,0xff,0xa2,0xff,0x1a,0x60,0x58,0x4f,0xa6,0x78,0xff,0xff,0xa3,0xff,0xd1,0xfe,
-0x0e,0x4f,0x2f,0x58,0xff,0xff,0x62,0x60,0x42,0x62,0xa2,0xd1,0x62,0x60,0x58,0x64,
-0xc0,0x83,0x62,0x60,0x48,0x62,0xa2,0xd3,0xbd,0xdb,0xf6,0xa0,0x00,0xa0,0x01,0x03,
-0x34,0x02,0x62,0x60,0x56,0x62,0xa2,0xd3,0xff,0xff,0xff,0xa0,0xff,0xff,0x2d,0x03,
-0x1e,0x60,0xb2,0x62,0x62,0x60,0x52,0x61,0xa2,0xd3,0xa1,0xd1,0xff,0xff,0xd0,0x85,
-0x1e,0x60,0xb4,0x62,0x62,0x60,0x54,0x61,0xa2,0xd3,0xa1,0xd1,0x01,0x05,0xff,0xa4,
-0xd0,0x84,0x65,0x44,0x02,0x02,0xfc,0x23,0x14,0x00,0x62,0x60,0x52,0x62,0xa2,0xd3,
-0xbd,0xdb,0x62,0x60,0x54,0x62,0xa2,0xd3,0xbd,0xdb,0x00,0x64,0xbd,0xdb,0xbd,0xdb,
+0x00,0xa0,0x00,0xf4,0x02,0x03,0x04,0x63,0xee,0x00,0x5f,0x60,0x67,0x78,0xff,0xff,
+0x6a,0x3a,0x00,0x00,0x64,0x3a,0x0f,0x00,0x0a,0x63,0x38,0xfc,0x46,0x48,0x00,0xf4,
+0x81,0x60,0x87,0x64,0x02,0xfa,0x6a,0x60,0x94,0x64,0xa0,0xd3,0xff,0xff,0x03,0xfa,
+0x63,0x47,0x05,0xfa,0x31,0x00,0x6f,0x36,0x03,0x00,0x5f,0x60,0xa8,0x78,0xff,0xff,
+0x12,0x63,0x38,0xfc,0xa0,0x60,0x01,0x64,0x31,0xfa,0xf0,0x60,0xf8,0x64,0x32,0xfa,
+0x04,0x60,0xf0,0x64,0x33,0xfa,0xff,0xff,0x75,0xf1,0x2b,0xf8,0x76,0xf1,0xff,0xff,
+0x2c,0xf8,0x77,0xf1,0x2d,0xf8,0x46,0x48,0x00,0xf4,0xaa,0x60,0xaa,0x64,0x02,0xfa,
+0x00,0x60,0x03,0x64,0x03,0xfa,0x00,0x60,0x00,0x64,0x04,0xfa,0x81,0x60,0x87,0x64,
+0x05,0xfa,0x00,0x64,0x0a,0xfa,0x6a,0x60,0x94,0x64,0xa0,0xd3,0xff,0xff,0x06,0xfa,
+0x63,0x47,0x08,0xfa,0x28,0x46,0x0d,0x00,0x28,0x46,0x75,0xf1,0x2b,0xf8,0x31,0xf8,
+0xff,0xff,0x76,0xf1,0x2c,0xf8,0x32,0xf8,0xff,0xff,0x77,0xf1,0x2d,0xf8,0x33,0xf8,
+0xff,0xff,0xb0,0xf1,0x2e,0xf8,0xb1,0xf1,0xff,0xff,0x2f,0xf8,0xb2,0xf1,0x30,0xf8,
+0xff,0xff,0x79,0xf3,0xff,0xff,0x08,0xbc,0x34,0xf1,0x31,0xf0,0x64,0x40,0x01,0x2a,
+0x0a,0x00,0xe7,0xf1,0x64,0x40,0x01,0x2a,0x03,0x00,0x64,0x40,0x01,0x26,0x03,0x00,
+0x60,0x47,0x40,0xbc,0x60,0x47,0x29,0xfa,0x00,0x63,0x28,0xfc,0x22,0xfc,0x39,0x60,
+0x58,0x4e,0xfe,0x78,0xff,0xff,0xff,0x64,0x23,0xfa,0xff,0x7f,0x00,0x7e,0x0e,0xfa,
+0x3f,0x60,0x6a,0x62,0x3f,0x60,0x10,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,
+0x5a,0xdb,0xff,0xff,0x2b,0xff,0xc1,0xfe,0x14,0x00,0x0f,0x4e,0x46,0x45,0x3f,0x60,
+0x6a,0x62,0x00,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,
+0x2b,0xff,0xa2,0xff,0x1a,0x60,0x58,0x4f,0x37,0x78,0xff,0xff,0xa3,0xff,0xd1,0xfe,
+0x0e,0x4f,0x2f,0x58,0xff,0xff,0x64,0x60,0xde,0x62,0xa2,0xd1,0x64,0x60,0xf4,0x64,
+0xc0,0x83,0x64,0x60,0xe4,0x62,0xa2,0xd3,0xbd,0xdb,0xf6,0xa0,0x00,0xa0,0x01,0x03,
+0x34,0x02,0x64,0x60,0xf2,0x62,0xa2,0xd3,0xff,0xff,0xff,0xa0,0xff,0xff,0x2d,0x03,
+0x21,0x60,0x7a,0x62,0x64,0x60,0xee,0x61,0xa2,0xd3,0xa1,0xd1,0xff,0xff,0xd0,0x85,
+0x21,0x60,0x7c,0x62,0x64,0x60,0xf0,0x61,0xa2,0xd3,0xa1,0xd1,0x01,0x05,0xff,0xa4,
+0xd0,0x84,0x65,0x44,0x02,0x02,0xfc,0x23,0x14,0x00,0x64,0x60,0xee,0x62,0xa2,0xd3,
+0xbd,0xdb,0x64,0x60,0xf0,0x62,0xa2,0xd3,0xbd,0xdb,0x00,0x64,0xbd,0xdb,0xbd,0xdb,
 0xbd,0xdb,0xff,0xff,0xbd,0xdb,0xbd,0xdb,0xbd,0xdb,0xff,0xff,0xbd,0xdb,0xbd,0xdb,
-0x2f,0x00,0x62,0x60,0x56,0x62,0x02,0x64,0xa2,0xdb,0x1e,0x60,0xb2,0x62,0xa2,0xd3,
-0xbd,0xdb,0x1e,0x60,0xb4,0x62,0xa2,0xd3,0xbd,0xdb,0x28,0x60,0x00,0x65,0x88,0xf3,
-0xff,0xff,0xd4,0x84,0xe8,0x84,0xe8,0x84,0xbd,0xdb,0x64,0x60,0xd8,0x62,0xa2,0xd1,
+0x2f,0x00,0x64,0x60,0xf2,0x62,0x02,0x64,0xa2,0xdb,0x21,0x60,0x7a,0x62,0xa2,0xd3,
+0xbd,0xdb,0x21,0x60,0x7c,0x62,0xa2,0xd3,0xbd,0xdb,0x2a,0x60,0xc8,0x65,0x7c,0xf3,
+0xff,0xff,0xd4,0x84,0xe8,0x84,0xe8,0x84,0xbd,0xdb,0x67,0x60,0x74,0x62,0xa2,0xd1,
 0x00,0x64,0xa2,0xdb,0xbd,0xd9,0x27,0x41,0x06,0xa1,0xa1,0xd1,0xbd,0xd9,0x59,0xd1,
-0x2e,0xb7,0x7e,0x00,0x00,0x10,0xff,0xff,0xbd,0xd9,0x59,0xd1,0xbd,0xd9,0x27,0x41,
-0x04,0xa1,0xa1,0xd3,0xbd,0xdb,0x27,0x41,0x02,0xa1,0xa1,0xd1,0xff,0xff,0xd0,0x84,
-0xbd,0xdb,0x51,0xf3,0xbd,0xdb,0x62,0x60,0x56,0x62,0xa2,0xd3,0xff,0xff,0xff,0xa0,
-0xff,0xff,0x05,0x02,0x62,0x60,0x44,0x62,0xa2,0xd3,0xbd,0xdb,0x09,0x00,0x62,0x60,
-0x44,0x62,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0xff,0xa0,0xbd,0xdb,0x09,0x02,
-0x00,0x64,0xbd,0xdb,0xbd,0xdb,0xbd,0xdb,0xff,0xff,0xbd,0xdb,0xbd,0xdb,0xbd,0xdb,
-0x20,0x00,0x62,0x60,0x4a,0x62,0xa2,0xd1,0xbd,0xd9,0x62,0x60,0x4c,0x62,0xa2,0xd1,
-0xbd,0xd9,0x62,0x60,0x4e,0x62,0xa2,0xd1,0xbd,0xd9,0xff,0xff,0x59,0xf3,0x80,0x65,
-0xc4,0x87,0xff,0xb4,0xbd,0xdb,0x58,0xf3,0xbd,0xdb,0x62,0x60,0x50,0x62,0xa2,0xd3,
-0xbd,0xdb,0x5a,0x60,0x1c,0x62,0xa2,0xd3,0xbd,0xdb,0x5a,0x60,0x1e,0x62,0xa2,0xd3,
-0xbd,0xdb,0x62,0x60,0x42,0x63,0x02,0x60,0x80,0x65,0xa3,0xd3,0xff,0xff,0x28,0xa4,
-0xd4,0x80,0xff,0xff,0x05,0x04,0x62,0x60,0x46,0x62,0x01,0x64,0xa2,0xdb,0x00,0x64,
-0xa3,0xdb,0x62,0x60,0x48,0x62,0xa2,0xd3,0xff,0xff,0xf6,0xa0,0x00,0xa0,0x01,0x03,
-0x0f,0x02,0x62,0x60,0x56,0x62,0xa2,0xd3,0xff,0xff,0xff,0xa0,0xfe,0xa0,0x06,0x03,
-0x05,0x03,0x01,0x64,0xa2,0xdb,0x5b,0x60,0x3a,0x78,0xff,0xff,0x00,0x64,0xa2,0xdb,
-0x62,0x60,0x48,0x62,0xa2,0xd1,0xff,0xff,0x64,0x44,0xf4,0xa0,0xff,0xff,0x07,0x03,
-0x5a,0x60,0x40,0x64,0xc0,0x83,0xa3,0xd3,0xff,0xff,0xdc,0x84,0xa3,0xdb,0x5a,0x60,
-0x26,0x62,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x2e,0x58,0xff,0xff,0x64,0x60,
-0xdc,0x62,0xa2,0xd1,0x64,0x60,0xe2,0x64,0xc0,0x83,0x64,0x60,0xde,0x62,0xa2,0xd3,
-0xff,0xff,0x01,0xa4,0xa2,0xdb,0xbd,0xdb,0x1e,0x60,0xb2,0x62,0xa2,0xd3,0xbd,0xdb,
-0x1e,0x60,0xb4,0x62,0xa2,0xd3,0xbd,0xdb,0x66,0x60,0xa4,0x62,0xa2,0xd3,0xbd,0xdb,
-0x66,0x60,0xa6,0x62,0xa2,0xd3,0xbd,0xdb,0x66,0x60,0xa8,0x62,0xa2,0xd3,0xbd,0xdb,
-0x66,0x60,0xa2,0x62,0xa2,0xd3,0xbd,0xdb,0x5a,0x60,0x1c,0x62,0xa2,0xd3,0xbd,0xdb,
-0xff,0xff,0x58,0xf3,0xbd,0xdb,0x59,0xf3,0x80,0x65,0xc4,0x87,0xff,0xb4,0xbd,0xdb,
-0x5a,0xf3,0x80,0x65,0xc4,0x87,0xff,0xb4,0xbd,0xdb,0xff,0xff,0x81,0xf3,0xbd,0xdb,
-0x82,0xf3,0xff,0xff,0xbd,0xdb,0x83,0xf3,0xa3,0xdb,0x64,0x60,0xdc,0x63,0x01,0x60,
-0xc0,0x65,0xa3,0xd3,0xff,0xff,0x1c,0xa4,0xd4,0x80,0xff,0xff,0x05,0x04,0x64,0x60,
-0xe0,0x62,0x01,0x64,0xa2,0xdb,0x00,0x64,0xa3,0xdb,0x2e,0x58,0xff,0xff,0x1e,0x60,
-0xee,0x62,0xa2,0xd1,0x00,0x60,0x04,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,
-0x2f,0x58,0xff,0xff,0xba,0xf1,0x28,0x60,0xb6,0x62,0xa2,0xd9,0x3c,0x60,0xe6,0x62,
-0x28,0x60,0xb2,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x1e,0x60,
-0xf0,0x62,0x00,0x60,0x04,0x64,0xa2,0xdb,0x5c,0x60,0x96,0x64,0x5a,0xdb,0xcf,0xfe,
-0x2f,0x58,0xff,0xff,0x1e,0x60,0xee,0x62,0x00,0x64,0xa2,0xdb,0xcb,0xf3,0xff,0xff,
-0xfc,0xa0,0xff,0xff,0xdf,0x02,0x66,0x60,0xa8,0x62,0x0f,0x64,0xa2,0xdb,0x18,0x60,
-0x08,0x64,0xa0,0xd3,0xff,0xff,0x60,0x41,0x02,0xa4,0xff,0xff,0x9c,0xa0,0xff,0xff,
-0x01,0x04,0x00,0x64,0x60,0x45,0x18,0x60,0x74,0x62,0xc6,0x82,0xa2,0xd1,0x00,0x63,
-0xa2,0xdd,0x18,0x60,0x72,0x63,0xa3,0xd3,0xff,0xff,0xd0,0x84,0xa3,0xdb,0x18,0x60,
-0x0c,0x62,0xc6,0x82,0xa2,0xd1,0x00,0x63,0xa2,0xdd,0x18,0x60,0x0a,0x63,0xa3,0xd3,
-0xff,0xff,0xd0,0x84,0xa3,0xdb,0x18,0x60,0x08,0x63,0x65,0x44,0xa3,0xdb,0x61,0x45,
-0x18,0x60,0xd8,0x63,0xa3,0xd1,0x18,0x60,0x74,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,
-0x60,0x41,0xc0,0x84,0xa3,0xdb,0x18,0x60,0x72,0x63,0xa3,0xd1,0xff,0xff,0xc1,0x84,
-0xa3,0xdb,0x18,0x60,0x70,0x63,0xa3,0xd1,0x18,0x60,0x0c,0x64,0xc4,0x84,0xa0,0xd3,
-0xff,0xff,0x60,0x41,0xc0,0x84,0xa3,0xdb,0x18,0x60,0x0a,0x63,0xa3,0xd1,0xff,0xff,
-0xc1,0x84,0xa3,0xdb,0xe2,0xa0,0x00,0x64,0x03,0x05,0x05,0x7c,0xb8,0xf9,0x3f,0x00,
-0x00,0x63,0x18,0x60,0x70,0x64,0xa0,0xdd,0x18,0x60,0xd8,0x64,0xa0,0xdd,0x18,0x60,
-0xe4,0x64,0x64,0x63,0xa0,0xdd,0x18,0x60,0x72,0x63,0xa3,0xd3,0xff,0xff,0x00,0xbc,
-0x60,0x41,0x2d,0x03,0x02,0x60,0x8f,0x65,0x18,0x60,0x0a,0x62,0xa2,0xd3,0xd5,0x80,
-0xff,0xff,0x03,0x06,0xe9,0x81,0xe8,0x84,0xfa,0x00,0x60,0x5c,0x61,0x44,0xe0,0x84,
-0xe0,0x84,0x60,0x41,0xe0,0x84,0xe0,0x84,0xe0,0x84,0x60,0x45,0xe0,0x84,0xc4,0x85,
-0xc5,0x85,0x00,0x62,0x65,0x44,0x64,0x45,0x11,0x61,0xe0,0x84,0xcd,0x81,0xfd,0x04,
-0x01,0x00,0xe0,0x84,0xf2,0x82,0xff,0xff,0x02,0x24,0xc6,0x82,0x02,0x28,0xd6,0x82,
-0xe2,0x80,0xcd,0x81,0x02,0x28,0x01,0xbc,0xf4,0x02,0x01,0x2a,0xc6,0x82,0x60,0x43,
-0x5a,0x60,0x1e,0x62,0xa2,0xdd,0x66,0x60,0xa2,0x62,0xa2,0xdd,0x63,0x44,0xd3,0xa0,
-0x01,0x65,0x0e,0x04,0x1f,0xf3,0x59,0xf3,0x60,0x40,0x10,0x2a,0x67,0x00,0xec,0xa0,
-0x67,0x60,0xe6,0x64,0x63,0x04,0xa0,0xd3,0xff,0xff,0x00,0xa0,0xff,0xff,0x5e,0x03,
-0x18,0x60,0xda,0x65,0x51,0xf3,0xff,0xff,0xe0,0x84,0xc4,0x83,0xa3,0xd3,0xff,0xff,
-0xf8,0xa0,0x03,0x65,0x53,0x05,0x18,0x60,0x70,0x64,0xa0,0xd3,0xff,0xff,0xe2,0xa0,
-0x18,0x60,0xd8,0x63,0x33,0x04,0xa3,0xd3,0xff,0xff,0x00,0xbc,0x60,0x41,0x2f,0x03,
-0x02,0x60,0x8f,0x65,0x18,0x60,0x70,0x62,0xa2,0xd3,0xd5,0x80,0xff,0xff,0x03,0x06,
-0xe9,0x81,0xe8,0x84,0xfa,0x00,0x60,0x5c,0x61,0x44,0xe0,0x84,0xe0,0x84,0x60,0x41,
-0xe0,0x84,0xe0,0x84,0xe0,0x84,0x60,0x45,0xe0,0x84,0xc4,0x85,0xc5,0x85,0x00,0x62,
-0x65,0x44,0x64,0x45,0x11,0x61,0xe0,0x84,0xcd,0x81,0xfd,0x04,0x01,0x00,0xe0,0x84,
-0xf2,0x82,0xff,0xff,0x02,0x24,0xc6,0x82,0x02,0x28,0xd6,0x82,0xe2,0x80,0xcd,0x81,
-0x02,0x28,0x01,0xbc,0xf4,0x02,0x01,0x2a,0xc6,0x82,0x01,0x00,0x69,0x00,0x60,0x43,
-0x18,0x60,0xe4,0x62,0xa2,0xdd,0x63,0x44,0xd3,0xa0,0x00,0x63,0x18,0x60,0x70,0x62,
-0xa2,0xdd,0x18,0x60,0xd8,0x62,0xa2,0xdd,0x5b,0x04,0x18,0x60,0xe4,0x63,0xa3,0xd1,
-0x66,0x60,0xa2,0x62,0xa2,0xd9,0x64,0x64,0xa3,0xdb,0x02,0x65,0x05,0x64,0xb8,0xfb,
-0x66,0x60,0xa4,0x63,0x65,0x44,0xbd,0xdb,0x51,0xf3,0xa3,0xdb,0x51,0xf3,0x50,0xf3,
-0x60,0x41,0xff,0xa0,0xe8,0x85,0x41,0x03,0xff,0xa1,0x59,0x60,0xea,0x64,0xa0,0xd3,
-0xff,0xff,0xa4,0x80,0x65,0x44,0xf5,0x03,0x50,0xfb,0x61,0x43,0x66,0x60,0xa8,0x62,
-0xa2,0xdd,0x51,0xfd,0x61,0x45,0x00,0x63,0x18,0x60,0x04,0x62,0xa2,0xdd,0x18,0x60,
-0x02,0x62,0xa2,0xdd,0x18,0x60,0x0a,0x62,0xa2,0xdd,0x18,0x60,0x72,0x62,0xa2,0xdd,
-0x18,0x60,0x06,0x62,0xa2,0xdd,0x67,0x60,0xe6,0x62,0xa2,0xdd,0x64,0x61,0x18,0x60,
-0x0c,0x63,0x00,0x64,0xc9,0x81,0xbd,0xdb,0xfd,0x02,0x64,0x61,0x18,0x60,0x74,0x63,
-0x00,0x64,0xc9,0x81,0xbd,0xdb,0xfd,0x02,0x65,0x41,0xe1,0x85,0x18,0x60,0xda,0x63,
-0xc7,0x83,0xa3,0xd3,0xff,0xff,0xf8,0xa0,0xff,0xff,0xc0,0x05,0x04,0x61,0x18,0x60,
-0xda,0x63,0x00,0x64,0xcd,0x81,0xbd,0xdb,0xfd,0x02,0x5e,0x60,0x94,0x78,0xff,0xff,
-0x18,0x60,0x0a,0x63,0xa3,0xd3,0xff,0xff,0xe2,0xa0,0x5a,0x60,0x1e,0x63,0xa3,0xd3,
-0x20,0x04,0xdd,0xa0,0xff,0xff,0x26,0x05,0x50,0xf3,0x04,0x65,0xf8,0xa0,0xa3,0xd3,
-0x35,0x02,0xf1,0xa0,0xff,0xff,0x1e,0x05,0xb8,0xf3,0xff,0xff,0xfd,0xa0,0x03,0x64,
-0x2d,0x03,0xb8,0xfb,0x67,0x60,0xe8,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
-0x25,0x00,0x18,0x60,0x06,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0xff,0xff,0x1e,0x02,
-0x6f,0x00,0x18,0x60,0xe4,0x63,0xa3,0xd3,0xff,0xff,0xdd,0xa0,0x64,0x64,0xa3,0xdb,
-0x05,0x65,0xef,0x04,0x05,0x64,0xb8,0xfb,0x51,0xf3,0xff,0xff,0xfd,0xa0,0xff,0xff,
-0x5f,0x03,0x03,0x60,0xe8,0x65,0x18,0x60,0x02,0x64,0xa0,0xd3,0x59,0xf3,0xd4,0x80,
-0x06,0x65,0x56,0x04,0xf1,0xa0,0xff,0xff,0xdc,0x05,0x52,0x00,0x66,0x60,0xa4,0x63,
-0x65,0x44,0xbd,0xdb,0xfa,0xa0,0x51,0xf3,0x15,0x02,0xbd,0xdb,0x60,0x5c,0x08,0x65,
-0x03,0x61,0x67,0x60,0xe6,0x62,0x01,0x64,0xa2,0xdb,0x04,0x00,0xd0,0x80,0xe8,0x85,
-0x3f,0x03,0xff,0xa1,0x59,0x60,0xea,0x64,0xa0,0xd3,0xff,0xff,0xa4,0x80,0x65,0x44,
-0xf5,0x03,0x0e,0x00,0xbd,0xdb,0x50,0xf3,0x60,0x41,0xf8,0xa0,0xe0,0x85,0x30,0x03,
-0x01,0xa1,0x59,0x60,0xea,0x64,0xa0,0xd3,0xff,0xff,0xa4,0x80,0x65,0x44,0xf5,0x03,
-0x50,0xfb,0x61,0x43,0x51,0xfd,0x66,0x60,0xa8,0x62,0xa2,0xdd,0x00,0x63,0x18,0x60,
-0x04,0x62,0xa2,0xdd,0x18,0x60,0x02,0x62,0xa2,0xdd,0x18,0x60,0x0a,0x62,0xa2,0xdd,
-0x18,0x60,0x72,0x62,0xa2,0xdd,0x64,0x61,0x18,0x60,0x0c,0x63,0x00,0x64,0xc9,0x81,
-0xbd,0xdb,0xfd,0x02,0x64,0x61,0x18,0x60,0x74,0x63,0x00,0x64,0xc9,0x81,0xbd,0xdb,
-0xfd,0x02,0x04,0x61,0x18,0x60,0xda,0x63,0x00,0x64,0xcd,0x81,0xbd,0xdb,0xfd,0x02,
-0x00,0x60,0x64,0x65,0x18,0x60,0x04,0x62,0xa2,0xd3,0xff,0xff,0x01,0xa4,0xd4,0x80,
-0xa2,0xdb,0x09,0x04,0x18,0x60,0x02,0x63,0x00,0x64,0xa2,0xdb,0xa3,0xdb,0x18,0x60,
-0x06,0x62,0x01,0x64,0xa2,0xdb,0x66,0x60,0xa8,0x62,0xa2,0xd3,0xff,0xff,0xfd,0xa0,
-0xff,0xff,0x04,0x07,0x5c,0x60,0x58,0x4e,0x23,0x78,0xff,0xff,0x5c,0x60,0x7e,0x78,
-0xff,0xff,0x61,0xf1,0x28,0x60,0xc2,0x62,0xa2,0xd9,0x3c,0x60,0xea,0x62,0x28,0x60,
-0xbe,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x1e,0x60,0xf6,0x62,
-0x00,0x60,0xfe,0x64,0xa2,0xdb,0x5e,0x60,0xcd,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,
-0xff,0xff,0x60,0xf3,0x65,0xf3,0x60,0x45,0x60,0x47,0xb4,0x84,0x60,0x45,0x69,0x60,
-0x44,0x62,0x10,0x60,0x00,0x64,0xa2,0xdb,0x69,0x60,0x46,0x62,0x65,0x44,0xa2,0xdb,
-0x00,0x60,0x7b,0x66,0x00,0x64,0x61,0xfb,0x01,0xf2,0xff,0xff,0x00,0xa0,0xff,0xff,
-0x1e,0x03,0x1e,0x60,0xb2,0x64,0xa0,0xd3,0x03,0xf0,0xff,0xff,0xd0,0x84,0x00,0xfa,
-0x01,0xf2,0x60,0x45,0xd4,0x80,0xff,0xff,0x05,0x06,0xd4,0x84,0x01,0xfa,0xfe,0xa0,
-0xff,0xff,0x0d,0x05,0x00,0x64,0x01,0xfa,0x02,0xfa,0x60,0x45,0x69,0x60,0x44,0x62,
-0x90,0x60,0x80,0x64,0xa2,0xdb,0x69,0x60,0x46,0x62,0x65,0x44,0xa2,0xdb,0x62,0xf1,
-0x17,0x60,0x24,0x64,0xa0,0xd3,0xff,0xff,0xd0,0x80,0x60,0x45,0x69,0x03,0x16,0x60,
-0x60,0x64,0xa0,0xd3,0xff,0xff,0xff,0xa0,0xfc,0xa0,0x06,0x03,0x62,0x02,0x86,0xf3,
-0xff,0xff,0x00,0xa0,0xff,0xff,0x5d,0x03,0x65,0x44,0x60,0x45,0x69,0x60,0x44,0x62,
-0x60,0x60,0x00,0x64,0xa2,0xdb,0x69,0x60,0x46,0x62,0x65,0x44,0xa2,0xdb,0x19,0xf2,
-0xff,0xff,0xdc,0x84,0x19,0xfa,0x65,0x44,0xff,0x22,0x4b,0x00,0x12,0xfa,0xcc,0x84,
-0xfc,0xa0,0x60,0x41,0x01,0x06,0x04,0x64,0xe0,0x84,0x60,0x45,0xe0,0x84,0xe0,0x84,
-0xc4,0x85,0x19,0x60,0x18,0x64,0xc4,0x83,0xbd,0xd3,0xff,0xff,0x14,0xfa,0xbd,0xd3,
-0xff,0xff,0x15,0xfa,0xbd,0xd3,0xff,0xff,0x16,0xfa,0xbd,0xd3,0xff,0xff,0x17,0xfa,
-0xbd,0xd3,0xff,0xff,0x18,0xfa,0x16,0x60,0x60,0x64,0xa0,0xd3,0xff,0xff,0xfc,0xa0,
-0x61,0x44,0x05,0x02,0xfd,0xa0,0x14,0xf2,0x02,0x05,0xfd,0xa4,0x14,0xfa,0xcb,0xf3,
-0xff,0xff,0xfc,0xa0,0x62,0xf3,0x08,0x02,0xff,0xff,0xff,0x26,0x05,0x00,0x01,0x64,
-0x63,0x60,0x58,0x4e,0x65,0x78,0xff,0xff,0x62,0xf3,0xff,0xff,0x60,0x40,0x00,0x3a,
-0x2f,0x00,0x15,0xf2,0x01,0xfa,0x61,0xfb,0x02,0x64,0x02,0xfa,0x08,0x64,0x60,0xfb,
-0x01,0x64,0x13,0xfa,0x05,0xfa,0x04,0xfa,0x10,0x60,0x00,0x64,0x66,0xfb,0x20,0x00,
-0x24,0x00,0x65,0xf3,0xff,0xff,0x02,0xb0,0xff,0xff,0x04,0x02,0x63,0x60,0x58,0x4e,
-0xdf,0x78,0xff,0xff,0xcb,0xf3,0xff,0xff,0xfc,0xa0,0xff,0xff,0x05,0x02,0x00,0x64,
-0x63,0x60,0x58,0x4e,0x65,0x78,0xff,0xff,0x80,0x64,0x60,0xfb,0x32,0x64,0x61,0xfb,
-0x17,0x60,0x24,0x63,0x00,0x64,0x66,0xfb,0x01,0xfa,0x02,0xfa,0xff,0xff,0xa3,0xdb,
-0x17,0x60,0x24,0x64,0xa0,0xd3,0x62,0xfb,0x05,0x00,0x00,0xa0,0xff,0xff,0x02,0x02,
-0x32,0x64,0x61,0xfb,0xff,0xff,0x1e,0x60,0xf4,0x62,0xa2,0xd1,0x00,0x60,0x01,0x64,
-0xa0,0x84,0xa2,0xdb,0x09,0xf8,0x16,0x60,0x60,0x62,0xa2,0xd3,0xff,0xff,0xfc,0xa0,
-0x62,0xf3,0x03,0x03,0x61,0x60,0x04,0x78,0xff,0xff,0x00,0xa0,0xff,0xff,0x6c,0x03,
-0x64,0x44,0x80,0x2a,0x1d,0x00,0x20,0xf2,0xff,0xff,0xdc,0x84,0x20,0xfa,0x01,0x60,
-0x5e,0x64,0x20,0x40,0x40,0x2a,0x08,0x00,0x19,0x60,0x14,0x62,0xa2,0xd3,0xff,0xff,
-0xe0,0x84,0xe0,0x84,0xe0,0x84,0xe0,0x84,0x01,0xfa,0x01,0x64,0x02,0xfa,0x65,0xf3,
-0xff,0xff,0xff,0xff,0xff,0x26,0x04,0x00,0x63,0x60,0x58,0x4e,0xdf,0x78,0xff,0xff,
-0x6e,0xf3,0x6f,0xf1,0xff,0xff,0x01,0xb4,0xb0,0x84,0xff,0xff,0x19,0x03,0x60,0xf3,
-0xff,0xff,0x08,0xbc,0x60,0xfb,0x63,0x60,0x58,0x4e,0x3e,0x78,0xff,0xff,0x00,0xfa,
-0x60,0x45,0x69,0x60,0x44,0x62,0x90,0x60,0x21,0x64,0xa2,0xdb,0x69,0x60,0x46,0x62,
-0x65,0x44,0xa2,0xdb,0x01,0xf0,0xff,0xff,0xd0,0x80,0xff,0xff,0x01,0x06,0x01,0xfa,
-0x09,0xf2,0x06,0xf2,0x60,0x40,0x08,0x2a,0x28,0x00,0x60,0x40,0xff,0x22,0x02,0x00,
-0xcc,0x84,0x06,0xfa,0x00,0xa0,0xff,0xff,0x13,0x02,0x05,0xf2,0x14,0xf0,0x03,0xa4,
-0xd0,0x80,0xff,0xff,0x01,0x06,0x64,0x44,0x05,0xfa,0x07,0xf2,0xff,0xff,0x60,0x40,
-0xff,0x22,0x02,0x00,0xcc,0x84,0x07,0xfa,0x00,0xa0,0x01,0x64,0x01,0x02,0x05,0xfa,
-0x86,0xf3,0x01,0xf0,0x00,0xfa,0xd0,0x80,0xff,0xff,0x01,0x06,0x01,0xfa,0x60,0xf3,
-0xff,0xff,0x08,0xbc,0x60,0xfb,0x01,0x00,0x56,0x00,0x09,0xf2,0x60,0xf1,0x60,0x40,
-0x04,0x2a,0x2c,0x00,0x64,0x40,0x20,0x2a,0x19,0x00,0x01,0x64,0x05,0xfa,0x04,0xfa,
-0x63,0x60,0x58,0x4e,0x3e,0x78,0xff,0xff,0x00,0xfa,0x60,0x45,0x69,0x60,0x44,0x62,
-0x90,0x60,0x22,0x64,0xa2,0xdb,0x69,0x60,0x46,0x62,0x65,0x44,0xa2,0xdb,0x01,0xf0,
-0xff,0xff,0xd0,0x80,0xff,0xff,0x0d,0x06,0x01,0xfa,0x0b,0x00,0x64,0x40,0x10,0x2a,
-0x08,0x00,0x14,0x64,0x00,0xfa,0x61,0xf1,0xff,0xff,0xd0,0x80,0xff,0xff,0x01,0x06,
-0x61,0xfb,0x60,0xf3,0xff,0xff,0xcf,0xb4,0x08,0xbc,0x60,0xfb,0x09,0xf2,0x60,0xf1,
-0x60,0x40,0x10,0x2a,0x0b,0x00,0x64,0x44,0xbf,0xb4,0x08,0xbc,0x60,0xfb,0x14,0x64,
-0x61,0xf1,0x00,0xfa,0xd0,0x80,0xff,0xff,0x01,0x06,0x61,0xfb,0x09,0xf2,0x18,0xf0,
-0x60,0x40,0x20,0x2a,0x04,0x00,0x01,0x63,0x05,0xfc,0x04,0xfc,0x06,0xf8,0x60,0x40,
-0x40,0x2a,0x01,0x00,0x06,0xf8,0x61,0xf3,0x65,0xf1,0x00,0xa0,0x05,0x64,0x03,0x02,
-0x64,0x40,0x80,0x26,0x61,0xfb,0x01,0xf2,0x61,0xf1,0xff,0xff,0xd0,0x80,0xff,0xff,
-0x01,0x06,0x61,0xfb,0x09,0xf0,0x61,0xf3,0x64,0x40,0x02,0x26,0x03,0x00,0x00,0xa0,
-0xff,0xff,0x7b,0x02,0x62,0xf3,0xff,0xff,0x00,0xa0,0x60,0xf3,0x76,0x03,0x00,0xa0,
-0xcb,0xf3,0x5d,0x02,0xfd,0xa0,0x04,0xf2,0x48,0x02,0x60,0x40,0xff,0x22,0x02,0x00,
-0xcc,0x84,0x04,0xfa,0x60,0x40,0x00,0x36,0x0b,0x00,0x71,0xf3,0xff,0xff,0xfb,0xa0,
-0x3c,0x60,0x48,0x62,0x05,0x05,0xa2,0xd3,0xff,0xff,0x00,0xa0,0xff,0xff,0x12,0x03,
-0x05,0xf2,0x65,0xf1,0x04,0xfa,0x64,0x40,0xff,0x26,0x04,0x00,0x63,0x60,0x58,0x4e,
-0xdf,0x78,0xff,0xff,0x60,0xf3,0x86,0xf1,0x08,0xbc,0x60,0xfb,0x05,0x64,0xc0,0x84,
-0x00,0xfa,0x44,0x00,0xa4,0xf3,0xff,0xff,0x60,0x41,0x80,0xf3,0xff,0xff,0xe0,0x84,
-0xe0,0x84,0xe0,0x84,0xe0,0x85,0x73,0x44,0xc4,0x84,0x61,0x45,0xd4,0x84,0xe8,0x84,
-0xe8,0x84,0xe8,0x84,0xe8,0x84,0x60,0x45,0x01,0x60,0xf4,0x64,0xd4,0x80,0x65,0x44,
-0x05,0x05,0x23,0xf2,0xff,0xff,0xdc,0x84,0x23,0xfa,0x32,0x64,0xfa,0xa0,0xff,0xff,
-0x01,0x05,0x06,0x64,0xfb,0xa4,0x00,0xfa,0x21,0x00,0x61,0xf3,0xff,0xff,0x00,0xa0,
-0x65,0xf3,0x1c,0x02,0xfd,0xa0,0xff,0xff,0x04,0x02,0x64,0x60,0x58,0x4e,0x37,0x78,
-0xff,0xff,0x32,0x64,0x00,0xfa,0x01,0x64,0x05,0xfa,0x04,0xfa,0x0f,0x00,0x61,0xf3,
-0xff,0xff,0x00,0xa0,0x00,0x64,0x0a,0x02,0x60,0xfb,0x64,0x60,0x58,0x4e,0x37,0x78,
-0xff,0xff,0x63,0x60,0x58,0x4e,0x4a,0x78,0xff,0xff,0x00,0xfa,0x00,0xf2,0x61,0xf1,
-0xff,0xff,0xd0,0x80,0xff,0xff,0x01,0x06,0x61,0xfb,0x63,0x60,0x2a,0x78,0xff,0xff,
-0x62,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0x03,0x02,0x62,0x60,0x0d,0x78,0xff,0xff,
-0x64,0x44,0x80,0x2a,0x1d,0x00,0x20,0xf2,0xff,0xff,0xdc,0x84,0x20,0xfa,0x01,0x60,
-0x5e,0x64,0x20,0x40,0x40,0x2a,0x08,0x00,0x19,0x60,0x14,0x62,0xa2,0xd3,0xff,0xff,
-0xe0,0x84,0xe0,0x84,0xe0,0x84,0xe0,0x84,0x01,0xfa,0x01,0x64,0x02,0xfa,0x65,0xf3,
-0xff,0xff,0xff,0xff,0xff,0x26,0x04,0x00,0x63,0x60,0x58,0x4e,0xdf,0x78,0xff,0xff,
-0x09,0xf2,0xff,0xff,0xff,0xff,0x04,0x2a,0x62,0x00,0x1c,0xf2,0xff,0xff,0xdc,0x84,
-0x1c,0xfa,0x00,0x64,0x00,0xfa,0x01,0x64,0x08,0xfa,0x06,0xf2,0xff,0xff,0xff,0xff,
-0xff,0x22,0x03,0x00,0xcc,0x84,0x06,0xfa,0x0b,0x02,0x00,0xa0,0xff,0xff,0x07,0x02,
-0x05,0xf2,0x14,0xf0,0x03,0xa4,0xd0,0x80,0xff,0xff,0x01,0x06,0x64,0x44,0x05,0xfa,
-0x60,0xf3,0xff,0xff,0x60,0x40,0x20,0x2a,0x22,0x00,0x01,0x60,0x2c,0x64,0x00,0xfa,
-0x5b,0x60,0xa8,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,
-0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x13,0xf2,0xff,0xff,0x05,0xfa,0x04,0xfa,
-0x00,0x64,0x63,0x60,0x58,0x4e,0x65,0x78,0xff,0xff,0x00,0xf2,0x01,0xf0,0xff,0xff,
-0xd0,0x80,0xff,0xff,0x18,0x06,0x01,0xfa,0x04,0x64,0x02,0xfa,0x14,0x00,0x60,0x40,
-0x10,0x2a,0x11,0x00,0x5b,0x60,0xac,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
-0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x32,0x64,0x00,0xfa,
-0xff,0xff,0x63,0xf3,0x64,0xfb,0x60,0xf3,0x61,0xf1,0xcf,0xb4,0x60,0xfb,0x00,0xf2,
-0xff,0xff,0xd0,0x80,0xff,0xff,0x01,0x06,0x61,0xfb,0x00,0x64,0x0a,0xfa,0x09,0xf2,
-0xff,0xff,0xff,0xff,0x10,0x2a,0x12,0x00,0x1d,0xf2,0xff,0xff,0xdc,0x84,0x1d,0xfa,
-0x60,0xf3,0x32,0x65,0x60,0x40,0x40,0x2a,0x05,0x65,0xbf,0xb4,0x60,0xfb,0x65,0x44,
-0x61,0xf1,0x00,0xfa,0xd0,0x80,0xff,0xff,0x01,0x06,0x61,0xfb,0x09,0xf2,0xff,0xff,
-0xff,0xff,0x20,0x2a,0x38,0x00,0x1a,0xf2,0xff,0xff,0xdc,0x84,0x1a,0xfa,0x5d,0xf3,
-0xa7,0xf1,0x60,0x40,0xff,0x22,0x14,0x7c,0x64,0x44,0x60,0xf1,0x00,0xfa,0x64,0x40,
-0x01,0x2a,0x09,0x00,0x17,0xf2,0x13,0xf0,0x00,0xfa,0xff,0xff,0x05,0xf8,0x04,0xf8,
-0x18,0xf0,0xff,0xff,0x06,0xf8,0x60,0xf1,0xff,0xff,0x64,0x40,0x04,0x2a,0x09,0x00,
-0x17,0xf2,0x64,0x40,0x01,0x2a,0x05,0x64,0x00,0xfa,0x60,0xf3,0xff,0xff,0xfe,0xb4,
-0x60,0xfb,0x60,0xf3,0xff,0xff,0x08,0xbc,0xf9,0xb4,0x60,0xfb,0x00,0xf2,0x01,0xf0,
-0xff,0xff,0xd0,0x80,0xff,0xff,0x01,0x06,0x01,0xfa,0x61,0xf1,0xff,0xff,0xd0,0x80,
-0xff,0xff,0x01,0x06,0x61,0xfb,0x09,0xf2,0xff,0xff,0xff,0xff,0x40,0x22,0x16,0x00,
-0x1b,0xf2,0xff,0xff,0xdc,0x84,0x1b,0xfa,0x18,0xf2,0xff,0xff,0x06,0xfa,0x02,0xf2,
-0xff,0xff,0xfc,0xa0,0x00,0x64,0x03,0x02,0x01,0xfa,0x02,0xfa,0xff,0xff,0x16,0xf2,
-0x01,0xf0,0x00,0xfa,0xd0,0x80,0xff,0xff,0x01,0x06,0x01,0xfa,0x61,0xf3,0xff,0xff,
-0x00,0xa0,0xff,0xff,0x05,0x02,0x65,0xf1,0x05,0x64,0x64,0x40,0x80,0x26,0x61,0xfb,
-0x04,0x00,0x60,0xf3,0xff,0xff,0x80,0xb4,0x60,0xfb,0x60,0xf3,0x65,0xf3,0x60,0x45,
-0x60,0x47,0xb4,0x84,0x01,0xf2,0x61,0xf1,0xff,0xff,0xd0,0x80,0xff,0xff,0x01,0x06,
-0x61,0xfb,0x09,0xf2,0x61,0xf1,0x02,0xb0,0x00,0x64,0x06,0x02,0xd0,0x80,0xff,0xff,
-0x03,0x03,0x63,0x60,0x2a,0x78,0xff,0xff,0x62,0xf3,0x60,0xf3,0x00,0xa0,0xff,0xff,
-0x03,0x02,0x63,0x60,0x28,0x78,0xff,0xff,0x60,0x40,0xff,0x26,0x6d,0x00,0xcb,0xf3,
-0xff,0xff,0xfc,0xa0,0x64,0xf3,0x67,0x02,0x00,0xb8,0xcc,0x84,0x16,0x03,0x64,0xfb,
-0x60,0x45,0x69,0x60,0x44,0x62,0x80,0x60,0x40,0x64,0xa2,0xdb,0x69,0x60,0x46,0x62,
-0x65,0x44,0xa2,0xdb,0x67,0x60,0xfc,0x64,0xa0,0xd3,0x07,0x02,0x00,0xa0,0xff,0xff,
-0x04,0x03,0x68,0x60,0x02,0x62,0x01,0x64,0xa2,0xdb,0x04,0xf2,0xff,0xff,0x00,0xb8,
-0xcc,0x84,0x01,0x03,0x04,0xfa,0x00,0x65,0x64,0xf3,0x63,0xf3,0x00,0xa0,0xff,0xff,
-0x0d,0x02,0x64,0xfb,0x60,0x45,0x60,0x45,0x69,0x60,0x44,0x62,0x90,0x60,0x05,0x64,
-0xa2,0xdb,0x69,0x60,0x46,0x62,0x65,0x44,0xa2,0xdb,0x01,0x65,0x04,0xf2,0x05,0xf2,
+0xff,0xff,0xbd,0xd9,0x59,0xd1,0xbd,0xd9,0x27,0x41,0x04,0xa1,0xa1,0xd3,0xbd,0xdb,
+0x27,0x41,0x02,0xa1,0xa1,0xd1,0xff,0xff,0xd0,0x84,0xbd,0xdb,0x44,0xf3,0xbd,0xdb,
+0x64,0x60,0xf2,0x62,0xa2,0xd3,0xff,0xff,0xff,0xa0,0xff,0xff,0x05,0x02,0x64,0x60,
+0xe0,0x62,0xa2,0xd3,0xbd,0xdb,0x09,0x00,0x64,0x60,0xe0,0x62,0xa2,0xd3,0xff,0xff,
+0xdc,0x84,0xa2,0xdb,0xff,0xa0,0xbd,0xdb,0x09,0x02,0x00,0x64,0xbd,0xdb,0xbd,0xdb,
+0xbd,0xdb,0xff,0xff,0xbd,0xdb,0xbd,0xdb,0xbd,0xdb,0x20,0x00,0x64,0x60,0xe6,0x62,
+0xa2,0xd1,0xbd,0xd9,0x64,0x60,0xe8,0x62,0xa2,0xd1,0xbd,0xd9,0x64,0x60,0xea,0x62,
+0xa2,0xd1,0xbd,0xd9,0xff,0xff,0x4d,0xf3,0x80,0x65,0xc4,0x87,0xff,0xb4,0xbd,0xdb,
+0x4c,0xf3,0xbd,0xdb,0x64,0x60,0xec,0x62,0xa2,0xd3,0xbd,0xdb,0x63,0x60,0x0e,0x62,
+0xa2,0xd3,0xbd,0xdb,0x63,0x60,0x10,0x62,0xa2,0xd3,0xbd,0xdb,0x64,0x60,0xde,0x63,
+0x02,0x60,0x80,0x65,0xa3,0xd3,0xff,0xff,0x28,0xa4,0xd4,0x80,0xff,0xff,0x05,0x04,
+0x64,0x60,0xe2,0x62,0x01,0x64,0xa2,0xdb,0x00,0x64,0xa3,0xdb,0x64,0x60,0xe4,0x62,
+0xa2,0xd3,0xff,0xff,0xf6,0xa0,0x00,0xa0,0x01,0x03,0x0f,0x02,0x64,0x60,0xf2,0x62,
+0xa2,0xd3,0xff,0xff,0xff,0xa0,0xfe,0xa0,0x06,0x03,0x05,0x03,0x01,0x64,0xa2,0xdb,
+0x5f,0x60,0xbe,0x78,0xff,0xff,0x00,0x64,0xa2,0xdb,0x64,0x60,0xe4,0x62,0xa2,0xd1,
+0xff,0xff,0x64,0x44,0xf4,0xa0,0xff,0xff,0x07,0x03,0x63,0x60,0x32,0x64,0xc0,0x83,
+0xa3,0xd3,0xff,0xff,0xdc,0x84,0xa3,0xdb,0x63,0x60,0x18,0x62,0xa2,0xd3,0xff,0xff,
+0xdc,0x84,0xa2,0xdb,0x2e,0x58,0xff,0xff,0x67,0x60,0xb6,0x62,0xa2,0xd1,0x67,0x60,
+0xbc,0x64,0xc0,0x83,0x67,0x60,0xb8,0x62,0xa2,0xd3,0xff,0xff,0x01,0xa4,0xa2,0xdb,
+0xbd,0xdb,0x21,0x60,0x7a,0x62,0xa2,0xd3,0xbd,0xdb,0x21,0x60,0x7c,0x62,0xa2,0xd3,
+0xbd,0xdb,0x69,0x60,0x7e,0x62,0xa2,0xd3,0xbd,0xdb,0x69,0x60,0x80,0x62,0xa2,0xd3,
+0xbd,0xdb,0x69,0x60,0x82,0x62,0xa2,0xd3,0xbd,0xdb,0x69,0x60,0x7c,0x62,0xa2,0xd3,
+0xbd,0xdb,0x63,0x60,0x0e,0x62,0xa2,0xd3,0xbd,0xdb,0xff,0xff,0x4c,0xf3,0xbd,0xdb,
+0x4d,0xf3,0x80,0x65,0xc4,0x87,0xff,0xb4,0xbd,0xdb,0x4e,0xf3,0x80,0x65,0xc4,0x87,
+0xff,0xb4,0xbd,0xdb,0xff,0xff,0x75,0xf3,0xbd,0xdb,0x76,0xf3,0xff,0xff,0xbd,0xdb,
+0x77,0xf3,0xa3,0xdb,0x67,0x60,0xb6,0x63,0x01,0x60,0xc0,0x65,0xa3,0xd3,0xff,0xff,
+0x1c,0xa4,0xd4,0x80,0xff,0xff,0x05,0x04,0x67,0x60,0xba,0x62,0x01,0x64,0xa2,0xdb,
+0x00,0x64,0xa3,0xdb,0x2e,0x58,0xff,0xff,0x21,0x60,0xb6,0x62,0xa2,0xd1,0x00,0x60,
+0x04,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x2f,0x58,0xff,0xff,0xad,0xf1,
+0x2b,0x60,0x7e,0x62,0xa2,0xd9,0x3f,0x60,0xae,0x62,0x2b,0x60,0x7a,0x64,0xa2,0xdb,
+0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x21,0x60,0xb8,0x62,0x00,0x60,0x04,0x64,
+0xa2,0xdb,0x61,0x60,0x1a,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,
+0xb6,0x62,0x00,0x64,0xa2,0xdb,0xbd,0xf3,0xff,0xff,0xfc,0xa0,0xff,0xff,0xdf,0x02,
+0x69,0x60,0x82,0x62,0x0f,0x64,0xa2,0xdb,0x18,0x60,0x80,0x64,0xa0,0xd3,0xff,0xff,
+0x60,0x41,0x02,0xa4,0xff,0xff,0x9c,0xa0,0xff,0xff,0x01,0x04,0x00,0x64,0x60,0x45,
+0x18,0x60,0xec,0x62,0xc6,0x82,0xa2,0xd1,0x00,0x63,0xa2,0xdd,0x18,0x60,0xea,0x63,
+0xa3,0xd3,0xff,0xff,0xd0,0x84,0xa3,0xdb,0x18,0x60,0x84,0x62,0xc6,0x82,0xa2,0xd1,
+0x00,0x63,0xa2,0xdd,0x18,0x60,0x82,0x63,0xa3,0xd3,0xff,0xff,0xd0,0x84,0xa3,0xdb,
+0x18,0x60,0x80,0x63,0x65,0x44,0xa3,0xdb,0x61,0x45,0x19,0x60,0x50,0x63,0xa3,0xd1,
+0x18,0x60,0xec,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,0x60,0x41,0xc0,0x84,0xa3,0xdb,
+0x18,0x60,0xea,0x63,0xa3,0xd1,0xff,0xff,0xc1,0x84,0xa3,0xdb,0x18,0x60,0xe8,0x63,
+0xa3,0xd1,0x18,0x60,0x84,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,0x60,0x41,0xc0,0x84,
+0xa3,0xdb,0x18,0x60,0x82,0x63,0xa3,0xd1,0xff,0xff,0xc1,0x84,0xa3,0xdb,0xe2,0xa0,
+0x00,0x64,0x03,0x05,0x05,0x7c,0xab,0xf9,0x3f,0x00,0x00,0x63,0x18,0x60,0xe8,0x64,
+0xa0,0xdd,0x19,0x60,0x50,0x64,0xa0,0xdd,0x19,0x60,0x5c,0x64,0x64,0x63,0xa0,0xdd,
+0x18,0x60,0xea,0x63,0xa3,0xd3,0xff,0xff,0x00,0xbc,0x60,0x41,0x2d,0x03,0x02,0x60,
+0x8f,0x65,0x18,0x60,0x82,0x62,0xa2,0xd3,0xd5,0x80,0xff,0xff,0x03,0x06,0xe9,0x81,
+0xe8,0x84,0xfa,0x00,0x60,0x5c,0x61,0x44,0xe0,0x84,0xe0,0x84,0x60,0x41,0xe0,0x84,
+0xe0,0x84,0xe0,0x84,0x60,0x45,0xe0,0x84,0xc4,0x85,0xc5,0x85,0x00,0x62,0x65,0x44,
+0x64,0x45,0x11,0x61,0xe0,0x84,0xcd,0x81,0xfd,0x04,0x01,0x00,0xe0,0x84,0xf2,0x82,
+0xff,0xff,0x02,0x24,0xc6,0x82,0x02,0x28,0xd6,0x82,0xe2,0x80,0xcd,0x81,0x02,0x28,
+0x01,0xbc,0xf4,0x02,0x01,0x2a,0xc6,0x82,0x60,0x43,0x63,0x60,0x10,0x62,0xa2,0xdd,
+0x69,0x60,0x7c,0x62,0xa2,0xdd,0x63,0x44,0xd3,0xa0,0x01,0x65,0x0e,0x04,0x1e,0xf3,
+0x4d,0xf3,0x60,0x40,0x10,0x2a,0x67,0x00,0xec,0xa0,0x6a,0x60,0xc2,0x64,0x63,0x04,
+0xa0,0xd3,0xff,0xff,0x00,0xa0,0xff,0xff,0x5e,0x03,0x19,0x60,0x52,0x65,0x44,0xf3,
+0xff,0xff,0xe0,0x84,0xc4,0x83,0xa3,0xd3,0xff,0xff,0xf8,0xa0,0x03,0x65,0x53,0x05,
+0x18,0x60,0xe8,0x64,0xa0,0xd3,0xff,0xff,0xe2,0xa0,0x19,0x60,0x50,0x63,0x33,0x04,
+0xa3,0xd3,0xff,0xff,0x00,0xbc,0x60,0x41,0x2f,0x03,0x02,0x60,0x8f,0x65,0x18,0x60,
+0xe8,0x62,0xa2,0xd3,0xd5,0x80,0xff,0xff,0x03,0x06,0xe9,0x81,0xe8,0x84,0xfa,0x00,
+0x60,0x5c,0x61,0x44,0xe0,0x84,0xe0,0x84,0x60,0x41,0xe0,0x84,0xe0,0x84,0xe0,0x84,
+0x60,0x45,0xe0,0x84,0xc4,0x85,0xc5,0x85,0x00,0x62,0x65,0x44,0x64,0x45,0x11,0x61,
+0xe0,0x84,0xcd,0x81,0xfd,0x04,0x01,0x00,0xe0,0x84,0xf2,0x82,0xff,0xff,0x02,0x24,
+0xc6,0x82,0x02,0x28,0xd6,0x82,0xe2,0x80,0xcd,0x81,0x02,0x28,0x01,0xbc,0xf4,0x02,
+0x01,0x2a,0xc6,0x82,0x01,0x00,0x69,0x00,0x60,0x43,0x19,0x60,0x5c,0x62,0xa2,0xdd,
+0x63,0x44,0xd3,0xa0,0x00,0x63,0x18,0x60,0xe8,0x62,0xa2,0xdd,0x19,0x60,0x50,0x62,
+0xa2,0xdd,0x5b,0x04,0x19,0x60,0x5c,0x63,0xa3,0xd1,0x69,0x60,0x7c,0x62,0xa2,0xd9,
+0x64,0x64,0xa3,0xdb,0x02,0x65,0x05,0x64,0xab,0xfb,0x69,0x60,0x7e,0x63,0x65,0x44,
+0xbd,0xdb,0x44,0xf3,0xa3,0xdb,0x44,0xf3,0x43,0xf3,0x60,0x41,0xff,0xa0,0xe8,0x85,
+0x41,0x03,0xff,0xa1,0x62,0x60,0xdc,0x64,0xa0,0xd3,0xff,0xff,0xa4,0x80,0x65,0x44,
+0xf5,0x03,0x43,0xfb,0x61,0x43,0x69,0x60,0x82,0x62,0xa2,0xdd,0x44,0xfd,0x61,0x45,
+0x00,0x63,0x18,0x60,0x7c,0x62,0xa2,0xdd,0x18,0x60,0x7a,0x62,0xa2,0xdd,0x18,0x60,
+0x82,0x62,0xa2,0xdd,0x18,0x60,0xea,0x62,0xa2,0xdd,0x18,0x60,0x7e,0x62,0xa2,0xdd,
+0x6a,0x60,0xc2,0x62,0xa2,0xdd,0x64,0x61,0x18,0x60,0x84,0x63,0x00,0x64,0xc9,0x81,
+0xbd,0xdb,0xfd,0x02,0x64,0x61,0x18,0x60,0xec,0x63,0x00,0x64,0xc9,0x81,0xbd,0xdb,
+0xfd,0x02,0x65,0x41,0xe1,0x85,0x19,0x60,0x52,0x63,0xc7,0x83,0xa3,0xd3,0xff,0xff,
+0xf8,0xa0,0xff,0xff,0xc0,0x05,0x04,0x61,0x19,0x60,0x52,0x63,0x00,0x64,0xcd,0x81,
+0xbd,0xdb,0xfd,0x02,0x63,0x60,0x18,0x78,0xff,0xff,0x18,0x60,0x82,0x63,0xa3,0xd3,
+0xff,0xff,0xe2,0xa0,0x63,0x60,0x10,0x63,0xa3,0xd3,0x20,0x04,0xdd,0xa0,0xff,0xff,
+0x26,0x05,0x43,0xf3,0x04,0x65,0xf8,0xa0,0xa3,0xd3,0x35,0x02,0xf1,0xa0,0xff,0xff,
+0x1e,0x05,0xab,0xf3,0xff,0xff,0xfd,0xa0,0x03,0x64,0x2d,0x03,0xab,0xfb,0x6a,0x60,
+0xc4,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x25,0x00,0x18,0x60,0x7e,0x62,
+0xa2,0xd3,0xff,0xff,0x00,0xa0,0xff,0xff,0x1e,0x02,0x6f,0x00,0x19,0x60,0x5c,0x63,
+0xa3,0xd3,0xff,0xff,0xdd,0xa0,0x64,0x64,0xa3,0xdb,0x05,0x65,0xef,0x04,0x05,0x64,
+0xab,0xfb,0x44,0xf3,0xff,0xff,0xfd,0xa0,0xff,0xff,0x5f,0x03,0x03,0x60,0xe8,0x65,
+0x18,0x60,0x7a,0x64,0xa0,0xd3,0x4d,0xf3,0xd4,0x80,0x06,0x65,0x56,0x04,0xf1,0xa0,
+0xff,0xff,0xdc,0x05,0x52,0x00,0x69,0x60,0x7e,0x63,0x65,0x44,0xbd,0xdb,0xfa,0xa0,
+0x44,0xf3,0x15,0x02,0xbd,0xdb,0x60,0x5c,0x08,0x65,0x03,0x61,0x6a,0x60,0xc2,0x62,
+0x01,0x64,0xa2,0xdb,0x04,0x00,0xd0,0x80,0xe8,0x85,0x3f,0x03,0xff,0xa1,0x62,0x60,
+0xdc,0x64,0xa0,0xd3,0xff,0xff,0xa4,0x80,0x65,0x44,0xf5,0x03,0x0e,0x00,0xbd,0xdb,
+0x43,0xf3,0x60,0x41,0xf8,0xa0,0xe0,0x85,0x30,0x03,0x01,0xa1,0x62,0x60,0xdc,0x64,
+0xa0,0xd3,0xff,0xff,0xa4,0x80,0x65,0x44,0xf5,0x03,0x43,0xfb,0x61,0x43,0x44,0xfd,
+0x69,0x60,0x82,0x62,0xa2,0xdd,0x00,0x63,0x18,0x60,0x7c,0x62,0xa2,0xdd,0x18,0x60,
+0x7a,0x62,0xa2,0xdd,0x18,0x60,0x82,0x62,0xa2,0xdd,0x18,0x60,0xea,0x62,0xa2,0xdd,
+0x06,0xc6,0x7e,0x00,0x00,0x10,0x64,0x61,0x18,0x60,0x84,0x63,0x00,0x64,0xc9,0x81,
+0xbd,0xdb,0xfd,0x02,0x64,0x61,0x18,0x60,0xec,0x63,0x00,0x64,0xc9,0x81,0xbd,0xdb,
+0xfd,0x02,0x04,0x61,0x19,0x60,0x52,0x63,0x00,0x64,0xcd,0x81,0xbd,0xdb,0xfd,0x02,
+0x00,0x60,0x64,0x65,0x18,0x60,0x7c,0x62,0xa2,0xd3,0xff,0xff,0x01,0xa4,0xd4,0x80,
+0xa2,0xdb,0x09,0x04,0x18,0x60,0x7a,0x63,0x00,0x64,0xa2,0xdb,0xa3,0xdb,0x18,0x60,
+0x7e,0x62,0x01,0x64,0xa2,0xdb,0x69,0x60,0x82,0x62,0xa2,0xd3,0xff,0xff,0xfd,0xa0,
+0xff,0xff,0x04,0x07,0x60,0x60,0x58,0x4e,0xa7,0x78,0xff,0xff,0x61,0x60,0x02,0x78,
+0xff,0xff,0x55,0xf1,0x2b,0x60,0x8a,0x62,0xa2,0xd9,0x3f,0x60,0xb2,0x62,0x2b,0x60,
+0x86,0x64,0xa2,0xdb,0x02,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x21,0x60,0xbe,0x62,
+0x00,0x60,0xfe,0x64,0xa2,0xdb,0x63,0x60,0x51,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,
+0xff,0xff,0x00,0x60,0x80,0x66,0x00,0x64,0x55,0xfb,0x01,0xf2,0xff,0xff,0x00,0xa0,
+0xff,0xff,0x14,0x03,0x21,0x60,0x7a,0x64,0xa0,0xd3,0x03,0xf0,0xff,0xff,0xd0,0x84,
+0x00,0xfa,0x01,0xf2,0x60,0x45,0xd4,0x80,0xff,0xff,0x05,0x06,0xd4,0x84,0x01,0xfa,
+0xfe,0xa0,0xff,0xff,0x03,0x05,0x00,0x64,0x01,0xfa,0x02,0xfa,0x56,0xf1,0x17,0x60,
+0x9c,0x64,0xa0,0xd3,0xff,0xff,0xd0,0x80,0x60,0x45,0x5f,0x03,0x16,0x60,0xd8,0x64,
+0xa0,0xd3,0xff,0xff,0xff,0xa0,0xfc,0xa0,0x06,0x03,0x58,0x02,0x7a,0xf3,0xff,0xff,
+0x00,0xa0,0xff,0xff,0x53,0x03,0x65,0x44,0x19,0xf2,0xff,0xff,0xdc,0x84,0x19,0xfa,
+0x65,0x44,0xff,0x22,0x4b,0x00,0x12,0xfa,0xcc,0x84,0xfc,0xa0,0x60,0x41,0x01,0x06,
+0x04,0x64,0xe0,0x84,0x60,0x45,0xe0,0x84,0xe0,0x84,0xc4,0x85,0x19,0x60,0xa0,0x64,
+0xc4,0x83,0xbd,0xd3,0xff,0xff,0x14,0xfa,0xbd,0xd3,0xff,0xff,0x15,0xfa,0xbd,0xd3,
+0xff,0xff,0x16,0xfa,0xbd,0xd3,0xff,0xff,0x17,0xfa,0xbd,0xd3,0xff,0xff,0x18,0xfa,
+0x16,0x60,0xd8,0x64,0xa0,0xd3,0xff,0xff,0xfc,0xa0,0x61,0x44,0x05,0x02,0xfd,0xa0,
+0x14,0xf2,0x02,0x05,0xfd,0xa4,0x14,0xfa,0xbd,0xf3,0xff,0xff,0xfc,0xa0,0x56,0xf3,
+0x08,0x02,0xff,0xff,0xff,0x26,0x05,0x00,0x01,0x64,0x67,0x60,0x58,0x4e,0x9c,0x78,
+0xff,0xff,0x56,0xf3,0xff,0xff,0x60,0x40,0x00,0x3a,0x2f,0x00,0x15,0xf2,0x01,0xfa,
+0x55,0xfb,0x02,0x64,0x02,0xfa,0x08,0x64,0x54,0xfb,0x01,0x64,0x13,0xfa,0x05,0xfa,
+0x04,0xfa,0x10,0x60,0x00,0x64,0x5a,0xfb,0x20,0x00,0x24,0x00,0x59,0xf3,0xff,0xff,
+0x02,0xb0,0xff,0xff,0x04,0x02,0x68,0x60,0x58,0x4e,0x16,0x78,0xff,0xff,0xbd,0xf3,
+0xff,0xff,0xfc,0xa0,0xff,0xff,0x05,0x02,0x00,0x64,0x67,0x60,0x58,0x4e,0x9c,0x78,
+0xff,0xff,0x80,0x64,0x54,0xfb,0x32,0x64,0x55,0xfb,0x17,0x60,0x9c,0x63,0x00,0x64,
+0x5a,0xfb,0x01,0xfa,0x02,0xfa,0xff,0xff,0xa3,0xdb,0x17,0x60,0x9c,0x64,0xa0,0xd3,
+0x56,0xfb,0x05,0x00,0x00,0xa0,0xff,0xff,0x02,0x02,0x32,0x64,0x55,0xfb,0xff,0xff,
+0x21,0x60,0xbc,0x62,0xa2,0xd1,0x00,0x60,0x01,0x64,0xa0,0x84,0xa2,0xdb,0x09,0xf8,
+0x16,0x60,0xd8,0x62,0xa2,0xd3,0xff,0xff,0xfc,0xa0,0x56,0xf3,0x03,0x03,0x65,0x60,
+0x53,0x78,0xff,0xff,0x00,0xa0,0xff,0xff,0x64,0x03,0x64,0x44,0x80,0x2a,0x1f,0x00,
+0x20,0xf2,0xff,0xff,0xdc,0x84,0x20,0xfa,0x01,0x60,0x5e,0x64,0xe9,0xf1,0xff,0xff,
+0x64,0x40,0x40,0x2a,0x08,0x00,0x19,0x60,0x8c,0x62,0xa2,0xd3,0xff,0xff,0xe0,0x84,
+0xe0,0x84,0xe0,0x84,0xe0,0x84,0x01,0xfa,0x01,0x64,0x02,0xfa,0x59,0xf3,0xff,0xff,
+0xff,0xff,0xff,0x26,0x04,0x00,0x68,0x60,0x58,0x4e,0x16,0x78,0xff,0xff,0x62,0xf3,
+0x63,0xf1,0xff,0xff,0x01,0xb4,0xb0,0x84,0xff,0xff,0x0f,0x03,0x54,0xf3,0xff,0xff,
+0x08,0xbc,0x54,0xfb,0x67,0x60,0x58,0x4e,0x75,0x78,0xff,0xff,0x00,0xfa,0x01,0xf0,
+0xff,0xff,0xd0,0x80,0xff,0xff,0x01,0x06,0x01,0xfa,0x09,0xf2,0x06,0xf2,0x60,0x40,
+0x08,0x2a,0x28,0x00,0x60,0x40,0xff,0x22,0x02,0x00,0xcc,0x84,0x06,0xfa,0x00,0xa0,
+0xff,0xff,0x13,0x02,0x05,0xf2,0x14,0xf0,0x03,0xa4,0xd0,0x80,0xff,0xff,0x01,0x06,
+0x64,0x44,0x05,0xfa,0x07,0xf2,0xff,0xff,0x60,0x40,0xff,0x22,0x02,0x00,0xcc,0x84,
+0x07,0xfa,0x00,0xa0,0x01,0x64,0x01,0x02,0x05,0xfa,0x7a,0xf3,0x01,0xf0,0x00,0xfa,
+0xd0,0x80,0xff,0xff,0x01,0x06,0x01,0xfa,0x54,0xf3,0xff,0xff,0x08,0xbc,0x54,0xfb,
+0x01,0x00,0x4c,0x00,0x09,0xf2,0x54,0xf1,0x60,0x40,0x04,0x2a,0x22,0x00,0x64,0x40,
+0x20,0x2a,0x0f,0x00,0x01,0x64,0x05,0xfa,0x04,0xfa,0x67,0x60,0x58,0x4e,0x75,0x78,
+0xff,0xff,0x00,0xfa,0x01,0xf0,0xff,0xff,0xd0,0x80,0xff,0xff,0x0d,0x06,0x01,0xfa,
+0x0b,0x00,0x64,0x40,0x10,0x2a,0x08,0x00,0x14,0x64,0x00,0xfa,0x55,0xf1,0xff,0xff,
+0xd0,0x80,0xff,0xff,0x01,0x06,0x55,0xfb,0x54,0xf3,0xff,0xff,0xcf,0xb4,0x08,0xbc,
+0x54,0xfb,0x09,0xf2,0x54,0xf1,0x60,0x40,0x10,0x2a,0x0b,0x00,0x64,0x44,0xbf,0xb4,
+0x08,0xbc,0x54,0xfb,0x14,0x64,0x55,0xf1,0x00,0xfa,0xd0,0x80,0xff,0xff,0x01,0x06,
+0x55,0xfb,0x09,0xf2,0x18,0xf0,0x60,0x40,0x20,0x2a,0x04,0x00,0x01,0x63,0x05,0xfc,
+0x04,0xfc,0x06,0xf8,0x60,0x40,0x40,0x2a,0x01,0x00,0x06,0xf8,0x55,0xf3,0x59,0xf1,
+0x00,0xa0,0x05,0x64,0x03,0x02,0x64,0x40,0x80,0x26,0x55,0xfb,0x01,0xf2,0x55,0xf1,
+0xff,0xff,0xd0,0x80,0xff,0xff,0x01,0x06,0x55,0xfb,0x09,0xf0,0x55,0xf3,0x64,0x40,
+0x02,0x26,0x03,0x00,0x00,0xa0,0xff,0xff,0x7b,0x02,0x56,0xf3,0xff,0xff,0x00,0xa0,
+0x54,0xf3,0x76,0x03,0x00,0xa0,0xbd,0xf3,0x5d,0x02,0xfd,0xa0,0x04,0xf2,0x48,0x02,
+0x60,0x40,0xff,0x22,0x02,0x00,0xcc,0x84,0x04,0xfa,0x60,0x40,0x00,0x36,0x0b,0x00,
+0x65,0xf3,0xff,0xff,0xfb,0xa0,0x3f,0x60,0x10,0x62,0x05,0x05,0xa2,0xd3,0xff,0xff,
+0x00,0xa0,0xff,0xff,0x12,0x03,0x05,0xf2,0x59,0xf1,0x04,0xfa,0x64,0x40,0xff,0x26,
+0x04,0x00,0x68,0x60,0x58,0x4e,0x16,0x78,0xff,0xff,0x54,0xf3,0x7a,0xf1,0x08,0xbc,
+0x54,0xfb,0x05,0x64,0xc0,0x84,0x00,0xfa,0x44,0x00,0x9a,0xf3,0xff,0xff,0x60,0x41,
+0x74,0xf3,0xff,0xff,0xe0,0x84,0xe0,0x84,0xe0,0x84,0xe0,0x85,0x73,0x44,0xc4,0x84,
+0x61,0x45,0xd4,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0x60,0x45,0x01,0x60,
+0xf4,0x64,0xd4,0x80,0x65,0x44,0x05,0x05,0x23,0xf2,0xff,0xff,0xdc,0x84,0x23,0xfa,
+0x32,0x64,0xfa,0xa0,0xff,0xff,0x01,0x05,0x06,0x64,0xfb,0xa4,0x00,0xfa,0x21,0x00,
+0x55,0xf3,0xff,0xff,0x00,0xa0,0x59,0xf3,0x1c,0x02,0xfd,0xa0,0xff,0xff,0x04,0x02,
+0x68,0x60,0x58,0x4e,0x6e,0x78,0xff,0xff,0x32,0x64,0x00,0xfa,0x01,0x64,0x05,0xfa,
+0x04,0xfa,0x0f,0x00,0x55,0xf3,0xff,0xff,0x00,0xa0,0x00,0x64,0x0a,0x02,0x54,0xfb,
+0x68,0x60,0x58,0x4e,0x6e,0x78,0xff,0xff,0x67,0x60,0x58,0x4e,0x81,0x78,0xff,0xff,
+0x00,0xfa,0x00,0xf2,0x55,0xf1,0xff,0xff,0xd0,0x80,0xff,0xff,0x01,0x06,0x55,0xfb,
+0x67,0x60,0x6e,0x78,0xff,0xff,0x56,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0x03,0x02,
+0x66,0x60,0x5e,0x78,0xff,0xff,0x64,0x44,0x80,0x2a,0x1f,0x00,0x20,0xf2,0xff,0xff,
+0xdc,0x84,0x20,0xfa,0x01,0x60,0x5e,0x64,0xe9,0xf1,0xff,0xff,0x64,0x40,0x40,0x2a,
+0x08,0x00,0x19,0x60,0x8c,0x62,0xa2,0xd3,0xff,0xff,0xe0,0x84,0xe0,0x84,0xe0,0x84,
+0xe0,0x84,0x01,0xfa,0x01,0x64,0x02,0xfa,0x59,0xf3,0xff,0xff,0xff,0xff,0xff,0x26,
+0x04,0x00,0x68,0x60,0x58,0x4e,0x16,0x78,0xff,0xff,0x09,0xf2,0xff,0xff,0xff,0xff,
+0x04,0x2a,0x62,0x00,0x1c,0xf2,0xff,0xff,0xdc,0x84,0x1c,0xfa,0x00,0x64,0x00,0xfa,
+0x01,0x64,0x08,0xfa,0x06,0xf2,0xff,0xff,0xff,0xff,0xff,0x22,0x03,0x00,0xcc,0x84,
+0x06,0xfa,0x0b,0x02,0x00,0xa0,0xff,0xff,0x07,0x02,0x05,0xf2,0x14,0xf0,0x03,0xa4,
+0xd0,0x80,0xff,0xff,0x01,0x06,0x64,0x44,0x05,0xfa,0x54,0xf3,0xff,0xff,0x60,0x40,
+0x20,0x2a,0x22,0x00,0x01,0x60,0x2c,0x64,0x00,0xfa,0x64,0x60,0x9a,0x64,0xa0,0xd3,
+0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,
+0xa2,0xdb,0x13,0xf2,0xff,0xff,0x05,0xfa,0x04,0xfa,0x00,0x64,0x67,0x60,0x58,0x4e,
+0x9c,0x78,0xff,0xff,0x00,0xf2,0x01,0xf0,0xff,0xff,0xd0,0x80,0xff,0xff,0x18,0x06,
+0x01,0xfa,0x04,0x64,0x02,0xfa,0x14,0x00,0x60,0x40,0x10,0x2a,0x11,0x00,0x64,0x60,
+0x9e,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,
+0xff,0xff,0xdc,0x84,0xa2,0xdb,0x32,0x64,0x00,0xfa,0xff,0xff,0x57,0xf3,0x58,0xfb,
+0x54,0xf3,0x55,0xf1,0xcf,0xb4,0x54,0xfb,0x00,0xf2,0xff,0xff,0xd0,0x80,0xff,0xff,
+0x01,0x06,0x55,0xfb,0x00,0x64,0x0a,0xfa,0x09,0xf2,0xff,0xff,0xff,0xff,0x10,0x2a,
+0x12,0x00,0x1d,0xf2,0xff,0xff,0xdc,0x84,0x1d,0xfa,0x54,0xf3,0x32,0x65,0x60,0x40,
+0x40,0x2a,0x05,0x65,0xbf,0xb4,0x54,0xfb,0x65,0x44,0x55,0xf1,0x00,0xfa,0xd0,0x80,
+0xff,0xff,0x01,0x06,0x55,0xfb,0x09,0xf2,0xff,0xff,0xff,0xff,0x20,0x2a,0x38,0x00,
+0x1a,0xf2,0xff,0xff,0xdc,0x84,0x1a,0xfa,0x51,0xf3,0x9d,0xf1,0x60,0x40,0xff,0x22,
+0x14,0x7c,0x64,0x44,0x54,0xf1,0x00,0xfa,0x64,0x40,0x01,0x2a,0x09,0x00,0x17,0xf2,
+0x13,0xf0,0x00,0xfa,0xff,0xff,0x05,0xf8,0x04,0xf8,0x18,0xf0,0xff,0xff,0x06,0xf8,
+0x54,0xf1,0xff,0xff,0x64,0x40,0x04,0x2a,0x09,0x00,0x17,0xf2,0x64,0x40,0x01,0x2a,
+0x05,0x64,0x00,0xfa,0x54,0xf3,0xff,0xff,0xfe,0xb4,0x54,0xfb,0x54,0xf3,0xff,0xff,
+0x08,0xbc,0xf9,0xb4,0x54,0xfb,0x00,0xf2,0x01,0xf0,0xff,0xff,0xd0,0x80,0xff,0xff,
+0x01,0x06,0x01,0xfa,0x55,0xf1,0xff,0xff,0xd0,0x80,0xff,0xff,0x01,0x06,0x55,0xfb,
+0x09,0xf2,0xff,0xff,0xff,0xff,0x40,0x22,0x16,0x00,0x1b,0xf2,0xff,0xff,0xdc,0x84,
+0x1b,0xfa,0x18,0xf2,0xff,0xff,0x06,0xfa,0x02,0xf2,0xff,0xff,0xfc,0xa0,0x00,0x64,
+0x03,0x02,0x01,0xfa,0x02,0xfa,0xff,0xff,0x16,0xf2,0x01,0xf0,0x00,0xfa,0xd0,0x80,
+0xff,0xff,0x01,0x06,0x01,0xfa,0x55,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0x05,0x02,
+0x59,0xf1,0x05,0x64,0x64,0x40,0x80,0x26,0x55,0xfb,0x04,0x00,0x54,0xf3,0xff,0xff,
+0x80,0xb4,0x54,0xfb,0x54,0xf3,0x59,0xf3,0x60,0x45,0x60,0x47,0xb4,0x84,0x01,0xf2,
+0x55,0xf1,0xff,0xff,0xd0,0x80,0xff,0xff,0x01,0x06,0x55,0xfb,0x09,0xf2,0x55,0xf1,
+0x02,0xb0,0x00,0x64,0x06,0x02,0xd0,0x80,0xff,0xff,0x03,0x03,0x67,0x60,0x6e,0x78,
+0xff,0xff,0x56,0xf3,0x54,0xf3,0x00,0xa0,0xff,0xff,0x03,0x02,0x67,0x60,0x6c,0x78,
+0xff,0xff,0x60,0x40,0xff,0x26,0x58,0x00,0xbd,0xf3,0xff,0xff,0xfc,0xa0,0x58,0xf3,
+0x52,0x02,0x00,0xb8,0xcc,0x84,0x0c,0x03,0x58,0xfb,0x6a,0x60,0xdc,0x64,0xa0,0xd3,
+0x07,0x02,0x00,0xa0,0xff,0xff,0x04,0x03,0x6a,0x60,0xe2,0x62,0x01,0x64,0xa2,0xdb,
+0x04,0xf2,0xff,0xff,0x00,0xb8,0xcc,0x84,0x01,0x03,0x04,0xfa,0x00,0x65,0x58,0xf3,
+0x57,0xf3,0x00,0xa0,0xff,0xff,0x02,0x02,0x58,0xfb,0x01,0x65,0x04,0xf2,0x05,0xf2,
 0x00,0xa0,0xff,0xff,0x02,0x02,0x04,0xfa,0x01,0x65,0x65,0x40,0x00,0x36,0x2d,0x00,
-0x60,0xf3,0xff,0xff,0x08,0xbc,0x60,0xfb,0x00,0x64,0x08,0xfa,0x0a,0xf2,0x15,0xf0,
-0x60,0x40,0x01,0x26,0x0d,0x00,0x66,0x60,0xaa,0x62,0xa2,0xd3,0x37,0x7c,0xfe,0xa0,
+0x54,0xf3,0xff,0xff,0x08,0xbc,0x54,0xfb,0x00,0x64,0x08,0xfa,0x0a,0xf2,0x15,0xf0,
+0x60,0x40,0x01,0x26,0x0d,0x00,0x69,0x60,0x84,0x62,0xa2,0xd3,0x37,0x7c,0xfe,0xa0,
 0xff,0xff,0x06,0x05,0x0c,0xf2,0x25,0x7c,0xfe,0xa0,0xff,0xff,0x01,0x05,0x15,0x7c,
-0x00,0xf8,0x65,0xf3,0xff,0xff,0xff,0xff,0xff,0x26,0x04,0x00,0x63,0x60,0x58,0x4e,
-0xdf,0x78,0xff,0xff,0x18,0x60,0xe6,0x62,0xa2,0xd3,0x10,0x7c,0x0b,0xfa,0x0d,0xf8,
-0x63,0x60,0x20,0x78,0xff,0xff,0x19,0x00,0x2e,0x00,0x80,0xf3,0xff,0xff,0xe0,0x84,
-0xe0,0x84,0xe0,0x84,0xe0,0x84,0x73,0x45,0xc4,0x84,0x60,0x53,0x63,0x60,0x58,0x4e,
-0x4a,0x78,0xff,0xff,0x00,0xfa,0xe1,0xf1,0x67,0x60,0xf8,0x65,0x05,0x64,0x64,0x40,
-0x00,0x3a,0xa5,0xdb,0x63,0x60,0x20,0x78,0xff,0xff,0x61,0xf3,0xff,0xff,0x00,0xa0,
-0x32,0x64,0x0a,0x02,0x61,0xfb,0x65,0xf3,0xff,0xff,0xfd,0xa0,0xff,0xff,0x04,0x02,
-0x64,0x60,0x58,0x4e,0x37,0x78,0xff,0xff,0x13,0xf2,0xff,0xff,0x05,0xfa,0x04,0xfa,
-0x01,0x64,0x0a,0xfa,0x51,0x00,0x61,0xf3,0xff,0xff,0x00,0xa0,0x00,0x64,0x4c,0x02,
-0x60,0xfb,0x66,0xf3,0xff,0xff,0x00,0xa0,0x01,0x64,0x04,0x02,0x63,0x60,0x58,0x4e,
-0x65,0x78,0xff,0xff,0x64,0x60,0x58,0x4e,0x37,0x78,0xff,0xff,0xcb,0xf3,0xff,0xff,
-0xfc,0xa0,0xff,0xff,0x26,0x02,0x73,0x44,0x80,0xf3,0xff,0xff,0xe0,0x84,0xe0,0x84,
-0xe0,0x84,0x60,0x8c,0xa4,0xf3,0xff,0xff,0x60,0x41,0x73,0x44,0x61,0x45,0xd4,0x80,
+0x00,0xf8,0x59,0xf3,0xff,0xff,0xff,0xff,0xff,0x26,0x04,0x00,0x68,0x60,0x58,0x4e,
+0x16,0x78,0xff,0xff,0x19,0x60,0x5e,0x62,0xa2,0xd3,0x10,0x7c,0x0b,0xfa,0x0d,0xf8,
+0x67,0x60,0x64,0x78,0xff,0xff,0x19,0x00,0x36,0x00,0x74,0xf3,0xff,0xff,0xe0,0x84,
+0xe0,0x84,0xe0,0x84,0xe0,0x84,0x73,0x45,0xc4,0x84,0x60,0x53,0x67,0x60,0x58,0x4e,
+0x81,0x78,0xff,0xff,0x00,0xfa,0xd0,0xf1,0x6a,0x60,0xd8,0x65,0x05,0x64,0x64,0x40,
+0x00,0x3a,0xa5,0xdb,0x67,0x60,0x64,0x78,0xff,0xff,0x55,0xf3,0xff,0xff,0x00,0xa0,
+0x32,0x64,0x12,0x02,0x55,0xfb,0x59,0xf3,0xff,0xff,0xfd,0xa0,0xff,0xff,0x0c,0x02,
+0xe9,0xf1,0x51,0xf3,0x64,0x40,0x01,0x27,0x07,0x00,0x60,0x40,0x13,0x26,0x04,0x00,
+0x68,0x60,0x58,0x4e,0x6e,0x78,0xff,0xff,0x13,0xf2,0xff,0xff,0x05,0xfa,0x04,0xfa,
+0x01,0x64,0x0a,0xfa,0x51,0x00,0x55,0xf3,0xff,0xff,0x00,0xa0,0x00,0x64,0x4c,0x02,
+0x54,0xfb,0x5a,0xf3,0xff,0xff,0x00,0xa0,0x01,0x64,0x04,0x02,0x67,0x60,0x58,0x4e,
+0x9c,0x78,0xff,0xff,0x68,0x60,0x58,0x4e,0x6e,0x78,0xff,0xff,0xbd,0xf3,0xff,0xff,
+0xfc,0xa0,0xff,0xff,0x26,0x02,0x73,0x44,0x74,0xf3,0xff,0xff,0xe0,0x84,0xe0,0x84,
+0xe0,0x84,0x60,0x8c,0x9a,0xf3,0xff,0xff,0x60,0x41,0x73,0x44,0x61,0x45,0xd4,0x80,
 0xff,0xff,0x03,0x0d,0x2c,0x45,0xc4,0x84,0xf9,0x00,0x60,0x53,0x08,0xf2,0xff,0xff,
 0x00,0xa0,0xff,0xff,0x08,0x02,0x13,0xf2,0xff,0xff,0x05,0xfa,0x04,0xfa,0x24,0xf2,
-0xff,0xff,0xdc,0x84,0x24,0xfa,0x63,0x60,0x58,0x4e,0x4a,0x78,0xff,0xff,0x00,0xfa,
+0xff,0xff,0xdc,0x84,0x24,0xfa,0x67,0x60,0x58,0x4e,0x81,0x78,0xff,0xff,0x00,0xfa,
 0x08,0x00,0x32,0x64,0x00,0xfa,0x13,0xf2,0xff,0xff,0x05,0xfa,0x04,0xfa,0x01,0x64,
-0x0a,0xfa,0x65,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0x06,0x03,0x00,0xf2,0x14,0x65,
-0xd4,0x80,0x02,0x06,0x65,0x44,0x00,0xfa,0x00,0xf2,0x61,0xf1,0xff,0xff,0xd0,0x80,
-0xff,0xff,0x04,0x06,0x61,0xfb,0x02,0x00,0x32,0x64,0x61,0xfb,0x1e,0x60,0xb2,0x64,
-0xa0,0xd3,0x03,0xfa,0xff,0xff,0x61,0xf3,0x60,0x45,0x60,0x45,0x69,0x60,0x44,0x62,
-0x50,0x60,0x00,0x64,0xa2,0xdb,0x69,0x60,0x46,0x62,0x65,0x44,0xa2,0xdb,0x5e,0x60,
-0xb5,0x78,0xff,0xff,0xa4,0xf1,0x73,0x44,0x64,0x45,0x86,0xf1,0xd4,0x84,0xe8,0x84,
-0xe8,0x84,0xe8,0x84,0xe8,0x84,0xc0,0x84,0x2e,0x58,0xff,0xff,0xa4,0xf3,0xff,0xff,
-0x60,0x45,0x73,0x44,0xd4,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0x60,0x45,
-0x01,0x60,0xf4,0x64,0xd4,0x80,0x65,0x44,0x05,0x05,0x23,0xf2,0xff,0xff,0xdc,0x84,
-0x23,0xfa,0x32,0x64,0xfa,0xa0,0xff,0xff,0x01,0x05,0x06,0x64,0xfb,0xa4,0x2e,0x58,
-0xff,0xff,0x60,0x45,0x69,0x60,0x44,0x62,0x20,0x60,0x00,0x64,0xb4,0x84,0xa2,0xdb,
-0x65,0x44,0x2e,0x43,0x11,0xfc,0x10,0x60,0x00,0x65,0x60,0x40,0xff,0x22,0x00,0x65,
-0x65,0x44,0x66,0xfb,0x21,0xf2,0xff,0xff,0xdc,0x84,0x21,0xfa,0x7b,0xf5,0xff,0xff,
-0x81,0xf1,0x2b,0xf8,0x31,0xf8,0xff,0xff,0x82,0xf1,0x2c,0xf8,0x32,0xf8,0xff,0xff,
-0x83,0xf1,0x2d,0xf8,0x33,0xf8,0xff,0xff,0xbd,0xf1,0x2e,0xf8,0xbe,0xf1,0xff,0xff,
-0x2f,0xf8,0xbf,0xf1,0x30,0xf8,0xff,0xff,0x01,0x60,0x48,0x64,0xb4,0x84,0x29,0xfa,
-0x00,0x63,0x22,0xfc,0x2a,0x60,0x2e,0xc7,0x7e,0x00,0x00,0x10,0x20,0x64,0x0e,0xfa,
-0x3a,0x60,0x58,0x4e,0x14,0x78,0xff,0xff,0x3c,0x60,0xa2,0x62,0x3c,0x60,0x48,0x64,
+0x0a,0xfa,0x59,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,0x06,0x03,0x00,0xf2,0x14,0x65,
+0xd4,0x80,0x02,0x06,0x65,0x44,0x00,0xfa,0x00,0xf2,0x55,0xf1,0xff,0xff,0xd0,0x80,
+0xff,0xff,0x04,0x06,0x55,0xfb,0x02,0x00,0x32,0x64,0x55,0xfb,0x21,0x60,0x7a,0x64,
+0xa0,0xd3,0x03,0xfa,0x63,0x60,0x39,0x78,0xff,0xff,0x9a,0xf1,0x73,0x44,0x64,0x45,
+0x7a,0xf1,0xd4,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xe8,0x84,0xc0,0x84,0x2e,0x58,
+0xff,0xff,0x9a,0xf3,0xff,0xff,0x60,0x45,0x73,0x44,0xd4,0x84,0xe8,0x84,0xe8,0x84,
+0xe8,0x84,0xe8,0x84,0x60,0x45,0x01,0x60,0xf4,0x64,0xd4,0x80,0x65,0x44,0x05,0x05,
+0x23,0xf2,0xff,0xff,0xdc,0x84,0x23,0xfa,0x32,0x64,0xfa,0xa0,0xff,0xff,0x01,0x05,
+0x06,0x64,0xfb,0xa4,0x2e,0x58,0xff,0xff,0x60,0x45,0x6b,0x60,0x2c,0x62,0x20,0x60,
+0x00,0x64,0xb4,0x84,0xa2,0xdb,0x65,0x44,0x2e,0x43,0x11,0xfc,0x10,0x60,0x00,0x65,
+0x60,0x40,0xff,0x22,0x00,0x65,0x65,0x44,0x5a,0xfb,0x21,0xf2,0xff,0xff,0xdc,0x84,
+0x21,0xfa,0x6f,0xf5,0xff,0xff,0x75,0xf1,0x2b,0xf8,0x31,0xf8,0xff,0xff,0x76,0xf1,
+0x2c,0xf8,0x32,0xf8,0xff,0xff,0x77,0xf1,0x2d,0xf8,0x33,0xf8,0xff,0xff,0xb0,0xf1,
+0x2e,0xf8,0xb1,0xf1,0xff,0xff,0x2f,0xf8,0xb2,0xf1,0x30,0xf8,0xff,0xff,0x01,0x60,
+0x48,0x64,0xb4,0x84,0x29,0xfa,0x00,0x63,0x22,0xfc,0x2a,0x60,0x20,0x64,0x0e,0xfa,
+0x39,0x60,0x58,0x4e,0xfe,0x78,0xff,0xff,0x3f,0x60,0x6a,0x62,0x3f,0x60,0x10,0x64,
 0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xc1,0xfe,
-0x1e,0x60,0xf6,0x62,0x00,0x60,0x01,0x64,0xa2,0xdb,0x63,0x60,0xb4,0x64,0x5a,0xdb,
-0xcf,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,0xf4,0x62,0xa2,0xd1,0xff,0x60,0xfe,0x61,
-0xa1,0x84,0x5a,0xd1,0x4a,0xdb,0xa1,0x84,0x5a,0xdb,0x7b,0xf5,0x22,0xf0,0x00,0x60,
-0x7b,0x66,0x64,0x44,0x0f,0x22,0x04,0x00,0x22,0xf2,0xff,0xff,0xdc,0x84,0x22,0xfa,
-0x5a,0x60,0xba,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,
-0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x11,0xf0,0x69,0x60,0x44,0x62,0x20,0x60,
+0x21,0x60,0xbe,0x62,0x00,0x60,0x01,0x64,0xa2,0xdb,0x67,0x60,0xeb,0x64,0x5a,0xdb,
+0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,0xbc,0x62,0xa2,0xd1,0xff,0x60,0xfe,0x61,
+0xa1,0x84,0x5a,0xd1,0x4a,0xdb,0xa1,0x84,0x5a,0xdb,0x6f,0xf5,0x22,0xf0,0x00,0x60,
+0x80,0x66,0x64,0x44,0x0f,0x22,0x04,0x00,0x22,0xf2,0xff,0xff,0xdc,0x84,0x22,0xfa,
+0x63,0x60,0xac,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,
+0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x11,0xf0,0x6b,0x60,0x2c,0x62,0x20,0x60,
 0x02,0x64,0xa2,0xdb,0xff,0xff,0x44,0x4e,0x2e,0x58,0xff,0xff,0x1e,0xf2,0xff,0xff,
-0xdc,0x84,0x1e,0xfa,0x69,0x60,0x44,0x62,0x30,0x60,0x00,0x64,0xa2,0xdb,0x2e,0x43,
-0x11,0xfc,0x1e,0x60,0xf4,0x62,0xa2,0xd1,0xbf,0x60,0xff,0x61,0xa1,0x84,0x5a,0xd1,
-0x4a,0xdb,0xa1,0x84,0x5a,0xdb,0xff,0xff,0xde,0xfe,0xff,0xff,0x0b,0x04,0x1e,0x60,
-0xf6,0x62,0x40,0x60,0x00,0x64,0xa2,0xdb,0x64,0x60,0x03,0x64,0x5a,0xdb,0xcf,0xfe,
-0x2f,0x58,0xff,0xff,0x3c,0x60,0xc2,0x62,0x2a,0x44,0xa2,0xdb,0xca,0x82,0x08,0x64,
-0xa2,0xdb,0xff,0xff,0x2d,0xff,0x1e,0x60,0xf6,0x62,0x20,0x60,0x00,0x64,0xa2,0xdb,
-0x64,0x60,0x17,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x1e,0x60,0xf4,0x62,
+0xdc,0x84,0x1e,0xfa,0x6b,0x60,0x2c,0x62,0x30,0x60,0x00,0x64,0xa2,0xdb,0x2e,0x43,
+0x11,0xfc,0x21,0x60,0xbc,0x62,0xa2,0xd1,0xbf,0x60,0xff,0x61,0xa1,0x84,0x5a,0xd1,
+0x4a,0xdb,0xa1,0x84,0x5a,0xdb,0xff,0xff,0xde,0xfe,0xff,0xff,0x0b,0x04,0x21,0x60,
+0xbe,0x62,0x40,0x60,0x00,0x64,0xa2,0xdb,0x68,0x60,0x3a,0x64,0x5a,0xdb,0xcf,0xfe,
+0x2f,0x58,0xff,0xff,0x3f,0x60,0x8a,0x62,0x2a,0x44,0xa2,0xdb,0xca,0x82,0x08,0x64,
+0xa2,0xdb,0xff,0xff,0x2d,0xff,0x21,0x60,0xbe,0x62,0x20,0x60,0x00,0x64,0xa2,0xdb,
+0x68,0x60,0x4e,0x64,0x5a,0xdb,0xcf,0xfe,0x2f,0x58,0xff,0xff,0x21,0x60,0xbc,0x62,
 0xa2,0xd1,0x9f,0x60,0xff,0x61,0xa1,0x84,0x5a,0xd1,0x4a,0xdb,0xa1,0x84,0x5a,0xdb,
-0xff,0xff,0xbe,0xfe,0x1e,0x60,0xc8,0x62,0xa2,0xd1,0x40,0x60,0x00,0x64,0xb0,0x84,
-0xa2,0xdb,0xcf,0xfe,0x00,0x60,0x7b,0x66,0x69,0x60,0x44,0x62,0x30,0x60,0x01,0x64,
+0xff,0xff,0xbe,0xfe,0x21,0x60,0x90,0x62,0xa2,0xd1,0x40,0x60,0x00,0x64,0xb0,0x84,
+0xa2,0xdb,0xcf,0xfe,0x00,0x60,0x80,0x66,0x6b,0x60,0x2c,0x62,0x30,0x60,0x01,0x64,
 0xa2,0xdb,0x11,0xf2,0xff,0xff,0x40,0x4e,0x2e,0x58,0xff,0xff,0x1f,0xf2,0xff,0xff,
-0xdc,0x84,0x1f,0xfa,0x69,0x60,0x44,0x62,0x40,0x60,0x00,0x64,0xa2,0xdb,0x2e,0x43,
-0x11,0xfc,0x1e,0x60,0xf4,0x62,0xa2,0xd1,0xbf,0x60,0xff,0x61,0xa1,0x84,0x5a,0xd1,
-0x4a,0xdb,0xa1,0x84,0x5a,0xdb,0xff,0xff,0xde,0xfe,0xff,0xff,0x0b,0x04,0x1e,0x60,
-0xf6,0x62,0x40,0x60,0x00,0x64,0xa2,0xdb,0x64,0x60,0x5b,0x64,0x5a,0xdb,0xcf,0xfe,
-0x2f,0x58,0xff,0xff,0x65,0xf3,0xff,0xff,0xff,0xff,0x80,0x26,0x14,0x00,0x3c,0x60,
-0xc2,0x62,0x2a,0x44,0xa2,0xdb,0xca,0x82,0x02,0x64,0xa2,0xdb,0xff,0xff,0x2d,0xff,
-0x1e,0x60,0xf6,0x62,0x20,0x60,0x00,0x64,0xa2,0xdb,0x64,0x60,0x75,0x64,0x5a,0xdb,
-0xcf,0xfe,0x2f,0x58,0xff,0xff,0xff,0xff,0x1e,0x60,0xf4,0x62,0xa2,0xd1,0x9f,0x60,
+0xdc,0x84,0x1f,0xfa,0x6b,0x60,0x2c,0x62,0x40,0x60,0x00,0x64,0xa2,0xdb,0x2e,0x43,
+0x11,0xfc,0x21,0x60,0xbc,0x62,0xa2,0xd1,0xbf,0x60,0xff,0x61,0xa1,0x84,0x5a,0xd1,
+0x4a,0xdb,0xa1,0x84,0x5a,0xdb,0xff,0xff,0xde,0xfe,0xff,0xff,0x0b,0x04,0x21,0x60,
+0xbe,0x62,0x40,0x60,0x00,0x64,0xa2,0xdb,0x68,0x60,0x92,0x64,0x5a,0xdb,0xcf,0xfe,
+0x2f,0x58,0xff,0xff,0x59,0xf3,0xff,0xff,0xff,0xff,0x80,0x26,0x14,0x00,0x3f,0x60,
+0x8a,0x62,0x2a,0x44,0xa2,0xdb,0xca,0x82,0x02,0x64,0xa2,0xdb,0xff,0xff,0x2d,0xff,
+0x21,0x60,0xbe,0x62,0x20,0x60,0x00,0x64,0xa2,0xdb,0x68,0x60,0xac,0x64,0x5a,0xdb,
+0xcf,0xfe,0x2f,0x58,0xff,0xff,0xff,0xff,0x21,0x60,0xbc,0x62,0xa2,0xd1,0x9f,0x60,
 0xff,0x61,0xa1,0x84,0x5a,0xd1,0x4a,0xdb,0xa1,0x84,0x5a,0xdb,0xff,0xff,0xbe,0xfe,
-0x1e,0x60,0xc8,0x62,0xa2,0xd1,0x40,0x60,0x00,0x64,0xb0,0x84,0xa2,0xdb,0xcf,0xfe,
-0x5b,0x60,0xa4,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,
-0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x00,0x60,0x7b,0x66,0x69,0x60,0x44,0x62,
+0x21,0x60,0x90,0x62,0xa2,0xd1,0x40,0x60,0x00,0x64,0xb0,0x84,0xa2,0xdb,0xcf,0xfe,
+0x64,0x60,0x96,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,
+0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x00,0x60,0x80,0x66,0x6b,0x60,0x2c,0x62,
 0x40,0x60,0x01,0x64,0xa2,0xdb,0x11,0xf2,0xff,0xff,0x40,0x4e,0x2e,0x58,0xff,0xff,
-0x1e,0x60,0xf4,0x62,0xa2,0xd1,0x00,0x60,0x02,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,
-0xcf,0xfe,0x2f,0x58,0xff,0xff,0x3c,0x60,0xd2,0x62,0x28,0x60,0xbe,0x64,0xa2,0xdb,
-0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x1e,0x60,0xf4,0x62,0x00,0x64,0xa2,0xdb,
-0x5a,0xdb,0x2f,0x58,0xff,0xff,0x62,0xf3,0x26,0x46,0x60,0x40,0xff,0x22,0x37,0x00,
-0x60,0xf3,0x0f,0xf2,0x60,0x43,0x29,0xf0,0x60,0x40,0x10,0x2a,0x15,0x00,0x63,0x44,
-0x60,0x43,0x69,0x60,0x44,0x62,0x00,0x60,0x40,0x64,0xa2,0xdb,0x69,0x60,0x46,0x62,
-0x63,0x44,0xa2,0xdb,0x1e,0x60,0xf4,0x62,0xa2,0xd1,0x00,0x60,0x40,0x64,0xb0,0x84,
+0x21,0x60,0xbc,0x62,0xa2,0xd1,0x00,0x60,0x02,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,
+0xcf,0xfe,0x2f,0x58,0xff,0xff,0x3f,0x60,0x9a,0x62,0x2b,0x60,0x86,0x64,0xa2,0xdb,
+0x03,0x64,0x4a,0xdb,0xff,0xff,0x1d,0xff,0x21,0x60,0xbc,0x62,0x00,0x64,0xa2,0xdb,
+0x5a,0xdb,0x2f,0x58,0xff,0xff,0x56,0xf3,0x26,0x46,0x60,0x40,0xff,0x22,0x37,0x00,
+0x54,0xf3,0x0f,0xf2,0x60,0x43,0x29,0xf0,0x60,0x40,0x10,0x2a,0x15,0x00,0x63,0x44,
+0x60,0x43,0x6b,0x60,0x2c,0x62,0x00,0x60,0x40,0x64,0xa2,0xdb,0x6b,0x60,0x2e,0x62,
+0x63,0x44,0xa2,0xdb,0x21,0x60,0xbc,0x62,0xa2,0xd1,0x00,0x60,0x40,0x64,0xb0,0x84,
 0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x1b,0x00,0x64,0x40,0x20,0x2b,0x02,0x00,0x40,0xbb,
-0x01,0x00,0xbf,0xb3,0x60,0xfd,0x63,0x44,0x60,0x43,0x69,0x60,0x44,0x62,0x00,0x60,
-0x10,0x64,0xa2,0xdb,0x69,0x60,0x46,0x62,0x63,0x44,0xa2,0xdb,0x1e,0x60,0xf4,0x62,
+0x01,0x00,0xbf,0xb3,0x54,0xfd,0x63,0x44,0x60,0x43,0x6b,0x60,0x2c,0x62,0x00,0x60,
+0x10,0x64,0xa2,0xdb,0x6b,0x60,0x2e,0x62,0x63,0x44,0xa2,0xdb,0x21,0x60,0xbc,0x62,
 0xa2,0xd1,0x00,0x60,0x10,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x26,0x46,
 0x2f,0x58,0xff,0xff,0x22,0x02,0x2e,0xf2,0xff,0xff,0x60,0x41,0xe1,0x81,0xf0,0x84,
 0xe1,0x81,0xf0,0x84,0xe1,0x81,0x5a,0xd2,0xf0,0x85,0x94,0x84,0x60,0x41,0xe1,0x81,
 0xf0,0x84,0xe1,0x81,0xf0,0x84,0xe1,0x81,0x5a,0xd2,0xf0,0x85,0x94,0x84,0x60,0x41,
-0xe1,0x81,0xf0,0x84,0xe1,0x81,0xf0,0x84,0xe1,0x81,0xf0,0x84,0x65,0x60,0x58,0x4e,
-0xf4,0x78,0xff,0xff,0x65,0x60,0xf1,0x78,0xff,0xff,0x65,0x60,0xe3,0x78,0xff,0xff,
-0xcb,0xf3,0xff,0xff,0xfc,0xa0,0xfd,0xa0,0xd5,0x02,0x00,0x64,0x40,0x48,0x26,0x46,
+0xe1,0x81,0xf0,0x84,0xe1,0x81,0xf0,0x84,0xe1,0x81,0xf0,0x84,0x6a,0x60,0x58,0x4e,
+0x2b,0x78,0xff,0xff,0x6a,0x60,0x28,0x78,0xff,0xff,0x6a,0x60,0x1a,0x78,0xff,0xff,
+0xbd,0xf3,0xff,0xff,0xfc,0xa0,0xfd,0xa0,0xd5,0x02,0x00,0x64,0x40,0x48,0x26,0x46,
 0x38,0xf2,0x00,0xf4,0x10,0x63,0xf4,0xa4,0x60,0x41,0x00,0x65,0x63,0x44,0x01,0x22,
 0x05,0x00,0x01,0xac,0xa0,0xd2,0x01,0xa3,0x60,0x47,0x02,0x00,0xa0,0xd2,0x01,0xa3,
 0x00,0x7f,0x40,0x4c,0x63,0x44,0x01,0x22,0x05,0x00,0x01,0xac,0xa0,0xd2,0x01,0xa3,
 0x60,0x47,0x02,0x00,0xa0,0xd2,0x01,0xa3,0x00,0x7f,0x60,0x45,0x2c,0x44,0x04,0xa8,
 0x05,0xa8,0x06,0x03,0xc9,0x81,0x2e,0x03,0xd5,0x81,0xc7,0x83,0xce,0x06,0xde,0x00,
-0x41,0x4c,0x67,0x60,0xf8,0x61,0x63,0x44,0x01,0x22,0x05,0x00,0x01,0xac,0xa0,0xd2,
+0x41,0x4c,0x6a,0x60,0xd8,0x61,0x63,0x44,0x01,0x22,0x05,0x00,0x01,0xac,0xa0,0xd2,
 0x01,0xa3,0x60,0x47,0x02,0x00,0xa0,0xd2,0x01,0xa3,0x00,0x7f,0x59,0xdb,0x63,0x44,
 0x01,0x22,0x05,0x00,0x01,0xac,0xa0,0xd2,0x01,0xa3,0x60,0x47,0x02,0x00,0xa0,0xd2,
-0x01,0xa3,0x00,0x7f,0x59,0xdb,0x59,0x60,0x58,0x4e,0x14,0x78,0xff,0xff,0x65,0x44,
-0x59,0xdb,0x59,0x60,0x58,0x4e,0x14,0x78,0xff,0xff,0x65,0x44,0x59,0xdb,0x2c,0x41,
+0x01,0xa3,0x00,0x7f,0x59,0xdb,0x5c,0x60,0x58,0x4e,0xbe,0x78,0xff,0xff,0x65,0x44,
+0x59,0xdb,0x5c,0x60,0x58,0x4e,0xbe,0x78,0xff,0xff,0x65,0x44,0x59,0xdb,0x2c,0x41,
 0xf8,0xa1,0xb4,0x00,0x65,0x41,0x63,0x44,0x01,0x22,0x05,0x00,0x01,0xac,0xa0,0xd2,
-0x01,0xa3,0x60,0x47,0x02,0x00,0xa0,0xd2,0x01,0xa3,0x00,0x7f,0x40,0x4c,0x64,0xfb,
+0x01,0xa3,0x60,0x47,0x02,0x00,0xa0,0xd2,0x01,0xa3,0x00,0x7f,0x40,0x4c,0x58,0xfb,
 0x63,0x44,0x01,0x22,0x05,0x00,0x01,0xac,0xa0,0xd2,0x01,0xa3,0x60,0x47,0x02,0x00,
-0xa0,0xd2,0x01,0xa3,0x00,0x7f,0x63,0xfb,0x62,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,
+0xa0,0xd2,0x01,0xa3,0x00,0x7f,0x57,0xfb,0x56,0xf3,0xff,0xff,0x00,0xa0,0xff,0xff,
 0x49,0x03,0x63,0x44,0x01,0x22,0x05,0x00,0x01,0xac,0xa0,0xd2,0x01,0xa3,0x60,0x47,
 0x02,0x00,0xa0,0xd2,0x01,0xa3,0x00,0x7f,0x40,0x4d,0x2c,0x44,0x00,0xb8,0xff,0xff,
-0x05,0x02,0x2d,0x44,0x01,0x2a,0x02,0x00,0x10,0x65,0x45,0x48,0x66,0xf3,0xff,0xff,
-0x00,0xa0,0xff,0xff,0x2f,0x03,0x2d,0x44,0xfe,0xb5,0x3c,0x60,0xf2,0x64,0xa0,0xd3,
+0x05,0x02,0x2d,0x44,0x01,0x2a,0x02,0x00,0x10,0x65,0x45,0x48,0x5a,0xf3,0xff,0xff,
+0x00,0xa0,0xff,0xff,0x2f,0x03,0x2d,0x44,0xfe,0xb5,0x3f,0x60,0xba,0x64,0xa0,0xd3,
 0xff,0xff,0x00,0x7f,0xd4,0x84,0x04,0xa4,0x19,0x04,0x60,0x45,0xd5,0x80,0xfc,0xa5,
-0x15,0x04,0x3c,0x60,0xf0,0x64,0xa0,0xd1,0xc7,0x83,0x63,0x44,0x01,0x22,0x05,0x00,
+0x15,0x04,0x3f,0x60,0xb8,0x64,0xa0,0xd1,0xc7,0x83,0x63,0x44,0x01,0x22,0x05,0x00,
 0x01,0xac,0xa0,0xd2,0x01,0xa3,0x60,0x47,0x02,0x00,0xa0,0xd2,0x01,0xa3,0x00,0x7f,
 0xa0,0x80,0xff,0xff,0x03,0x03,0x28,0x44,0x20,0xbc,0x40,0x48,0x28,0x44,0xff,0x22,
-0x09,0x00,0x60,0xf1,0xff,0xff,0xb0,0x84,0x60,0xfb,0x60,0x45,0x69,0x60,0x46,0x62,
-0x65,0x44,0xa2,0xdb,0x69,0x60,0x44,0x62,0x00,0x60,0x04,0x64,0xa2,0xdb,0x1e,0x60,
-0xf4,0x62,0xa2,0xd1,0x00,0x60,0x04,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,
-0x26,0x46,0x2f,0x58,0xff,0xff,0x0e,0x48,0x66,0x60,0x58,0x4e,0x5e,0x78,0xff,0xff,
+0x09,0x00,0x54,0xf1,0xff,0xff,0xb0,0x84,0x54,0xfb,0x60,0x45,0x6b,0x60,0x2e,0x62,
+0x65,0x44,0xa2,0xdb,0x6b,0x60,0x2c,0x62,0x00,0x60,0x04,0x64,0xa2,0xdb,0x21,0x60,
+0xbc,0x62,0xa2,0xd1,0x00,0x60,0x04,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,
+0x26,0x46,0x2f,0x58,0xff,0xff,0x0e,0x48,0x6a,0x60,0x58,0x4e,0x95,0x78,0xff,0xff,
 0x10,0x03,0x29,0xf2,0xa3,0xd1,0x60,0x40,0x10,0x2b,0x03,0x00,0x64,0x44,0x02,0xbc,
 0x02,0x00,0x64,0x44,0xfd,0xb4,0xa3,0xdb,0x0a,0xa3,0x3c,0x64,0xa3,0xdb,0xf6,0xa3,
 0x50,0x00,0x2c,0x43,0xa3,0xd3,0xff,0xff,0x60,0x40,0x01,0x26,0x37,0x00,0x43,0x4c,
 0x29,0xf0,0x01,0x64,0x64,0x40,0x10,0x27,0x03,0x64,0xbd,0xdb,0x2e,0xf2,0xff,0xff,
-0xbd,0xdb,0x2f,0xf2,0xbd,0xdb,0xff,0xff,0x30,0xf2,0xbd,0xdb,0x01,0x60,0x92,0x64,
+0xbd,0xdb,0x2f,0xf2,0xbd,0xdb,0xff,0xff,0x30,0xf2,0xbd,0xdb,0x01,0x60,0x76,0x64,
 0xa0,0xd3,0xff,0xff,0x60,0x40,0x08,0x2a,0x02,0x00,0x08,0x7f,0x0a,0x00,0x04,0x2a,
 0x02,0x00,0x04,0x7f,0x06,0x00,0x02,0x2a,0x02,0x00,0x02,0x7f,0x02,0x00,0x01,0x7f,
 0x01,0x7e,0x60,0x47,0xbd,0xdb,0x3c,0x64,0xbd,0xdb,0x29,0xf0,0x34,0xf2,0x64,0x40,
 0x08,0x27,0xcc,0x84,0xbd,0xdb,0x00,0x64,0xbd,0xdb,0x2c,0x43,0x1a,0x00,0x61,0x44,
-0xdc,0x84,0xd0,0x80,0xff,0xff,0xcb,0x06,0x72,0xfb,0xc9,0x00,0x72,0xf1,0x39,0x60,
-0x02,0x63,0x00,0x61,0xa3,0xd3,0xff,0xff,0xff,0xff,0x01,0x2a,0xf0,0x00,0x10,0xa3,
-0x61,0x44,0xf1,0xa0,0xdd,0x81,0xf6,0x04,0x00,0x63,0x3d,0x60,0xca,0x62,0x01,0x64,
-0xa2,0xdb,0x08,0x4e,0x00,0xbb,0x2e,0x58,0xff,0xff,0x29,0x60,0x02,0x65,0x00,0x7f,
+0xdc,0x84,0xd0,0x80,0xff,0xff,0xcb,0x06,0x66,0xfb,0xc9,0x00,0x66,0xf1,0x3b,0x60,
+0xca,0x63,0x00,0x61,0xa3,0xd3,0xff,0xff,0xff,0xff,0x01,0x2a,0xf0,0x00,0x10,0xa3,
+0x61,0x44,0xf1,0xa0,0xdd,0x81,0xf6,0x04,0x00,0x63,0x40,0x60,0x4a,0x62,0x01,0x64,
+0xa2,0xdb,0x08,0x4e,0x00,0xbb,0x2e,0x58,0xff,0xff,0x2b,0x60,0xca,0x65,0x00,0x7f,
 0xe0,0x84,0xe0,0x84,0xe0,0x84,0xe0,0x84,0x44,0xd3,0x62,0x43,0x43,0x4c,0x60,0x40,
 0x01,0x2a,0x10,0x00,0x02,0xa3,0x2e,0xf2,0x50,0xfe,0xbd,0xd1,0x2f,0xf2,0xd0,0x80,
 0xbd,0xd1,0x30,0xf2,0xd0,0x80,0xbd,0xd1,0xff,0xff,0xd0,0x80,0xff,0xff,0x02,0x02,
-0xf8,0xa3,0x1e,0x00,0x72,0xf1,0x39,0x60,0x02,0x63,0x64,0x41,0xff,0x22,0x17,0x00,
+0xf8,0xa3,0x1e,0x00,0x66,0xf1,0x3b,0x60,0xca,0x63,0x64,0x41,0xff,0x22,0x17,0x00,
 0xbd,0xd1,0x2e,0xf2,0x50,0xfe,0x64,0x40,0x01,0x26,0x04,0x00,0xcd,0x81,0x0e,0xa3,
 0xf7,0x02,0x0d,0x00,0xbd,0xd1,0x2f,0xf2,0xd0,0x80,0xbd,0xd1,0x30,0xf2,0xd0,0x80,
 0xbd,0xd1,0xff,0xff,0xd0,0x80,0xcd,0x81,0xe3,0x01,0x08,0xa3,0xe9,0x02,0x00,0x63,
 0x00,0xbb,0x2e,0x58,0xff,0xff,0xff,0x60,0xff,0x64,0x2b,0xfa,0x2c,0xfa,0x2d,0xfa,
-0xff,0xff,0x47,0xf3,0xff,0xff,0xe8,0x84,0xe8,0x84,0x01,0x00,0x00,0x64,0x1c,0xfa,
-0x46,0x4d,0xbd,0xf1,0x2e,0xf8,0xbe,0xf1,0xff,0xff,0x2f,0xf8,0xbf,0xf1,0x30,0xf8,
-0xff,0xff,0x81,0xf1,0x31,0xf8,0x82,0xf1,0xff,0xff,0x32,0xf8,0x83,0xf1,0x33,0xf8,
-0x3b,0x60,0x48,0x63,0x80,0xf1,0x00,0x64,0x64,0x5e,0xbd,0xdb,0x64,0x47,0x00,0x7f,
-0xbd,0xdb,0x43,0xf3,0x47,0xf1,0x01,0xb4,0xe0,0x84,0xe0,0x84,0xe0,0x84,0xe0,0x84,
-0xb0,0x84,0x02,0xbc,0xbd,0xdb,0x00,0x64,0xbd,0xdb,0x00,0x64,0xbd,0xdb,0x59,0x60,
-0xa0,0x62,0xa2,0xd3,0xda,0x85,0xbd,0xdb,0x60,0x41,0x06,0xa4,0x8f,0xfb,0xa5,0xd1,
-0xda,0x85,0x64,0x44,0x00,0x7f,0xcd,0x81,0xbd,0xdb,0x05,0x03,0x64,0x47,0x00,0x7f,
-0xcd,0x81,0xbd,0xdb,0xf4,0x02,0x01,0x64,0xbd,0xdb,0x8f,0xf1,0x17,0x60,0xf0,0x62,
-0xa2,0xd3,0xda,0x85,0xbd,0xdb,0x43,0x48,0x60,0x41,0x41,0x4c,0xc0,0x84,0x02,0xa4,
-0x8f,0xfb,0xa5,0xd1,0xda,0x85,0x64,0x44,0x00,0x7f,0xcd,0x81,0xbd,0xdb,0x05,0x03,
-0x64,0x47,0x00,0x7f,0xcd,0x81,0xbd,0xdb,0xf4,0x02,0x03,0x64,0xbd,0xdb,0x01,0x64,
-0xbd,0xdb,0x7f,0xf3,0xbd,0xdb,0xff,0xff,0x8f,0xf3,0xff,0xff,0x03,0xa4,0x8f,0xfb,
-0x06,0x64,0xbd,0xdb,0x02,0x64,0xbd,0xdb,0x86,0xf1,0x00,0x64,0x64,0x5e,0xbd,0xdb,
-0x64,0x47,0x00,0x7f,0xbd,0xdb,0x8f,0xf3,0xff,0xff,0x04,0xa4,0x8f,0xfb,0x07,0x64,
-0xbd,0xdb,0x06,0x64,0xbd,0xdb,0x17,0x60,0xa0,0x62,0xa2,0xd1,0x00,0x64,0x64,0x5e,
-0xbd,0xdb,0x64,0x47,0x00,0x7f,0xbd,0xdb,0x00,0x64,0xbd,0xdb,0x1f,0x60,0x74,0x62,
-0xa2,0xd3,0xbd,0xdb,0x1f,0x60,0x76,0x62,0xa2,0xd3,0xbd,0xdb,0x00,0x64,0xbd,0xdb,
-0x8f,0xf3,0xff,0xff,0x08,0xa4,0x8f,0xfb,0x00,0x64,0xa3,0xdb,0x17,0x60,0xfa,0x62,
-0xa2,0xd1,0x28,0x43,0x2c,0x41,0xa3,0xd3,0xff,0xff,0x60,0x40,0x02,0x3a,0x04,0x00,
-0x64,0x40,0x01,0x2a,0x14,0x00,0x11,0x00,0x04,0x3a,0x04,0x00,0x64,0x40,0x02,0x2a,
-0x0e,0x00,0x0b,0x00,0x0b,0x3a,0x04,0x00,0x64,0x40,0x04,0x2a,0x08,0x00,0x05,0x00,
-0x16,0x3a,0x05,0x00,0x64,0x40,0x08,0x2a,0x02,0x00,0x80,0xbc,0xa3,0xdb,0xcd,0x81,
-0xdb,0x83,0xe1,0x02,0x8f,0xf3,0xff,0xff,0x60,0x41,0x08,0xa4,0x38,0xfa,0x00,0xf4,
-0x3b,0x60,0x48,0x63,0x01,0xf2,0xff,0xff,0x7c,0x7e,0x01,0xfa,0x0c,0x65,0xbd,0xd3,
-0xbd,0xd1,0x60,0x47,0xb0,0x87,0xa5,0xda,0xda,0x85,0xcd,0x81,0xcd,0x81,0x01,0x03,
-0xf6,0x02,0x2d,0x46,0x2e,0x58,0xff,0xff,0x00,0xf4,0x07,0xf0,0x73,0xf3,0x64,0x40,
-0x02,0x2a,0x49,0x00,0x02,0xbc,0x73,0xfb,0x60,0x45,0x26,0x46,0x2e,0xf2,0xff,0xff,
-0x60,0x47,0xbd,0xf3,0x60,0x5c,0x60,0x47,0x2f,0xf2,0xd0,0x80,0x60,0x47,0xbe,0xf3,
-0x60,0x5c,0x60,0x47,0x10,0x07,0x0b,0x04,0x30,0xf2,0xd0,0x80,0x60,0x47,0x60,0x5c,
-0xbf,0xf3,0x09,0x07,0x04,0x04,0x60,0x47,0xd0,0x80,0xff,0xff,0x04,0x07,0xfe,0x64,
-0xa4,0x84,0x73,0xfb,0xff,0xff,0x31,0xf2,0x32,0xf0,0x33,0xf0,0xb0,0x84,0xb0,0x84,
-0xff,0xff,0x21,0x03,0x3b,0x60,0x48,0x63,0x31,0xf0,0xbd,0xd9,0x32,0xf0,0xff,0xff,
-0xbd,0xd9,0x33,0xf0,0xbd,0xd9,0xff,0xff,0x00,0xf4,0x02,0xf0,0xbd,0xd9,0xff,0xff,
-0x03,0xf0,0xbd,0xd9,0x04,0xf0,0xff,0xff,0xbd,0xd9,0x05,0xf0,0xbd,0xd9,0xff,0xff,
-0x06,0xf0,0xbd,0xd9,0x07,0xf0,0xff,0xff,0xbd,0xd9,0x00,0x64,0x08,0xf0,0xa3,0xdb,
-0x64,0x47,0x60,0x45,0x00,0x3b,0x62,0x00,0xbd,0xdb,0xdc,0x84,0xe8,0x81,0x10,0x64,
-0x58,0xd0,0xcd,0x81,0xbd,0xd9,0xfc,0x02,0xd8,0x83,0x04,0x64,0x40,0x4d,0x09,0x61,
-0x65,0x40,0x01,0x2a,0xbd,0xd0,0xff,0xff,0x64,0x44,0x00,0x7f,0x2d,0xda,0x5a,0x8d,
-0x64,0x47,0x00,0x7f,0x2d,0xda,0xcd,0x81,0x5a,0x8d,0xf4,0x02,0x3b,0x60,0x7c,0x63,
-0x04,0x61,0x65,0x40,0x01,0x26,0x02,0xa1,0xa1,0xd2,0xff,0xff,0x01,0xa8,0x59,0xd2,
-0x4b,0x02,0xfc,0xa0,0xff,0xff,0x48,0x07,0xbd,0xdb,0x59,0xd0,0xcc,0x84,0xbd,0xd9,
-0xfc,0x02,0x00,0x64,0xbd,0xdb,0x3b,0x60,0x8a,0x63,0x59,0xd2,0x59,0xd0,0x03,0xa8,
-0x7f,0xf3,0x3a,0x02,0x59,0xd0,0xff,0xff,0xd0,0x80,0xbd,0xd9,0x35,0x02,0x59,0xd2,
-0x59,0xd0,0x06,0xa8,0x59,0xd0,0x30,0x02,0x59,0xd2,0xff,0xff,0x60,0x47,0xb0,0x84,
-0xbd,0xdb,0x3b,0x60,0x7e,0x63,0x00,0x61,0xa3,0xd3,0xff,0xff,0x60,0x40,0xff,0x22,
-0x16,0x00,0x80,0x2a,0x11,0x00,0x7f,0xb4,0xa3,0xdb,0x60,0x40,0x02,0x3a,0x02,0x00,
-0x01,0xb9,0x0a,0x00,0x04,0x3a,0x02,0x00,0x02,0xb9,0x06,0x00,0x0b,0x3a,0x02,0x00,
-0x04,0xb9,0x02,0x00,0x16,0x36,0x08,0xb9,0x02,0xa3,0xe6,0x00,0x0d,0x00,0x3b,0x60,
-0x88,0x63,0x61,0x44,0xa3,0xdb,0x3b,0x60,0x48,0x63,0x3a,0x60,0x10,0x64,0x23,0x61,
-0xbd,0xd1,0xcd,0x81,0x58,0xd9,0xfc,0x02,0x26,0x46,0x2f,0x58,0xff,0xff,0xcb,0xf3,
-0x0f,0xf0,0xfd,0xa0,0xff,0xff,0x07,0x02,0x64,0x40,0x60,0x26,0x04,0x00,0x69,0x60,
-0x58,0x4e,0x1c,0x78,0xff,0xff,0x2f,0x58,0xff,0xff,0xd5,0xf3,0xff,0xff,0xfd,0xa0,
-0xff,0xff,0x4d,0x05,0x16,0x60,0x60,0x62,0xa2,0xd3,0x6e,0xf1,0xfc,0xa0,0xff,0xff,
-0x46,0x02,0x64,0x40,0x01,0x2a,0x43,0x00,0x68,0x60,0x58,0x4e,0xe8,0x78,0xff,0xff,
-0x26,0x46,0x3d,0x02,0x2e,0xf0,0x2b,0xf8,0x2f,0xf0,0xff,0xff,0x2c,0xf8,0x30,0xf0,
-0x2d,0xf8,0x66,0x60,0x58,0x4e,0xa7,0x78,0xff,0xff,0x26,0x46,0x00,0xf0,0x04,0x64,
-0x03,0xfa,0x04,0xf8,0x00,0x64,0x0b,0xfa,0x0c,0xfa,0x0f,0xfa,0xff,0xff,0x85,0xf3,
-0x38,0xf0,0x50,0xbc,0x29,0xfa,0x17,0xf8,0x0c,0x64,0x15,0xfa,0x20,0xf2,0xff,0xff,
-0x60,0x47,0x00,0x7f,0x13,0xfa,0x1c,0x64,0x21,0xfa,0x08,0x64,0x28,0xfa,0x00,0x63,
-0x22,0xfc,0x16,0xfc,0x07,0xfc,0x01,0x64,0x19,0xfc,0x1c,0xfc,0x14,0xfa,0xff,0x67,
-0x0e,0xfa,0x3c,0x60,0xa2,0x62,0x3c,0x60,0x4e,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,
-0x0e,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xc1,0xfe,0x00,0x66,0x46,0x46,0x2f,0x58,
-0xff,0xff,0xcb,0xf3,0x0f,0xf0,0xfd,0xa0,0x20,0x64,0x47,0x02,0x64,0x40,0x60,0x26,
-0x10,0x64,0x60,0xf1,0xff,0xff,0xb0,0x84,0x60,0xfb,0x60,0x45,0x69,0x60,0x44,0x62,
-0x90,0x60,0x50,0x64,0xa2,0xdb,0x69,0x60,0x46,0x62,0x65,0x44,0xa2,0xdb,0x1e,0x60,
-0xf4,0x62,0xa2,0xd1,0x00,0x60,0x04,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,
-0x2e,0xf2,0xff,0xff,0x60,0x41,0xe1,0x81,0xf0,0x84,0xe1,0x81,0xf0,0x84,0xe1,0x81,
-0x5a,0xd2,0xf0,0x85,0x94,0x84,0x60,0x41,0xe1,0x81,0xf0,0x84,0xe1,0x81,0xf0,0x84,
-0xe1,0x81,0x5a,0xd2,0xf0,0x85,0x94,0x84,0x60,0x41,0xe1,0x81,0xf0,0x84,0xe1,0x81,
-0xf0,0x84,0xe1,0x81,0xf0,0x84,0x65,0x60,0x58,0x4e,0xf4,0x78,0xff,0xff,0x29,0xf2,
-0xff,0xff,0x60,0x40,0x10,0x2b,0x09,0x00,0x6a,0x60,0x58,0x4e,0x41,0x78,0xff,0xff,
-0x04,0x03,0x6a,0x60,0x58,0x4e,0x5b,0x78,0xff,0xff,0x2f,0x58,0xff,0xff,0x00,0xf4,
-0x04,0x63,0x06,0x00,0x00,0xf4,0x07,0xf0,0x10,0x63,0x64,0x40,0x02,0x2a,0x27,0x00,
-0xbd,0xd2,0xff,0xff,0x60,0x47,0x00,0x3a,0x22,0x00,0x60,0x41,0x00,0x36,0x1d,0x00,
-0x59,0x60,0xa0,0x62,0xa2,0xd3,0x61,0x45,0xd4,0x80,0xff,0xff,0x18,0x02,0xda,0x82,
-0x61,0x40,0xfe,0x22,0x08,0x00,0x62,0x45,0xbd,0xd2,0xa5,0xd1,0xda,0x82,0xd0,0x80,
-0xc9,0x81,0xf6,0x03,0x0c,0x00,0x61,0x40,0x00,0x36,0x07,0x00,0x62,0x45,0xa3,0xd2,
-0xa5,0xd1,0xff,0xff,0x90,0x80,0xff,0x26,0x02,0x00,0x00,0x64,0x01,0x00,0x01,0x64,
-0x01,0xb4,0x2e,0x58,0xff,0xff,0x2e,0xf0,0x2b,0xf8,0x2f,0xf0,0xff,0xff,0x2c,0xf8,
-0x30,0xf0,0x2d,0xf8,0xff,0xff,0xbd,0xf1,0x2e,0xf8,0xff,0xff,0xbe,0xf1,0x2f,0xf8,
-0xbf,0xf1,0xff,0xff,0x30,0xf8,0x81,0xf1,0x31,0xf8,0xff,0xff,0x82,0xf1,0x32,0xf8,
-0x83,0xf1,0xff,0xff,0x33,0xf8,0x00,0xf0,0x04,0x64,0x03,0xfa,0x04,0xf8,0x00,0x64,
-0x0b,0xfa,0x0c,0xfa,0x0f,0xfa,0xff,0xff,0x85,0xf3,0xff,0xff,0xb0,0xbc,0x29,0xfa,
-0x0c,0x64,0x15,0xfa,0x20,0xf2,0xff,0xff,0x60,0x47,0x00,0x7f,0x13,0xfa,0x1c,0x64,
-0x21,0xfa,0x08,0x64,0x28,0xfa,0x00,0x63,0x22,0xfc,0x16,0xfc,0x07,0xfc,0x01,0x64,
-0x19,0xfc,0x1c,0xfc,0x14,0xfa,0xff,0x67,0x0e,0xfa,0x38,0xf0,0x06,0x64,0x38,0xfa,
-0x17,0xfa,0x44,0x48,0x00,0xf4,0x01,0xf2,0xff,0xff,0x7c,0x7e,0x01,0xfa,0x02,0xf2,
-0x00,0x63,0x00,0xa0,0x04,0xfc,0x07,0x02,0x03,0xf2,0x00,0x63,0xff,0xa0,0xff,0xff,
-0x3b,0x03,0x0e,0x63,0x39,0x00,0xff,0xa0,0x0d,0x63,0x36,0x02,0x43,0xf3,0xff,0xff,
-0x60,0x40,0x01,0x2a,0x31,0x00,0x03,0xf2,0x0e,0x63,0xff,0xa0,0xff,0xff,0x1c,0x02,
-0x0a,0x63,0x80,0x60,0x10,0x64,0xbd,0xda,0x00,0x60,0x3a,0x61,0x01,0x60,0x02,0x65,
-0x55,0x60,0xaa,0x64,0xcd,0x81,0xbd,0xda,0xc4,0x84,0xfc,0x02,0x00,0xf4,0x04,0x63,
-0x06,0x61,0xcd,0x81,0xbd,0xda,0xc4,0x84,0xfc,0x02,0x26,0x46,0x88,0x64,0x38,0xfa,
-0x17,0xfa,0x00,0xf4,0x00,0x63,0x10,0x00,0xfd,0xa0,0xff,0xff,0x0d,0x02,0x0f,0x63,
-0x55,0x60,0xaa,0x65,0x05,0xf2,0xff,0xff,0xd4,0x80,0x88,0x64,0x05,0x02,0x28,0x45,
-0xd4,0x80,0xff,0xff,0x01,0x02,0x00,0x63,0x03,0xf2,0x04,0xfc,0xdc,0x84,0x03,0xfa,
-0x26,0x46,0x3c,0x60,0xa2,0x62,0x3c,0x60,0x4e,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,
-0x0e,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xc1,0xfe,0x00,0x66,0x46,0x46,0x2e,0x58,
-0xff,0xff,0x1e,0x60,0xb2,0x62,0xa2,0xd1,0x59,0x60,0xf6,0x64,0xa0,0xd3,0xfa,0x65,
-0xd0,0x80,0xff,0xff,0x37,0x0d,0xc4,0x84,0xa2,0xdb,0x59,0x60,0xf4,0x64,0xa0,0xd1,
-0x3a,0x60,0x02,0x64,0x64,0x43,0xd0,0x80,0x29,0x60,0x02,0x64,0x01,0x07,0x60,0x43,
-0x10,0x61,0xa3,0xd3,0xff,0xff,0xff,0xff,0x01,0x2a,0x1e,0x00,0x0a,0x65,0x46,0xd3,
-0xff,0xff,0xcc,0x84,0xa2,0xdb,0x03,0x02,0x00,0x64,0xa3,0xdb,0x15,0x00,0xfe,0xa2,
-0xa2,0xd3,0xff,0xff,0x60,0x47,0x60,0x40,0x08,0x2a,0x02,0x00,0x08,0x7f,0x0a,0x00,
-0x04,0x2a,0x02,0x00,0x04,0x7f,0x06,0x00,0x02,0x2a,0x02,0x00,0x02,0x7f,0x02,0x00,
-0x01,0x7f,0x01,0x7e,0x60,0x47,0xa2,0xdb,0xcd,0x81,0x10,0xa3,0xda,0x02,0x59,0x60,
-0xf4,0x64,0xa0,0xdd,0x2e,0x58,0xff,0xff,0x3a,0x60,0xd0,0x63,0x6b,0xf3,0xff,0xff,
-0x00,0xbc,0x60,0x41,0x10,0x03,0x2b,0xf2,0x50,0xfe,0xbd,0xd1,0x2c,0xf2,0xd0,0x80,
-0xbd,0xd1,0x2d,0xf2,0xd0,0x80,0xbd,0xd1,0xff,0xff,0xd0,0x80,0xff,0xff,0x04,0x03,
-0xfa,0xa1,0xff,0xff,0xf0,0x02,0x01,0xbc,0x2e,0x58,0xff,0xff,0x3a,0x60,0x58,0x63,
-0x6a,0xf3,0xe6,0x00,0x3a,0x60,0xd0,0x65,0x6b,0xf3,0xff,0xff,0xc4,0x83,0x88,0xa0,
-0x06,0xa4,0x09,0x05,0x6b,0xfb,0xff,0xff,0x2b,0xf2,0xbd,0xdb,0x2c,0xf2,0xff,0xff,
-0xbd,0xdb,0x2d,0xf2,0xbd,0xdb,0x2e,0x58,0xff,0xff,0x3a,0x60,0x58,0x65,0x6a,0xf3,
-0xff,0xff,0xc4,0x83,0x88,0xa0,0x06,0xa4,0x09,0x05,0x6a,0xfb,0xff,0xff,0x2b,0xf2,
-0xbd,0xdb,0x2c,0xf2,0xff,0xff,0xbd,0xdb,0x2d,0xf2,0xbd,0xdb,0x2e,0x58,0xff,0xff,
-0x3a,0x60,0xd0,0x63,0x6b,0xf3,0xff,0xff,0x00,0xbc,0x60,0x41,0x10,0x03,0x2e,0xf2,
-0x50,0xfe,0xbd,0xd1,0x2f,0xf2,0xd0,0x80,0xbd,0xd1,0x30,0xf2,0xd0,0x80,0xbd,0xd1,
-0xff,0xff,0xd0,0x80,0xff,0xff,0x04,0x03,0xfa,0xa1,0xff,0xff,0xf0,0x02,0x01,0xbc,
-0x2e,0x58,0xff,0xff,0x3a,0x60,0xd0,0x65,0x6b,0xf3,0xff,0xff,0xc4,0x83,0x88,0xa0,
-0x06,0xa4,0x09,0x05,0x6b,0xfb,0xff,0xff,0x2e,0xf2,0xbd,0xdb,0x2f,0xf2,0xff,0xff,
-0xbd,0xdb,0x30,0xf2,0xbd,0xdb,0x2e,0x58,0xff,0xff,0x3c,0x60,0x84,0x62,0xa2,0xd3,
-0xff,0xff,0x00,0xa8,0x60,0x46,0x03,0x02,0x3d,0x60,0x2f,0x78,0xff,0xff,0x26,0x45,
-0xd4,0x80,0x0f,0xf0,0xf9,0x03,0x64,0x44,0x70,0xb0,0x70,0x2a,0x03,0x00,0x6f,0x60,
-0xdc,0x78,0xff,0xff,0x64,0x40,0x04,0x2a,0x13,0x00,0x67,0x60,0xda,0x62,0x00,0x64,
-0xa2,0xdb,0x29,0xf2,0xff,0xff,0xff,0xff,0x40,0x2b,0x0f,0x00,0x64,0x40,0x80,0x2b,
-0x07,0x00,0x1b,0xf2,0x22,0xf0,0x60,0x47,0xc0,0xb4,0xb0,0x84,0x22,0xfa,0x05,0x00,
-0x00,0x64,0x40,0x46,0x3d,0x60,0x2f,0x78,0xff,0xff,0x32,0x40,0x01,0x2a,0x07,0x00,
-0x71,0x60,0x18,0x78,0xff,0xff,0x03,0x03,0x6f,0x60,0xdc,0x78,0xff,0xff,0x46,0x46,
-0x0f,0xf0,0xff,0xff,0x64,0x44,0x80,0x26,0x0e,0x00,0x32,0x40,0x01,0x2a,0x08,0x00,
-0x22,0xf0,0x07,0x60,0x01,0x64,0xb0,0x84,0x22,0xfa,0x6f,0x60,0xf5,0x78,0xff,0xff,
-0x6f,0x60,0xdc,0x78,0xff,0xff,0x08,0x26,0x2a,0x00,0x5b,0x60,0xa2,0x64,0xa0,0xd3,
-0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,
-0xa2,0xdb,0x29,0xf2,0xff,0xff,0xff,0xff,0x03,0x27,0x06,0x00,0x67,0x60,0xf2,0x62,
+0xff,0xff,0x3a,0xf3,0xff,0xff,0xe8,0x84,0xe8,0x84,0x01,0x00,0x00,0x64,0x1c,0xfa,
+0x46,0x4d,0xb0,0xf1,0x2e,0xf8,0xb1,0xf1,0xff,0xff,0x2f,0xf8,0xb2,0xf1,0x30,0xf8,
+0xff,0xff,0x75,0xf1,0x31,0xf8,0x76,0xf1,0xff,0xff,0x32,0xf8,0x77,0xf1,0x33,0xf8,
+0x3e,0x60,0x10,0x63,0x74,0xf1,0x00,0x64,0x64,0x5e,0xbd,0xdb,0x64,0x47,0x00,0x7f,
+0xbd,0xdb,0x34,0xf3,0x3a,0xf1,0x01,0xb4,0xe0,0x84,0xe0,0x84,0xe0,0x84,0xe0,0x84,
+0xb0,0x84,0x02,0xbc,0xbd,0xdb,0x06,0xd6,0x7e,0x00,0x00,0x10,0x00,0x64,0xbd,0xdb,
+0x00,0x64,0xbd,0xdb,0x62,0x60,0x92,0x62,0xa2,0xd3,0xda,0x85,0xbd,0xdb,0x60,0x41,
+0x06,0xa4,0x83,0xfb,0xa5,0xd1,0xda,0x85,0x64,0x44,0x00,0x7f,0xcd,0x81,0xbd,0xdb,
+0x05,0x03,0x64,0x47,0x00,0x7f,0xcd,0x81,0xbd,0xdb,0xf4,0x02,0x01,0x64,0xbd,0xdb,
+0x83,0xf1,0x18,0x60,0x68,0x62,0xa2,0xd3,0xda,0x85,0xbd,0xdb,0x43,0x48,0x60,0x41,
+0x41,0x4c,0xc0,0x84,0x02,0xa4,0x83,0xfb,0xa5,0xd1,0xda,0x85,0x64,0x44,0x00,0x7f,
+0xcd,0x81,0xbd,0xdb,0x05,0x03,0x64,0x47,0x00,0x7f,0xcd,0x81,0xbd,0xdb,0xf4,0x02,
+0x03,0x64,0xbd,0xdb,0x01,0x64,0xbd,0xdb,0x73,0xf3,0xbd,0xdb,0xff,0xff,0x83,0xf3,
+0xff,0xff,0x03,0xa4,0x83,0xfb,0x06,0x64,0xbd,0xdb,0x02,0x64,0xbd,0xdb,0x7a,0xf1,
+0x00,0x64,0x64,0x5e,0xbd,0xdb,0x64,0x47,0x00,0x7f,0xbd,0xdb,0x83,0xf3,0xff,0xff,
+0x04,0xa4,0x83,0xfb,0x07,0x64,0xbd,0xdb,0x06,0x64,0xbd,0xdb,0x18,0x60,0x18,0x62,
+0xa2,0xd1,0x00,0x64,0x64,0x5e,0xbd,0xdb,0x64,0x47,0x00,0x7f,0xbd,0xdb,0x00,0x64,
+0xbd,0xdb,0x22,0x60,0x3c,0x62,0xa2,0xd3,0xbd,0xdb,0x22,0x60,0x3e,0x62,0xa2,0xd3,
+0xbd,0xdb,0x00,0x64,0xbd,0xdb,0x83,0xf3,0xff,0xff,0x08,0xa4,0x83,0xfb,0x00,0x64,
+0xa3,0xdb,0x18,0x60,0x72,0x62,0xa2,0xd1,0x28,0x43,0x2c,0x41,0xa3,0xd3,0xff,0xff,
+0x60,0x40,0x02,0x3a,0x04,0x00,0x64,0x40,0x01,0x2a,0x14,0x00,0x11,0x00,0x04,0x3a,
+0x04,0x00,0x64,0x40,0x02,0x2a,0x0e,0x00,0x0b,0x00,0x0b,0x3a,0x04,0x00,0x64,0x40,
+0x04,0x2a,0x08,0x00,0x05,0x00,0x16,0x3a,0x05,0x00,0x64,0x40,0x08,0x2a,0x02,0x00,
+0x80,0xbc,0xa3,0xdb,0xcd,0x81,0xdb,0x83,0xe1,0x02,0x83,0xf3,0xff,0xff,0x60,0x41,
+0x08,0xa4,0x38,0xfa,0x00,0xf4,0x3e,0x60,0x10,0x63,0x01,0xf2,0xff,0xff,0x7c,0x7e,
+0x01,0xfa,0x0c,0x65,0xbd,0xd3,0xbd,0xd1,0x60,0x47,0xb0,0x87,0xa5,0xda,0xda,0x85,
+0xcd,0x81,0xcd,0x81,0x01,0x03,0xf6,0x02,0x2d,0x46,0x2e,0x58,0xff,0xff,0x00,0xf4,
+0x07,0xf0,0x67,0xf3,0x64,0x40,0x02,0x2a,0x49,0x00,0x26,0x46,0x02,0xbc,0x67,0xfb,
+0x60,0x45,0x2e,0xf2,0xff,0xff,0x60,0x47,0xb0,0xf3,0x60,0x5c,0x60,0x47,0x2f,0xf2,
+0xd0,0x80,0x60,0x47,0xb1,0xf3,0x60,0x5c,0x60,0x47,0x10,0x07,0x0b,0x04,0x30,0xf2,
+0xd0,0x80,0x60,0x47,0x60,0x5c,0xb2,0xf3,0x09,0x07,0x04,0x04,0x60,0x47,0xd0,0x80,
+0xff,0xff,0x04,0x07,0xfe,0x64,0xa4,0x84,0x67,0xfb,0xff,0xff,0x31,0xf2,0x32,0xf0,
+0x33,0xf0,0xb0,0x84,0xb0,0x84,0xff,0xff,0x21,0x03,0x3e,0x60,0x10,0x63,0x31,0xf0,
+0xbd,0xd9,0x32,0xf0,0xff,0xff,0xbd,0xd9,0x33,0xf0,0xbd,0xd9,0xff,0xff,0x00,0xf4,
+0x02,0xf0,0xbd,0xd9,0xff,0xff,0x03,0xf0,0xbd,0xd9,0x04,0xf0,0xff,0xff,0xbd,0xd9,
+0x05,0xf0,0xbd,0xd9,0xff,0xff,0x06,0xf0,0xbd,0xd9,0x07,0xf0,0xff,0xff,0xbd,0xd9,
+0x00,0x64,0x08,0xf0,0xa3,0xdb,0x64,0x47,0x60,0x45,0x00,0x3b,0x66,0x00,0x00,0x36,
+0x64,0x00,0xbd,0xdb,0xdc,0x84,0xe8,0x81,0x10,0x64,0x58,0xd0,0xcd,0x81,0xbd,0xd9,
+0xfc,0x02,0xd8,0x83,0x04,0x64,0x40,0x4d,0x09,0x61,0x65,0x40,0x01,0x2a,0xbd,0xd0,
+0xff,0xff,0x64,0x44,0x00,0x7f,0x2d,0x42,0xa2,0xda,0x5a,0x8d,0x64,0x47,0x00,0x7f,
+0x2d,0x42,0xa2,0xda,0xcd,0x81,0x5a,0x8d,0xf2,0x02,0x3e,0x60,0x44,0x63,0x04,0x61,
+0x65,0x40,0x01,0x26,0x02,0xa1,0xa1,0xd2,0xff,0xff,0x01,0xa8,0x59,0xd2,0x4b,0x02,
+0xfc,0xa0,0xff,0xff,0x48,0x07,0xbd,0xdb,0x59,0xd0,0xcc,0x84,0xbd,0xd9,0xfc,0x02,
+0x00,0x64,0xbd,0xdb,0x3e,0x60,0x52,0x63,0x59,0xd2,0x59,0xd0,0x03,0xa8,0x73,0xf3,
+0x3a,0x02,0x59,0xd0,0xff,0xff,0xd0,0x80,0xbd,0xd9,0x35,0x02,0x59,0xd2,0x59,0xd0,
+0x06,0xa8,0x59,0xd0,0x30,0x02,0x59,0xd2,0xff,0xff,0x60,0x47,0xb0,0x84,0xbd,0xdb,
+0x3e,0x60,0x46,0x63,0x00,0x61,0xa3,0xd3,0xff,0xff,0x60,0x40,0xff,0x22,0x16,0x00,
+0x80,0x2a,0x11,0x00,0x7f,0xb4,0xa3,0xdb,0x60,0x40,0x02,0x3a,0x02,0x00,0x01,0xb9,
+0x0a,0x00,0x04,0x3a,0x02,0x00,0x02,0xb9,0x06,0x00,0x0b,0x3a,0x02,0x00,0x04,0xb9,
+0x02,0x00,0x16,0x36,0x08,0xb9,0x02,0xa3,0xe6,0x00,0x0d,0x00,0x3e,0x60,0x50,0x63,
+0x61,0x44,0xa3,0xdb,0x3e,0x60,0x10,0x63,0x3c,0x60,0xd8,0x64,0x23,0x61,0xbd,0xd1,
+0xcd,0x81,0x58,0xd9,0xfc,0x02,0x26,0x46,0x2f,0x58,0xff,0xff,0xbd,0xf3,0x0f,0xf0,
+0xfd,0xa0,0xff,0xff,0x07,0x02,0x64,0x40,0x60,0x26,0x04,0x00,0x6d,0x60,0x58,0x4e,
+0x4d,0x78,0xff,0xff,0x2f,0x58,0xff,0xff,0xc4,0xf3,0xff,0xff,0xfd,0xa0,0xff,0xff,
+0x4d,0x05,0x16,0x60,0xd8,0x62,0xa2,0xd3,0x62,0xf1,0xfc,0xa0,0xff,0xff,0x46,0x02,
+0x64,0x40,0x01,0x2a,0x43,0x00,0x6d,0x60,0x58,0x4e,0x19,0x78,0xff,0xff,0x26,0x46,
+0x3d,0x02,0x2e,0xf0,0x2b,0xf8,0x2f,0xf0,0xff,0xff,0x2c,0xf8,0x30,0xf0,0x2d,0xf8,
+0x6a,0x60,0x58,0x4e,0xde,0x78,0xff,0xff,0x26,0x46,0x00,0xf0,0x04,0x64,0x03,0xfa,
+0x04,0xf8,0x00,0x64,0x0b,0xfa,0x0c,0xfa,0x0f,0xfa,0xff,0xff,0x79,0xf3,0x38,0xf0,
+0x50,0xbc,0x29,0xfa,0x17,0xf8,0x0c,0x64,0x15,0xfa,0x20,0xf2,0xff,0xff,0x60,0x47,
+0x00,0x7f,0x13,0xfa,0x1c,0x64,0x21,0xfa,0x08,0x64,0x28,0xfa,0x00,0x63,0x22,0xfc,
+0x16,0xfc,0x07,0xfc,0x01,0x64,0x19,0xfc,0x1c,0xfc,0x14,0xfa,0xff,0x67,0x0e,0xfa,
+0x3f,0x60,0x6a,0x62,0x3f,0x60,0x16,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0e,0x64,
+0x5a,0xdb,0xff,0xff,0x2b,0xff,0xc1,0xfe,0x00,0x66,0x46,0x46,0x2f,0x58,0xff,0xff,
+0xbd,0xf3,0x0f,0xf0,0xfd,0xa0,0x20,0x64,0x3d,0x02,0x64,0x40,0x60,0x26,0x10,0x64,
+0x54,0xf1,0xff,0xff,0xb0,0x84,0x54,0xfb,0x21,0x60,0xbc,0x62,0xa2,0xd1,0x00,0x60,
+0x04,0x64,0xb0,0x84,0xa2,0xdb,0xff,0xff,0xcf,0xfe,0x2e,0xf2,0xff,0xff,0x60,0x41,
+0xe1,0x81,0xf0,0x84,0xe1,0x81,0xf0,0x84,0xe1,0x81,0x5a,0xd2,0xf0,0x85,0x94,0x84,
+0x60,0x41,0xe1,0x81,0xf0,0x84,0xe1,0x81,0xf0,0x84,0xe1,0x81,0x5a,0xd2,0xf0,0x85,
+0x94,0x84,0x60,0x41,0xe1,0x81,0xf0,0x84,0xe1,0x81,0xf0,0x84,0xe1,0x81,0xf0,0x84,
+0x6a,0x60,0x58,0x4e,0x2b,0x78,0xff,0xff,0x29,0xf2,0xff,0xff,0x60,0x40,0x10,0x2b,
+0x09,0x00,0x6e,0x60,0x58,0x4e,0x72,0x78,0xff,0xff,0x04,0x03,0x6e,0x60,0x58,0x4e,
+0x8c,0x78,0xff,0xff,0x2f,0x58,0xff,0xff,0x00,0xf4,0x04,0x63,0x06,0x00,0x00,0xf4,
+0x07,0xf0,0x10,0x63,0x64,0x40,0x02,0x2a,0x27,0x00,0xbd,0xd2,0xff,0xff,0x60,0x47,
+0x00,0x3a,0x22,0x00,0x60,0x41,0x00,0x36,0x1d,0x00,0x62,0x60,0x92,0x62,0xa2,0xd3,
+0x61,0x45,0xd4,0x80,0xff,0xff,0x18,0x02,0xda,0x82,0x61,0x40,0xfe,0x22,0x08,0x00,
+0x62,0x45,0xbd,0xd2,0xa5,0xd1,0xda,0x82,0xd0,0x80,0xc9,0x81,0xf6,0x03,0x0c,0x00,
+0x61,0x40,0x00,0x36,0x07,0x00,0x62,0x45,0xa3,0xd2,0xa5,0xd1,0xff,0xff,0x90,0x80,
+0xff,0x26,0x02,0x00,0x00,0x64,0x01,0x00,0x01,0x64,0x01,0xb4,0x2e,0x58,0xff,0xff,
+0x2e,0xf0,0x2b,0xf8,0x2f,0xf0,0xff,0xff,0x2c,0xf8,0x30,0xf0,0x2d,0xf8,0xff,0xff,
+0xb0,0xf1,0x2e,0xf8,0xff,0xff,0xb1,0xf1,0x2f,0xf8,0xb2,0xf1,0xff,0xff,0x30,0xf8,
+0x75,0xf1,0x31,0xf8,0xff,0xff,0x76,0xf1,0x32,0xf8,0x77,0xf1,0xff,0xff,0x33,0xf8,
+0x00,0xf0,0x04,0x64,0x03,0xfa,0x04,0xf8,0x00,0x64,0x0b,0xfa,0x0c,0xfa,0x0f,0xfa,
+0xff,0xff,0x79,0xf3,0xff,0xff,0xb0,0xbc,0x29,0xfa,0x0c,0x64,0x15,0xfa,0x20,0xf2,
+0xff,0xff,0x60,0x47,0x00,0x7f,0x13,0xfa,0x1c,0x64,0x21,0xfa,0x08,0x64,0x28,0xfa,
+0x00,0x63,0x22,0xfc,0x16,0xfc,0x07,0xfc,0x01,0x64,0x19,0xfc,0x1c,0xfc,0x14,0xfa,
+0xff,0x67,0x0e,0xfa,0x38,0xf0,0x06,0x64,0x38,0xfa,0x17,0xfa,0x44,0x48,0x00,0xf4,
+0x01,0xf2,0xff,0xff,0x7c,0x7e,0x01,0xfa,0x02,0xf2,0x00,0x63,0x00,0xa0,0x04,0xfc,
+0x07,0x02,0x03,0xf2,0x00,0x63,0xff,0xa0,0xff,0xff,0x3b,0x03,0x0e,0x63,0x39,0x00,
+0xff,0xa0,0x0d,0x63,0x36,0x02,0x34,0xf3,0xff,0xff,0x60,0x40,0x01,0x2a,0x31,0x00,
+0x03,0xf2,0x0e,0x63,0xff,0xa0,0xff,0xff,0x1c,0x02,0x0a,0x63,0x80,0x60,0x10,0x64,
+0xbd,0xda,0x00,0x60,0x3a,0x61,0x01,0x60,0x02,0x65,0x55,0x60,0xaa,0x64,0xcd,0x81,
+0xbd,0xda,0xc4,0x84,0xfc,0x02,0x00,0xf4,0x04,0x63,0x06,0x61,0xcd,0x81,0xbd,0xda,
+0xc4,0x84,0xfc,0x02,0x26,0x46,0x88,0x64,0x38,0xfa,0x17,0xfa,0x00,0xf4,0x00,0x63,
+0x10,0x00,0xfd,0xa0,0xff,0xff,0x0d,0x02,0x0f,0x63,0x55,0x60,0xaa,0x65,0x05,0xf2,
+0xff,0xff,0xd4,0x80,0x88,0x64,0x05,0x02,0x28,0x45,0xd4,0x80,0xff,0xff,0x01,0x02,
+0x00,0x63,0x03,0xf2,0x04,0xfc,0xdc,0x84,0x03,0xfa,0x26,0x46,0x3f,0x60,0x6a,0x62,
+0x3f,0x60,0x16,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0e,0x64,0x5a,0xdb,0xff,0xff,
+0x2b,0xff,0xc1,0xfe,0x00,0x66,0x46,0x46,0x2e,0x58,0xff,0xff,0x21,0x60,0x7a,0x62,
+0xa2,0xd1,0x62,0x60,0xe8,0x64,0xa0,0xd3,0xfa,0x65,0xd0,0x80,0xff,0xff,0x37,0x0d,
+0xc4,0x84,0xa2,0xdb,0x62,0x60,0xe6,0x64,0xa0,0xd1,0x3c,0x60,0xca,0x64,0x64,0x43,
+0xd0,0x80,0x2b,0x60,0xca,0x64,0x01,0x07,0x60,0x43,0x10,0x61,0xa3,0xd3,0xff,0xff,
+0xff,0xff,0x01,0x2a,0x1e,0x00,0x0a,0x65,0x46,0xd3,0xff,0xff,0xcc,0x84,0xa2,0xdb,
+0x03,0x02,0x00,0x64,0xa3,0xdb,0x15,0x00,0xfe,0xa2,0xa2,0xd3,0xff,0xff,0x60,0x47,
+0x60,0x40,0x08,0x2a,0x02,0x00,0x08,0x7f,0x0a,0x00,0x04,0x2a,0x02,0x00,0x04,0x7f,
+0x06,0x00,0x02,0x2a,0x02,0x00,0x02,0x7f,0x02,0x00,0x01,0x7f,0x01,0x7e,0x60,0x47,
+0xa2,0xdb,0xcd,0x81,0x10,0xa3,0xda,0x02,0x62,0x60,0xe6,0x64,0xa0,0xdd,0x2e,0x58,
+0xff,0xff,0x3d,0x60,0x98,0x63,0x5f,0xf3,0xff,0xff,0x00,0xbc,0x60,0x41,0x10,0x03,
+0x2b,0xf2,0x50,0xfe,0xbd,0xd1,0x2c,0xf2,0xd0,0x80,0xbd,0xd1,0x2d,0xf2,0xd0,0x80,
+0xbd,0xd1,0xff,0xff,0xd0,0x80,0xff,0xff,0x04,0x03,0xfa,0xa1,0xff,0xff,0xf0,0x02,
+0x01,0xbc,0x2e,0x58,0xff,0xff,0x3d,0x60,0x20,0x63,0x5e,0xf3,0xe6,0x00,0x3d,0x60,
+0x98,0x65,0x5f,0xf3,0xff,0xff,0xc4,0x83,0x88,0xa0,0x06,0xa4,0x09,0x05,0x5f,0xfb,
+0xff,0xff,0x2b,0xf2,0xbd,0xdb,0x2c,0xf2,0xff,0xff,0xbd,0xdb,0x2d,0xf2,0xbd,0xdb,
+0x2e,0x58,0xff,0xff,0x3d,0x60,0x20,0x65,0x5e,0xf3,0xff,0xff,0xc4,0x83,0x88,0xa0,
+0x06,0xa4,0x09,0x05,0x5e,0xfb,0xff,0xff,0x2b,0xf2,0xbd,0xdb,0x2c,0xf2,0xff,0xff,
+0xbd,0xdb,0x2d,0xf2,0xbd,0xdb,0x2e,0x58,0xff,0xff,0x3d,0x60,0x98,0x63,0x5f,0xf3,
+0xff,0xff,0x00,0xbc,0x60,0x41,0x10,0x03,0x2e,0xf2,0x50,0xfe,0xbd,0xd1,0x2f,0xf2,
+0xd0,0x80,0xbd,0xd1,0x30,0xf2,0xd0,0x80,0xbd,0xd1,0xff,0xff,0xd0,0x80,0xff,0xff,
+0x04,0x03,0xfa,0xa1,0xff,0xff,0xf0,0x02,0x01,0xbc,0x2e,0x58,0xff,0xff,0x3d,0x60,
+0x98,0x65,0x5f,0xf3,0xff,0xff,0xc4,0x83,0x88,0xa0,0x06,0xa4,0x09,0x05,0x5f,0xfb,
+0xff,0xff,0x2e,0xf2,0xbd,0xdb,0x2f,0xf2,0xff,0xff,0xbd,0xdb,0x30,0xf2,0xbd,0xdb,
+0x2e,0x58,0xff,0xff,0x3f,0x60,0x4c,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa8,0x60,0x46,
+0x03,0x02,0x3d,0x60,0x36,0x78,0xff,0xff,0x26,0x45,0xd4,0x80,0x0f,0xf0,0xf9,0x03,
+0x64,0x44,0x70,0xb0,0x70,0x2a,0x03,0x00,0x74,0x60,0x40,0x78,0xff,0xff,0x64,0x40,
+0x04,0x2a,0x13,0x00,0x6a,0x60,0xb6,0x62,0x00,0x64,0xa2,0xdb,0x29,0xf2,0xff,0xff,
+0xff,0xff,0x40,0x2b,0x0f,0x00,0x64,0x40,0x80,0x2b,0x07,0x00,0x1b,0xf2,0x22,0xf0,
+0x60,0x47,0xc0,0xb4,0xb0,0x84,0x22,0xfa,0x05,0x00,0x00,0x64,0x40,0x46,0x3d,0x60,
+0x36,0x78,0xff,0xff,0x32,0x40,0x01,0x2a,0x07,0x00,0x75,0x60,0x80,0x78,0xff,0xff,
+0x03,0x03,0x74,0x60,0x40,0x78,0xff,0xff,0x46,0x46,0x0f,0xf0,0xff,0xff,0x64,0x44,
+0x80,0x26,0x0e,0x00,0x32,0x40,0x01,0x2a,0x08,0x00,0x22,0xf0,0x07,0x60,0x01,0x64,
+0xb0,0x84,0x22,0xfa,0x74,0x60,0x59,0x78,0xff,0xff,0x74,0x60,0x40,0x78,0xff,0xff,
+0x08,0x26,0x4d,0x00,0x64,0x60,0x94,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
+0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x89,0xf1,0x29,0xf2,
+0x64,0x40,0x01,0x3a,0x1e,0x00,0x0c,0x26,0x1c,0x00,0xf0,0xb4,0xff,0xff,0xb0,0x3a,
+0x18,0x00,0x80,0x60,0xf2,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,
+0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x66,0x5c,0x00,0xf4,0x00,0x60,
+0x01,0x64,0x02,0xfa,0x00,0x60,0x03,0x64,0x03,0xfa,0x64,0x46,0x74,0x60,0x59,0x78,
+0xff,0xff,0x29,0xf2,0xff,0xff,0xff,0xff,0x03,0x27,0x06,0x00,0x6a,0x60,0xd2,0x62,
 0xa2,0xd3,0xff,0xff,0x01,0xa4,0xa2,0xdb,0x32,0x44,0x01,0x2a,0x05,0x00,0x22,0xf0,
 0x07,0x60,0x02,0x64,0xb0,0x84,0x04,0x00,0x02,0x2a,0x06,0x00,0x00,0x60,0x02,0x64,
-0x22,0xfa,0x6f,0x60,0xf5,0x78,0xff,0xff,0x6f,0x60,0xdc,0x78,0xff,0xff,0x32,0x40,
-0x01,0x2a,0x08,0x00,0x22,0xf0,0x07,0x60,0x00,0x64,0xb0,0x84,0x22,0xfa,0x6f,0x60,
-0xf5,0x78,0xff,0xff,0x29,0xf2,0x0f,0xf0,0x60,0x40,0xa4,0x36,0x08,0x00,0x0c,0xb4,
-0x04,0x36,0x02,0x00,0x0c,0x3a,0x06,0x00,0x6f,0x60,0xdc,0x78,0xff,0xff,0x6f,0x60,
-0xd7,0x78,0xff,0xff,0x64,0x40,0x60,0x26,0x03,0x00,0x6b,0x60,0xe6,0x78,0xff,0xff,
-0x95,0xf3,0x29,0xf2,0x00,0xbc,0xd3,0xf1,0x20,0x03,0x64,0x40,0x00,0x3a,0x4c,0x00,
-0x60,0x40,0x40,0x36,0x49,0x00,0x80,0x3a,0x15,0x00,0x5c,0x63,0x62,0x60,0x3c,0x61,
+0x22,0xfa,0x74,0x60,0x59,0x78,0xff,0xff,0x74,0x60,0x40,0x78,0xff,0xff,0x32,0x40,
+0x01,0x2a,0x08,0x00,0x22,0xf0,0x07,0x60,0x00,0x64,0xb0,0x84,0x22,0xfa,0x74,0x60,
+0x59,0x78,0xff,0xff,0x29,0xf2,0x0f,0xf0,0x60,0x40,0xa4,0x36,0x08,0x00,0x0c,0xb4,
+0x04,0x36,0x02,0x00,0x0c,0x3a,0x06,0x00,0x74,0x60,0x40,0x78,0xff,0xff,0x74,0x60,
+0x3b,0x78,0xff,0xff,0x64,0x40,0x60,0x26,0x03,0x00,0x70,0x60,0x4a,0x78,0xff,0xff,
+0x89,0xf3,0x29,0xf2,0x00,0xbc,0xc2,0xf1,0x20,0x03,0x64,0x40,0x00,0x3a,0x4e,0x00,
+0x60,0x40,0x40,0x36,0x4b,0x00,0x80,0x3a,0x15,0x00,0x5c,0x63,0x64,0x60,0xd8,0x61,
 0xbd,0xd2,0xa1,0xd1,0x02,0xa1,0xbd,0xd2,0xd0,0x80,0xa1,0xd1,0x02,0xa1,0x0a,0x02,
-0xd0,0x80,0xbd,0xd2,0xa1,0xd1,0x06,0x02,0xd0,0x80,0xff,0xff,0x03,0x02,0x6e,0x60,
-0x35,0x78,0xff,0xff,0x6f,0x60,0xdc,0x78,0xff,0xff,0x5c,0x63,0x60,0x40,0x02,0x2b,
-0x62,0x63,0xbd,0xd2,0x81,0xf1,0xbd,0xd2,0xd0,0x80,0x82,0xf1,0x07,0x02,0xd0,0x80,
-0xbd,0xd2,0x83,0xf1,0x03,0x02,0xd0,0x80,0xff,0xff,0x1e,0x03,0xd5,0xf3,0xff,0xff,
-0xfd,0xa0,0x29,0xf2,0x04,0x04,0x60,0x40,0x80,0x36,0x16,0x00,0x12,0x00,0x20,0x40,
-0x40,0x26,0xf9,0x00,0x16,0x60,0x60,0x62,0xa2,0xd3,0x29,0xf2,0xfc,0xa0,0x2b,0xf0,
-0x08,0x02,0x60,0x40,0x80,0x36,0x02,0x00,0x40,0x3a,0x03,0x00,0x64,0x40,0x01,0x26,
-0x03,0x00,0x6f,0x60,0xdc,0x78,0xff,0xff,0x29,0xf2,0xff,0xff,0x0c,0xb4,0x08,0x3a,
-0x3a,0x00,0x70,0x60,0x77,0x78,0xff,0xff,0x17,0x60,0x92,0x64,0xa0,0xd3,0xcb,0xf3,
-0x00,0xa0,0xfe,0xa0,0xee,0x02,0xed,0x03,0x5b,0x60,0x08,0x64,0xa0,0xd3,0xff,0xff,
+0xd0,0x80,0xbd,0xd2,0xa1,0xd1,0x06,0x02,0xd0,0x80,0xff,0xff,0x03,0x02,0x72,0x60,
+0x99,0x78,0xff,0xff,0x74,0x60,0x40,0x78,0xff,0xff,0x5c,0x63,0x60,0x40,0x02,0x2b,
+0x62,0x63,0xbd,0xd2,0x75,0xf1,0xbd,0xd2,0xd0,0x80,0x76,0xf1,0x07,0x02,0xd0,0x80,
+0xbd,0xd2,0x77,0xf1,0x03,0x02,0xd0,0x80,0xff,0xff,0x20,0x03,0xc4,0xf3,0xff,0xff,
+0xfd,0xa0,0x29,0xf2,0x04,0x04,0x60,0x40,0x80,0x36,0x18,0x00,0x14,0x00,0xe9,0xf3,
+0x29,0xf2,0x60,0x40,0x40,0x26,0xf7,0x00,0x16,0x60,0xd8,0x62,0xa2,0xd3,0x29,0xf2,
+0xfc,0xa0,0x2b,0xf0,0x08,0x02,0x60,0x40,0x80,0x36,0x02,0x00,0x40,0x3a,0x03,0x00,
+0x64,0x40,0x01,0x26,0x03,0x00,0x74,0x60,0x40,0x78,0xff,0xff,0x29,0xf2,0xff,0xff,
+0x60,0x5c,0x0c,0xb4,0x08,0x3a,0x47,0x00,0x34,0xf3,0x64,0x40,0x40,0x27,0x09,0x00,
+0xe7,0xf3,0x60,0x40,0x02,0x2a,0x05,0x00,0x01,0x26,0x03,0x00,0x74,0x60,0x40,0x78,
+0xff,0xff,0x74,0x60,0xdb,0x78,0xff,0xff,0x18,0x60,0x0a,0x64,0xa0,0xd3,0xbd,0xf3,
+0x00,0xa0,0xfe,0xa0,0xe0,0x02,0xdf,0x03,0x63,0x60,0xfa,0x64,0xa0,0xd3,0xff,0xff,
 0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
-0x1f,0xf2,0xff,0xff,0x60,0x45,0x5b,0x60,0x4e,0x64,0xa0,0xd3,0xff,0xff,0xc4,0x84,
-0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x26,0xf2,
-0xff,0xff,0x60,0x47,0x00,0x7f,0xe0,0x84,0xe0,0x84,0x60,0x45,0x5b,0x60,0x0c,0x64,
-0xc4,0x84,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0x2e,0xd7,0x7e,0x00,
-0x00,0x10,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x0f,0xf2,0xff,0xff,
-0x60,0x40,0x40,0x26,0x42,0x00,0x32,0x44,0x02,0x26,0x3f,0x00,0x58,0x60,0xda,0x64,
-0xa0,0xd3,0xff,0xff,0x00,0xa0,0x60,0x41,0x13,0x03,0x58,0x60,0xde,0x63,0x2b,0xf2,
-0x50,0xfe,0xbd,0xd1,0x2c,0xf2,0xd0,0x80,0xbd,0xd1,0x2d,0xf2,0xd0,0x80,0xbd,0xd1,
-0xff,0xff,0xd0,0x80,0xfa,0xa1,0x04,0x01,0xf2,0x02,0x6f,0x60,0xdc,0x78,0xff,0xff,
-0xcb,0xf3,0xff,0xff,0xfd,0xa0,0xff,0xff,0x20,0x02,0x2e,0xf2,0xff,0xff,0x60,0x41,
-0xe1,0x81,0xf0,0x84,0xe1,0x81,0xf0,0x84,0xe1,0x81,0x5a,0xd2,0xf0,0x85,0x94,0x84,
-0x60,0x41,0xe1,0x81,0xf0,0x84,0xe1,0x81,0xf0,0x84,0xe1,0x81,0x5a,0xd2,0xf0,0x85,
-0x94,0x84,0x60,0x41,0xe1,0x81,0xf0,0x84,0xe1,0x81,0xf0,0x84,0xe1,0x81,0xf0,0x84,
-0x65,0x60,0x58,0x4e,0xf4,0x78,0xff,0xff,0x00,0x03,0x6f,0x60,0xc6,0x78,0xff,0xff,
-0x32,0x40,0x02,0x26,0x2e,0x00,0x29,0xf0,0x43,0xf3,0x64,0x40,0x08,0x2a,0x29,0x00,
-0x64,0x40,0x40,0x27,0x0a,0x00,0x02,0x2a,0x08,0x00,0x38,0xf2,0xff,0xff,0x00,0xa8,
-0xff,0xff,0x03,0x03,0x6f,0x60,0xdc,0x78,0xff,0xff,0x29,0xf0,0x03,0x67,0xa0,0x84,
-0xff,0xff,0x00,0x37,0x62,0x63,0x02,0x37,0x5c,0x63,0x01,0x37,0x56,0x63,0x03,0x37,
-0x10,0x00,0xbd,0xd2,0x81,0xf1,0xbd,0xd2,0xd0,0x80,0x82,0xf1,0x07,0x02,0xd0,0x80,
-0xbd,0xd2,0x83,0xf1,0x03,0x02,0xd0,0x80,0xff,0xff,0x03,0x03,0x6f,0x60,0xdc,0x78,
-0xff,0xff,0x1e,0x60,0xbe,0x62,0xa2,0xd5,0x1e,0x60,0xb2,0x62,0xa2,0xd3,0xff,0xff,
-0x40,0x48,0x09,0xf2,0x46,0x4b,0x00,0xbe,0x12,0xf2,0x19,0x03,0x60,0x45,0x28,0x44,
-0xd4,0x81,0x27,0x60,0x10,0x65,0xd5,0x80,0x46,0x45,0xf3,0x04,0x09,0xf2,0x2b,0x46,
-0x09,0xfa,0x5b,0x60,0x98,0x62,0xa2,0xd3,0xff,0xff,0x01,0xa4,0xa2,0xdb,0xa2,0xff,
-0x1a,0x60,0x58,0x4f,0xa6,0x78,0xff,0xff,0xa3,0xff,0x2b,0x46,0xe2,0x00,0x26,0x46,
-0x34,0xf2,0xff,0xff,0x0f,0xb4,0x29,0xf0,0x03,0x02,0x64,0x40,0x04,0x2b,0x67,0x00,
-0x60,0x40,0x0f,0x26,0x7d,0x00,0x5a,0x60,0xf4,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,
+0x1f,0xf2,0xff,0xff,0x60,0x45,0x64,0x60,0x40,0x64,0xa0,0xd3,0xff,0xff,0xc4,0x84,
 0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x26,0xf2,
-0xff,0xff,0x60,0x47,0x00,0x7f,0xe0,0x84,0xe0,0x84,0x60,0x45,0x5a,0x60,0xf8,0x64,
+0xff,0xff,0x60,0x47,0x00,0x7f,0xe0,0x84,0xe0,0x84,0x60,0x45,0x63,0x60,0xfe,0x64,
 0xc4,0x84,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,
-0xff,0xff,0xdc,0x84,0xa2,0xdb,0x1f,0xf2,0xff,0xff,0x60,0x45,0x5b,0x60,0x4e,0x64,
-0xa0,0xd3,0xff,0xff,0xc4,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,
-0xdc,0x84,0xa2,0xdb,0x1e,0x60,0xb2,0x62,0xa2,0xd1,0xff,0xff,0x12,0xf8,0x3c,0x60,
-0xa2,0x62,0x00,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,
-0x2b,0xff,0x00,0x64,0x09,0xfa,0x05,0xf2,0x06,0xf2,0x60,0x43,0x05,0xfa,0x60,0x46,
-0x01,0xf0,0x7f,0x60,0xff,0x64,0xa0,0x84,0x01,0xfa,0x00,0x64,0x00,0xf0,0x00,0xfa,
-0xc0,0x80,0x44,0x45,0x08,0x03,0x25,0x46,0x05,0xfc,0xa2,0xff,0x1a,0x60,0x58,0x4f,
-0xa6,0x78,0xff,0xff,0xa3,0xff,0x26,0x46,0x70,0x60,0x58,0x4e,0xfb,0x78,0xff,0xff,
-0x09,0x02,0x2b,0x46,0x26,0x44,0x09,0xfa,0x6f,0x60,0xf0,0x78,0xff,0xff,0x6e,0x60,
-0x16,0x78,0xff,0xff,0x09,0x45,0x09,0xf0,0x26,0x46,0x09,0xf8,0x2b,0x46,0x26,0x44,
-0x09,0xfa,0xa2,0xff,0x1a,0x60,0x58,0x4f,0xa6,0x78,0xff,0xff,0xa3,0xff,0x5b,0x60,
-0x92,0x62,0xa2,0xd3,0xff,0xff,0x01,0xa4,0xa2,0xdb,0x6f,0x60,0xf0,0x78,0xff,0xff,
-0x70,0x60,0x58,0x4e,0xfb,0x78,0xff,0xff,0x39,0x02,0x5a,0x60,0xf4,0x64,0xa0,0xd3,
+0xff,0xff,0xdc,0x84,0xa2,0xdb,0x0f,0xf2,0xff,0xff,0x60,0x40,0x40,0x26,0x42,0x00,
+0x32,0x44,0x02,0x26,0x3f,0x00,0x61,0x60,0xcc,0x64,0xa0,0xd3,0xff,0xff,0x00,0xa0,
+0x60,0x41,0x13,0x03,0x61,0x60,0xd0,0x63,0x2b,0xf2,0x50,0xfe,0xbd,0xd1,0x2c,0xf2,
+0xd0,0x80,0xbd,0xd1,0x2d,0xf2,0xd0,0x80,0xbd,0xd1,0xff,0xff,0xd0,0x80,0xfa,0xa1,
+0x04,0x01,0xf2,0x02,0x74,0x60,0x40,0x78,0xff,0xff,0xbd,0xf3,0xff,0xff,0xfd,0xa0,
+0xff,0xff,0x20,0x02,0x2e,0xf2,0xff,0xff,0x60,0x41,0xe1,0x81,0xf0,0x84,0xe1,0x81,
+0xf0,0x84,0xe1,0x81,0x5a,0xd2,0xf0,0x85,0x94,0x84,0x60,0x41,0xe1,0x81,0xf0,0x84,
+0xe1,0x81,0xf0,0x84,0xe1,0x81,0x5a,0xd2,0xf0,0x85,0x94,0x84,0x60,0x41,0xe1,0x81,
+0xf0,0x84,0xe1,0x81,0xf0,0x84,0xe1,0x81,0xf0,0x84,0x6a,0x60,0x58,0x4e,0x2b,0x78,
+0xff,0xff,0x00,0x03,0x74,0x60,0x2a,0x78,0xff,0xff,0x32,0x40,0x02,0x26,0x2e,0x00,
+0x29,0xf0,0x34,0xf3,0x64,0x40,0x08,0x2a,0x29,0x00,0x64,0x40,0x40,0x27,0x0a,0x00,
+0x02,0x2a,0x08,0x00,0x38,0xf2,0xff,0xff,0x00,0xa8,0xff,0xff,0x03,0x03,0x74,0x60,
+0x40,0x78,0xff,0xff,0x29,0xf0,0x03,0x67,0xa0,0x84,0xff,0xff,0x00,0x37,0x62,0x63,
+0x02,0x37,0x5c,0x63,0x01,0x37,0x56,0x63,0x03,0x37,0x10,0x00,0xbd,0xd2,0x75,0xf1,
+0xbd,0xd2,0xd0,0x80,0x76,0xf1,0x07,0x02,0xd0,0x80,0xbd,0xd2,0x77,0xf1,0x03,0x02,
+0xd0,0x80,0xff,0xff,0x03,0x03,0x74,0x60,0x40,0x78,0xff,0xff,0x21,0x60,0x86,0x62,
+0xa2,0xd5,0x21,0x60,0x7a,0x62,0xa2,0xd3,0xff,0xff,0x40,0x48,0x09,0xf2,0x46,0x4b,
+0x00,0xbe,0x12,0xf2,0x19,0x03,0x60,0x45,0x28,0x44,0xd4,0x81,0x27,0x60,0x10,0x65,
+0xd5,0x80,0x46,0x45,0xf3,0x04,0x09,0xf2,0x2b,0x46,0x09,0xfa,0x64,0x60,0x8a,0x62,
+0xa2,0xd3,0xff,0xff,0x01,0xa4,0xa2,0xdb,0xa2,0xff,0x1a,0x60,0x58,0x4f,0x37,0x78,
+0xff,0xff,0xa3,0xff,0x2b,0x46,0xe2,0x00,0x26,0x46,0x34,0xf2,0xff,0xff,0x0f,0xb4,
+0x29,0xf0,0x03,0x02,0x64,0x40,0x04,0x2b,0x67,0x00,0x60,0x40,0x0f,0x26,0x7d,0x00,
+0x63,0x60,0xe6,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,
+0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x26,0xf2,0xff,0xff,0x60,0x47,0x00,0x7f,
+0xe0,0x84,0xe0,0x84,0x60,0x45,0x63,0x60,0xea,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,
+0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
+0x1f,0xf2,0xff,0xff,0x60,0x45,0x64,0x60,0x40,0x64,0xa0,0xd3,0xff,0xff,0xc4,0x84,
+0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x21,0x60,
+0x7a,0x62,0xa2,0xd1,0xff,0xff,0x12,0xf8,0x3f,0x60,0x6a,0x62,0x00,0x64,0xa2,0xdb,
+0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0x00,0x64,0x09,0xfa,
+0x05,0xf2,0x06,0xf2,0x60,0x43,0x05,0xfa,0x60,0x46,0x01,0xf0,0x7f,0x60,0xff,0x64,
+0xa0,0x84,0x01,0xfa,0x00,0x64,0x00,0xf0,0x00,0xfa,0xc0,0x80,0x44,0x45,0x08,0x03,
+0x25,0x46,0x05,0xfc,0xa2,0xff,0x1a,0x60,0x58,0x4f,0x37,0x78,0xff,0xff,0xa3,0xff,
+0x26,0x46,0x75,0x60,0x58,0x4e,0x63,0x78,0xff,0xff,0x09,0x02,0x2b,0x46,0x26,0x44,
+0x09,0xfa,0x74,0x60,0x54,0x78,0xff,0xff,0x72,0x60,0x7a,0x78,0xff,0xff,0x09,0x45,
+0x09,0xf0,0x26,0x46,0x09,0xf8,0x2b,0x46,0x26,0x44,0x09,0xfa,0xa2,0xff,0x1a,0x60,
+0x58,0x4f,0x37,0x78,0xff,0xff,0xa3,0xff,0x64,0x60,0x84,0x62,0xa2,0xd3,0xff,0xff,
+0x01,0xa4,0xa2,0xdb,0x74,0x60,0x54,0x78,0xff,0xff,0x75,0x60,0x58,0x4e,0x63,0x78,
+0xff,0xff,0x39,0x02,0x63,0x60,0xe6,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
+0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x26,0xf2,0xff,0xff,
+0x60,0x47,0x00,0x7f,0xe0,0x84,0xe0,0x84,0x60,0x45,0x63,0x60,0xea,0x64,0xc4,0x84,
+0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,
+0xdc,0x84,0xa2,0xdb,0x1f,0xf2,0xff,0xff,0x60,0x45,0x64,0x60,0x40,0x64,0xa0,0xd3,
+0xff,0xff,0xc4,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,
+0xa2,0xdb,0x64,0x60,0x88,0x62,0xa2,0xd3,0xff,0xff,0x01,0xa4,0xa2,0xdb,0x26,0x46,
+0x74,0x60,0x40,0x78,0xff,0xff,0x34,0xf2,0x26,0x46,0x34,0xf2,0x01,0xa5,0xd4,0x80,
+0x29,0x46,0x6a,0x03,0x01,0xa4,0xd4,0x80,0x26,0x46,0x23,0x02,0x64,0x60,0x58,0x64,
+0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,
+0xdc,0x84,0xa2,0xdb,0x26,0xf2,0xff,0xff,0x60,0x47,0x00,0x7f,0xe0,0x84,0xe0,0x84,
+0x60,0x45,0x64,0x60,0x5c,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
+0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x74,0x60,0x40,0x78,
+0xff,0xff,0x29,0x46,0x05,0xf2,0x09,0xf0,0x2b,0x46,0x09,0xf8,0x26,0x46,0x05,0xf4,
+0x29,0x43,0x00,0xfc,0x26,0x46,0x05,0xfa,0x63,0x60,0xe6,0x64,0xa0,0xd3,0xff,0xff,
+0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
+0x26,0xf2,0xff,0xff,0x60,0x47,0x00,0x7f,0xe0,0x84,0xe0,0x84,0x60,0x45,0x63,0x60,
+0xea,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,
+0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x1f,0xf2,0xff,0xff,0x60,0x45,0x64,0x60,
+0x40,0x64,0xa0,0xd3,0xff,0xff,0xc4,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,
+0xff,0xff,0xdc,0x84,0xa2,0xdb,0x64,0x60,0x86,0x62,0xa2,0xd3,0xff,0xff,0x01,0xa4,
+0xa2,0xdb,0x74,0x60,0x40,0x78,0xff,0xff,0x34,0xfa,0x63,0x60,0xe6,0x64,0xa0,0xd3,
 0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,
 0xa2,0xdb,0x26,0xf2,0xff,0xff,0x60,0x47,0x00,0x7f,0xe0,0x84,0xe0,0x84,0x60,0x45,
-0x5a,0x60,0xf8,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,
+0x63,0x60,0xea,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,
 0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x1f,0xf2,0xff,0xff,0x60,0x45,
-0x5b,0x60,0x4e,0x64,0xa0,0xd3,0xff,0xff,0xc4,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,
-0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x5b,0x60,0x96,0x62,0xa2,0xd3,0xff,0xff,
-0x01,0xa4,0xa2,0xdb,0x26,0x46,0x6f,0x60,0xdc,0x78,0xff,0xff,0x34,0xf2,0x26,0x46,
-0x34,0xf2,0x01,0xa5,0xd4,0x80,0x29,0x46,0x6a,0x03,0x01,0xa4,0xd4,0x80,0x26,0x46,
-0x23,0x02,0x5b,0x60,0x66,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,
-0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x26,0xf2,0xff,0xff,0x60,0x47,
-0x00,0x7f,0xe0,0x84,0xe0,0x84,0x60,0x45,0x5b,0x60,0x6a,0x64,0xc4,0x84,0xa0,0xd3,
-0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,
-0xa2,0xdb,0x6f,0x60,0xdc,0x78,0xff,0xff,0x29,0x46,0x05,0xf2,0x09,0xf0,0x2b,0x46,
-0x09,0xf8,0x26,0x46,0x05,0xf4,0x29,0x43,0x00,0xfc,0x26,0x46,0x05,0xfa,0x5a,0x60,
-0xf4,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,
-0xff,0xff,0xdc,0x84,0xa2,0xdb,0x26,0xf2,0xff,0xff,0x60,0x47,0x00,0x7f,0xe0,0x84,
-0xe0,0x84,0x60,0x45,0x5a,0x60,0xf8,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,0xdc,0x84,
-0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x1f,0xf2,
-0xff,0xff,0x60,0x45,0x5b,0x60,0x4e,0x64,0xa0,0xd3,0xff,0xff,0xc4,0x84,0xa2,0xdb,
-0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x5b,0x60,0x94,0x62,
-0xa2,0xd3,0xff,0xff,0x01,0xa4,0xa2,0xdb,0x6f,0x60,0xdc,0x78,0xff,0xff,0x34,0xfa,
-0x5a,0x60,0xf4,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,
-0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x26,0xf2,0xff,0xff,0x60,0x47,0x00,0x7f,
-0xe0,0x84,0xe0,0x84,0x60,0x45,0x5a,0x60,0xf8,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,
-0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
-0x1f,0xf2,0xff,0xff,0x60,0x45,0x5b,0x60,0x4e,0x64,0xa0,0xd3,0xff,0xff,0xc4,0x84,
-0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x3c,0x60,
-0xa2,0x62,0x00,0x64,0xa2,0xdb,0x26,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,
-0x2b,0xff,0x26,0x46,0x7f,0x60,0xff,0x65,0x00,0xf0,0x38,0xf2,0xff,0xff,0x06,0xf4,
-0x01,0xf2,0x60,0x41,0xa4,0x84,0x01,0xfa,0x00,0xf2,0x00,0x63,0x00,0xfc,0x66,0x45,
-0x26,0x46,0x00,0xfa,0x29,0x46,0x65,0x44,0x05,0xfa,0x64,0x45,0x06,0xf0,0x06,0xfa,
-0x64,0x46,0x65,0x44,0x00,0xfa,0x29,0x46,0x38,0xf0,0x61,0x44,0xc0,0x84,0x38,0xfa,
-0x26,0x46,0x29,0xf0,0x00,0xf2,0x06,0x45,0x00,0xa8,0x66,0x44,0x01,0x02,0x05,0xfa,
-0x64,0x40,0x04,0x2b,0x0e,0x00,0x1e,0x60,0xb2,0x62,0xa2,0xd3,0x29,0x46,0x12,0xfa,
-0xa2,0xff,0x1a,0x60,0x58,0x4f,0xa6,0x78,0xff,0xff,0xa3,0xff,0x6f,0x60,0xf0,0x78,
-0xff,0xff,0x29,0x46,0x38,0xf2,0x09,0xf0,0x60,0x47,0x3f,0xfa,0x2b,0x46,0x09,0xf8,
-0x26,0x46,0xff,0x60,0xf0,0x65,0x34,0xf2,0x29,0xf0,0xa4,0x84,0x29,0x46,0x34,0xfa,
-0xf7,0x60,0xff,0x64,0x0b,0xfa,0xa0,0x9c,0x29,0xf8,0x00,0x64,0x09,0xfa,0x06,0xf4,
-0x80,0x67,0x01,0xf2,0x60,0x45,0xb4,0x83,0x01,0xfc,0xa2,0xff,0x1a,0x60,0x58,0x4f,
-0xa6,0x78,0xff,0xff,0xa3,0xff,0x09,0x46,0x29,0x46,0x95,0xf3,0xff,0xff,0x60,0x40,
-0x01,0x26,0x03,0x00,0x6f,0x60,0xb3,0x78,0xff,0xff,0x6f,0x60,0xc6,0x78,0xff,0xff,
-0x95,0xf3,0xff,0xff,0x60,0x40,0x01,0x26,0x03,0x00,0x6e,0x60,0xe0,0x78,0xff,0xff,
-0x29,0xf2,0xff,0xff,0xff,0xff,0x50,0x3a,0xf0,0x00,0x5c,0x63,0x62,0x60,0x3c,0x61,
-0xbd,0xd2,0xa1,0xd1,0x02,0xa1,0xbd,0xd2,0xd0,0x80,0xa1,0xd1,0x02,0xa1,0xe5,0x02,
-0xd0,0x80,0xbd,0xd2,0xa1,0xd1,0xe1,0x02,0xd0,0x80,0xff,0xff,0xde,0x02,0x26,0x46,
-0x28,0x60,0xfa,0x63,0x00,0xf4,0x02,0xf2,0xbd,0xdb,0xff,0xff,0x03,0xf2,0xbd,0xdb,
-0x04,0xf2,0xff,0xff,0xbd,0xdb,0x05,0xf2,0xa3,0xdb,0xfa,0xa3,0x26,0x46,0x00,0x60,
-0x00,0x65,0xa3,0xd3,0x23,0xf0,0x00,0x61,0xd0,0x84,0xf1,0x81,0xd4,0x84,0xf1,0x81,
-0xbd,0xdb,0xa3,0xd3,0x03,0xb1,0x03,0xa9,0x24,0xf0,0x42,0xfe,0x01,0x03,0xcc,0x84,
-0xf1,0x81,0xd0,0x84,0xf1,0x81,0xbd,0xdb,0xa3,0xd3,0x03,0xb1,0x03,0xa9,0x27,0xf0,
-0x42,0xfe,0x01,0x03,0xcc,0x84,0xf1,0x81,0xd0,0x84,0xf1,0x81,0xbd,0xdb,0xa3,0xd3,
-0x03,0xb1,0x03,0xa9,0x28,0xf0,0x01,0x03,0xcc,0x84,0xd0,0x84,0xa3,0xdb,0x01,0x64,
-0x23,0xfb,0xff,0xff,0x1a,0xff,0x67,0x60,0xe4,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,
-0xff,0xff,0x68,0x03,0x26,0x46,0x00,0xf4,0x02,0xf2,0x5a,0xd2,0x40,0x47,0x40,0x48,
-0x5a,0xd2,0x5a,0xd2,0x40,0x49,0x60,0x41,0x5a,0xd0,0x80,0xf9,0x40,0x63,0xad,0x80,
-0xf0,0xa3,0x09,0x02,0x3c,0x03,0x29,0x41,0x28,0x44,0x40,0x49,0x27,0x44,0x40,0x48,
-0x00,0x64,0x40,0x47,0xf4,0x00,0xd1,0x80,0x01,0x02,0x31,0x04,0x10,0xa3,0x80,0x60,
-0x00,0x65,0xa5,0x80,0xcf,0x83,0x08,0x02,0x27,0x44,0x60,0x87,0x28,0x44,0x70,0x88,
-0x29,0x44,0x70,0x89,0xf1,0x81,0xf5,0x00,0xe7,0xa3,0x64,0x44,0x00,0xa0,0x00,0x62,
+0x64,0x60,0x40,0x64,0xa0,0xd3,0xff,0xff,0xc4,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,
+0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x3f,0x60,0x6a,0x62,0x00,0x64,0xa2,0xdb,
+0x26,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0x26,0x46,0x7f,0x60,
+0xff,0x65,0x00,0xf0,0x38,0xf2,0xff,0xff,0x06,0xf4,0x01,0xf2,0x60,0x41,0xa4,0x84,
+0x01,0xfa,0x00,0xf2,0x00,0x63,0x00,0xfc,0x66,0x45,0x26,0x46,0x00,0xfa,0x29,0x46,
+0x65,0x44,0x05,0xfa,0x64,0x45,0x06,0xf0,0x06,0xfa,0x64,0x46,0x65,0x44,0x00,0xfa,
+0x29,0x46,0x38,0xf0,0x61,0x44,0xc0,0x84,0x38,0xfa,0x26,0x46,0x29,0xf0,0x00,0xf2,
+0x06,0x45,0x00,0xa8,0x66,0x44,0x01,0x02,0x05,0xfa,0x64,0x40,0x04,0x2b,0x0e,0x00,
+0x21,0x60,0x7a,0x62,0xa2,0xd3,0x29,0x46,0x12,0xfa,0xa2,0xff,0x1a,0x60,0x58,0x4f,
+0x37,0x78,0xff,0xff,0xa3,0xff,0x74,0x60,0x54,0x78,0xff,0xff,0x29,0x46,0x38,0xf2,
+0x09,0xf0,0x60,0x47,0x3f,0xfa,0x2b,0x46,0x09,0xf8,0x26,0x46,0xff,0x60,0xf0,0x65,
+0x34,0xf2,0x29,0xf0,0xa4,0x84,0x29,0x46,0x34,0xfa,0xf7,0x60,0xff,0x64,0x0b,0xfa,
+0xa0,0x9c,0x29,0xf8,0x00,0x64,0x09,0xfa,0x06,0xf4,0x80,0x67,0x01,0xf2,0x60,0x45,
+0xb4,0x83,0x01,0xfc,0xa2,0xff,0x1a,0x60,0x58,0x4f,0x37,0x78,0xff,0xff,0xa3,0xff,
+0x09,0x46,0x29,0x46,0x89,0xf3,0xff,0xff,0x60,0x40,0x01,0x26,0x03,0x00,0x74,0x60,
+0x17,0x78,0xff,0xff,0x74,0x60,0x2a,0x78,0xff,0xff,0x89,0xf3,0xff,0xff,0x60,0x40,
+0x01,0x26,0x03,0x00,0x73,0x60,0x44,0x78,0xff,0xff,0x29,0xf2,0xff,0xff,0xff,0xff,
+0x50,0x3a,0xf0,0x00,0x5c,0x63,0x64,0x60,0xd8,0x61,0xbd,0xd2,0xa1,0xd1,0x02,0xa1,
+0xbd,0xd2,0xd0,0x80,0xa1,0xd1,0x02,0xa1,0xe5,0x02,0xd0,0x80,0xbd,0xd2,0xa1,0xd1,
+0xe1,0x02,0xd0,0x80,0xff,0xff,0xde,0x02,0x26,0x46,0x2b,0x60,0xc2,0x63,0x00,0xf4,
+0x02,0xf2,0xbd,0xdb,0xff,0xff,0x03,0xf2,0xbd,0xdb,0x04,0xf2,0xff,0xff,0xbd,0xdb,
+0x05,0xf2,0xa3,0xdb,0xfa,0xa3,0x26,0x46,0x00,0x60,0x00,0x65,0xa3,0xd3,0x23,0xf0,
+0x00,0x61,0xd0,0x84,0xf1,0x81,0xd4,0x84,0xf1,0x81,0xbd,0xdb,0xa3,0xd3,0x03,0xb1,
+0x03,0xa9,0x24,0xf0,0x42,0xfe,0x01,0x03,0xcc,0x84,0xf1,0x81,0xd0,0x84,0xf1,0x81,
+0xbd,0xdb,0xa3,0xd3,0x03,0xb1,0x03,0xa9,0x27,0xf0,0x42,0xfe,0x01,0x03,0xcc,0x84,
+0xf1,0x81,0xd0,0x84,0xf1,0x81,0xbd,0xdb,0xa3,0xd3,0x03,0xb1,0x03,0xa9,0x28,0xf0,
+0x01,0x03,0xcc,0x84,0xd0,0x84,0xa3,0xdb,0x01,0x64,0x22,0xfb,0xff,0xff,0x1a,0xff,
+0x6a,0x60,0xc0,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0xff,0xff,0x68,0x03,0x26,0x46,
+0x00,0xf4,0x02,0xf2,0x5a,0xd2,0x40,0x47,0x40,0x48,0x5a,0xd2,0x5a,0xd2,0x40,0x49,
+0x60,0x41,0x5a,0xd0,0x74,0xf9,0x40,0x63,0xad,0x80,0xf0,0xa3,0x09,0x02,0x3c,0x03,
+0x29,0x41,0x28,0x44,0x40,0x49,0x27,0x44,0x40,0x48,0x00,0x64,0x40,0x47,0xf4,0x00,
+0xd1,0x80,0x01,0x02,0x31,0x04,0x10,0xa3,0x80,0x60,0x00,0x65,0xa5,0x80,0xcf,0x83,
+0x08,0x02,0x27,0x44,0x60,0x87,0x28,0x44,0x70,0x88,0x29,0x44,0x06,0xe6,0x7e,0x00,
+0x5c,0x0c,0x70,0x89,0xf1,0x81,0xf5,0x00,0xe7,0xa3,0x64,0x44,0x00,0xa0,0x00,0x62,
 0x02,0x02,0x00,0x61,0x1c,0x00,0xe0,0x84,0xde,0x82,0xfd,0x04,0x42,0xfe,0xf8,0x84,
 0x62,0x45,0xc7,0x83,0x60,0x45,0x02,0xfe,0xd5,0x84,0x02,0x05,0x01,0x05,0x61,0x44,
 0xcf,0x83,0x60,0x41,0x08,0x03,0x27,0x44,0x60,0x87,0x28,0x44,0x70,0x88,0x29,0x44,
 0x70,0x89,0xf1,0x81,0xf1,0x00,0xce,0x82,0xe9,0x81,0xfd,0x02,0xf1,0x81,0x02,0xf2,
 0xff,0xff,0x60,0x47,0xe8,0x84,0xe8,0x84,0x5a,0xd2,0x3f,0xb5,0xe0,0x84,0xe0,0x84,
 0xe0,0x84,0xe0,0x84,0xe0,0x84,0xe0,0x84,0xb4,0x84,0x61,0x45,0xd4,0x84,0xc0,0x84,
-0xe0,0x84,0xe0,0x84,0xe0,0x84,0xe0,0x93,0x67,0x60,0xe4,0x62,0x00,0x64,0xa2,0xdb,
-0x26,0x46,0x6d,0x00,0xcb,0xf3,0xff,0xff,0xfd,0xa0,0xff,0xff,0x68,0x02,0x3d,0x60,
-0x9c,0x64,0xa0,0xd3,0xff,0xff,0x01,0xbc,0xa2,0xdb,0x29,0xf2,0xff,0xff,0x60,0x40,
-0x10,0x2b,0x09,0x00,0x6a,0x60,0x58,0x4e,0x41,0x78,0xff,0xff,0x04,0x03,0x6a,0x60,
-0x58,0x4e,0x5b,0x78,0xff,0xff,0x2e,0xf2,0xff,0xff,0x60,0x41,0xe1,0x81,0xf0,0x84,
+0xe0,0x84,0xe0,0x84,0xe0,0x84,0xe0,0x93,0x6a,0x60,0xc0,0x62,0x00,0x64,0xa2,0xdb,
+0x26,0x46,0x6d,0x00,0xbd,0xf3,0xff,0xff,0xfd,0xa0,0xff,0xff,0x68,0x02,0x40,0x60,
+0x1c,0x64,0xa0,0xd3,0xff,0xff,0x01,0xbc,0xa2,0xdb,0x29,0xf2,0xff,0xff,0x60,0x40,
+0x10,0x2b,0x09,0x00,0x6e,0x60,0x58,0x4e,0x72,0x78,0xff,0xff,0x04,0x03,0x6e,0x60,
+0x58,0x4e,0x8c,0x78,0xff,0xff,0x2e,0xf2,0xff,0xff,0x60,0x41,0xe1,0x81,0xf0,0x84,
 0xe1,0x81,0xf0,0x84,0xe1,0x81,0x5a,0xd2,0xf0,0x85,0x94,0x84,0x60,0x41,0xe1,0x81,
 0xf0,0x84,0xe1,0x81,0xf0,0x84,0xe1,0x81,0x5a,0xd2,0xf0,0x85,0x94,0x84,0x60,0x41,
-0xe1,0x81,0xf0,0x84,0xe1,0x81,0xf0,0x84,0xe1,0x81,0xf0,0x84,0x65,0x60,0x58,0x4e,
-0xf4,0x78,0xff,0xff,0x34,0x03,0x29,0xf2,0x34,0xf0,0x60,0x40,0x08,0x3a,0x61,0x00,
+0xe1,0x81,0xf0,0x84,0xe1,0x81,0xf0,0x84,0xe1,0x81,0xf0,0x84,0x6a,0x60,0x58,0x4e,
+0x2b,0x78,0xff,0xff,0x34,0x03,0x29,0xf2,0x34,0xf0,0x60,0x40,0x08,0x3a,0x61,0x00,
 0x08,0x2b,0x2a,0x00,0x0c,0xa3,0xa3,0xd3,0xff,0xff,0xd0,0x80,0xff,0xff,0x25,0x02,
-0x5b,0x60,0x66,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,
+0x64,0x60,0x58,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,
 0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x26,0xf2,0xff,0xff,0x60,0x47,0x00,0x7f,
-0xe0,0x84,0xe0,0x84,0x60,0x45,0x5b,0x60,0x6a,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,
+0xe0,0x84,0xe0,0x84,0x60,0x45,0x64,0x60,0x5c,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,
 0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
-0x6f,0x60,0xdc,0x78,0xff,0xff,0x69,0x00,0x0c,0xa3,0xa3,0xd9,0x32,0x00,0x67,0x60,
-0xc0,0x65,0x29,0xf2,0x34,0xf0,0x60,0x40,0xa4,0x36,0x72,0x00,0x08,0x2b,0x28,0x00,
-0xa5,0xd3,0xff,0xff,0xd0,0x80,0xff,0xff,0x23,0x02,0x5b,0x60,0x66,0x64,0xa0,0xd3,
+0x74,0x60,0x40,0x78,0xff,0xff,0x69,0x00,0x0c,0xa3,0xa3,0xd9,0x32,0x00,0x6a,0x60,
+0x98,0x65,0x29,0xf2,0x34,0xf0,0x60,0x40,0xa4,0x36,0x72,0x00,0x08,0x2b,0x28,0x00,
+0xa5,0xd3,0xff,0xff,0xd0,0x80,0xff,0xff,0x23,0x02,0x64,0x60,0x58,0x64,0xa0,0xd3,
 0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,
 0xa2,0xdb,0x26,0xf2,0xff,0xff,0x60,0x47,0x00,0x7f,0xe0,0x84,0xe0,0x84,0x60,0x45,
-0x5b,0x60,0x6a,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,
-0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x6f,0x60,0xdc,0x78,0xff,0xff,
-0xa5,0xd9,0x29,0xf2,0xff,0xff,0xff,0xff,0x0c,0x22,0x42,0x00,0x5a,0x60,0xf4,0x64,
+0x64,0x60,0x5c,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,
+0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x74,0x60,0x40,0x78,0xff,0xff,
+0xa5,0xd9,0x29,0xf2,0xff,0xff,0xff,0xff,0x0c,0x22,0x42,0x00,0x63,0x60,0xe6,0x64,
 0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,
 0xdc,0x84,0xa2,0xdb,0x26,0xf2,0xff,0xff,0x60,0x47,0x00,0x7f,0xe0,0x84,0xe0,0x84,
-0x60,0x45,0x5a,0x60,0xf8,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
+0x60,0x45,0x63,0x60,0xea,0x64,0xc4,0x84,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,
 0x05,0x04,0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x1f,0xf2,0xff,0xff,
-0x60,0x45,0x5b,0x60,0x4e,0x64,0xa0,0xd3,0xff,0xff,0xc4,0x84,0xa2,0xdb,0x05,0x04,
+0x60,0x45,0x64,0x60,0x40,0x64,0xa0,0xd3,0xff,0xff,0xc4,0x84,0xa2,0xdb,0x05,0x04,
 0xda,0x82,0xa2,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x46,0x48,0x00,0xf4,0x80,0x60,
 0x87,0x65,0x66,0x44,0xac,0x80,0x05,0xf2,0xff,0xff,0xd4,0x80,0x08,0x03,0x07,0x02,
-0x70,0x60,0x26,0x78,0xff,0xff,0x03,0x02,0x6a,0x60,0x6e,0x78,0xff,0xff,0x28,0x46,
-0x38,0xf2,0x49,0xf1,0xff,0xff,0xd0,0x80,0xff,0xff,0x10,0x07,0x78,0x43,0x04,0xa3,
-0x56,0xfd,0x0c,0x60,0x46,0x64,0xa0,0xd7,0xff,0xff,0xff,0xff,0x6a,0x60,0x6e,0x78,
-0xff,0xff,0x95,0xf3,0xff,0xff,0x60,0x40,0x01,0x26,0x19,0x00,0x0f,0x4e,0x46,0x45,
-0x3c,0x60,0xa2,0x62,0x00,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,
-0xff,0xff,0x2b,0xff,0xa2,0xff,0x1a,0x60,0x58,0x4f,0xa6,0x78,0xff,0xff,0xa3,0xff,
-0xd1,0xfe,0x0e,0x4f,0x00,0x64,0x40,0x46,0x6a,0x60,0x6e,0x78,0xff,0xff,0x3c,0x60,
-0xa2,0x62,0x3c,0x60,0x8a,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,
-0xff,0xff,0x2b,0xff,0xd2,0xfe,0x00,0x64,0x40,0x46,0x6a,0x60,0x6e,0x78,0xff,0xff,
+0x74,0x60,0x8a,0x78,0xff,0xff,0x03,0x02,0x6e,0x60,0x9f,0x78,0xff,0xff,0x28,0x46,
+0x38,0xf2,0x3c,0xf1,0xff,0xff,0xd0,0x80,0xff,0xff,0x10,0x07,0x78,0x43,0x04,0xa3,
+0x49,0xfd,0x0c,0x60,0x46,0x64,0xa0,0xd7,0xff,0xff,0xff,0xff,0x6e,0x60,0x9f,0x78,
+0xff,0xff,0x89,0xf3,0xff,0xff,0x60,0x40,0x01,0x26,0x19,0x00,0x0f,0x4e,0x46,0x45,
+0x3f,0x60,0x6a,0x62,0x00,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,
+0xff,0xff,0x2b,0xff,0xa2,0xff,0x1a,0x60,0x58,0x4f,0x37,0x78,0xff,0xff,0xa3,0xff,
+0xd1,0xfe,0x0e,0x4f,0x00,0x64,0x40,0x46,0x6e,0x60,0x9f,0x78,0xff,0xff,0x3f,0x60,
+0x6a,0x62,0x3f,0x60,0x52,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,
+0xff,0xff,0x2b,0xff,0xd2,0xfe,0x00,0x64,0x40,0x46,0x6e,0x60,0x9f,0x78,0xff,0xff,
 0x2f,0x58,0xff,0xff,0x29,0xf2,0xff,0xff,0x60,0x47,0x56,0x63,0x01,0xb0,0x01,0x26,
 0x62,0x63,0xbd,0xd0,0x39,0xf8,0xbd,0xd0,0xff,0xff,0x3a,0xf8,0xbd,0xd0,0x3b,0xf8,
 0x02,0xb0,0x5c,0x63,0x04,0x03,0x62,0x63,0x03,0xb0,0x02,0x3a,0x6a,0x63,0xbd,0xd0,
 0x3c,0xf8,0xbd,0xd0,0xff,0xff,0x3d,0xf8,0xbd,0xd0,0x3e,0xf8,0x2f,0x58,0xff,0xff,
-0x06,0x67,0x06,0xf2,0x60,0x45,0xd4,0x80,0xff,0xff,0x48,0x02,0x17,0x60,0x98,0x63,
+0x06,0x67,0x06,0xf2,0x60,0x45,0xd4,0x80,0xff,0xff,0x48,0x02,0x18,0x60,0x10,0x63,
 0xa3,0xd3,0x08,0xfe,0xff,0xff,0x04,0x26,0x41,0x00,0x07,0x67,0x06,0xfa,0x28,0x46,
 0x00,0xf0,0x04,0x64,0x03,0xfa,0x04,0xf8,0x00,0x64,0x0b,0xfa,0x0c,0xfa,0xff,0xff,
 0x0f,0xfa,0x2e,0xf2,0x2b,0xfa,0xff,0xff,0x2f,0xf2,0x2c,0xfa,0x30,0xf2,0xff,0xff,
-0x2d,0xfa,0xbd,0xf1,0x2e,0xf8,0xff,0xff,0xbe,0xf1,0x2f,0xf8,0xbf,0xf1,0xff,0xff,
-0x30,0xf8,0x85,0xf3,0xff,0xff,0x08,0xbc,0x43,0xf1,0xff,0xff,0x64,0x40,0x01,0x2a,
+0x2d,0xfa,0xb0,0xf1,0x2e,0xf8,0xff,0xff,0xb1,0xf1,0x2f,0xf8,0xb2,0xf1,0xff,0xff,
+0x30,0xf8,0x79,0xf3,0xff,0xff,0x08,0xbc,0x34,0xf1,0xff,0xff,0x64,0x40,0x01,0x2a,
 0x03,0x00,0x60,0x47,0x40,0xbc,0x60,0x47,0x29,0xfa,0x00,0x63,0x28,0xfc,0x22,0xfc,
-0x3a,0x60,0x58,0x4e,0x14,0x78,0xff,0xff,0xff,0x7f,0x00,0x7e,0x0e,0xfa,0x3c,0x60,
-0xa2,0x62,0x3c,0x60,0x48,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,
-0xff,0xff,0x2b,0xff,0xc1,0xfe,0x00,0x64,0x40,0x46,0x48,0xfe,0x6f,0x60,0xc1,0x78,
-0xff,0xff,0x2b,0xf0,0x67,0x44,0xd0,0x80,0x38,0xf2,0x7b,0x02,0xdc,0xa0,0x00,0xf4,
-0x78,0x04,0x06,0x60,0x08,0x65,0x05,0xf2,0x09,0xf0,0xd4,0x80,0x01,0x60,0x00,0x64,
-0x70,0x02,0xd0,0x80,0x67,0x60,0x80,0x63,0x6c,0x02,0x67,0x60,0x84,0x64,0xa0,0xd3,
+0x39,0x60,0x58,0x4e,0xfe,0x78,0xff,0xff,0xff,0x7f,0x00,0x7e,0x0e,0xfa,0x3f,0x60,
+0x6a,0x62,0x3f,0x60,0x10,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,
+0xff,0xff,0x2b,0xff,0xc1,0xfe,0x00,0x64,0x40,0x46,0x48,0xfe,0x74,0x60,0x25,0x78,
+0xff,0xff,0x2b,0xf0,0x67,0x44,0xd0,0x80,0x38,0xf2,0x20,0x02,0xdc,0xa0,0x00,0xf4,
+0x1d,0x04,0x06,0x60,0x08,0x65,0x05,0xf2,0x09,0xf0,0xd4,0x80,0x01,0x60,0x00,0x64,
+0x15,0x02,0xd0,0x80,0x6a,0x60,0x60,0x63,0x11,0x02,0x6a,0x60,0x64,0x64,0xa0,0xd3,
 0xff,0xff,0xdc,0x84,0xa2,0xdb,0x12,0xf0,0xbd,0xd3,0x13,0xf0,0xd0,0x80,0xa3,0xd3,
-0x60,0x02,0xd0,0x80,0x00,0xa0,0x5d,0x02,0x5c,0x03,0xbd,0xf3,0x0f,0xfa,0xbe,0xf3,
-0xff,0xff,0x10,0xfa,0xbf,0xf3,0x11,0xfa,0x02,0x60,0x00,0x64,0x09,0xfa,0x14,0x63,
-0x1e,0x61,0x26,0x65,0xa3,0xd2,0xa1,0xd0,0xa1,0xda,0x64,0x44,0xbd,0xda,0xd5,0x80,
-0xd9,0x81,0xf8,0x02,0x26,0x46,0x85,0xf3,0x43,0xf1,0x08,0xbc,0x60,0x47,0x64,0x40,
-0x01,0x26,0x40,0xbc,0x60,0x47,0x29,0xfa,0xff,0x7f,0x00,0x7e,0x0e,0xfa,0x28,0x64,
-0x38,0xfa,0x00,0x64,0x22,0xfa,0x28,0xfa,0xff,0xff,0x81,0xf3,0x2b,0xfa,0x82,0xf3,
-0xff,0xff,0x2c,0xfa,0x83,0xf3,0x2d,0xfa,0xff,0xff,0xbd,0xf3,0x2e,0xfa,0xbe,0xf3,
-0xff,0xff,0x2f,0xfa,0xbf,0xf3,0x30,0xfa,0xff,0xff,0x00,0xf4,0x0f,0xf2,0x10,0xf0,
-0x60,0x45,0x11,0xf2,0x26,0x46,0x33,0xfa,0x64,0x44,0x32,0xfa,0x65,0x44,0x31,0xfa,
-0x3a,0x60,0x58,0x4e,0x14,0x78,0xff,0xff,0x3c,0x60,0xa2,0x62,0x3c,0x60,0x48,0x64,
-0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,0x5a,0xdb,0xff,0xff,0x2b,0xff,0xc1,0xfe,
-0x67,0x60,0x86,0x64,0xa0,0xd3,0xff,0xff,0xdc,0x84,0xa2,0xdb,0x6f,0x60,0xf0,0x78,
-0xff,0xff,0x26,0x46,0x6b,0x60,0x65,0x78,0xff,0xff,0x1e,0x60,0xbe,0x64,0xa0,0xd5,
-0x66,0x45,0x09,0xf2,0x46,0x4b,0x00,0xbe,0x46,0x49,0x12,0x03,0x30,0xf0,0x65,0x46,
-0x30,0xf2,0x2f,0xf0,0xd0,0x80,0x29,0x46,0xf4,0x02,0x2f,0xf2,0x2e,0xf2,0xd0,0x80,
-0x65,0x46,0x03,0x02,0x2e,0xf0,0xff,0xff,0xd0,0x80,0x29,0x46,0xea,0x02,0x08,0xfe,
-0x2e,0x58,0xff,0xff,0x00,0x64,0x00,0xa0,0x69,0x60,0x4e,0x62,0xa2,0xd3,0x29,0xf0,
-0x60,0x40,0x00,0x36,0x34,0x00,0x01,0x3a,0x07,0x00,0x64,0x44,0x00,0x7f,0x80,0x65,
-0xd4,0x80,0xff,0xff,0x2f,0x03,0x2b,0x00,0x64,0x44,0x0c,0xb4,0xf8,0xa0,0xff,0xff,
-0x44,0x03,0x64,0x44,0x80,0x36,0x26,0x00,0xb4,0x36,0x27,0x00,0xc4,0x36,0x28,0x00,
-0xd4,0x36,0x29,0x00,0x40,0x36,0x2a,0x00,0xe4,0x36,0x2b,0x00,0x00,0x36,0x2c,0x00,
-0x10,0x36,0x2d,0x00,0x20,0x36,0x28,0x00,0x30,0x36,0x29,0x00,0x50,0x36,0x27,0x00,
-0xa0,0x36,0x28,0x00,0xa4,0x36,0x20,0x00,0xb0,0x36,0x24,0x00,0xc0,0x36,0x22,0x00,
-0x69,0x60,0x50,0x62,0x69,0x60,0x52,0x63,0x00,0x64,0xa2,0xdb,0xa3,0xdb,0x6a,0x60,
-0xa4,0x78,0xff,0xff,0x73,0x60,0x1a,0x78,0xff,0xff,0x71,0x60,0xbc,0x78,0xff,0xff,
-0x71,0x60,0xfa,0x78,0xff,0xff,0x71,0x60,0xed,0x78,0xff,0xff,0x72,0x60,0x07,0x78,
-0xff,0xff,0x72,0x60,0x5f,0x78,0xff,0xff,0x71,0x60,0x76,0x78,0xff,0xff,0x71,0x60,
-0x99,0x78,0xff,0xff,0x72,0x60,0x7d,0x78,0xff,0xff,0x72,0x60,0xb4,0x78,0xff,0xff,
-0x69,0x60,0x50,0x62,0x69,0x60,0x52,0x63,0x00,0x64,0xa2,0xdb,0xa3,0xdb,0xff,0xff,
-0x2b,0xf2,0x81,0xf1,0xff,0xff,0xd0,0x80,0x2c,0xf2,0x82,0xf1,0x07,0x02,0xd0,0x80,
-0x2d,0xf2,0x83,0xf1,0x03,0x02,0xd0,0x80,0xff,0xff,0x06,0x03,0x56,0x65,0x74,0x60,
-0x58,0x4f,0x24,0x78,0xff,0xff,0x04,0x02,0x69,0x60,0x50,0x62,0x01,0x64,0xa2,0xdb,
-0x71,0x60,0x55,0x78,0xff,0xff,0x69,0x60,0x50,0x62,0x69,0x60,0x52,0x63,0x00,0x64,
-0xa2,0xdb,0xa3,0xdb,0xff,0xff,0x2e,0xf2,0x81,0xf1,0xff,0xff,0xd0,0x80,0x2f,0xf2,
-0x82,0xf1,0x07,0x02,0xd0,0x80,0x30,0xf2,0x83,0xf1,0x03,0x02,0xd0,0x80,0xff,0xff,
-0x06,0x03,0x5c,0x65,0x74,0x60,0x58,0x4f,0x24,0x78,0xff,0xff,0x04,0x02,0x69,0x60,
-0x50,0x62,0x01,0x64,0xa2,0xdb,0x71,0x60,0x55,0x78,0xff,0xff,0x69,0x60,0x50,0x62,
-0x69,0x60,0x52,0x63,0x00,0x64,0xa2,0xdb,0xa3,0xdb,0xff,0xff,0x2b,0xf2,0x81,0xf1,
-0xff,0xff,0xd0,0x80,0x2c,0xf2,0x82,0xf1,0x15,0x02,0xd0,0x80,0x2d,0xf2,0x83,0xf1,
-0x11,0x02,0xd0,0x80,0xff,0xff,0x14,0x03,0x2e,0xf2,0x81,0xf1,0xff,0xff,0xd0,0x80,
-0x2f,0xf2,0x82,0xf1,0x07,0x02,0xd0,0x80,0x30,0xf2,0x83,0xf1,0x03,0x02,0xd0,0x80,
-0xff,0xff,0x06,0x03,0x56,0x65,0x74,0x60,0x58,0x4f,0x24,0x78,0xff,0xff,0x04,0x02,
-0x69,0x60,0x52,0x62,0x01,0x64,0xa2,0xdb,0x71,0x60,0x55,0x78,0xff,0xff,0x69,0x60,
-0x52,0x65,0x69,0x60,0x50,0x63,0x00,0x64,0x01,0x61,0xa3,0xd1,0xa5,0xdb,0xd1,0x80,
-0xa3,0xdb,0x71,0x60,0x55,0x78,0xff,0xff,0x69,0x60,0x52,0x65,0x69,0x60,0x50,0x63,
-0x00,0x64,0x01,0x61,0xa5,0xd1,0xa3,0xdb,0xd1,0x80,0xa5,0xdb,0x71,0x60,0x55,0x78,
-0xff,0xff,0x69,0x60,0x50,0x62,0x69,0x60,0x52,0x63,0x00,0x64,0xa2,0xdb,0xa3,0xdb,
-0x46,0x4a,0x2b,0xf2,0x81,0xf1,0xff,0xff,0xd0,0x80,0x2c,0xf2,0x82,0xf1,0x0c,0x02,
-0xd0,0x80,0x2d,0xf2,0x83,0xf1,0x08,0x02,0xd0,0x80,0xff,0xff,0x05,0x02,0x69,0x60,
-0x50,0x62,0x01,0x64,0xa2,0xdb,0x0c,0x00,0x2b,0xf0,0xff,0x60,0xff,0x64,0xd0,0x80,
-0x2c,0xf0,0x33,0x02,0xd0,0x80,0x2d,0xf0,0x30,0x02,0xd0,0x80,0xff,0xff,0x2d,0x02,
-0x38,0xf2,0xff,0xff,0xfe,0xa0,0xff,0xff,0x28,0x04,0x00,0xf4,0x02,0xf0,0x16,0x60,
-0x62,0x62,0xa2,0xd1,0x64,0x47,0xd0,0x80,0xff,0xff,0x1f,0x02,0x60,0x41,0xe9,0x81,
-0x06,0x63,0x0c,0x03,0x16,0x60,0x64,0x64,0x60,0x45,0xbd,0xd0,0xa5,0xd3,0xff,0xff,
-0xd0,0x80,0x65,0x44,0x12,0x02,0xcd,0x81,0x02,0xa4,0xf6,0x02,0x02,0xf0,0xff,0xff,
-0x64,0x40,0x01,0x27,0x02,0x00,0x48,0xfe,0x08,0x00,0xa3,0xd0,0xa0,0xd1,0x64,0x44,
-0x00,0x7f,0x60,0x45,0x64,0x44,0x00,0x7f,0xd4,0x80,0x2a,0x46,0x71,0x60,0x55,0x78,
-0xff,0xff,0x69,0x60,0x50,0x62,0x69,0x60,0x52,0x63,0x00,0x64,0xa2,0xdb,0xa3,0xdb,
-0xff,0xff,0x2e,0xf2,0x81,0xf1,0xff,0xff,0xd0,0x80,0x2f,0xf2,0x82,0xf1,0x07,0x02,
-0xd0,0x80,0x30,0xf2,0x83,0xf1,0x03,0x02,0xd0,0x80,0xff,0xff,0x05,0x03,0x5c,0x65,
-0x74,0x60,0x58,0x4f,0x24,0x78,0xff,0xff,0x71,0x60,0x55,0x78,0xff,0xff,0x69,0x60,
-0x50,0x62,0x69,0x60,0x52,0x63,0x00,0x64,0xa2,0xdb,0xa3,0xdb,0xff,0xff,0x2b,0xf2,
-0x81,0xf1,0xff,0xff,0xd0,0x80,0x2c,0xf2,0x82,0xf1,0x07,0x02,0xd0,0x80,0x2d,0xf2,
-0x83,0xf1,0x03,0x02,0xd0,0x80,0xff,0xff,0x1a,0x03,0x56,0x65,0x74,0x60,0x58,0x4f,
-0x24,0x78,0xff,0xff,0x14,0x03,0x2e,0xf2,0x81,0xf1,0xff,0xff,0xd0,0x80,0x2f,0xf2,
-0x82,0xf1,0x07,0x02,0xd0,0x80,0x30,0xf2,0x83,0xf1,0x03,0x02,0xd0,0x80,0xff,0xff,
-0x06,0x03,0x5c,0x65,0x74,0x60,0x58,0x4f,0x24,0x78,0xff,0xff,0x04,0x00,0x69,0x60,
-0x50,0x62,0x01,0x64,0xa2,0xdb,0x71,0x60,0x55,0x78,0xff,0xff,0x69,0x60,0x50,0x62,
-0x69,0x60,0x52,0x63,0x00,0x64,0xa2,0xdb,0xa3,0xdb,0x29,0xf2,0xff,0xff,0xff,0xff,
-0x01,0x2b,0x3a,0x00,0x2b,0xf2,0x81,0xf1,0xff,0xff,0xd0,0x80,0x2c,0xf2,0x82,0xf1,
-0x07,0x02,0xd0,0x80,0x2d,0xf2,0x83,0xf1,0x03,0x02,0xd0,0x80,0xff,0xff,0x40,0x03,
-0x69,0x60,0x56,0x62,0xa2,0xd3,0xff,0xff,0xff,0xa0,0xff,0xff,0x42,0x02,0x69,0x60,
-0x58,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0x40,0x47,0x1e,0x03,0x56,0x65,0x69,0x60,
-0x5a,0x61,0x65,0x43,0x50,0xfe,0xbd,0xd2,0xa1,0xd1,0x02,0xa1,0xd0,0x80,0xbd,0xd2,
-0xa1,0xd1,0x02,0xa1,0xd0,0x80,0xa3,0xd2,0xa1,0xd1,0x02,0xa1,0xd0,0x80,0xff,0xff,
-0x1f,0x01,0x27,0x44,0xcc,0x84,0x40,0x47,0xec,0x02,0x29,0xf2,0xff,0xff,0xff,0xff,
-0x01,0x27,0x02,0x00,0x08,0xfe,0x1d,0x00,0x2e,0xf2,0x81,0xf1,0xff,0xff,0xd0,0x80,
-0x2f,0xf2,0x82,0xf1,0x07,0x02,0xd0,0x80,0x30,0xf2,0x83,0xf1,0x03,0x02,0xd0,0x80,
-0xff,0xff,0x06,0x03,0x5c,0x65,0x74,0x60,0x58,0x4f,0x24,0x78,0xff,0xff,0x09,0x02,
-0x2b,0xf2,0xff,0xff,0xff,0xff,0x01,0x26,0x04,0x00,0x69,0x60,0x50,0x62,0x01,0x64,
-0xa2,0xdb,0x71,0x60,0x55,0x78,0xff,0xff,0x69,0x60,0x50,0x62,0x69,0x60,0x52,0x63,
-0x00,0x64,0xa2,0xdb,0xa3,0xdb,0x38,0xf2,0x46,0x4a,0x60,0x41,0x69,0x60,0x4e,0x62,
-0xa2,0xd3,0xff,0xff,0xff,0xff,0x02,0x36,0x07,0x00,0x69,0x60,0x4c,0x62,0xa2,0xd3,
-0xff,0xff,0xff,0xff,0x04,0x36,0x07,0x00,0x61,0x44,0xf2,0xa0,0xff,0xff,0x06,0x05,
-0x74,0x60,0x20,0x78,0xff,0xff,0x73,0x60,0x77,0x78,0xff,0xff,0x2e,0xf2,0x81,0xf1,
-0xff,0xff,0xd0,0x80,0x2f,0xf2,0x82,0xf1,0x07,0x02,0xd0,0x80,0x30,0xf2,0x83,0xf1,
-0x03,0x02,0xd0,0x80,0xff,0xff,0xef,0x03,0x69,0x60,0x4e,0x62,0xa2,0xd3,0xff,0xff,
-0xfe,0xa0,0xff,0xff,0xe5,0x02,0x69,0x60,0x56,0x62,0xa2,0xd3,0xff,0xff,0xff,0xa0,
-0xff,0xff,0xde,0x02,0x69,0x60,0x58,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,0x40,0x47,
-0x22,0x03,0x5c,0x65,0x69,0x60,0x5a,0x61,0x65,0x43,0x50,0xfe,0xbd,0xd2,0xa1,0xd1,
-0x02,0xa1,0xd0,0x80,0xbd,0xd2,0xa1,0xd1,0x02,0xa1,0xd0,0x80,0xa3,0xd2,0xa1,0xd1,
-0x02,0xa1,0xd0,0x80,0xff,0xff,0xc4,0x01,0x27,0x44,0xcc,0x84,0x40,0x47,0xec,0x02,
-0x0a,0x00,0x69,0x60,0x4e,0x62,0xa2,0xd3,0xff,0xff,0xff,0xff,0x02,0x3a,0x03,0x00,
-0x74,0x60,0x20,0x78,0xff,0xff,0x38,0xf2,0x00,0xf4,0x08,0xf0,0xf2,0xa0,0xff,0xff,
-0x03,0x05,0x74,0x60,0x20,0x78,0xff,0xff,0x69,0x60,0x4c,0x62,0xa2,0xd3,0xff,0xff,
-0xff,0xff,0x04,0x36,0x1b,0x00,0x16,0x60,0x62,0x62,0x64,0x47,0x00,0xa0,0xff,0xff,
-0x3c,0x06,0x2e,0xe7,0x7e,0x00,0x64,0x02,0xe0,0xa0,0xff,0xff,0x39,0x07,0xa2,0xdb,
-0x12,0x63,0x60,0x41,0x16,0x60,0x64,0x64,0xbd,0xd0,0xa0,0xd9,0xcd,0x81,0x02,0xa4,
-0xfb,0x02,0x08,0xf0,0xff,0xff,0x64,0x40,0x01,0x2b,0x2a,0x00,0xa3,0xd0,0xa0,0xd9,
-0x27,0x00,0x16,0x60,0x62,0x62,0x64,0x47,0xa2,0xd1,0xff,0xff,0xd0,0x80,0xff,0xff,
-0x6c,0x02,0x60,0x41,0xe9,0x81,0x12,0x63,0x0c,0x03,0x16,0x60,0x64,0x64,0x60,0x45,
-0xbd,0xd0,0xa5,0xd3,0xff,0xff,0xd0,0x80,0x65,0x44,0x5f,0x02,0xcd,0x81,0x02,0xa4,
-0xf6,0x02,0x08,0xf0,0xff,0xff,0x64,0x40,0x01,0x2b,0x0a,0x00,0xa3,0xd0,0xa0,0xd1,
-0x64,0x44,0x00,0x7f,0x60,0x45,0x64,0x44,0x00,0x7f,0xd4,0x80,0xff,0xff,0x4d,0x02,
-0x08,0xf2,0x12,0x65,0x00,0x7e,0x60,0x47,0xc4,0x81,0x61,0x45,0x01,0x26,0x04,0x00,
-0xa1,0xd2,0xff,0xff,0x60,0x47,0x02,0x00,0x01,0xa1,0xa1,0xd2,0xff,0xff,0x00,0x7f,
-0x02,0xa4,0xc4,0x81,0x02,0xa1,0x01,0x26,0x02,0x00,0xa1,0xd2,0x04,0x00,0xff,0xa1,
-0xa1,0xd2,0xff,0xff,0x60,0x47,0x7f,0xf1,0x00,0x7f,0xd0,0x80,0xff,0xff,0x2d,0x02,
-0x69,0x60,0x4e,0x62,0xa2,0xd3,0xff,0xff,0xfe,0xa0,0xff,0xff,0x19,0x02,0x69,0x60,
-0x58,0x62,0xa2,0xd3,0xff,0xff,0xf6,0xa0,0x60,0x41,0x12,0x05,0x01,0xa4,0xa2,0xdb,
-0xe1,0x81,0xe1,0x85,0xc5,0x85,0x69,0x60,0x5a,0x64,0xc4,0x81,0x2a,0x46,0x5c,0x63,
-0xbd,0xd2,0xa1,0xdb,0xbd,0xd2,0x02,0xa1,0xa1,0xdb,0xa3,0xd2,0x02,0xa1,0xa1,0xdb,
-0x69,0x60,0x4e,0x62,0x02,0x64,0xa2,0xdb,0x2a,0x46,0xff,0xff,0x2e,0xf0,0x81,0xf9,
-0x2f,0xf0,0xff,0xff,0x82,0xf9,0x30,0xf0,0x83,0xf9,0x2a,0x46,0x71,0x60,0x55,0x78,
-0xff,0xff,0x69,0x60,0x56,0x62,0xa2,0xd3,0xff,0xff,0xff,0xa0,0xff,0xff,0x1d,0x02,
-0x69,0x60,0x58,0x62,0xa2,0xd3,0xff,0xff,0xff,0xa0,0x40,0x47,0x16,0x04,0x69,0x60,
-0x5a,0x61,0x65,0x43,0x50,0xfe,0xbd,0xd2,0xa1,0xd1,0x02,0xa1,0xd0,0x80,0xbd,0xd2,
-0xa1,0xd1,0x02,0xa1,0xd0,0x80,0xa3,0xd2,0xa1,0xd1,0x02,0xa1,0xd0,0x80,0xff,0xff,
-0x06,0x01,0x27,0x44,0xcc,0x84,0x40,0x47,0xec,0x02,0x08,0xfe,0x01,0x00,0x48,0xfe,
-0x2f,0x58,0xff,0xff,0x99,0xff,0x08,0x60,0x2a,0x62,0x05,0x60,0xff,0x64,0xa2,0xdb,
-0x05,0x60,0xff,0xe5,0xff,0xff,0xff,0xff,0x98,0xff,0xe0,0x60,0x00,0x63,0xfe,0x60,
-0x00,0x66,0x0c,0x60,0x7b,0x64,0xa3,0xd0,0xcc,0x84,0xbd,0xd8,0xfc,0x02,0x99,0xff,
-0x08,0x60,0x2a,0x62,0x04,0x60,0xff,0x64,0xa2,0xdb,0x04,0x60,0xff,0xe5,0xff,0xff,
-0xff,0xff,0x98,0xff,0x0c,0x60,0x87,0x78,0xff,0xff,0x01,0x00,0x01,0x00,0x01,0x00,
-0x01,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x01,0x00,
-0x02,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x21,0x00,0x02,0x00,0x02,0x00,0x01,0x00,
-0x00,0x00,0x04,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x02,0x00,0x10,0x20,0x00,0x00,
-0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x02,0x00,
-0x02,0x00,0x00,0x00,0x53,0x65,0x63,0x6f,0x6e,0x64,0x61,0x72,0x79,0x20,0x46,0x27,
-0x73,0x00,0x0f,0x01,0x00,0x18,0x7e,0x00,0x92,0xd1,0x0c,0x01,0x38,0x81,0x7f,0x00,
-0x02,0x00,0x0e,0x01,0x1a,0x8e,0x7f,0x00,0x02,0x00,0x10,0x01,0x00,0x80,0x7f,0x00,
-0xfc,0x14,0x0a,0x01,0xe2,0x8d,0x7f,0x00,0x02,0x00,0x0b,0x01,0x2c,0x8e,0x7f,0x00,
-0x24,0x00,0x08,0x01,0x08,0x8e,0x7f,0x00,0x12,0x00,0x09,0x01,0x06,0x8e,0x7f,0x00,
-0x02,0x00,0x04,0x01,0x0a,0x81,0x7f,0x00,0x02,0x00,0x05,0x01,0x66,0x8d,0x7f,0x00,
-0x02,0x00,0x05,0x01,0x40,0x81,0x7f,0x00,0x02,0x00,0x02,0x00,0x00,0x80,0x7f,0x00,
-0xfc,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x05,0x02,0xd0,0x80,0x00,0xa0,0x02,0x02,0x01,0x03,0x03,0x00,0x75,0x60,0x5f,0x78,
+0xff,0xff,0xb0,0xf3,0x0f,0xfa,0xb1,0xf3,0xff,0xff,0x10,0xfa,0xb2,0xf3,0x11,0xfa,
+0x02,0x60,0x00,0x64,0x09,0xfa,0x14,0x63,0x1e,0x61,0x26,0x65,0xa3,0xd2,0xa1,0xd0,
+0xa1,0xda,0x64,0x44,0xbd,0xda,0xd5,0x80,0xd9,0x81,0xf8,0x02,0x26,0x46,0x79,0xf3,
+0x34,0xf1,0x08,0xbc,0x60,0x47,0x64,0x40,0x01,0x26,0x40,0xbc,0x60,0x47,0x29,0xfa,
+0xff,0x7f,0x00,0x7e,0x0e,0xfa,0x24,0x64,0x38,0xfa,0x00,0x64,0x22,0xfa,0x28,0xfa,
+0xff,0xff,0x75,0xf3,0x2b,0xfa,0x76,0xf3,0xff,0xff,0x2c,0xfa,0x77,0xf3,0x2d,0xfa,
+0xff,0xff,0xb0,0xf3,0x2e,0xfa,0xb1,0xf3,0xff,0xff,0x2f,0xfa,0xb2,0xf3,0x30,0xfa,
+0xff,0xff,0x00,0xf4,0x0f,0xf2,0x10,0xf0,0x60,0x45,0x11,0xf2,0x26,0x46,0x33,0xfa,
+0x64,0x44,0x32,0xfa,0x65,0x44,0x31,0xfa,0x39,0x60,0x58,0x4e,0xfe,0x78,0xff,0xff,
+0x3f,0x60,0x6a,0x62,0x3f,0x60,0x10,0x64,0xa2,0xdb,0x66,0x44,0x5a,0xdb,0x0a,0x64,
+0x5a,0xdb,0xff,0xff,0x2b,0xff,0xc1,0xfe,0x6a,0x60,0x66,0x64,0xa0,0xd3,0xff,0xff,
+0xdc,0x84,0xa2,0xdb,0x74,0x60,0x54,0x78,0xff,0xff,0x26,0x46,0x6f,0x60,0xc9,0x78,
+0xff,0xff,0x21,0x60,0x86,0x64,0xa0,0xd5,0x66,0x45,0x09,0xf2,0x46,0x4b,0x00,0xbe,
+0x46,0x49,0x12,0x03,0x30,0xf0,0x65,0x46,0x30,0xf2,0x2f,0xf0,0xd0,0x80,0x29,0x46,
+0xf4,0x02,0x2f,0xf2,0x2e,0xf2,0xd0,0x80,0x65,0x46,0x03,0x02,0x2e,0xf0,0xff,0xff,
+0xd0,0x80,0x29,0x46,0xea,0x02,0x08,0xfe,0x2e,0x58,0xff,0xff,0x00,0x64,0x00,0xa0,
+0x6b,0x60,0x36,0x62,0xa2,0xd3,0x29,0xf0,0x60,0x40,0x00,0x36,0x34,0x00,0x01,0x3a,
+0x07,0x00,0x64,0x44,0x00,0x7f,0x80,0x65,0xd4,0x80,0xff,0xff,0x2f,0x03,0x2b,0x00,
+0x64,0x44,0x0c,0xb4,0xf8,0xa0,0xff,0xff,0x44,0x03,0x64,0x44,0x80,0x36,0x26,0x00,
+0xb4,0x36,0x27,0x00,0xc4,0x36,0x28,0x00,0xd4,0x36,0x29,0x00,0x40,0x36,0x2a,0x00,
+0xe4,0x36,0x2b,0x00,0x00,0x36,0x2c,0x00,0x10,0x36,0x2d,0x00,0x20,0x36,0x28,0x00,
+0x30,0x36,0x29,0x00,0x50,0x36,0x27,0x00,0xa0,0x36,0x28,0x00,0xa4,0x36,0x20,0x00,
+0xb0,0x36,0x24,0x00,0xc0,0x36,0x22,0x00,0x6b,0x60,0x38,0x62,0x6b,0x60,0x3a,0x63,
+0x00,0x64,0xa2,0xdb,0xa3,0xdb,0x6e,0x60,0xd5,0x78,0xff,0xff,0x77,0x60,0x82,0x78,
+0xff,0xff,0x76,0x60,0x24,0x78,0xff,0xff,0x76,0x60,0x62,0x78,0xff,0xff,0x76,0x60,
+0x55,0x78,0xff,0xff,0x76,0x60,0x6f,0x78,0xff,0xff,0x76,0x60,0xc7,0x78,0xff,0xff,
+0x75,0x60,0xde,0x78,0xff,0xff,0x76,0x60,0x01,0x78,0xff,0xff,0x76,0x60,0xe5,0x78,
+0xff,0xff,0x77,0x60,0x1c,0x78,0xff,0xff,0x6b,0x60,0x38,0x62,0x6b,0x60,0x3a,0x63,
+0x00,0x64,0xa2,0xdb,0xa3,0xdb,0xff,0xff,0x2b,0xf2,0x75,0xf1,0xff,0xff,0xd0,0x80,
+0x2c,0xf2,0x76,0xf1,0x07,0x02,0xd0,0x80,0x2d,0xf2,0x77,0xf1,0x03,0x02,0xd0,0x80,
+0xff,0xff,0x06,0x03,0x56,0x65,0x78,0x60,0x58,0x4f,0x8c,0x78,0xff,0xff,0x04,0x02,
+0x6b,0x60,0x38,0x62,0x01,0x64,0xa2,0xdb,0x75,0x60,0xbd,0x78,0xff,0xff,0x6b,0x60,
+0x38,0x62,0x6b,0x60,0x3a,0x63,0x00,0x64,0xa2,0xdb,0xa3,0xdb,0xff,0xff,0x2e,0xf2,
+0x75,0xf1,0xff,0xff,0xd0,0x80,0x2f,0xf2,0x76,0xf1,0x07,0x02,0xd0,0x80,0x30,0xf2,
+0x77,0xf1,0x03,0x02,0xd0,0x80,0xff,0xff,0x06,0x03,0x5c,0x65,0x78,0x60,0x58,0x4f,
+0x8c,0x78,0xff,0xff,0x04,0x02,0x6b,0x60,0x38,0x62,0x01,0x64,0xa2,0xdb,0x75,0x60,
+0xbd,0x78,0xff,0xff,0x6b,0x60,0x38,0x62,0x6b,0x60,0x3a,0x63,0x00,0x64,0xa2,0xdb,
+0xa3,0xdb,0xff,0xff,0x2b,0xf2,0x75,0xf1,0xff,0xff,0xd0,0x80,0x2c,0xf2,0x76,0xf1,
+0x15,0x02,0xd0,0x80,0x2d,0xf2,0x77,0xf1,0x11,0x02,0xd0,0x80,0xff,0xff,0x14,0x03,
+0x2e,0xf2,0x75,0xf1,0xff,0xff,0xd0,0x80,0x2f,0xf2,0x76,0xf1,0x07,0x02,0xd0,0x80,
+0x30,0xf2,0x77,0xf1,0x03,0x02,0xd0,0x80,0xff,0xff,0x06,0x03,0x56,0x65,0x78,0x60,
+0x58,0x4f,0x8c,0x78,0xff,0xff,0x04,0x02,0x6b,0x60,0x3a,0x62,0x01,0x64,0xa2,0xdb,
+0x75,0x60,0xbd,0x78,0xff,0xff,0x6b,0x60,0x3a,0x65,0x6b,0x60,0x38,0x63,0x00,0x64,
+0x01,0x61,0xa3,0xd1,0xa5,0xdb,0xd1,0x80,0xa3,0xdb,0x75,0x60,0xbd,0x78,0xff,0xff,
+0x6b,0x60,0x3a,0x65,0x6b,0x60,0x38,0x63,0x00,0x64,0x01,0x61,0xa5,0xd1,0xa3,0xdb,
+0xd1,0x80,0xa5,0xdb,0x75,0x60,0xbd,0x78,0xff,0xff,0x6b,0x60,0x38,0x62,0x6b,0x60,
+0x3a,0x63,0x00,0x64,0xa2,0xdb,0xa3,0xdb,0x46,0x4a,0x2b,0xf2,0x75,0xf1,0xff,0xff,
+0xd0,0x80,0x2c,0xf2,0x76,0xf1,0x0c,0x02,0xd0,0x80,0x2d,0xf2,0x77,0xf1,0x08,0x02,
+0xd0,0x80,0xff,0xff,0x05,0x02,0x6b,0x60,0x38,0x62,0x01,0x64,0xa2,0xdb,0x0c,0x00,
+0x2b,0xf0,0xff,0x60,0xff,0x64,0xd0,0x80,0x2c,0xf0,0x33,0x02,0xd0,0x80,0x2d,0xf0,
+0x30,0x02,0xd0,0x80,0xff,0xff,0x2d,0x02,0x38,0xf2,0xff,0xff,0xfe,0xa0,0xff,0xff,
+0x28,0x04,0x00,0xf4,0x02,0xf0,0x16,0x60,0xda,0x62,0xa2,0xd1,0x64,0x47,0xd0,0x80,
+0xff,0xff,0x1f,0x02,0x60,0x41,0xe9,0x81,0x06,0x63,0x0c,0x03,0x16,0x60,0xdc,0x64,
+0x60,0x45,0xbd,0xd0,0xa5,0xd3,0xff,0xff,0xd0,0x80,0x65,0x44,0x12,0x02,0xcd,0x81,
+0x02,0xa4,0xf6,0x02,0x02,0xf0,0xff,0xff,0x64,0x40,0x01,0x27,0x02,0x00,0x48,0xfe,
+0x08,0x00,0xa3,0xd0,0xa0,0xd1,0x64,0x44,0x00,0x7f,0x60,0x45,0x64,0x44,0x00,0x7f,
+0xd4,0x80,0x2a,0x46,0x75,0x60,0xbd,0x78,0xff,0xff,0x6b,0x60,0x38,0x62,0x6b,0x60,
+0x3a,0x63,0x00,0x64,0xa2,0xdb,0xa3,0xdb,0xff,0xff,0x2e,0xf2,0x75,0xf1,0xff,0xff,
+0xd0,0x80,0x2f,0xf2,0x76,0xf1,0x07,0x02,0xd0,0x80,0x30,0xf2,0x77,0xf1,0x03,0x02,
+0xd0,0x80,0xff,0xff,0x05,0x03,0x5c,0x65,0x78,0x60,0x58,0x4f,0x8c,0x78,0xff,0xff,
+0x75,0x60,0xbd,0x78,0xff,0xff,0x6b,0x60,0x38,0x62,0x6b,0x60,0x3a,0x63,0x00,0x64,
+0xa2,0xdb,0xa3,0xdb,0xff,0xff,0x2b,0xf2,0x75,0xf1,0xff,0xff,0xd0,0x80,0x2c,0xf2,
+0x76,0xf1,0x07,0x02,0xd0,0x80,0x2d,0xf2,0x77,0xf1,0x03,0x02,0xd0,0x80,0xff,0xff,
+0x1a,0x03,0x56,0x65,0x78,0x60,0x58,0x4f,0x8c,0x78,0xff,0xff,0x14,0x03,0x2e,0xf2,
+0x75,0xf1,0xff,0xff,0xd0,0x80,0x2f,0xf2,0x76,0xf1,0x07,0x02,0xd0,0x80,0x30,0xf2,
+0x77,0xf1,0x03,0x02,0xd0,0x80,0xff,0xff,0x06,0x03,0x5c,0x65,0x78,0x60,0x58,0x4f,
+0x8c,0x78,0xff,0xff,0x04,0x00,0x6b,0x60,0x38,0x62,0x01,0x64,0xa2,0xdb,0x75,0x60,
+0xbd,0x78,0xff,0xff,0x6b,0x60,0x38,0x62,0x6b,0x60,0x3a,0x63,0x00,0x64,0xa2,0xdb,
+0xa3,0xdb,0x29,0xf2,0xff,0xff,0xff,0xff,0x01,0x2b,0x3a,0x00,0x2b,0xf2,0x75,0xf1,
+0xff,0xff,0xd0,0x80,0x2c,0xf2,0x76,0xf1,0x07,0x02,0xd0,0x80,0x2d,0xf2,0x77,0xf1,
+0x03,0x02,0xd0,0x80,0xff,0xff,0x40,0x03,0x6b,0x60,0x3e,0x62,0xa2,0xd3,0xff,0xff,
+0xff,0xa0,0xff,0xff,0x42,0x02,0x6b,0x60,0x40,0x62,0xa2,0xd3,0xff,0xff,0x00,0xa0,
+0x40,0x47,0x1e,0x03,0x56,0x65,0x6b,0x60,0x42,0x61,0x65,0x43,0x50,0xfe,0xbd,0xd2,
+0xa1,0xd1,0x02,0xa1,0xd0,0x80,0xbd,0xd2,0xa1,0xd1,0x02,0xa1,0xd0,0x80,0xa3,0xd2,
+0xa1,0xd1,0x02,0xa1,0xd0,0x80,0xff,0xff,0x1f,0x01,0x27,0x44,0xcc,0x84,0x40,0x47,
+0xec,0x02,0x29,0xf2,0xff,0xff,0xff,0xff,0x01,0x27,0x02,0x00,0x08,0xfe,0x1d,0x00,
+0x2e,0xf2,0x75,0xf1,0xff,0xff,0xd0,0x80,0x2f,0xf2,0x76,0xf1,0x07,0x02,0xd0,0x80,
+0x30,0xf2,0x77,0xf1,0x03,0x02,0xd0,0x80,0xff,0xff,0x06,0x03,0x5c,0x65,0x78,0x60,
+0x58,0x4f,0x8c,0x78,0xff,0xff,0x09,0x02,0x2b,0xf2,0xff,0xff,0xff,0xff,0x01,0x26,
+0x04,0x00,0x6b,0x60,0x38,0x62,0x01,0x64,0xa2,0xdb,0x75,0x60,0xbd,0x78,0xff,0xff,
+0x6b,0x60,0x38,0x62,0x6b,0x60,0x3a,0x63,0x00,0x64,0xa2,0xdb,0xa3,0xdb,0x38,0xf2,
+0x46,0x4a,0x60,0x41,0x6b,0x60,0x36,0x62,0xa2,0xd3,0xff,0xff,0xff,0xff,0x02,0x36,
+0x07,0x00,0x6b,0x60,0x34,0x62,0xa2,0xd3,0xff,0xff,0xff,0xff,0x04,0x36,0x07,0x00,
+0x61,0x44,0xf2,0xa0,0xff,0xff,0x06,0x05,0x78,0x60,0x88,0x78,0xff,0xff,0x77,0x60,
+0xdf,0x78,0xff,0xff,0x2e,0xf2,0x75,0xf1,0xff,0xff,0xd0,0x80,0x2f,0xf2,0x76,0xf1,
+0x07,0x02,0xd0,0x80,0x30,0xf2,0x77,0xf1,0x03,0x02,0xd0,0x80,0xff,0xff,0xef,0x03,
+0x6b,0x60,0x36,0x62,0xa2,0xd3,0xff,0xff,0xfe,0xa0,0xff,0xff,0xe5,0x02,0x6b,0x60,
+0x3e,0x62,0xa2,0xd3,0xff,0xff,0xff,0xa0,0xff,0xff,0xde,0x02,0x6b,0x60,0x40,0x62,
+0xa2,0xd3,0xff,0xff,0x00,0xa0,0x40,0x47,0x22,0x03,0x5c,0x65,0x6b,0x60,0x42,0x61,
+0x65,0x43,0x50,0xfe,0xbd,0xd2,0xa1,0xd1,0x02,0xa1,0xd0,0x80,0xbd,0xd2,0xa1,0xd1,
+0x02,0xa1,0xd0,0x80,0xa3,0xd2,0xa1,0xd1,0x02,0xa1,0xd0,0x80,0xff,0xff,0xc4,0x01,
+0x27,0x44,0xcc,0x84,0x40,0x47,0xec,0x02,0x0a,0x00,0x6b,0x60,0x36,0x62,0xa2,0xd3,
+0xff,0xff,0xff,0xff,0x02,0x3a,0x03,0x00,0x78,0x60,0x88,0x78,0xff,0xff,0x38,0xf2,
+0x00,0xf4,0x08,0xf0,0xf2,0xa0,0xff,0xff,0x03,0x05,0x78,0x60,0x88,0x78,0xff,0xff,
+0x6b,0x60,0x34,0x62,0xa2,0xd3,0xff,0xff,0xff,0xff,0x04,0x36,0x1b,0x00,0x16,0x60,
+0xda,0x62,0x64,0x47,0x00,0xa0,0xff,0xff,0x3c,0x06,0xe0,0xa0,0xff,0xff,0x39,0x07,
+0xa2,0xdb,0x12,0x63,0x60,0x41,0x16,0x60,0xdc,0x64,0xbd,0xd0,0xa0,0xd9,0xcd,0x81,
+0x02,0xa4,0xfb,0x02,0x08,0xf0,0xff,0xff,0x64,0x40,0x01,0x2b,0x2a,0x00,0xa3,0xd0,
+0xa0,0xd9,0x27,0x00,0x16,0x60,0xda,0x62,0x64,0x47,0xa2,0xd1,0xff,0xff,0xd0,0x80,
+0xff,0xff,0x6c,0x02,0x60,0x41,0xe9,0x81,0x12,0x63,0x0c,0x03,0x16,0x60,0xdc,0x64,
+0x60,0x45,0xbd,0xd0,0xa5,0xd3,0xff,0xff,0xd0,0x80,0x65,0x44,0x5f,0x02,0xcd,0x81,
+0x02,0xa4,0xf6,0x02,0x08,0xf0,0xff,0xff,0x64,0x40,0x01,0x2b,0x0a,0x00,0xa3,0xd0,
+0xa0,0xd1,0x64,0x44,0x00,0x7f,0x60,0x45,0x64,0x44,0x00,0x7f,0xd4,0x80,0xff,0xff,
+0x4d,0x02,0x08,0xf2,0x12,0x65,0x00,0x7e,0x60,0x47,0xc4,0x81,0x61,0x45,0x01,0x26,
+0x04,0x00,0xa1,0xd2,0xff,0xff,0x60,0x47,0x02,0x00,0x01,0xa1,0xa1,0xd2,0xff,0xff,
+0x00,0x7f,0x02,0xa4,0xc4,0x81,0x02,0xa1,0x01,0x26,0x02,0x00,0xa1,0xd2,0x04,0x00,
+0xff,0xa1,0xa1,0xd2,0xff,0xff,0x60,0x47,0x73,0xf1,0x00,0x7f,0xd0,0x80,0xff,0xff,
+0x2d,0x02,0x6b,0x60,0x36,0x62,0xa2,0xd3,0xff,0xff,0xfe,0xa0,0xff,0xff,0x19,0x02,
+0x6b,0x60,0x40,0x62,0xa2,0xd3,0xff,0xff,0xf6,0xa0,0x60,0x41,0x12,0x05,0x01,0xa4,
+0xa2,0xdb,0xe1,0x81,0xe1,0x85,0xc5,0x85,0x6b,0x60,0x42,0x64,0xc4,0x81,0x2a,0x46,
+0x5c,0x63,0xbd,0xd2,0xa1,0xdb,0xbd,0xd2,0x02,0xa1,0xa1,0xdb,0xa3,0xd2,0x02,0xa1,
+0xa1,0xdb,0x6b,0x60,0x36,0x62,0x02,0x64,0xa2,0xdb,0x2a,0x46,0xff,0xff,0x2e,0xf0,
+0x75,0xf9,0x2f,0xf0,0xff,0xff,0x76,0xf9,0x30,0xf0,0x77,0xf9,0x2a,0x46,0x75,0x60,
+0xbd,0x78,0xff,0xff,0x6b,0x60,0x3e,0x62,0xa2,0xd3,0xff,0xff,0xff,0xa0,0xff,0xff,
+0x1d,0x02,0x6b,0x60,0x40,0x62,0xa2,0xd3,0xff,0xff,0xff,0xa0,0x40,0x47,0x16,0x04,
+0x6b,0x60,0x42,0x61,0x65,0x43,0x50,0xfe,0xbd,0xd2,0xa1,0xd1,0x02,0xa1,0xd0,0x80,
+0xbd,0xd2,0xa1,0xd1,0x02,0xa1,0xd0,0x80,0xa3,0xd2,0xa1,0xd1,0x02,0xa1,0xd0,0x80,
+0xff,0xff,0x06,0x01,0x27,0x44,0xcc,0x84,0x40,0x47,0xec,0x02,0x08,0xfe,0x01,0x00,
+0x48,0xfe,0x2f,0x58,0xff,0xff,0x99,0xff,0x08,0x60,0x2a,0x62,0x05,0x60,0xff,0x64,
+0xa2,0xdb,0x05,0x60,0xff,0xe5,0xff,0xff,0xff,0xff,0x98,0xff,0xe0,0x60,0x00,0x63,
+0xfe,0x60,0x00,0x66,0x0d,0x60,0xca,0x64,0xa3,0xd0,0xcc,0x84,0xbd,0xd8,0xfc,0x02,
+0x99,0xff,0x08,0x60,0x2a,0x62,0x04,0x60,0xff,0x64,0xa2,0xdb,0x04,0x60,0xff,0xe5,
+0xff,0xff,0xff,0xff,0x98,0xff,0x0c,0x60,0x87,0x78,0xff,0xff,0x01,0x00,0x01,0x00,
+0x01,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x01,0x00,
+0x01,0x00,0x02,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x21,0x00,0x02,0x00,0x02,0x00,
+0x01,0x00,0x00,0x00,0x04,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x02,0x00,0x10,0x20,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,
+0x02,0x00,0x02,0x00,0x00,0x00,0x53,0x65,0x63,0x6f,0x6e,0x64,0x61,0x72,0x79,0x20,
+0x46,0x27,0x73,0x00,0x0f,0x01,0x00,0x18,0x7e,0x00,0x62,0xda,0x0c,0x01,0x20,0x81,
+0x7f,0x00,0x02,0x00,0x0e,0x01,0x9c,0x8e,0x7f,0x00,0x02,0x00,0x10,0x01,0x00,0x80,
+0x7f,0x00,0xce,0x17,0x0a,0x01,0x64,0x8e,0x7f,0x00,0x02,0x00,0x0b,0x01,0xae,0x8e,
+0x7f,0x00,0x24,0x00,0x08,0x01,0x8a,0x8e,0x7f,0x00,0x12,0x00,0x09,0x01,0x88,0x8e,
+0x7f,0x00,0x02,0x00,0x04,0x01,0xf8,0x80,0x7f,0x00,0x02,0x00,0x05,0x01,0xe8,0x8d,
+0x7f,0x00,0x02,0x00,0x05,0x01,0x28,0x81,0x7f,0x00,0x02,0x00,0x02,0x00,0x00,0x80,
+0x7f,0x00,0xf6,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x08,0x00,0x0f,0x00,0x0f,0x00,0x0f,0x00,0x00,0x00,0x00,0x00,0x70,0x09,0x34,0x09,
+0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x0f,0x00,0x00,0x00,
-0x00,0x00,0x70,0x09,0x34,0x09,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-0x00,0x00,0x00,0x00,0x00,0x1b,0x00,0x1b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x1b,0x00,0x1b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
-0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-0x00,0x00,0x00,0x28,0x00,0x28,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc8,0x2a,
+0xc8,0x2a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x08,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x07,0x01,0x00,
-0x64,0x00,0x64,0x00,0xe8,0x03,0x10,0x27,0x14,0x00,0x88,0x13,0x88,0x13,0x2f,0x00,
-0x14,0x00,0x04,0x00,0x0f,0x00,0x02,0x00,0x02,0x00,0x14,0x00,0x0a,0x00,0x0f,0x00,
-0x0f,0x00,0x05,0x00,0x0a,0x00,0x64,0x00,0x88,0x13,0x0d,0x00,0x00,0x00,0x00,0x00,
-0x00,0x00,0x01,0x00,0x05,0x00,0x08,0x00,0x23,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-0x00,0x00,0x2b,0x09,0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x64,0x00,0x64,0x00,0xe8,0x03,0x14,0x00,0x88,0x13,0x88,0x13,0x14,0x00,0x05,0x00,
+0x32,0x00,0x02,0x00,0x14,0x00,0x0a,0x00,0x0f,0x00,0x0f,0x00,0x05,0x00,0x0a,0x00,
+0x64,0x00,0x88,0x13,0x0d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x05,0x00,
+0x08,0x00,0x23,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2b,0x09,0x03,0x00,0x00,0x00,
+0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,
-0x10,0x60,0xa3,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x41,0xff,0x10,0x60,0xa4,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0xc4,0xe2,0x10,0x60,0xab,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x10,0x60,0x85,0x78,0x43,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x44,0xff,0x08,0xe1,0x10,0x60,0xc6,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x44,0xe2,0x10,0x60,0xc8,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x46,0xff,0x10,0x60,0xc9,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x10,0x60,0xca,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x12,0x60,0xdb,0x78,0x4c,0x4e,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x12,0x60,0xa2,0x78,0x4c,0xe2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x11,0x60,0xd2,0x78,0x43,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x11,0x60,0xae,0x78,0xa1,0xf3,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x12,0x60,0xbf,0x78,0x46,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x11,0x60,0x8e,0x78,0x47,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x10,0x60,0x65,0x78,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x41,0xff,0x10,0x60,
+0x66,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc4,0xe2,0x10,0x60,
+0x6d,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x10,0x60,0x47,0x78,
+0x43,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x44,0xff,0x08,0xe1,
+0x10,0x60,0x88,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x44,0xe2,0x10,0x60,
+0x8a,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x46,0xff,0x10,0x60,
+0x8b,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x10,0x60,0x8c,0x78,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x12,0x60,0xab,0x78,
+0x4c,0x4e,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x12,0x60,0x72,0x78,
+0x4c,0xe2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x11,0x60,0x94,0x78,
+0x43,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x11,0x60,0x70,0x78,
+0x97,0xf3,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x12,0x60,0x8f,0x78,
+0x46,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x11,0x60,0x50,0x78,
+0x47,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x42,0xff,0x19,0x60,0x5e,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x43,0xff,0x19,0x60,0x5e,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x44,0xff,0x19,0x60,0x5e,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x45,0xff,0x1a,0x60,0xdc,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x07,0xf7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x83,0x7c,
-0x08,0x60,0x12,0x64,0x80,0x29,0xa0,0xd9,0x47,0xff,0x19,0x60,0x14,0x78,0xff,0xff,
-0x40,0xff,0x24,0x58,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x41,0xff,0x21,0x58,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0xc4,0xe2,0x22,0x58,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x20,0x60,0x15,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x22,0x60,0x83,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x45,0xff,0x21,0x58,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x1b,0x60,0x10,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x20,0x60,0x18,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0xf8,0x60,0x8c,0x78,0x40,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,
-0xf6,0x60,0xa0,0x78,0x41,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,
-0xf8,0x60,0xf5,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,
-0x25,0x60,0x40,0x78,0x43,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,
-0xf8,0x60,0xf5,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,
-0x24,0x60,0xc5,0x78,0x45,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,
-0x25,0x60,0x88,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,
-0xf8,0x60,0xf5,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,
-0x3d,0x60,0x25,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x3f,0x60,0x47,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x00,0x79,0x3d,0x60,0x2e,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x24,0xe2,0x3d,0x60,0x2e,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x3d,0x60,0xa1,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x44,0xe2,0x3d,0x60,0x2e,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x84,0xe2,0x3d,0x60,0x2e,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x47,0xff,0x3d,0x60,0x2e,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x30,0x60,0x19,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x42,0xff,0x18,0x60,
+0xed,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x43,0xff,0x18,0x60,
+0xed,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x44,0xff,0x18,0x60,
+0xed,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x45,0xff,0x1a,0x60,
+0x6d,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x07,0xf7,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x83,0x7c,0x08,0x60,0x12,0x64,
+0x80,0x29,0xa0,0xd9,0x47,0xff,0x18,0x60,0xa3,0x78,0xff,0xff,0x40,0xff,0x24,0x58,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x41,0xff,0x21,0x58,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc4,0xe2,0x22,0x58,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x1f,0x60,0x9b,0x78,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x22,0x60,0x00,0x78,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x45,0xff,0x21,0x58,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x1a,0x60,0xa1,0x78,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x1f,0x60,0x9e,0x78,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfb,0x60,0x2a,0x78,
+0x40,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0xf8,0x60,0x06,0x78,
+0x41,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0xfb,0x60,0x93,0x78,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0x24,0x60,0xb7,0x78,
+0x43,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0xfb,0x60,0x93,0x78,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0x24,0x60,0x3c,0x78,
+0x45,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0x24,0x60,0xff,0x78,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0xfb,0x60,0x93,0x78,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0x3d,0x60,0x2c,0x78,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x3f,0x60,0x5f,0x78,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x79,0x3d,0x60,
+0x35,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x24,0xe2,0x3d,0x60,
+0x35,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x3d,0x60,0xa8,0x78,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x44,0xe2,0x3d,0x60,
+0x35,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x84,0xe2,0x3d,0x60,
+0x35,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x47,0xff,0x3d,0x60,
+0x35,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2f,0x60,0xc1,0x78,
 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x30,0x60,0xfb,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x28,0xe2,0x30,0x60,0x61,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x44,0xff,0x30,0x60,0x61,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x45,0xff,0x30,0x60,0x61,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
-0x46,0xff,0x30,0x60,0x61,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x87,0x7c,
-0x08,0x60,0x12,0x64,0x80,0x29,0xa0,0xd9,0x47,0xff,0x30,0x60,0x61,0x78,0xf5,0x6f,
-0x08,0x70,0xcc,0x3f,0xae,0x50,0x46,0x68,0x21,0x65,0x2e,0x2d,0x86,0x56,0x9a,0x68,
-0x2f,0x59,0x06,0x70,0x06,0x70,0x06,0x70,0x06,0x70,0x06,0x70,0x06,0x70,0x06,0x70,
-0x06,0x70,0x06,0x70,0x06,0x70,0x06,0x70,0x06,0x70,0x8e,0x11,0x00,0x0a,0x10,0x01,
-0x68,0xa4,0xb0,0x01,0x84,0x01,0x30,0x33,0x31,0x33,0x44,0x44,0x30,0x33,0x31,0x33,
-0x30,0x33,0x31,0x33,0x32,0x33,0x32,0x33,0x90,0x00,0x78,0x04,0xae,0xe4,0xcc,0x3d,
-0xb5,0x3d,0x92,0x33,0x28,0x34,0x03,0xfc,0xc9,0x34,0xc3,0x36,0xe4,0x17,0x02,0x00,
-0x04,0xfc,0xc9,0x34,0xf5,0x34,0x02,0x17,0x22,0x00,0x07,0xfc,0xc9,0x34,0xf5,0x34,
-0x92,0x00,0x02,0x00,0x0e,0xfc,0xc9,0x34,0xdf,0x36,0x2e,0x17,0x22,0x00,0x00,0xfc,
-0xc9,0x34,0xf5,0x34,0xde,0x16,0x02,0x00,0x01,0xfc,0xc9,0x34,0xe6,0x34,0xd4,0x16,
-0x06,0x00,0x02,0xfc,0xc9,0x34,0xe6,0x34,0xe0,0x16,0x22,0x00,0x05,0xfc,0xc9,0x34,
-0xf5,0x34,0xdc,0x16,0x02,0x00,0x09,0xfc,0xc9,0x34,0x60,0x37,0x24,0x17,0x02,0x00,
-0x0a,0xfc,0xc9,0x34,0xf5,0x34,0x26,0x17,0x02,0x00,0x0b,0xfc,0xc9,0x34,0xf5,0x34,
-0x28,0x17,0x02,0x00,0x0c,0xfc,0xc9,0x34,0xf5,0x34,0x2a,0x17,0x02,0x00,0x0f,0xfc,
-0xc9,0x34,0xf5,0x34,0x7c,0x17,0x02,0x00,0x19,0xfd,0xc9,0x34,0xf5,0x34,0x8e,0x17,
-0x02,0x00,0xb0,0xfc,0xc9,0x34,0xf5,0x34,0xbe,0x01,0x02,0x00,0x1a,0xfd,0xc9,0x34,
-0xf5,0x34,0x58,0x17,0x02,0x00,0x8e,0xfc,0xc9,0x34,0xf5,0x34,0x62,0x17,0x02,0x00,
-0xa8,0xfc,0xc9,0x34,0xf5,0x34,0x64,0x17,0x02,0x00,0xb3,0xfc,0xc9,0x34,0xf5,0x34,
-0xfa,0x17,0x02,0x00,0xb4,0xfc,0xc9,0x34,0x12,0x37,0x92,0x01,0x02,0x00,0xa9,0xfc,
-0xc9,0x34,0xb1,0x34,0x54,0x67,0x02,0x00,0xad,0xfc,0xc9,0x34,0xf5,0x34,0x6a,0x00,
-0x02,0x00,0xaa,0xfc,0xc9,0x34,0x84,0x39,0xc2,0x01,0x02,0x00,0xab,0xfc,0xc9,0x34,
-0xf5,0x34,0xf0,0x67,0x02,0x00,0xac,0xfc,0xc9,0x34,0xf5,0x34,0x14,0x19,0x02,0x00,
-0xaf,0xfc,0xb1,0x34,0x1b,0x39,0x00,0x00,0x02,0x00,0x0d,0xfc,0xc9,0x34,0xf5,0x34,
-0x2c,0x17,0x02,0x00,0x19,0xfc,0xc9,0x34,0xf5,0x34,0xa6,0x01,0x02,0x00,0x20,0xfc,
-0xc9,0x34,0xf5,0x34,0x34,0x62,0x06,0x00,0x21,0xfc,0xc9,0x34,0xe2,0x34,0x3c,0x62,
-0x06,0x00,0x24,0xfc,0xf5,0x34,0x91,0x37,0x00,0x00,0x0e,0x00,0x25,0xfc,0xf5,0x34,
-0x95,0x37,0x00,0x00,0x0e,0x00,0x26,0xfc,0xf5,0x34,0x99,0x37,0x00,0x00,0x0e,0x00,
-0x27,0xfc,0xf5,0x34,0x9d,0x37,0x00,0x00,0x0e,0x00,0x23,0xfc,0xc9,0x34,0xf5,0x34,
-0x84,0x00,0x02,0x00,0x28,0xfc,0xb9,0x37,0xc5,0x37,0x00,0x00,0x06,0x00,0x2a,0xfc,
-0xc9,0x34,0xf5,0x34,0xfa,0x00,0x02,0x00,0x2b,0xfc,0xc9,0x34,0xc5,0x34,0x78,0x01,
-0x02,0x00,0x2c,0xfc,0xc9,0x34,0xf3,0x37,0x58,0x67,0x02,0x00,0x2d,0xfc,0xc9,0x34,
-0xe4,0x37,0xaa,0x01,0x02,0x00,0x2e,0xfc,0xc9,0x34,0xf5,0x34,0x28,0x67,0x02,0x00,
-0x3a,0xfc,0xc9,0x34,0xf5,0x34,0x80,0x67,0x04,0x00,0x3b,0xfc,0xc9,0x34,0x72,0x39,
-0x48,0x69,0x02,0x00,0x3c,0xfc,0xc9,0x34,0xf5,0x34,0x16,0x19,0x02,0x00,0x80,0xfc,
-0x0b,0x35,0x1e,0x35,0xde,0x58,0xc0,0x00,0x81,0xfc,0xc9,0x34,0xf5,0x34,0x8c,0x01,
-0x02,0x00,0x82,0xfc,0xc9,0x34,0xf5,0x34,0x8e,0x01,0x02,0x00,0x83,0xfc,0xc9,0x34,
-0xf5,0x34,0x90,0x01,0x02,0x00,0x84,0xfc,0xc9,0x34,0x12,0x37,0x92,0x01,0x02,0x00,
-0x85,0xfc,0xc9,0x34,0xfe,0x36,0x9e,0x59,0x02,0x00,0x87,0xfc,0xc9,0x34,0xf5,0x34,
-0x9a,0x17,0x02,0x00,0x88,0xfc,0xc9,0x34,0xf5,0x34,0x98,0x17,0x02,0x00,0x89,0xfc,
-0xc9,0x34,0xf5,0x34,0x52,0x17,0x02,0x00,0x8a,0xfc,0xc9,0x34,0xf5,0x34,0xfa,0x17,
-0x02,0x00,0x8b,0xfc,0xc9,0x34,0xf5,0x34,0x00,0x01,0x02,0x00,0x8c,0xfc,0xc9,0x34,
-0x0f,0x38,0x9c,0x17,0x02,0x00,0xa5,0xfc,0xc9,0x34,0x6c,0x37,0x92,0x17,0x02,0x00,
-0xa6,0xfc,0xb1,0x34,0x54,0x37,0x00,0x00,0x02,0x00,0x18,0xfc,0xc9,0x34,0xf5,0x34,
-0xda,0x16,0x02,0x00,0xae,0xfc,0xc9,0x34,0xf5,0x34,0xbc,0x01,0x02,0x00,0x2f,0xfc,
-0xc9,0x34,0xf5,0x34,0xac,0x01,0x02,0x00,0x30,0xfc,0xb1,0x34,0x2d,0x38,0x00,0x00,
-0x14,0x00,0x31,0xfc,0xb1,0x34,0x90,0x38,0x00,0x00,0x06,0x00,0x10,0xfd,0xc9,0x34,
-0xc5,0x34,0x4a,0x01,0x02,0x00,0x11,0xfd,0x63,0x36,0xc5,0x34,0x10,0xe9,0x0c,0x00,
-0x12,0xfd,0x63,0x36,0xc5,0x34,0x1e,0xe9,0x02,0x00,0x13,0xfd,0x23,0x36,0xc5,0x34,
-0x00,0x04,0xe0,0x01,0x14,0xfd,0xc9,0x34,0xc5,0x34,0x56,0x17,0x02,0x00,0x15,0xfd,
-0xc9,0x34,0xc5,0x34,0xa0,0x17,0x24,0x00,0x16,0xfd,0xc9,0x34,0xc5,0x34,0x7e,0x17,
-0x10,0x00,0x17,0xfd,0xc9,0x34,0xc5,0x34,0x7a,0x17,0x02,0x00,0x18,0xfd,0xc9,0x34,
-0xc5,0x34,0x94,0x17,0x04,0x00,0x1b,0xfd,0xc9,0x34,0xc5,0x34,0x90,0x17,0x02,0x00,
-0x1c,0xfd,0xc9,0x34,0xc5,0x34,0x3e,0x00,0x02,0x00,0x24,0xfd,0xc9,0x34,0xc5,0x34,
-0xc8,0x17,0x0c,0x00,0x25,0xfd,0xc9,0x34,0xc5,0x34,0xd6,0x17,0x0c,0x00,0x26,0xfd,
-0x63,0x36,0xc5,0x34,0x38,0xe9,0x20,0x00,0x27,0xfd,0x63,0x36,0xc5,0x34,0x58,0xe9,
-0x38,0x00,0x45,0xfd,0xc9,0x34,0xc5,0x34,0x00,0x01,0x02,0x00,0x47,0xfd,0xc9,0x34,
-0xc5,0x34,0x4e,0x01,0x02,0x00,0x48,0xfd,0x84,0x36,0xc5,0x34,0x6c,0x01,0x02,0x00,
-0x49,0xfd,0x84,0x36,0xc5,0x34,0x6e,0x01,0x02,0x00,0x4a,0xfd,0xc9,0x34,0xc5,0x34,
-0xfe,0x17,0x02,0x00,0x4b,0xfd,0xc9,0x34,0xc5,0x34,0x00,0x18,0x02,0x00,0x4d,0xfd,
-0x63,0x36,0xc5,0x34,0x20,0xe9,0x04,0x00,0x50,0xfd,0xc9,0x34,0xc5,0x34,0x32,0x5a,
-0x12,0x00,0x4f,0xfd,0x63,0x36,0xc5,0x34,0x1c,0xe9,0x02,0x00,0xc0,0xfd,0x63,0x36,
-0xc5,0x34,0x24,0xe9,0x02,0x00,0xc1,0xfd,0xc9,0x34,0xc5,0x34,0xfe,0x00,0x02,0x00,
-0xc2,0xfd,0x92,0x36,0xc5,0x34,0x00,0x00,0x02,0x00,0xc3,0xfd,0x63,0x36,0xc5,0x34,
-0x26,0xe9,0x02,0x00,0xc6,0xfd,0xc9,0x34,0xc5,0x34,0xf0,0x17,0x0a,0x00,0x20,0xfd,
-0x4a,0x36,0xc5,0x34,0xfe,0xe8,0x08,0x00,0x21,0xfd,0x4a,0x36,0xc5,0x34,0x06,0xe9,
-0x0a,0x00,0x29,0xfd,0xc9,0x34,0xb1,0x34,0x48,0x3c,0x06,0x00,0x22,0xfd,0x4a,0x36,
-0xc5,0x34,0xe0,0xe8,0x0a,0x00,0x23,0xfd,0x4a,0x36,0xc5,0x34,0xf4,0xe8,0x0a,0x00,
-0x40,0xfd,0xc9,0x34,0xc5,0x34,0x96,0x01,0x02,0x00,0x41,0xfd,0xc9,0x34,0xc5,0x34,
-0xa0,0x59,0x22,0x00,0x42,0xfd,0xc9,0x34,0xf0,0x34,0x02,0x01,0x06,0x00,0x43,0xfd,
-0xad,0x36,0xc5,0x34,0x00,0x00,0x06,0x00,0x44,0xfd,0xa2,0x36,0xc5,0x34,0xa0,0x00,
-0x02,0x00,0x46,0xfd,0xc9,0x34,0xc5,0x34,0x84,0x01,0x0c,0x00,0x4c,0xfd,0xc9,0x34,
-0xc5,0x34,0xe8,0x18,0x02,0x00,0x8d,0xfc,0xc9,0x34,0xc5,0x34,0x8e,0x00,0x02,0x00,
-0x8f,0xfc,0xc9,0x34,0xc5,0x34,0x9e,0x17,0x02,0x00,0xa7,0xfc,0xc9,0x34,0xc5,0x34,
-0x46,0x67,0x04,0x00,0xfe,0xff,0x63,0x36,0xc5,0x34,0x28,0xe9,0x02,0x00,0xff,0xff,
-0x63,0x36,0xc5,0x34,0x2a,0xe9,0x0e,0x00,0x00,0xf1,0x2a,0x00,0xa5,0x35,0x01,0xf1,
-0x80,0x08,0x74,0x35,0x02,0xf1,0x80,0x08,0xac,0x35,0x03,0xf1,0x96,0x00,0xe5,0x38,
-0x04,0xf1,0x90,0x1a,0xe7,0x35,0xe0,0x1a,0x99,0x19,0x9e,0x19,0x66,0x1a,0xbb,0x1a,
-0x16,0x1a,0x75,0x19,0x1e,0x1a,0x26,0x1a,0xe3,0x19,0x61,0x19,0xd2,0x1a,0xd2,0x1a,
-0x3c,0x24,0x6f,0x24,0x6c,0x24,0x97,0x23,0x6f,0x24,0x6f,0x24,0x00,0x00,0x75,0x24,
-0x75,0x24,0x75,0x24,0x00,0x00,0x00,0x00,0xff,0x24,0x18,0x25,0x98,0x23,0x00,0x00,
-0x8a,0x24,0x00,0x00,0x00,0x00,0x9b,0x16,0x00,0x02,0x48,0x04,0x48,0x06,0x80,0x08,
-0x03,0x0a,0x04,0x0c,0x04,0x0e,0x00,0x10,0xe4,0x12,0xbb,0x14,0x1b,0x16,0x00,0x18,
-0x00,0x1a,0x00,0x1c,0x5c,0x1e,0xc1,0x20,0x20,0x22,0x74,0x24,0x07,0x26,0x0a,0x28,
-0x16,0x2a,0x00,0x2c,0x00,0x2e,0x1c,0x30,0x20,0x32,0x98,0x34,0x08,0x36,0x7a,0x38,
-0x0a,0x3a,0x24,0x3c,0xb2,0x3e,0x00,0x40,0x00,0x42,0x00,0x44,0x0c,0x46,0x26,0x48,
-0x5b,0x4a,0x7f,0x4c,0x29,0x4e,0x0f,0x50,0x20,0x52,0x20,0x54,0x10,0x56,0x10,0x58,
-0x10,0x5a,0x10,0x5c,0x1e,0x5e,0x1a,0x60,0x18,0x62,0x00,0x2c,0x0c,0x2e,0x01,0x2c,
-0x10,0x2e,0x02,0x2c,0x14,0x2e,0x03,0x2c,0x18,0x2e,0x04,0x2c,0x1c,0x2e,0x05,0x2c,
-0x20,0x2e,0x06,0x2c,0x24,0x2e,0x07,0x2c,0x28,0x2e,0x08,0x2c,0x2e,0x2e,0x09,0x2c,
-0x34,0x2e,0x0a,0x2c,0x38,0x2e,0x0b,0x2c,0x3c,0x2e,0x0c,0x2c,0x3f,0x2e,0x0d,0x2c,
-0x43,0x2e,0x0e,0x2c,0x46,0x2e,0x0f,0x2c,0x48,0x2e,0x10,0x2c,0x4b,0x2e,0x11,0x2c,
-0x50,0x2e,0x12,0x2c,0x55,0x2e,0x13,0x2c,0x5a,0x2e,0x14,0x2c,0x63,0x2e,0x15,0x2c,
-0x6d,0x2e,0x16,0x2c,0x76,0x2e,0x17,0x2c,0x7f,0x2e,0x18,0x2c,0x7f,0x2e,0x19,0x2c,
-0x7f,0x2e,0x1a,0x2c,0x7f,0x2e,0x1b,0x2c,0x7f,0x2e,0x1c,0x2c,0x7f,0x2e,0x1d,0x2c,
-0x7f,0x2e,0x1e,0x2c,0x7f,0x2e,0x1f,0x2c,0x7f,0x2e,0x00,0x02,0x01,0x04,0x38,0x06,
-0x80,0x08,0x03,0x0a,0x04,0x0c,0x04,0x0e,0x00,0x10,0xa2,0x12,0xc8,0x14,0x1b,0x16,
-0x00,0x18,0x00,0x1a,0x00,0x1c,0x5c,0x1e,0xc1,0x20,0x1e,0x22,0x54,0x24,0x07,0x26,
-0x6a,0x28,0x12,0x2a,0x00,0x2c,0x00,0x2e,0x1c,0x30,0x20,0x32,0x82,0x34,0x08,0x36,
-0x7a,0x38,0xca,0x3a,0x24,0x3c,0xb6,0x3e,0x00,0x40,0x00,0x42,0x00,0x44,0x7f,0x46,
-0x8b,0x48,0x0f,0x4a,0x06,0x4c,0x0a,0x4e,0x0f,0x50,0x20,0x52,0x20,0x54,0x10,0x56,
-0x10,0x58,0x20,0x5a,0xee,0x5c,0x1a,0x5e,0x26,0x60,0x5b,0x62,0x00,0x04,0x00,0x2c,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x30,0x60,0xa3,0x78,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x28,0xe2,0x30,0x60,
+0x09,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x44,0xff,0x30,0x60,
+0x09,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x45,0xff,0x30,0x60,
+0x09,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x46,0xff,0x30,0x60,
+0x09,0x78,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x87,0x7c,0x08,0x60,0x12,0x64,
+0x80,0x29,0xa0,0xd9,0x47,0xff,0x30,0x60,0x09,0x78,0x59,0x74,0x6c,0x74,0xe4,0x3f,
+0x54,0x51,0x81,0x6c,0x58,0x69,0xc9,0x2c,0xed,0x59,0xd5,0x6c,0xa9,0x5d,0x6a,0x74,
+0x6a,0x74,0x6a,0x74,0x6a,0x74,0x6a,0x74,0x6a,0x74,0x6a,0x74,0x6a,0x74,0x6a,0x74,
+0x6a,0x74,0x6a,0x74,0x6a,0x74,0x50,0x11,0x00,0x0a,0x10,0x01,0x68,0xa4,0xb0,0x01,
+0x84,0x01,0x30,0x33,0x31,0x33,0x44,0x44,0x30,0x33,0x31,0x33,0x30,0x33,0x31,0x33,
+0x32,0x33,0x32,0x33,0x90,0x00,0x78,0x04,0xae,0xe4,0xd3,0x3d,0xbc,0x3d,0x37,0x33,
+0xcd,0x33,0x03,0xfc,0x6e,0x34,0x76,0x36,0x5c,0x18,0x02,0x00,0x04,0xfc,0x6e,0x34,
+0xa8,0x34,0x7a,0x17,0x22,0x00,0x07,0xfc,0x6e,0x34,0xa8,0x34,0x78,0x00,0x02,0x00,
+0x0e,0xfc,0x6e,0x34,0x92,0x36,0xa6,0x17,0x22,0x00,0x00,0xfc,0x6e,0x34,0xa8,0x34,
+0x56,0x17,0x02,0x00,0x01,0xfc,0x6e,0x34,0x91,0x34,0x4c,0x17,0x06,0x00,0x02,0xfc,
+0x6e,0x34,0x8c,0x34,0x58,0x17,0x22,0x00,0x05,0xfc,0x6e,0x34,0xa8,0x34,0x54,0x17,
+0x02,0x00,0x09,0xfc,0x6e,0x34,0x13,0x37,0xac,0x00,0x02,0x00,0x0a,0xfc,0x6e,0x34,
+0xa8,0x34,0x9e,0x17,0x02,0x00,0x0b,0xfc,0x6e,0x34,0xa8,0x34,0xa0,0x17,0x02,0x00,
+0x0c,0xfc,0x6e,0x34,0xa8,0x34,0xa2,0x17,0x02,0x00,0x0f,0xfc,0x6e,0x34,0xa8,0x34,
+0xf4,0x17,0x02,0x00,0x19,0xfd,0x6e,0x34,0xa8,0x34,0x06,0x18,0x02,0x00,0xb0,0xfc,
+0x6e,0x34,0xa8,0x34,0x9c,0x01,0x02,0x00,0xb1,0xfc,0x6e,0x34,0xa8,0x34,0x18,0x01,
+0x02,0x00,0x1a,0xfd,0x6e,0x34,0xa8,0x34,0xd0,0x17,0x02,0x00,0x8e,0xfc,0x6e,0x34,
+0xa8,0x34,0xda,0x17,0x02,0x00,0xa8,0xfc,0x6e,0x34,0xa8,0x34,0xdc,0x17,0x02,0x00,
+0xb3,0xfc,0x6e,0x34,0xa8,0x34,0x72,0x18,0x02,0x00,0xb4,0xfc,0x6e,0x34,0xc5,0x36,
+0x76,0x01,0x02,0x00,0xa9,0xfc,0x6e,0x34,0x56,0x34,0x32,0x6a,0x02,0x00,0xad,0xfc,
+0x6e,0x34,0xa8,0x34,0x48,0x00,0x02,0x00,0xaa,0xfc,0x6e,0x34,0x66,0x39,0xa0,0x01,
+0x02,0x00,0xab,0xfc,0x6e,0x34,0xa8,0x34,0xcc,0x6a,0x02,0x00,0xac,0xfc,0x6e,0x34,
+0xa8,0x34,0x8c,0x19,0x02,0x00,0xaf,0xfc,0x56,0x34,0xfd,0x38,0x00,0x00,0x02,0x00,
+0x0d,0xfc,0x6e,0x34,0xa8,0x34,0xa4,0x17,0x02,0x00,0x19,0xfc,0x6e,0x34,0xa8,0x34,
+0x84,0x01,0x02,0x00,0x20,0xfc,0x6e,0x34,0xa8,0x34,0xd0,0x64,0x06,0x00,0x21,0xfc,
+0x6e,0x34,0x87,0x34,0xd8,0x64,0x06,0x00,0xb2,0xfc,0x6e,0x34,0xa8,0x34,0x92,0x19,
+0x02,0x00,0x24,0xfc,0xa8,0x34,0x44,0x37,0x00,0x00,0x10,0x00,0x25,0xfc,0xa8,0x34,
+0x49,0x37,0x00,0x00,0x10,0x00,0x26,0xfc,0xa8,0x34,0x4e,0x37,0x00,0x00,0x10,0x00,
+0x27,0xfc,0xa8,0x34,0x53,0x37,0x00,0x00,0x10,0x00,0x23,0xfc,0x6e,0x34,0xa8,0x34,
+0x66,0x00,0x02,0x00,0x28,0xfc,0x8f,0x37,0x9b,0x37,0x00,0x00,0x06,0x00,0x2a,0xfc,
+0x6e,0x34,0xa8,0x34,0xe2,0x00,0x02,0x00,0x2b,0xfc,0x6e,0x34,0x6a,0x34,0x5e,0x01,
+0x02,0x00,0x2c,0xfc,0x6e,0x34,0xc9,0x37,0x36,0x6a,0x02,0x00,0x2d,0xfc,0x6e,0x34,
+0xba,0x37,0x88,0x01,0x02,0x00,0x2e,0xfc,0x6e,0x34,0xa8,0x34,0x02,0x6a,0x02,0x00,
+0x3a,0xfc,0x6e,0x34,0xa8,0x34,0x60,0x6a,0x04,0x00,0x3b,0xfc,0x6e,0x34,0x54,0x39,
+0x30,0x6b,0x02,0x00,0x3c,0xfc,0x6e,0x34,0xa8,0x34,0x8e,0x19,0x02,0x00,0x3d,0xfc,
+0x6e,0x34,0x6a,0x34,0xe6,0x80,0x0a,0x00,0x3e,0xfc,0x56,0x34,0xa8,0x34,0xc2,0x01,
+0x02,0x00,0x3f,0xfc,0x56,0x34,0xa8,0x34,0xc0,0x80,0x26,0x00,0x80,0xfc,0xbe,0x34,
+0xd1,0x34,0xd0,0x61,0xc0,0x00,0x81,0xfc,0x6e,0x34,0xa8,0x34,0x46,0x6a,0x02,0x00,
+0x82,0xfc,0x6e,0x34,0xa8,0x34,0x72,0x01,0x02,0x00,0x83,0xfc,0x6e,0x34,0xa8,0x34,
+0x74,0x01,0x02,0x00,0x84,0xfc,0x6e,0x34,0xc5,0x36,0x76,0x01,0x02,0x00,0x85,0xfc,
+0x6e,0x34,0xb1,0x36,0x90,0x62,0x02,0x00,0x87,0xfc,0x6e,0x34,0xa8,0x34,0x12,0x18,
+0x02,0x00,0x88,0xfc,0x6e,0x34,0xa8,0x34,0x10,0x18,0x02,0x00,0x89,0xfc,0x6e,0x34,
+0xa8,0x34,0xca,0x17,0x02,0x00,0x8a,0xfc,0x6e,0x34,0xa8,0x34,0x72,0x18,0x02,0x00,
+0x8b,0xfc,0x6e,0x34,0xa8,0x34,0xe8,0x00,0x02,0x00,0x8c,0xfc,0x6e,0x34,0xe5,0x37,
+0x14,0x18,0x02,0x00,0xa5,0xfc,0x6e,0x34,0x1f,0x37,0x0a,0x18,0x02,0x00,0xa6,0xfc,
+0x56,0x34,0x07,0x37,0x00,0x00,0x02,0x00,0x18,0xfc,0x6e,0x34,0xa8,0x34,0x52,0x17,
+0x02,0x00,0xae,0xfc,0x6e,0x34,0xa8,0x34,0x9a,0x01,0x02,0x00,0x2f,0xfc,0x6e,0x34,
+0xa8,0x34,0x8a,0x01,0x02,0x00,0x30,0xfc,0x56,0x34,0x03,0x38,0x00,0x00,0x18,0x00,
+0x31,0xfc,0x56,0x34,0x6a,0x38,0x00,0x00,0x06,0x00,0x32,0xfc,0x56,0x34,0xa8,0x34,
+0xac,0x01,0x02,0x00,0x34,0xfc,0x56,0x34,0xa8,0x34,0x8e,0x80,0x20,0x00,0x35,0xfc,
+0x6e,0x34,0x6a,0x34,0xae,0x01,0x02,0x00,0x38,0xfc,0x1a,0x39,0x6a,0x34,0x00,0x00,
+0x08,0x00,0x39,0xfc,0x56,0x34,0x3e,0x39,0xc2,0x2b,0x08,0x00,0xb5,0xfc,0x6e,0x34,
+0xa8,0x34,0xce,0x6a,0x02,0x00,0xb6,0xfc,0x6e,0x34,0xa8,0x34,0xd0,0x6a,0x02,0x00,
+0x10,0xfd,0x6e,0x34,0x6a,0x34,0x36,0x01,0x02,0x00,0x11,0xfd,0x16,0x36,0x6a,0x34,
+0xe0,0xf1,0x0c,0x00,0x12,0xfd,0x16,0x36,0x6a,0x34,0xee,0xf1,0x02,0x00,0x13,0xfd,
+0xd6,0x35,0x6a,0x34,0x00,0x04,0xe0,0x01,0x14,0xfd,0x6e,0x34,0x6a,0x34,0xce,0x17,
+0x02,0x00,0x15,0xfd,0x6e,0x34,0x6a,0x34,0x18,0x18,0x24,0x00,0x16,0xfd,0x6e,0x34,
+0x6a,0x34,0xf6,0x17,0x10,0x00,0x17,0xfd,0x6e,0x34,0x6a,0x34,0xf2,0x17,0x02,0x00,
+0x18,0xfd,0x6e,0x34,0x6a,0x34,0x0c,0x18,0x04,0x00,0x1b,0xfd,0x6e,0x34,0x6a,0x34,
+0x08,0x18,0x02,0x00,0x1c,0xfd,0x6e,0x34,0x6a,0x34,0x3c,0x00,0x02,0x00,0x24,0xfd,
+0x6e,0x34,0x6a,0x34,0x40,0x18,0x0c,0x00,0x25,0xfd,0x6e,0x34,0x6a,0x34,0x4e,0x18,
+0x0c,0x00,0x26,0xfd,0x16,0x36,0x6a,0x34,0x08,0xf2,0x20,0x00,0x27,0xfd,0x16,0x36,
+0x6a,0x34,0x28,0xf2,0x38,0x00,0x45,0xfd,0x6e,0x34,0x6a,0x34,0xe8,0x00,0x02,0x00,
+0x47,0xfd,0x6e,0x34,0x6a,0x34,0x3a,0x01,0x02,0x00,0x48,0xfd,0x37,0x36,0x6a,0x34,
+0x52,0x01,0x02,0x00,0x49,0xfd,0x37,0x36,0x6a,0x34,0x54,0x01,0x02,0x00,0x4a,0xfd,
+0x6e,0x34,0x6a,0x34,0x76,0x18,0x02,0x00,0x4b,0xfd,0x6e,0x34,0x6a,0x34,0x78,0x18,
+0x02,0x00,0x4d,0xfd,0x16,0x36,0x6a,0x34,0xf0,0xf1,0x04,0x00,0x50,0xfd,0x6e,0x34,
+0x6a,0x34,0x24,0x63,0x12,0x00,0x4f,0xfd,0x16,0x36,0x6a,0x34,0xec,0xf1,0x02,0x00,
+0xc0,0xfd,0x16,0x36,0x6a,0x34,0xf4,0xf1,0x02,0x00,0xc1,0xfd,0x6e,0x34,0x6a,0x34,
+0xe6,0x00,0x02,0x00,0xc2,0xfd,0x45,0x36,0x6a,0x34,0x00,0x00,0x02,0x00,0xc3,0xfd,
+0x16,0x36,0x6a,0x34,0xf6,0xf1,0x02,0x00,0xc6,0xfd,0x6e,0x34,0x6a,0x34,0x68,0x18,
+0x0a,0x00,0x20,0xfd,0xfd,0x35,0x6a,0x34,0xce,0xf1,0x08,0x00,0x21,0xfd,0xfd,0x35,
+0x6a,0x34,0xd6,0xf1,0x0a,0x00,0x29,0xfd,0x6e,0x34,0x6a,0x34,0x10,0x3f,0x06,0x00,
+0x22,0xfd,0xfd,0x35,0x6a,0x34,0xb0,0xf1,0x0a,0x00,0x23,0xfd,0xfd,0x35,0x6a,0x34,
+0xc4,0xf1,0x0a,0x00,0x40,0xfd,0x6e,0x34,0x6a,0x34,0x7a,0x01,0x02,0x00,0x41,0xfd,
+0x6e,0x34,0x6a,0x34,0x92,0x62,0x22,0x00,0x42,0xfd,0x6e,0x34,0xa3,0x34,0xea,0x00,
+0x06,0x00,0x43,0xfd,0x60,0x36,0x6a,0x34,0x00,0x00,0x06,0x00,0x44,0xfd,0x55,0x36,
+0x6a,0x34,0x86,0x00,0x02,0x00,0x46,0xfd,0x6e,0x34,0x6a,0x34,0x96,0x19,0x0c,0x00,
+0x4c,0xfd,0x6e,0x34,0x6a,0x34,0x60,0x19,0x02,0x00,0x8d,0xfc,0x6e,0x34,0x6a,0x34,
+0x74,0x00,0x02,0x00,0x8f,0xfc,0x6e,0x34,0x6a,0x34,0x16,0x18,0x02,0x00,0xa7,0xfc,
+0x6e,0x34,0x6a,0x34,0x22,0x6a,0x04,0x00,0xfe,0xff,0x16,0x36,0x6a,0x34,0xf8,0xf1,
+0x02,0x00,0xff,0xff,0x16,0x36,0x6a,0x34,0xfa,0xf1,0x0e,0x00,0x00,0xf1,0x2a,0x00,
+0x58,0x35,0x01,0xf1,0x80,0x08,0x27,0x35,0x02,0xf1,0x80,0x08,0x5f,0x35,0x03,0xf1,
+0x96,0x00,0xc7,0x38,0x04,0xf1,0x90,0x1a,0x9a,0x35,0x71,0x1a,0x28,0x19,0x2d,0x19,
+0xf7,0x19,0x4c,0x1a,0xa7,0x19,0x04,0x19,0xaf,0x19,0xb7,0x19,0x74,0x19,0xf0,0x18,
+0x63,0x1a,0x63,0x1a,0xb3,0x23,0xe6,0x23,0xe3,0x23,0x03,0x23,0xe6,0x23,0xe6,0x23,
+0x00,0x00,0xec,0x23,0xec,0x23,0xec,0x23,0x00,0x00,0x00,0x00,0x76,0x24,0x8f,0x24,
+0x04,0x23,0x00,0x00,0x01,0x24,0x00,0x00,0x00,0x00,0x9b,0x16,0x00,0x02,0x48,0x04,
+0x48,0x06,0x80,0x08,0x03,0x0a,0x04,0x0c,0x04,0x0e,0x00,0x10,0xe4,0x12,0xbb,0x14,
+0x1b,0x16,0x00,0x18,0x00,0x1a,0x00,0x1c,0x5c,0x1e,0xc1,0x20,0x20,0x22,0x74,0x24,
+0x07,0x26,0x0a,0x28,0x16,0x2a,0x00,0x2c,0x00,0x2e,0x1c,0x30,0x20,0x32,0x98,0x34,
+0x08,0x36,0x7a,0x38,0x0a,0x3a,0x24,0x3c,0xb2,0x3e,0x00,0x40,0x00,0x42,0x00,0x44,
+0x0c,0x46,0x26,0x48,0x5b,0x4a,0x7f,0x4c,0x29,0x4e,0x0f,0x50,0x20,0x52,0x20,0x54,
+0x10,0x56,0x10,0x58,0x10,0x5a,0x10,0x5c,0x1e,0x5e,0x1a,0x60,0x18,0x62,0x00,0x2c,
 0x0c,0x2e,0x01,0x2c,0x10,0x2e,0x02,0x2c,0x14,0x2e,0x03,0x2c,0x18,0x2e,0x04,0x2c,
 0x1c,0x2e,0x05,0x2c,0x20,0x2e,0x06,0x2c,0x24,0x2e,0x07,0x2c,0x28,0x2e,0x08,0x2c,
 0x2e,0x2e,0x09,0x2c,0x34,0x2e,0x0a,0x2c,0x38,0x2e,0x0b,0x2c,0x3c,0x2e,0x0c,0x2c,
@@ -4129,52 +4347,66 @@
 0x4b,0x2e,0x11,0x2c,0x50,0x2e,0x12,0x2c,0x55,0x2e,0x13,0x2c,0x5a,0x2e,0x14,0x2c,
 0x63,0x2e,0x15,0x2c,0x6d,0x2e,0x16,0x2c,0x76,0x2e,0x17,0x2c,0x7f,0x2e,0x18,0x2c,
 0x7f,0x2e,0x19,0x2c,0x7f,0x2e,0x1a,0x2c,0x7f,0x2e,0x1b,0x2c,0x7f,0x2e,0x1c,0x2c,
-0x7f,0x2e,0x1d,0x2c,0x7f,0x2e,0x1e,0x2c,0x7f,0x2e,0x1f,0x2c,0x7f,0x2e,0x00,0x00,
-0x04,0x00,0x65,0x00,0x00,0x00,0x00,0x00,0x67,0x00,0x00,0x00,0x00,0x00,0xb0,0x00,
-0x00,0x00,0x5c,0x00,0x32,0x00,0x00,0x00,0x04,0x00,0x65,0x00,0x00,0x00,0x00,0x00,
-0xb0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7e,0x00,0x5a,0x00,0x00,0x00,
-0x7e,0x00,0x6e,0x00,0x00,0x00,0x80,0x00,0x02,0x00,0x00,0x00,0x80,0x00,0x16,0x00,
-0x00,0x00,0x80,0x00,0x2a,0x00,0x00,0x00,0x80,0x00,0x3e,0x00,0x00,0x00,0x80,0x00,
-0x52,0x00,0x00,0x00,0x80,0x00,0x66,0x00,0x00,0x00,0x80,0x00,0x7a,0x00,0x00,0x00,
-0x82,0x00,0x0e,0x00,0x00,0x00,0x82,0x00,0x22,0x00,0x00,0x00,0x82,0x00,0x36,0x00,
-0x00,0x00,0x82,0x00,0x4a,0x00,0x00,0x00,0x82,0x00,0x7a,0x00,0x10,0x3b,0x10,0x3b,
-0x10,0x3b,0x10,0x3b,0x10,0x3b,0x10,0x3b,0x10,0x3b,0x10,0x3b,0x1b,0x3b,0x10,0x3b,
-0x10,0x3b,0x30,0x3b,0x10,0x3b,0x10,0x3b,0x63,0x3b,0x71,0x3b,0x10,0x3b,0x10,0x3b,
-0x10,0x3b,0x10,0x3b,0x10,0x3b,0x10,0x3b,0x10,0x3b,0x10,0x3b,0x10,0x3b,0x10,0x3b,
-0x10,0x3b,0x10,0x3b,0x10,0x3b,0x10,0x3b,0x10,0x3b,0x10,0x3b,0xd5,0x3b,0x24,0x3c,
-0x49,0x3c,0x42,0x3c,0x2e,0x3c,0x38,0x3c,0x10,0x3b,0x10,0x3b,0x10,0x3b,0x4b,0x3c,
-0x61,0x3c,0x68,0x3c,0x12,0x00,0x02,0x00,0x72,0x0e,0x04,0x00,0x8b,0x0e,0x06,0x00,
-0x39,0x0f,0x08,0x00,0x50,0x0f,0x0a,0x00,0x73,0x0f,0x0c,0x00,0x2e,0x10,0x12,0x00,
-0x47,0x18,0x1a,0x00,0x88,0x25,0x00,0x09,0x16,0x0c,0x02,0x09,0x04,0x33,0x04,0x09,
-0x11,0x34,0x06,0x09,0x54,0x34,0x14,0x09,0x16,0x31,0x16,0x09,0x32,0x31,0x42,0x09,
-0x92,0x34,0x22,0x09,0x64,0x34,0x64,0x09,0x5c,0x34,0x70,0x09,0x02,0x3b,0x03,0x00,
-0x00,0x00,0x53,0x70,0x65,0x63,0x74,0x72,0x75,0x6d,0x32,0x34,0x2f,0x48,0x44,0x52,
+0x7f,0x2e,0x1d,0x2c,0x7f,0x2e,0x1e,0x2c,0x7f,0x2e,0x1f,0x2c,0x7f,0x2e,0x00,0x02,
+0x01,0x04,0x38,0x06,0x80,0x08,0x03,0x0a,0x04,0x0c,0x04,0x0e,0x00,0x10,0xa2,0x12,
+0xc8,0x14,0x1b,0x16,0x00,0x18,0x00,0x1a,0x00,0x1c,0x5c,0x1e,0xc1,0x20,0x1e,0x22,
+0x54,0x24,0x07,0x26,0x6a,0x28,0x12,0x2a,0x00,0x2c,0x00,0x2e,0x1c,0x30,0x20,0x32,
+0x82,0x34,0x08,0x36,0x7a,0x38,0xca,0x3a,0x24,0x3c,0xb6,0x3e,0x00,0x40,0x00,0x42,
+0x00,0x44,0x7f,0x46,0x8b,0x48,0x0f,0x4a,0x06,0x4c,0x0a,0x4e,0x0f,0x50,0x20,0x52,
+0x20,0x54,0x10,0x56,0x10,0x58,0x20,0x5a,0xee,0x5c,0x1a,0x5e,0x26,0x60,0x5b,0x62,
+0x00,0x04,0x00,0x2c,0x0c,0x2e,0x01,0x2c,0x10,0x2e,0x02,0x2c,0x14,0x2e,0x03,0x2c,
+0x18,0x2e,0x04,0x2c,0x1c,0x2e,0x05,0x2c,0x20,0x2e,0x06,0x2c,0x24,0x2e,0x07,0x2c,
+0x28,0x2e,0x08,0x2c,0x2e,0x2e,0x09,0x2c,0x34,0x2e,0x0a,0x2c,0x38,0x2e,0x0b,0x2c,
+0x3c,0x2e,0x0c,0x2c,0x3f,0x2e,0x0d,0x2c,0x43,0x2e,0x0e,0x2c,0x46,0x2e,0x0f,0x2c,
+0x48,0x2e,0x10,0x2c,0x4b,0x2e,0x11,0x2c,0x50,0x2e,0x12,0x2c,0x55,0x2e,0x13,0x2c,
+0x5a,0x2e,0x14,0x2c,0x63,0x2e,0x15,0x2c,0x6d,0x2e,0x16,0x2c,0x76,0x2e,0x17,0x2c,
+0x7f,0x2e,0x18,0x2c,0x7f,0x2e,0x19,0x2c,0x7f,0x2e,0x1a,0x2c,0x7f,0x2e,0x1b,0x2c,
+0x7f,0x2e,0x1c,0x2c,0x7f,0x2e,0x1d,0x2c,0x7f,0x2e,0x1e,0x2c,0x7f,0x2e,0x1f,0x2c,
+0x7f,0x2e,0x00,0x00,0x04,0x00,0x65,0x00,0x00,0x00,0x00,0x00,0x67,0x00,0x00,0x00,
+0x00,0x00,0xb0,0x00,0x00,0x00,0x5c,0x00,0x32,0x00,0x00,0x00,0x04,0x00,0x65,0x00,
+0x00,0x00,0x00,0x00,0xb0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7e,0x00,
+0x5a,0x00,0x00,0x00,0x7e,0x00,0x6e,0x00,0x00,0x00,0x80,0x00,0x02,0x00,0x00,0x00,
+0x80,0x00,0x16,0x00,0x00,0x00,0x80,0x00,0x2a,0x00,0x00,0x00,0x80,0x00,0x3e,0x00,
+0x00,0x00,0x80,0x00,0x52,0x00,0x00,0x00,0x80,0x00,0x66,0x00,0x00,0x00,0x80,0x00,
+0x7a,0x00,0x00,0x00,0x82,0x00,0x0e,0x00,0x00,0x00,0x82,0x00,0x22,0x00,0x00,0x00,
+0x82,0x00,0x36,0x00,0x00,0x00,0x82,0x00,0x4a,0x00,0x00,0x00,0x82,0x00,0x7a,0x00,
+0x17,0x3b,0x17,0x3b,0x17,0x3b,0x17,0x3b,0x17,0x3b,0x17,0x3b,0x17,0x3b,0x17,0x3b,
+0x22,0x3b,0x17,0x3b,0x17,0x3b,0x37,0x3b,0x17,0x3b,0x17,0x3b,0x6a,0x3b,0x78,0x3b,
+0x17,0x3b,0x17,0x3b,0x17,0x3b,0x17,0x3b,0x17,0x3b,0x17,0x3b,0x17,0x3b,0x17,0x3b,
+0x17,0x3b,0x17,0x3b,0x17,0x3b,0x17,0x3b,0x17,0x3b,0x17,0x3b,0x17,0x3b,0x17,0x3b,
+0xdc,0x3b,0x2b,0x3c,0x50,0x3c,0x49,0x3c,0x35,0x3c,0x3f,0x3c,0x17,0x3b,0x17,0x3b,
+0x17,0x3b,0x52,0x3c,0x68,0x3c,0x6f,0x3c,0x12,0x00,0x02,0x00,0x45,0x0e,0x04,0x00,
+0x5e,0x0e,0x06,0x00,0x0c,0x0f,0x08,0x00,0x23,0x0f,0x0a,0x00,0x46,0x0f,0x0c,0x00,
+0xf0,0x0f,0x12,0x00,0xd6,0x17,0x1a,0x00,0xff,0x24,0x00,0x09,0x16,0x0c,0x02,0x09,
+0xa9,0x32,0x04,0x09,0xb6,0x33,0x06,0x09,0xf9,0x33,0x14,0x09,0xbe,0x30,0x16,0x09,
+0xda,0x30,0x42,0x09,0x37,0x34,0x22,0x09,0x09,0x34,0x64,0x09,0x01,0x34,0x70,0x09,
+0x09,0x3b,0x03,0x00,0x00,0x00,0x53,0x70,0x65,0x63,0x74,0x72,0x75,0x6d,0x32,0x34,
+0x2f,0x48,0x44,0x52,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
+0x20,0x20,0x20,0x20,0x20,0x20,0x14,0x00,0x6e,0x6f,0x6e,0x2d,0x73,0x70,0x65,0x63,
+0x69,0x66,0x69,0x65,0x64,0x20,0x53,0x53,0x49,0x44,0x20,0x21,0x21,0x20,0x20,0x20,
+0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00,0x00,0x01,0x00,0x01,0x00,0x64,0x00,
+0x64,0x00,0x00,0x00,0x50,0x72,0x69,0x73,0x6d,0x20,0x20,0x49,0x00,0x20,0x20,0x20,
 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
-0x20,0x20,0x14,0x00,0x6e,0x6f,0x6e,0x2d,0x73,0x70,0x65,0x63,0x69,0x66,0x69,0x65,
-0x64,0x20,0x53,0x53,0x49,0x44,0x20,0x21,0x21,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
-0x20,0x20,0x20,0x20,0x00,0x00,0x01,0x00,0x01,0x00,0x64,0x00,0x64,0x00,0x00,0x00,
-0x50,0x72,0x69,0x73,0x6d,0x20,0x20,0x49,0x00,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
+0x20,0x20,0x20,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x05,0x00,
+0x03,0x00,0x00,0x00,0x53,0x70,0x65,0x63,0x74,0x72,0x75,0x6d,0x32,0x34,0x2f,0x48,
+0x44,0x52,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
+0x20,0x20,0x20,0x20,0x14,0x00,0x6e,0x6f,0x6e,0x2d,0x73,0x70,0x65,0x63,0x69,0x66,
+0x69,0x65,0x64,0x20,0x53,0x53,0x49,0x44,0x20,0x21,0x21,0x20,0x20,0x20,0x20,0x20,
+0x20,0x20,0x20,0x20,0x20,0x20,0x00,0x00,0x01,0x00,0x01,0x00,0x64,0x00,0x64,0x00,
+0x00,0x00,0x50,0x72,0x69,0x73,0x6d,0x20,0x20,0x49,0x00,0x20,0x20,0x20,0x20,0x20,
 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
-0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x05,0x00,0x03,0x00,0x00,0x00,
-0x53,0x70,0x65,0x63,0x74,0x72,0x75,0x6d,0x32,0x34,0x2f,0x48,0x44,0x52,0x20,0x20,
-0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
-0x14,0x00,0x6e,0x6f,0x6e,0x2d,0x73,0x70,0x65,0x63,0x69,0x66,0x69,0x65,0x64,0x20,
-0x53,0x53,0x49,0x44,0x20,0x21,0x21,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
-0x20,0x20,0x00,0x00,0x01,0x00,0x01,0x00,0x64,0x00,0x64,0x00,0x00,0x00,0x50,0x72,
-0x69,0x73,0x6d,0x20,0x20,0x49,0x00,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
-0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00,0x00,
-0x80,0x01,0x2c,0x00,0x01,0x00,0xb6,0x00,0xc0,0x00,0xd4,0x00,0xee,0x00,0xfe,0x00,
-0x00,0x00,0x00,0x00,0x12,0x00,0x0f,0x00,0x0c,0x00,0x07,0x00,0x00,0x00,0x00,0x00,
-0x02,0x00,0x01,0x00,0x03,0x00,0x03,0x00,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
-0x00,0x00,0x4a,0x1b,0x40,0x1d,0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x20,0x20,
-0x53,0x74,0x61,0x6e,0x64,0x61,0x72,0x64,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x20,0x20,0x00,0x00,0x80,0x01,0x2c,0x00,0x01,0x00,0xb6,0x00,0xc0,0x00,0xd4,0x00,
+0xee,0x00,0xfe,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x0f,0x00,0x0c,0x00,0x07,0x00,
+0x00,0x00,0x00,0x00,0x02,0x00,0x01,0x00,0x03,0x00,0x03,0x00,0x7f,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x33,0x2e,0x31,0x30,0x2d,0x30,0x36,0x00,0x00,
-0x00,0x00,0x00,0x00,0x30,0x32,0x2f,0x32,0x31,0x2f,0x32,0x30,0x30,0x32,0x00,0x00,
-0x00,0x00,0x01,0x00,0x04,0x00,0x82,0x84,0x8b,0x96,0x00,0x00,0x00,0x00,0x04,0x00,
-0x02,0x04,0x0b,0x16,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x00,0x02,0x00,0x02,
+0x08,0x00,0x00,0x00,0x00,0x00,0x12,0x1e,0x08,0x20,0x00,0x00,0x00,0x00,0x00,0x00,
+0x12,0x00,0x20,0x20,0x53,0x74,0x61,0x6e,0x64,0x61,0x72,0x64,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x33,0x2e,0x37,0x30,0x2d,
+0x32,0x37,0x00,0x00,0x00,0x00,0x00,0x00,0x31,0x32,0x2f,0x31,0x31,0x2f,0x32,0x30,
+0x30,0x32,0x00,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x82,0x84,0x8b,0x96,0x00,0x00,
+0x00,0x00,0x04,0x00,0x02,0x04,0x0b,0x16,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,
+0x00,0x02,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
@@ -4188,113 +4420,150 @@
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x1f,0x00,0x28,0x3f,0x3f,0x49,0x6e,
-0x74,0x27,0x6c,0x2d,0x73,0x65,0x61,0x72,0x63,0x68,0x20,0x20,0x20,0x20,0x20,0x20,
-0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
-0x20,0x20,0x7d,0x00,0xff,0x3f,0x04,0x00,0xfa,0x00,0xc8,0x00,0xf4,0x01,0x05,0x00,
-0x07,0x00,0xfa,0x00,0xc8,0x00,0x2c,0x01,0x05,0x00,0x0a,0x00,0xfa,0x00,0x32,0x00,
-0x64,0x00,0x05,0x00,0x0a,0x00,0xfa,0x00,0x32,0x00,0x32,0x00,0x05,0x00,0x0a,0x00,
-0xfa,0x00,0x19,0x00,0x19,0x00,0x05,0x00,0x35,0x44,0x5d,0x65,0xf7,0x98,0xd9,0x6e,
-0x42,0xf7,0xb8,0x74,0xdc,0x15,0xfc,0xf8,0x82,0x05,0x79,0xf3,0x09,0x59,0x97,0x30,
-0xee,0x53,0x7b,0x83,0x15,0x46,0xbd,0x2c,0xd1,0x91,0x43,0x08,0x1e,0x7f,0xfc,0x8f,
-0x7f,0x00,0x00,0x05,0xc9,0x60,0x53,0x68,0xf4,0xd2,0x88,0x06,0x22,0x14,0x39,0x09,
-0xf5,0x9f,0x05,0x27,0x74,0xfe,0xec,0x75,0x1f,0x42,0xf2,0x0c,0xae,0xb0,0x1b,0xfd,
-0xb5,0x76,0x03,0x39,0x35,0x2a,0x7f,0x42,0x2f,0x45,0xd9,0xd4,0x49,0xe6,0xf8,0xd9,
-0x86,0xee,0x78,0x42,0xca,0x54,0x39,0x10,0x17,0x89,0x15,0xfc,0xcd,0x61,0x9c,0x76,
-0xdc,0xbe,0x02,0x0a,0x46,0xb6,0xea,0xad,0x47,0xaa,0x89,0x11,0x97,0xf1,0x0b,0xec,
-0x22,0x6d,0xf3,0x33,0xd3,0xef,0x02,0x6f,0x58,0xb8,0x73,0x50,0x2a,0x8b,0xe8,0x3a,
-0x53,0xa8,0xe9,0x09,0xbf,0xbc,0x57,0x47,0x83,0xdb,0x5e,0xb1,0x62,0x82,0x5c,0xb2,
-0x71,0x5f,0x23,0x67,0xfd,0xcb,0xe0,0xd1,0x0d,0xe8,0xab,0x44,0x33,0x0f,0x4c,0x76,
-0x92,0x32,0x65,0xb1,0x7e,0xca,0xed,0x21,0x5e,0x45,0xba,0x92,0xa4,0x67,0x67,0x9e,
-0x23,0x33,0x8e,0x6a,0xa1,0xe9,0x94,0x3a,0x39,0xef,0x34,0xb3,0x65,0x96,0x3b,0x6e,
-0x46,0xbd,0xd0,0xc3,0x22,0x87,0x54,0xad,0xbc,0x89,0xd6,0x3a,0x3a,0x99,0xe0,0x89,
-0x0e,0xcf,0xfe,0xa3,0x0a,0x1a,0x68,0x6f,0xcb,0xd7,0xa6,0x25,0xd1,0x25,0x4d,0xc0,
-0x86,0xd8,0x9b,0xf7,0xe2,0xd5,0xf7,0xa3,0x0c,0x33,0xe3,0x83,0x87,0xff,0x4c,0x9d,
-0xd6,0xd6,0x89,0x9a,0x0c,0x38,0xa0,0xe8,0xef,0x52,0x1b,0x0e,0xbb,0x52,0xbc,0x9f,
-0xde,0xbf,0x1a,0xc8,0xf0,0xd0,0xd9,0x54,0xc2,0x6c,0x53,0xa8,0x1b,0xc4,0x17,0x42,
-0x1d,0x51,0x2e,0xc8,0x8e,0xe7,0x63,0x5c,0x00,0xd6,0xc5,0x0d,0xcd,0xeb,0xab,0x59,
-0x13,0xf3,0x02,0x82,0x0c,0x2c,0x36,0x3c,0xe7,0x21,0xb8,0xf9,0x57,0x67,0xdd,0xae,
-0x1d,0x6e,0x39,0x06,0xe2,0xd2,0x16,0x1f,0x8e,0x2c,0xec,0x5f,0x71,0xf1,0x01,0x8b,
-0x6b,0x52,0x72,0x04,0x49,0xa8,0x8b,0xa7,0x27,0xe3,0x3c,0xfa,0x55,0x45,0x94,0x54,
-0xcc,0x68,0xc9,0xf9,0x35,0xa8,0xa5,0x8c,0xa2,0x5c,0xb8,0x7f,0x24,0xe5,0x6e,0x15,
-0xe4,0xdd,0x97,0xf2,0xe8,0x84,0xf9,0xcf,0x92,0x98,0x70,0x25,0x24,0xf3,0x6a,0x39,
-0x15,0x11,0xa0,0x40,0xa2,0x99,0x58,0x7a,0xa2,0x9b,0x2a,0xb2,0x74,0xa4,0x7d,0x2d,
-0x7e,0x5e,0x0e,0xf5,0x59,0x37,0xf6,0x50,0x9f,0x06,0xf3,0x0d,0x03,0x87,0xcc,0x18,
-0xb5,0xca,0x44,0xf1,0x57,0x55,0xe2,0x5f,0x8c,0x82,0x6c,0x1e,0xb2,0x83,0x40,0x0f,
-0xef,0x6d,0x61,0x34,0x9d,0x8f,0x68,0x59,0xcb,0x22,0x9b,0x29,0x55,0x1a,0x87,0x3f,
-0x64,0x22,0x4a,0xbd,0x6c,0x7c,0x0e,0xc3,0x89,0x5d,0x2a,0x86,0xa2,0xb6,0xf5,0xa3,
-0xd8,0x36,0x90,0x08,0x95,0xee,0xca,0xb4,0x95,0xcc,0xa1,0x8b,0x98,0xc7,0x48,0xfd,
-0xa7,0xce,0xd6,0xc5,0x3b,0x7a,0x2e,0x3a,0x0e,0xf8,0x11,0x63,0xef,0xb5,0xd1,0x10,
-0xed,0x67,0xb7,0x25,0x26,0x23,0x2d,0xdb,0x8b,0xf8,0x50,0x8d,0xd1,0x2c,0x32,0x14,
-0xe5,0x92,0xd8,0x88,0x31,0x82,0x7c,0xa1,0x6e,0x59,0xf1,0x54,0xb7,0x6f,0xfa,0x00,
-0x64,0x5a,0x68,0x5a,0x6c,0x5a,0x70,0x5a,0x74,0x5a,0x80,0x5a,0x84,0x5a,0x88,0x5a,
-0x94,0x5a,0x98,0x5a,0xbe,0x5a,0xc2,0x5a,0xc6,0x5a,0xca,0x5a,0xce,0x5a,0xda,0xda,
-0xb8,0x67,0xb8,0x67,0xb8,0x67,0xb8,0x67,0xb8,0x67,0xb8,0x67,0xb8,0x67,0xb8,0x67,
-0xb8,0x67,0xdc,0xda,0xde,0x5a,0xb8,0xe7,0xb8,0xe7,0xe2,0x5a,0xe6,0x5a,0xb8,0x67,
-0xf0,0x5a,0xf4,0x5a,0xf8,0x5a,0xfc,0x5a,0x08,0x5b,0x0c,0x5b,0x10,0x5b,0x1c,0x5b,
-0x20,0x5b,0x4a,0x5b,0x4e,0x5b,0x52,0x5b,0x56,0x5b,0x5a,0x5b,0x66,0x5b,0xb8,0x67,
-0xb8,0xe7,0x7a,0x5b,0x7e,0xdb,0x80,0xdb,0x82,0xdb,0x84,0xdb,0x86,0x5b,0xb8,0xe7,
-0x8a,0x5b,0x8e,0xdb,0x90,0xdb,0x92,0xdb,0x94,0xdb,0x96,0xdb,0x98,0xdb,0xb8,0xe7,
-0xb8,0xe7,0x9a,0xdb,0x9c,0xdb,0x9e,0xdb,0xa0,0xdb,0xa4,0x5b,0xa8,0x5b,0xac,0x5b,
-0xb0,0x5b,0xb4,0xdb,0xb6,0xdb,0x0e,0x5a,0x12,0x5a,0x1c,0xda,0x1e,0xda,0xb8,0xe7,
-0x08,0xda,0x0a,0xda,0x0c,0xda,0x26,0xda,0x28,0xda,0x2a,0xda,0x34,0xda,0x36,0xda,
-0x3e,0xda,0x20,0xda,0x22,0xda,0x24,0xda,0x40,0xda,0x42,0xda,0x44,0xda,0x46,0xda,
-0x48,0xda,0x4a,0xda,0x50,0xda,0x52,0xda,0x54,0xda,0x56,0xda,0x58,0xda,0x5a,0xda,
-0x5c,0xda,0x5e,0xda,0x60,0xda,0x62,0xda,0xec,0xd9,0xee,0xd9,0xc6,0xd9,0xca,0xd9,
-0xcc,0xd9,0xce,0xd9,0xd0,0xd9,0xb8,0xe7,0x56,0x97,0xb8,0xe7,0x08,0x81,0x70,0x9e,
-0xda,0xd9,0xdc,0xd9,0xb8,0xe7,0xde,0xd9,0xf0,0xd9,0xf2,0xd9,0xb8,0xe7,0xf8,0xd9,
-0xfa,0xd9,0xfc,0xd9,0xfe,0xd9,0x00,0xda,0x02,0xda,0x04,0xda,0x06,0xda,0xba,0x5a,
-0x9c,0xda,0x9e,0xda,0xa0,0xda,0xa2,0xda,0xa4,0xda,0xa6,0x5a,0xaa,0x5a,0xae,0x5a,
-0xb2,0x5a,0xb6,0x5a,0x46,0x5b,0x28,0xdb,0x2a,0xdb,0x2c,0xdb,0x2e,0xdb,0x30,0xdb,
-0x32,0x5b,0x36,0x5b,0x3a,0x5b,0x3e,0x5b,0x42,0x5b,0x6a,0x5b,0x6e,0x5b,0x2c,0xda,
-0x2e,0xda,0x4c,0xda,0x4e,0xda,0xb8,0x67,0xc2,0xd9,0xc4,0xd9,0xb8,0xdf,0xb8,0xe7,
-0xc8,0xd9,0xa0,0x80,0xb8,0xe7,0xb8,0xe7,0xe0,0xd9,0xea,0xda,0xb8,0xe7,0x30,0xda,
-0xba,0xdf,0xe4,0xd9,0xa2,0xdb,0xe2,0xd9,0xe6,0xd9,0xec,0x5a,0x90,0x81,0xb8,0x67,
-0xb8,0x67,0xb8,0x67,0xb8,0x67,0xb8,0x67,0xb8,0x67,0xb8,0x67,0xb8,0x67,0xb8,0x67,
-0xb8,0x67,0xb8,0x67,0xb8,0x67,0xb8,0x67,0xb8,0x67,0xb8,0x67,0xb8,0x67,0xb8,0x67,
-0xb8,0x67,0xb8,0x67,0xb8,0x67,0xb8,0x67,0xb8,0x67,0xb8,0x67,0xb8,0x67,0xb8,0x67,
-0xb8,0x67,0xb8,0x67,0x3e,0xe7,0x3c,0xe7,0x38,0xda,0x3a,0xda,0xec,0x98,0xdc,0xe4,
-0xe0,0xe4,0xd4,0xd9,0xd6,0xd9,0x78,0x5a,0x7c,0x5a,0x8c,0x5a,0x90,0x5a,0xd2,0x5a,
-0xd6,0x5a,0x00,0x5b,0x04,0x5b,0x14,0x5b,0x18,0x5b,0x5e,0x5b,0x62,0x5b,0x72,0x5b,
-0x76,0x5b,0xb2,0x1e,0xe8,0x59,0xea,0x59,0x42,0xe2,0x46,0xe2,0xfa,0x81,0x4c,0xbc,
-0x52,0xbc,0x58,0xbc,0x64,0xbc,0x6a,0xbc,0x88,0xbc,0x8e,0xbc,0xea,0x98,0xb0,0x80,
-0xb2,0x80,0xb4,0x80,0x11,0x00,0x00,0x00,0x00,0x00,0xd4,0x16,0x06,0x00,0x01,0x00,
-0x34,0x62,0x06,0x00,0x01,0x00,0x3c,0x62,0x06,0x00,0x01,0x00,0x7e,0x17,0x10,0x00,
-0x01,0x00,0xa0,0x17,0x24,0x00,0x01,0x00,0xc8,0x17,0x0e,0x00,0x01,0x00,0xe2,0x16,
-0x20,0x00,0x01,0x00,0xd0,0x5b,0xe8,0x03,0x14,0x00,0xbc,0x5f,0x78,0x00,0x14,0x00,
-0xe2,0x64,0xc0,0x01,0x10,0x00,0x58,0x62,0x80,0x02,0x10,0x00,0xa4,0x67,0x38,0x00,
-0x07,0x00,0x26,0x5a,0x99,0x01,0x01,0x00,0xc8,0x17,0x0e,0x00,0x01,0x00,0xd6,0x17,
-0x0e,0x00,0x01,0x00,0x02,0x01,0x06,0x00,0x01,0x00,0x90,0x67,0x00,0x00,0x00,0x00,
-0x34,0x12,0xaa,0x55,0x68,0x5a,0x02,0x00,0x6c,0x5a,0x02,0x00,0x70,0x5a,0x02,0x00,
-0x74,0x5a,0x02,0x00,0x80,0x5a,0x02,0x00,0x84,0x5a,0x02,0x00,0x88,0x5a,0x02,0x00,
-0xc2,0x5a,0x02,0x00,0xda,0x5a,0x01,0x00,0xf0,0x5a,0x02,0x00,0xf4,0x5a,0x02,0x00,
-0xf8,0x5a,0x02,0x00,0xfc,0x5a,0x02,0x00,0x08,0x5b,0x02,0x00,0x0c,0x5b,0x02,0x00,
-0x10,0x5b,0x02,0x00,0x1c,0x5b,0x02,0x00,0x4e,0x5b,0x02,0x00,0x1c,0x5a,0x01,0x00,
-0x1e,0x5a,0x01,0x00,0xb8,0x67,0x01,0x00,0x0a,0x5a,0x01,0x00,0x26,0x5a,0x01,0x00,
-0x34,0x5a,0x01,0x00,0x36,0x5a,0x01,0x00,0x40,0x5a,0x01,0x00,0x42,0x5a,0x01,0x00,
-0x44,0x5a,0x01,0x00,0x46,0x5a,0x01,0x00,0x48,0x5a,0x01,0x00,0x4a,0x5a,0x01,0x00,
-0xec,0x59,0x01,0x00,0xc6,0x59,0x01,0x00,0xb8,0x67,0x01,0x00,0x56,0x17,0x01,0x00,
-0xfe,0x00,0x01,0x00,0xa0,0x00,0x01,0x00,0x78,0x5a,0x02,0x00,0x7c,0x5a,0x02,0x00,
-0x8c,0x5a,0x02,0x00,0x90,0x5a,0x02,0x00,0x00,0x5b,0x02,0x00,0x04,0x5b,0x02,0x00,
-0x14,0x5b,0x02,0x00,0x18,0x5b,0x02,0x00,0xea,0x18,0x01,0x00,0xb0,0x00,0x01,0x00,
-0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x2a,0xe9,0x7e,0x00,0x0e,0x00,0x00,0x00,
-0x01,0x01,0x00,0x00,0x60,0x8d,0x7f,0x00,0x06,0x00,0x00,0x00,0x08,0x01,0x00,0x00,
-0x08,0x8e,0x7f,0x00,0x12,0x00,0x00,0x00,0x09,0x01,0x00,0x00,0x06,0x8e,0x7f,0x00,
-0x02,0x00,0x00,0x00,0x0a,0x01,0x00,0x00,0xe2,0x8d,0x7f,0x00,0x02,0x00,0x00,0x00,
-0x0b,0x01,0x00,0x00,0x2c,0x8e,0x7f,0x00,0x24,0x00,0x00,0x00,0x03,0x01,0x00,0x00,
-0x10,0xe9,0x7e,0x00,0x0c,0x00,0x00,0x00,0x04,0x01,0x00,0x00,0x0a,0x81,0x7f,0x00,
-0x02,0x00,0x00,0x00,0x05,0x01,0x00,0x00,0x66,0x8d,0x7f,0x00,0x02,0x00,0x00,0x00,
-0x05,0x01,0x00,0x00,0x40,0x81,0x7f,0x00,0x02,0x00,0x00,0x00,0x05,0x01,0x00,0x00,
-0x70,0x8e,0x7f,0x00,0x02,0x00,0x00,0x00,0x06,0x01,0x00,0x00,0x1c,0xe9,0x7e,0x00,
-0x02,0x00,0x00,0x00,0x07,0x01,0x00,0x00,0x1e,0xe9,0x7e,0x00,0x02,0x00,0x00,0x00,
-0x06,0x00,0x00,0x00,0xea,0xe8,0x7e,0x00,0x0a,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
-0xde,0x8d,0x7f,0x00,0x02,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0xe0,0x8d,0x7f,0x00,
-0x02,0x00,0x00,0x00,0x0c,0x01,0x00,0x00,0x38,0x81,0x7f,0x00,0x02,0x00,0x00,0x00,
-0x0d,0x01,0x00,0x00,0xe4,0x8d,0x7f,0x00,0x02,0x00,0x00,0x00,0x0e,0x01,0x00,0x00,
-0x1a,0x8e,0x7f,0x00,0x02,0x00,0x00,0x00,0x11,0x01,0x00,0x00,0x1c,0x8e,0x7f,0x00,
-0x02,0x00,0x00,0x00,0x00,0x18,0x7e,0x00,0x92,0xd1,0x00,0x00,0x01,0x00,0x00,0x00,
-0x05,0x00,0x01,0x00,0x21,0x00,0x02,0x00,0x02,0x00,0x01,0x00,0x06,0x00,0x02,0x00,
-0x00,0x00,0x04,0x00,0x02,0x00,0x01,0x00,0x01,0x00,0x06,0x00,0x02,0x00,0x01,0x00,
-0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x06,0x00,0x02,0x00,0x01,0x00,0x02,0x00,
-0x01,0x00,0x01,0x00,0x01,0x00,0x03,0x51,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf6,0x8f,0x7f,0x00,0xd8,0x07,
+0x00,0x00,0x48,0x22,0xc8,0x2a,0x3f,0x3f,0x49,0x6e,0x74,0x27,0x6c,0x2d,0x73,0x65,
+0x61,0x72,0x63,0x68,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
+0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x00,0xff,0x3f,
+0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x04,0x00,0xfa,0x00,0xc8,0x00,0xf4,0x01,0x05,0x00,0x07,0x00,0xfa,0x00,0xc8,0x00,
+0x2c,0x01,0x05,0x00,0x0a,0x00,0xfa,0x00,0x32,0x00,0x64,0x00,0x05,0x00,0x0a,0x00,
+0xfa,0x00,0x32,0x00,0x32,0x00,0x05,0x00,0x0a,0x00,0xfa,0x00,0x19,0x00,0x19,0x00,
+0x05,0x00,0x01,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x40,0x00,
+0x80,0x00,0x00,0x01,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x40,
+0x00,0x80,0x6a,0x01,0x3a,0x01,0x6a,0x01,0x3a,0x01,0x1a,0x01,0x02,0x01,0xba,0x00,
+0xa2,0x00,0xe8,0x00,0xdf,0x00,0x88,0x00,0x7f,0x00,0xd9,0x00,0xd5,0x00,0x79,0x00,
+0x75,0x00,0x35,0x44,0x5d,0x65,0xf7,0x98,0xd9,0x6e,0x42,0xf7,0xb8,0x74,0xdc,0x15,
+0xfc,0xf8,0x82,0x05,0x79,0xf3,0x09,0x59,0x97,0x30,0xee,0x53,0x7b,0x83,0x15,0x46,
+0xbd,0x2c,0xd1,0x91,0x43,0x08,0x1e,0x7f,0xc9,0x60,0x53,0x68,0xf4,0xd2,0x88,0x06,
+0x22,0x14,0x39,0x09,0xf5,0x9f,0x05,0x27,0x74,0xfe,0xec,0x75,0x1f,0x42,0xf2,0x0c,
+0xae,0xb0,0x1b,0xfd,0xb5,0x76,0x03,0x39,0x35,0x2a,0x7f,0x42,0x2f,0x45,0xd9,0xd4,
+0x49,0xe6,0xf8,0xd9,0x86,0xee,0x78,0x42,0xca,0x54,0x39,0x10,0x17,0x89,0x15,0xfc,
+0xcd,0x61,0x9c,0x76,0xdc,0xbe,0x02,0x0a,0x46,0xb6,0xea,0xad,0x47,0xaa,0x89,0x11,
+0x97,0xf1,0x0b,0xec,0x22,0x6d,0xf3,0x33,0xd3,0xef,0x02,0x6f,0x58,0xb8,0x73,0x50,
+0x2a,0x8b,0xe8,0x3a,0x53,0xa8,0xe9,0x09,0xbf,0xbc,0x57,0x47,0x83,0xdb,0x5e,0xb1,
+0x62,0x82,0x5c,0xb2,0x71,0x5f,0x23,0x67,0xfd,0xcb,0xe0,0xd1,0x0d,0xe8,0xab,0x44,
+0x33,0x0f,0x4c,0x76,0x92,0x32,0x65,0xb1,0x7e,0xca,0xed,0x21,0x5e,0x45,0xba,0x92,
+0xa4,0x67,0x67,0x9e,0x23,0x33,0x8e,0x6a,0xa1,0xe9,0x94,0x3a,0x39,0xef,0x34,0xb3,
+0x65,0x96,0x3b,0x6e,0x46,0xbd,0xd0,0xc3,0x22,0x87,0x54,0xad,0xbc,0x89,0xd6,0x3a,
+0x3a,0x99,0xe0,0x89,0x0e,0xcf,0xfe,0xa3,0x0a,0x1a,0x68,0x6f,0xcb,0xd7,0xa6,0x25,
+0xd1,0x25,0x4d,0xc0,0x86,0xd8,0x9b,0xf7,0xe2,0xd5,0xf7,0xa3,0x0c,0x33,0xe3,0x83,
+0x87,0xff,0x4c,0x9d,0xd6,0xd6,0x89,0x9a,0x0c,0x38,0xa0,0xe8,0xef,0x52,0x1b,0x0e,
+0xbb,0x52,0xbc,0x9f,0xde,0xbf,0x1a,0xc8,0xf0,0xd0,0xd9,0x54,0xc2,0x6c,0x53,0xa8,
+0x1b,0xc4,0x17,0x42,0x1d,0x51,0x2e,0xc8,0x8e,0xe7,0x63,0x5c,0x00,0xd6,0xc5,0x0d,
+0xcd,0xeb,0xab,0x59,0x13,0xf3,0x02,0x82,0x0c,0x2c,0x36,0x3c,0xe7,0x21,0xb8,0xf9,
+0x57,0x67,0xdd,0xae,0x1d,0x6e,0x39,0x06,0xe2,0xd2,0x16,0x1f,0x8e,0x2c,0xec,0x5f,
+0x71,0xf1,0x01,0x8b,0x6b,0x52,0x72,0x04,0x49,0xa8,0x8b,0xa7,0x27,0xe3,0x3c,0xfa,
+0x55,0x45,0x94,0x54,0xcc,0x68,0xc9,0xf9,0x35,0xa8,0xa5,0x8c,0xa2,0x5c,0xb8,0x7f,
+0x24,0xe5,0x6e,0x15,0xe4,0xdd,0x97,0xf2,0xe8,0x84,0xf9,0xcf,0x92,0x98,0x70,0x25,
+0x24,0xf3,0x6a,0x39,0x15,0x11,0xa0,0x40,0xa2,0x99,0x58,0x7a,0xa2,0x9b,0x2a,0xb2,
+0x74,0xa4,0x7d,0x2d,0x7e,0x5e,0x0e,0xf5,0x59,0x37,0xf6,0x50,0x9f,0x06,0xf3,0x0d,
+0x03,0x87,0xcc,0x18,0xb5,0xca,0x44,0xf1,0x57,0x55,0xe2,0x5f,0x8c,0x82,0x6c,0x1e,
+0xb2,0x83,0x40,0x0f,0xef,0x6d,0x61,0x34,0x9d,0x8f,0x68,0x59,0xcb,0x22,0x9b,0x29,
+0x55,0x1a,0x87,0x3f,0x64,0x22,0x4a,0xbd,0x6c,0x7c,0x0e,0xc3,0x89,0x5d,0x2a,0x86,
+0xa2,0xb6,0xf5,0xa3,0xd8,0x36,0x90,0x08,0x95,0xee,0xca,0xb4,0x95,0xcc,0xa1,0x8b,
+0x98,0xc7,0x48,0xfd,0xa7,0xce,0xd6,0xc5,0x3b,0x7a,0x2e,0x3a,0x0e,0xf8,0x11,0x63,
+0xef,0xb5,0xd1,0x10,0xed,0x67,0xb7,0x25,0x26,0x23,0x2d,0xdb,0x8b,0xf8,0x50,0x8d,
+0xd1,0x2c,0x32,0x14,0xe5,0x92,0xd8,0x88,0x31,0x82,0x7c,0xa1,0x6e,0x59,0xf1,0x54,
+0xb7,0x6f,0xa5,0xc6,0x84,0xf8,0x99,0xee,0x8d,0xf6,0x0d,0xff,0xbd,0xd6,0xb1,0xde,
+0x54,0x91,0x50,0x60,0x03,0x02,0xa9,0xce,0x7d,0x56,0x19,0xe7,0x62,0xb5,0xe6,0x4d,
+0x9a,0xec,0x45,0x8f,0x9d,0x1f,0x40,0x89,0x87,0xfa,0x15,0xef,0xeb,0xb2,0xc9,0x8e,
+0x0b,0xfb,0xec,0x41,0x67,0xb3,0xfd,0x5f,0xea,0x45,0xbf,0x23,0xf7,0x53,0x96,0xe4,
+0x5b,0x9b,0xc2,0x75,0x1c,0xe1,0xae,0x3d,0x6a,0x4c,0x5a,0x6c,0x41,0x7e,0x02,0xf5,
+0x4f,0x83,0x5c,0x68,0xf4,0x51,0x34,0xd1,0x08,0xf9,0x93,0xe2,0x73,0xab,0x53,0x62,
+0x3f,0x2a,0x0c,0x08,0x52,0x95,0x65,0x46,0x5e,0x9d,0x28,0x30,0xa1,0x37,0x0f,0x0a,
+0xb5,0x2f,0x09,0x0e,0x36,0x24,0x9b,0x1b,0x3d,0xdf,0x26,0xcd,0x69,0x4e,0xcd,0x7f,
+0x9f,0xea,0x1b,0x12,0x9e,0x1d,0x74,0x58,0x2e,0x34,0x2d,0x36,0xb2,0xdc,0xee,0xb4,
+0xfb,0x5b,0xf6,0xa4,0x4d,0x76,0x61,0xb7,0xce,0x7d,0x7b,0x52,0x3e,0xdd,0x71,0x5e,
+0x97,0x13,0xf5,0xa6,0x68,0xb9,0x00,0x00,0x2c,0xc1,0x60,0x40,0x1f,0xe3,0xc8,0x79,
+0xed,0xb6,0xbe,0xd4,0x46,0x8d,0xd9,0x67,0x4b,0x72,0xde,0x94,0xd4,0x98,0xe8,0xb0,
+0x4a,0x85,0x6b,0xbb,0x2a,0xc5,0xe5,0x4f,0x16,0xed,0xc5,0x86,0xd7,0x9a,0x55,0x66,
+0x94,0x11,0xcf,0x8a,0x10,0xe9,0x06,0x04,0x81,0xfe,0xf0,0xa0,0x44,0x78,0xba,0x25,
+0xe3,0x4b,0xf3,0xa2,0xfe,0x5d,0xc0,0x80,0x8a,0x05,0xad,0x3f,0xbc,0x21,0x48,0x70,
+0x04,0xf1,0xdf,0x63,0xc1,0x77,0x75,0xaf,0x63,0x42,0x30,0x20,0x1a,0xe5,0x0e,0xfd,
+0x6d,0xbf,0x4c,0x81,0x14,0x18,0x35,0x26,0x2f,0xc3,0xe1,0xbe,0xa2,0x35,0xcc,0x88,
+0x39,0x2e,0x57,0x93,0xf2,0x55,0x82,0xfc,0x47,0x7a,0xac,0xc8,0xe7,0xba,0x2b,0x32,
+0x95,0xe6,0xa0,0xc0,0x98,0x19,0xd1,0x9e,0x7f,0xa3,0x66,0x44,0x7e,0x54,0xab,0x3b,
+0x83,0x0b,0xca,0x8c,0x29,0xc7,0xd3,0x6b,0x3c,0x28,0x79,0xa7,0xe2,0xbc,0x1d,0x16,
+0x76,0xad,0x3b,0xdb,0x56,0x64,0x4e,0x74,0x1e,0x14,0xdb,0x92,0x0a,0x0c,0x6c,0x48,
+0xe4,0xb8,0x5d,0x9f,0x6e,0xbd,0xef,0x43,0xa6,0xc4,0xa8,0x39,0xa4,0x31,0x37,0xd3,
+0x8b,0xf2,0x32,0xd5,0x43,0x8b,0x59,0x6e,0xb7,0xda,0x8c,0x01,0x64,0xb1,0xd2,0x9c,
+0xe0,0x49,0xb4,0xd8,0xfa,0xac,0x07,0xf3,0x25,0xcf,0xaf,0xca,0x8e,0xf4,0xe9,0x47,
+0x18,0x10,0xd5,0x6f,0x88,0xf0,0x6f,0x4a,0x72,0x5c,0x24,0x38,0xf1,0x57,0xc7,0x73,
+0x51,0x97,0x23,0xcb,0x7c,0xa1,0x9c,0xe8,0x21,0x3e,0xdd,0x96,0xdc,0x61,0x86,0x0d,
+0x85,0x0f,0x90,0xe0,0x42,0x7c,0xc4,0x71,0xaa,0xcc,0xd8,0x90,0x05,0x06,0x01,0xf7,
+0x12,0x1c,0xa3,0xc2,0x5f,0x6a,0xf9,0xae,0xd0,0x69,0x91,0x17,0x58,0x99,0x27,0x3a,
+0xb9,0x27,0x38,0xd9,0x13,0xeb,0xb3,0x2b,0x33,0x22,0xbb,0xd2,0x70,0xa9,0x89,0x07,
+0xa7,0x33,0xb6,0x2d,0x22,0x3c,0x92,0x15,0x20,0xc9,0x49,0x87,0xff,0xaa,0x78,0x50,
+0x7a,0xa5,0x8f,0x03,0xf8,0x59,0x80,0x09,0x17,0x1a,0xda,0x65,0x31,0xd7,0xc6,0x84,
+0xb8,0xd0,0xc3,0x82,0xb0,0x29,0x77,0x5a,0x11,0x1e,0xcb,0x7b,0xfc,0xa8,0xd6,0x6d,
+0x3a,0x2c,0xfa,0x00,0x56,0x63,0x5a,0x63,0x5e,0x63,0x62,0x63,0x66,0x63,0x72,0x63,
+0x76,0x63,0x7a,0x63,0x86,0x63,0x8a,0x63,0xb0,0x63,0xb4,0x63,0xb8,0x63,0xbc,0x63,
+0xc0,0x63,0xcc,0xe3,0x90,0x6a,0x90,0x6a,0x90,0x6a,0x90,0x6a,0x90,0x6a,0x90,0x6a,
+0x90,0x6a,0x90,0x6a,0x90,0x6a,0xce,0xe3,0xd0,0x63,0x90,0xea,0x90,0xea,0xd4,0x63,
+0xd8,0x63,0x90,0x6a,0xe2,0x63,0xe6,0x63,0xea,0x63,0xee,0x63,0xfa,0x63,0xfe,0x63,
+0x02,0x64,0x0e,0x64,0x12,0x64,0x3c,0x64,0x40,0x64,0x44,0x64,0x48,0x64,0x4c,0x64,
+0x58,0x64,0x90,0x6a,0x90,0xea,0x6c,0x64,0x70,0xe4,0x72,0xe4,0x74,0xe4,0x76,0xe4,
+0x78,0x64,0x90,0xea,0x7c,0x64,0x80,0xe4,0x82,0xe4,0x84,0xe4,0x86,0xe4,0x88,0xe4,
+0x8a,0xe4,0x90,0xea,0x90,0xea,0x8c,0xe4,0x8e,0xe4,0x90,0xe4,0x92,0xe4,0x96,0x64,
+0x9a,0x64,0x9e,0x64,0xa2,0x64,0xa6,0xe4,0xa8,0xe4,0x00,0x63,0x04,0x63,0x0e,0xe3,
+0x10,0xe3,0x90,0xea,0xfa,0xe2,0xfc,0xe2,0xfe,0xe2,0x18,0xe3,0x1a,0xe3,0x1c,0xe3,
+0x26,0xe3,0x28,0xe3,0x30,0xe3,0x12,0xe3,0x14,0xe3,0x16,0xe3,0x32,0xe3,0x34,0xe3,
+0x36,0xe3,0x38,0xe3,0x3a,0xe3,0x3c,0xe3,0x42,0xe3,0x44,0xe3,0x46,0xe3,0x48,0xe3,
+0x4a,0xe3,0x4c,0xe3,0x4e,0xe3,0x50,0xe3,0x52,0xe3,0x54,0xe3,0xde,0xe2,0xe0,0xe2,
+0xb8,0xe2,0xbc,0xe2,0xbe,0xe2,0xc0,0xe2,0xc2,0xe2,0x90,0xea,0xce,0x97,0x90,0xea,
+0xf0,0x80,0x38,0xa1,0xcc,0xe2,0xce,0xe2,0x90,0xea,0xd0,0xe2,0xe2,0xe2,0xe4,0xe2,
+0x90,0xea,0xea,0xe2,0xec,0xe2,0xee,0xe2,0xf0,0xe2,0xf2,0xe2,0xf4,0xe2,0xf6,0xe2,
+0xf8,0xe2,0xac,0x63,0x8e,0xe3,0x90,0xe3,0x92,0xe3,0x94,0xe3,0x96,0xe3,0x98,0x63,
+0x9c,0x63,0xa0,0x63,0xa4,0x63,0xa8,0x63,0x38,0x64,0x1a,0xe4,0x1c,0xe4,0x1e,0xe4,
+0x20,0xe4,0x22,0xe4,0x24,0x64,0x28,0x64,0x2c,0x64,0x30,0x64,0x34,0x64,0x5c,0x64,
+0x60,0x64,0x1e,0xe3,0x20,0xe3,0x3e,0xe3,0x40,0xe3,0x90,0x6a,0xb4,0xe2,0xb6,0xe2,
+0xc4,0xe4,0x90,0xea,0xba,0xe2,0x86,0x80,0x90,0xea,0x90,0xea,0xd2,0xe2,0xdc,0xe3,
+0x90,0xea,0x22,0xe3,0xc6,0xe4,0xd6,0xe2,0x94,0xe4,0xd4,0xe2,0xd8,0xe2,0xde,0x63,
+0x74,0x81,0x90,0x6a,0x90,0x6a,0x90,0x6a,0x90,0x6a,0x90,0x6a,0x90,0x6a,0x90,0x6a,
+0x90,0x6a,0x90,0x6a,0x90,0x6a,0x90,0x6a,0x90,0x6a,0x90,0x6a,0x90,0x6a,0x90,0x6a,
+0x90,0x6a,0x90,0x6a,0x90,0x6a,0x90,0x6a,0x90,0x6a,0x90,0x6a,0x90,0x6a,0x90,0x6a,
+0x90,0x6a,0x90,0x6a,0x90,0x6a,0x90,0x6a,0x18,0xea,0x16,0xea,0x2a,0xe3,0x2c,0xe3,
+0x64,0x99,0xb6,0xe7,0xba,0xe7,0xc6,0xe2,0xc8,0xe2,0x6a,0x63,0x6e,0x63,0x7e,0x63,
+0x82,0x63,0xc4,0x63,0xc8,0x63,0xf2,0x63,0xf6,0x63,0x06,0x64,0x0a,0x64,0x50,0x64,
+0x54,0x64,0x64,0x64,0x68,0x64,0x7a,0x21,0xda,0x62,0xdc,0x62,0xde,0xe4,0xe2,0xe4,
+0xfa,0x81,0x14,0xbf,0x1a,0xbf,0x20,0xbf,0x2c,0xbf,0x32,0xbf,0x50,0xbf,0x56,0xbf,
+0x62,0x99,0x98,0x80,0x9a,0x80,0x9c,0x80,0x11,0x00,0x00,0x00,0x00,0x00,0x4c,0x17,
+0x06,0x00,0x01,0x00,0xd0,0x64,0x06,0x00,0x01,0x00,0xd8,0x64,0x06,0x00,0x01,0x00,
+0xf6,0x17,0x10,0x00,0x01,0x00,0x18,0x18,0x24,0x00,0x01,0x00,0x40,0x18,0x0e,0x00,
+0x01,0x00,0x5a,0x17,0x20,0x00,0x01,0x00,0xc2,0x64,0x02,0x00,0x01,0x00,0xc8,0x64,
+0x06,0x00,0x01,0x00,0xbc,0x67,0xc0,0x01,0x10,0x00,0xf4,0x64,0x80,0x02,0x10,0x00,
+0x7c,0x6a,0x38,0x00,0x07,0x00,0x18,0x63,0x99,0x01,0x01,0x00,0x40,0x18,0x0e,0x00,
+0x01,0x00,0x4e,0x18,0x0e,0x00,0x01,0x00,0xea,0x00,0x06,0x00,0x01,0x00,0x68,0x6a,
+0x00,0x00,0x00,0x00,0x34,0x12,0xaa,0x55,0x5a,0x63,0x02,0x00,0x5e,0x63,0x02,0x00,
+0x62,0x63,0x02,0x00,0x66,0x63,0x02,0x00,0x72,0x63,0x02,0x00,0x76,0x63,0x02,0x00,
+0x7a,0x63,0x02,0x00,0xb4,0x63,0x02,0x00,0xcc,0x63,0x01,0x00,0xe2,0x63,0x02,0x00,
+0xe6,0x63,0x02,0x00,0xea,0x63,0x02,0x00,0xee,0x63,0x02,0x00,0xfa,0x63,0x02,0x00,
+0xfe,0x63,0x02,0x00,0x02,0x64,0x02,0x00,0x0e,0x64,0x02,0x00,0x40,0x64,0x02,0x00,
+0x0e,0x63,0x01,0x00,0x10,0x63,0x01,0x00,0x90,0x6a,0x01,0x00,0xfc,0x62,0x01,0x00,
+0x18,0x63,0x01,0x00,0x26,0x63,0x01,0x00,0x28,0x63,0x01,0x00,0x32,0x63,0x01,0x00,
+0x34,0x63,0x01,0x00,0x36,0x63,0x01,0x00,0x38,0x63,0x01,0x00,0x3a,0x63,0x01,0x00,
+0x3c,0x63,0x01,0x00,0xde,0x62,0x01,0x00,0xb8,0x62,0x01,0x00,0x90,0x6a,0x01,0x00,
+0xce,0x17,0x01,0x00,0xe6,0x00,0x01,0x00,0x86,0x00,0x01,0x00,0x6a,0x63,0x02,0x00,
+0x6e,0x63,0x02,0x00,0x7e,0x63,0x02,0x00,0x82,0x63,0x02,0x00,0xf2,0x63,0x02,0x00,
+0xf6,0x63,0x02,0x00,0x06,0x64,0x02,0x00,0x0a,0x64,0x02,0x00,0x62,0x19,0x01,0x00,
+0x98,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xfa,0xf1,0x7e,0x00,
+0x0e,0x00,0x00,0x00,0x01,0x01,0x00,0x00,0xe2,0x8d,0x7f,0x00,0x06,0x00,0x00,0x00,
+0x08,0x01,0x00,0x00,0x8a,0x8e,0x7f,0x00,0x12,0x00,0x00,0x00,0x09,0x01,0x00,0x00,
+0x88,0x8e,0x7f,0x00,0x02,0x00,0x00,0x00,0x0a,0x01,0x00,0x00,0x64,0x8e,0x7f,0x00,
+0x02,0x00,0x00,0x00,0x0b,0x01,0x00,0x00,0xae,0x8e,0x7f,0x00,0x24,0x00,0x00,0x00,
+0x03,0x01,0x00,0x00,0xe0,0xf1,0x7e,0x00,0x0c,0x00,0x00,0x00,0x04,0x01,0x00,0x00,
+0xf8,0x80,0x7f,0x00,0x02,0x00,0x00,0x00,0x05,0x01,0x00,0x00,0xe8,0x8d,0x7f,0x00,
+0x02,0x00,0x00,0x00,0x05,0x01,0x00,0x00,0x28,0x81,0x7f,0x00,0x02,0x00,0x00,0x00,
+0x05,0x01,0x00,0x00,0xf2,0x8e,0x7f,0x00,0x02,0x00,0x00,0x00,0x06,0x01,0x00,0x00,
+0xec,0xf1,0x7e,0x00,0x02,0x00,0x00,0x00,0x07,0x01,0x00,0x00,0xee,0xf1,0x7e,0x00,
+0x02,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xba,0xf1,0x7e,0x00,0x0a,0x00,0x00,0x00,
+0x09,0x00,0x00,0x00,0x60,0x8e,0x7f,0x00,0x02,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,
+0x62,0x8e,0x7f,0x00,0x02,0x00,0x00,0x00,0x0c,0x01,0x00,0x00,0x20,0x81,0x7f,0x00,
+0x02,0x00,0x00,0x00,0x0d,0x01,0x00,0x00,0x66,0x8e,0x7f,0x00,0x02,0x00,0x00,0x00,
+0x0e,0x01,0x00,0x00,0x9c,0x8e,0x7f,0x00,0x02,0x00,0x00,0x00,0x11,0x01,0x00,0x00,
+0x9e,0x8e,0x7f,0x00,0x02,0x00,0x00,0x00,0x00,0x18,0x7e,0x00,0x62,0xda,0x00,0x00,
+0x01,0x00,0x00,0x00,0x05,0x00,0x01,0x00,0x21,0x00,0x02,0x00,0x02,0x00,0x01,0x00,
+0x06,0x00,0x02,0x00,0x00,0x00,0x04,0x00,0x02,0x00,0x01,0x00,0x01,0x00,0x06,0x00,
+0x02,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x06,0x00,0x02,0x00,
+0x01,0x00,0x02,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x33,0x05,
 };
